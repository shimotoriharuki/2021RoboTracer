
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000194a8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bec  08019668  08019668  00029668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a254  0801a254  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a254  0801a254  0002a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a25c  0801a25c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a25c  0801a25c  0002a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a264  0801a264  0002a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041c78  200001e0  0801a444  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20041e58  0801a444  00031e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039669  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007910  00000000  00000000  00069875  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f0  00000000  00000000  00071188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002030  00000000  00000000  00073478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035241  00000000  00000000  000754a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025d95  00000000  00000000  000aa6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110eb4  00000000  00000000  000d047e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1332  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a648  00000000  00000000  001e13b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019650 	.word	0x08019650

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019650 	.word	0x08019650

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 ffde 	bl	800af98 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003f94c 	.word	0x2003f94c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 ffc6 	bl	800af98 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003f94c 	.word	0x2003f94c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fe67 	bl	800acf4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fbce 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fbc8 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fbc2 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fbbc 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fbb6 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fbb0 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fbaa 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fba4 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fb9e 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fb98 	bl	80097c8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fb8c 	bl	80097c8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fb86 	bl	80097c8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fe65 	bl	8016df8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d fd86 	bl	800ecc8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d fd82 	bl	800ecc8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003fba0 	.word	0x2003fba0
 80011e0:	2003f884 	.word	0x2003f884
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f900 	bl	8001738 <create_path>

	if(state == OVER_WRITE){
 8001538:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800153c:	2b00      	cmp	r3, #0
 800153e:	d108      	bne.n	8001552 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <sd_write_array_float+0xb0>)
 8001542:	f012 f945 	bl	80137d0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001546:	4822      	ldr	r0, [pc, #136]	; (80015d0 <sd_write_array_float+0xb4>)
 8001548:	f012 fbb0 	bl	8013cac <f_unlink>
		f_chdir("..");
 800154c:	4821      	ldr	r0, [pc, #132]	; (80015d4 <sd_write_array_float+0xb8>)
 800154e:	f012 f93f 	bl	80137d0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001552:	f000 f907 	bl	8001764 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001556:	2300      	movs	r3, #0
 8001558:	82fb      	strh	r3, [r7, #22]
 800155a:	e028      	b.n	80015ae <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f805 	bl	8000578 <__aeabi_f2d>
 800156e:	4603      	mov	r3, r0
 8001570:	460c      	mov	r4, r1
 8001572:	e9cd 3400 	strd	r3, r4, [sp]
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <sd_write_array_float+0xbc>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	4818      	ldr	r0, [pc, #96]	; (80015dc <sd_write_array_float+0xc0>)
 800157c:	f014 fcf0 	bl	8015f60 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <sd_write_array_float+0xc4>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4619      	mov	r1, r3
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <sd_write_array_float+0xc4>)
 8001588:	f012 f96c 	bl	8013864 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <sd_write_array_float+0xc0>)
 800158e:	f7fe fe37 	bl	8000200 <strlen>
 8001592:	4602      	mov	r2, r0
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <sd_write_array_float+0xc8>)
 8001596:	4911      	ldr	r1, [pc, #68]	; (80015dc <sd_write_array_float+0xc0>)
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_array_float+0xc4>)
 800159a:	f011 feda 	bl	8013352 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800159e:	f000 f8fb 	bl	8001798 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbd0      	blt.n	800155c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <sd_write_array_float+0xc4>)
 80015bc:	f012 f8de 	bl	801377c <f_close>

	return ret;
 80015c0:	7d7b      	ldrb	r3, [r7, #21]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2003e600 	.word	0x2003e600
 80015d0:	2003d4c0 	.word	0x2003d4c0
 80015d4:	08019684 	.word	0x08019684
 80015d8:	08019668 	.word	0x08019668
 80015dc:	2003e700 	.word	0x2003e700
 80015e0:	2003e790 	.word	0x2003e790
 80015e4:	2003e780 	.word	0x2003e780

080015e8 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f898 	bl	8001738 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001608:	f000 f8ac 	bl	8001764 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800160c:	e019      	b.n	8001642 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800160e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4913      	ldr	r1, [pc, #76]	; (8001668 <sd_read_array_float+0x80>)
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <sd_read_array_float+0x84>)
 800161e:	f014 fcf3 	bl	8016008 <siscanf>
		i++;
 8001622:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001626:	b29b      	uxth	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800162e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	429a      	cmp	r2, r3
 8001638:	db03      	blt.n	8001642 <sd_read_array_float+0x5a>
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	3b01      	subs	r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <sd_read_array_float+0x88>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <sd_read_array_float+0x84>)
 8001648:	f012 fd0e 	bl	8014068 <f_gets>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1dd      	bne.n	800160e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001652:	f000 f8a1 	bl	8001798 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <sd_read_array_float+0x88>)
 8001658:	f012 f890 	bl	801377c <f_close>

	return ret;
 800165c:	7d7b      	ldrb	r3, [r7, #21]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08019674 	.word	0x08019674
 800166c:	2003e700 	.word	0x2003e700
 8001670:	2003e790 	.word	0x2003e790

08001674 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f852 	bl	8001738 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001694:	f000 f866 	bl	8001764 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001698:	e019      	b.n	80016ce <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800169a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4913      	ldr	r1, [pc, #76]	; (80016f4 <sd_read_array_double+0x80>)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <sd_read_array_double+0x84>)
 80016aa:	f014 fcad 	bl	8016008 <siscanf>
		i++;
 80016ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	db03      	blt.n	80016ce <sd_read_array_double+0x5a>
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <sd_read_array_double+0x88>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <sd_read_array_double+0x84>)
 80016d4:	f012 fcc8 	bl	8014068 <f_gets>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1dd      	bne.n	800169a <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016de:	f000 f85b 	bl	8001798 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <sd_read_array_double+0x88>)
 80016e4:	f012 f84a 	bl	801377c <f_close>

	return ret;
 80016e8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08019680 	.word	0x08019680
 80016f8:	2003e700 	.word	0x2003e700
 80016fc:	2003e790 	.word	0x2003e790

08001700 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800170a:	2201      	movs	r2, #1
 800170c:	4908      	ldr	r1, [pc, #32]	; (8001730 <sd_mount+0x30>)
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <sd_mount+0x34>)
 8001710:	f011 faac 	bl	8012c6c <f_mount>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <sd_mount+0x20>
 800171a:	2301      	movs	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	e001      	b.n	8001724 <sd_mount+0x24>
	else ret = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001724:	79fb      	ldrb	r3, [r7, #7]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08019690 	.word	0x08019690
 8001734:	2003d5c0 	.word	0x2003d5c0

08001738 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <create_path+0x24>)
 8001746:	f014 fc8b 	bl	8016060 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <create_path+0x28>)
 800174e:	f014 fc87 	bl	8016060 <strcpy>

}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2003e600 	.word	0x2003e600
 8001760:	2003d4c0 	.word	0x2003d4c0

08001764 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <fopen_folder_and_file+0x24>)
 800176a:	f012 fb61 	bl	8013e30 <f_mkdir>

	f_chdir(dirpath);
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <fopen_folder_and_file+0x24>)
 8001770:	f012 f82e 	bl	80137d0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001774:	2213      	movs	r2, #19
 8001776:	4905      	ldr	r1, [pc, #20]	; (800178c <fopen_folder_and_file+0x28>)
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <fopen_folder_and_file+0x2c>)
 800177a:	f011 fabd 	bl	8012cf8 <f_open>

	f_chdir("..");
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <fopen_folder_and_file+0x30>)
 8001780:	f012 f826 	bl	80137d0 <f_chdir>


}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2003e600 	.word	0x2003e600
 800178c:	2003d4c0 	.word	0x2003d4c0
 8001790:	2003e790 	.word	0x2003e790
 8001794:	08019684 	.word	0x08019684

08001798 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	e007      	b.n	80017b4 <bufclear+0x1c>
		buffer[i] = '\0';
 80017a4:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <bufclear+0x30>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b7f      	cmp	r3, #127	; 0x7f
 80017b8:	ddf4      	ble.n	80017a4 <bufclear+0xc>
	}
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2003e700 	.word	0x2003e700

080017cc <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <read_byte+0x54>)
 80017e8:	f009 fa84 	bl	800acf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80017ec:	f107 010f 	add.w	r1, r7, #15
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	2201      	movs	r2, #1
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <read_byte+0x58>)
 80017f6:	f00c fc2d 	bl	800e054 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80017fa:	f107 010e 	add.w	r1, r7, #14
 80017fe:	2364      	movs	r3, #100	; 0x64
 8001800:	2201      	movs	r2, #1
 8001802:	4808      	ldr	r0, [pc, #32]	; (8001824 <read_byte+0x58>)
 8001804:	f00c fd5a 	bl	800e2bc <HAL_SPI_Receive>
	CS_SET;
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <read_byte+0x54>)
 8001810:	f009 fa70 	bl	800acf4 <HAL_GPIO_WritePin>

	return val;
 8001814:	7bbb      	ldrb	r3, [r7, #14]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40020400 	.word	0x40020400
 8001824:	2003f82c 	.word	0x2003f82c

08001828 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	460a      	mov	r2, r1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	4613      	mov	r3, r2
 8001836:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800183e:	b2db      	uxtb	r3, r3
 8001840:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <write_byte+0x54>)
 800184a:	f009 fa53 	bl	800acf4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800184e:	f107 010f 	add.w	r1, r7, #15
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	480a      	ldr	r0, [pc, #40]	; (8001880 <write_byte+0x58>)
 8001858:	f00c fbfc 	bl	800e054 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 800185c:	1db9      	adds	r1, r7, #6
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	2201      	movs	r2, #1
 8001862:	4807      	ldr	r0, [pc, #28]	; (8001880 <write_byte+0x58>)
 8001864:	f00c fbf6 	bl	800e054 <HAL_SPI_Transmit>
	CS_SET;
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <write_byte+0x54>)
 8001870:	f009 fa40 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40020400 	.word	0x40020400
 8001880:	2003f82c 	.word	0x2003f82c

08001884 <IMU_init>:

uint16_t IMU_init() {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff ff9c 	bl	80017cc <read_byte>
 8001894:	4603      	mov	r3, r0
 8001896:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001898:	797b      	ldrb	r3, [r7, #5]
 800189a:	2be0      	cmp	r3, #224	; 0xe0
 800189c:	d119      	bne.n	80018d2 <IMU_init+0x4e>
		ret = 1;
 800189e:	2301      	movs	r3, #1
 80018a0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018a2:	2101      	movs	r1, #1
 80018a4:	2006      	movs	r0, #6
 80018a6:	f7ff ffbf 	bl	8001828 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018aa:	2110      	movs	r1, #16
 80018ac:	2003      	movs	r0, #3
 80018ae:	f7ff ffbb 	bl	8001828 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80018b2:	2120      	movs	r1, #32
 80018b4:	207f      	movs	r0, #127	; 0x7f
 80018b6:	f7ff ffb7 	bl	8001828 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80018ba:	2106      	movs	r1, #6
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff ffb3 	bl	8001828 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80018c2:	2106      	movs	r1, #6
 80018c4:	2014      	movs	r0, #20
 80018c6:	f7ff ffaf 	bl	8001828 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80018ca:	2100      	movs	r1, #0
 80018cc:	207f      	movs	r0, #127	; 0x7f
 80018ce:	f7ff ffab 	bl	8001828 <write_byte>
	}
	return ret;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <read_gyro_data>:

void read_gyro_data() {
 80018dc:	b598      	push	{r3, r4, r7, lr}
 80018de:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80018e0:	2033      	movs	r0, #51	; 0x33
 80018e2:	f7ff ff73 	bl	80017cc <read_byte>
 80018e6:	4603      	mov	r3, r0
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21c      	sxth	r4, r3
 80018ec:	2034      	movs	r0, #52	; 0x34
 80018ee:	f7ff ff6d 	bl	80017cc <read_byte>
 80018f2:	4603      	mov	r3, r0
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4323      	orrs	r3, r4
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <read_gyro_data+0x64>)
 80018fc:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80018fe:	2035      	movs	r0, #53	; 0x35
 8001900:	f7ff ff64 	bl	80017cc <read_byte>
 8001904:	4603      	mov	r3, r0
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21c      	sxth	r4, r3
 800190a:	2036      	movs	r0, #54	; 0x36
 800190c:	f7ff ff5e 	bl	80017cc <read_byte>
 8001910:	4603      	mov	r3, r0
 8001912:	b21b      	sxth	r3, r3
 8001914:	4323      	orrs	r3, r4
 8001916:	b21a      	sxth	r2, r3
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <read_gyro_data+0x68>)
 800191a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800191c:	2037      	movs	r0, #55	; 0x37
 800191e:	f7ff ff55 	bl	80017cc <read_byte>
 8001922:	4603      	mov	r3, r0
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21c      	sxth	r4, r3
 8001928:	2038      	movs	r0, #56	; 0x38
 800192a:	f7ff ff4f 	bl	80017cc <read_byte>
 800192e:	4603      	mov	r3, r0
 8001930:	b21b      	sxth	r3, r3
 8001932:	4323      	orrs	r3, r4
 8001934:	b21a      	sxth	r2, r3
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <read_gyro_data+0x6c>)
 8001938:	801a      	strh	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	bd98      	pop	{r3, r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	2003f7c8 	.word	0x2003f7c8
 8001944:	2003f7c6 	.word	0x2003f7c6
 8001948:	2003f7c0 	.word	0x2003f7c0

0800194c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	805a      	strh	r2, [r3, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	809a      	strh	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	80da      	strh	r2, [r3, #6]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	811a      	strh	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	815a      	strh	r2, [r3, #10]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
{

}
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001998:	f7ff ff74 	bl	8001884 <IMU_init>
 800199c:	4603      	mov	r3, r0
 800199e:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 80019a0:	f7ff fb7e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fb8a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <_ZN3IMU4initEv+0x44>)
 80019ae:	f7ff fbb1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80019b2:	2101      	movs	r1, #1
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fb83 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <_ZN3IMU4initEv+0x48>)
 80019c0:	f7ff fba8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 80019c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c8:	f007 fefe 	bl	80097c8 <HAL_Delay>

}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	08019694 	.word	0x08019694
 80019d8:	080196a0 	.word	0x080196a0
 80019dc:	00000000 	.word	0x00000000

080019e0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 80019e0:	b5b0      	push	{r4, r5, r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 80019e8:	f7ff ff78 	bl	80018dc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <_ZN3IMU12updateValuesEv+0xa0>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <_ZN3IMU12updateValuesEv+0xa4>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd9f 	bl	8000554 <__aeabi_i2d>
 8001a16:	a316      	add	r3, pc, #88	; (adr r3, 8001a70 <_ZN3IMU12updateValuesEv+0x90>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fe04 	bl	8000628 <__aeabi_dmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	4625      	mov	r5, r4
 8001a26:	461c      	mov	r4, r3
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <_ZN3IMU12updateValuesEv+0xac>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd90 	bl	8000554 <__aeabi_i2d>
 8001a34:	a310      	add	r3, pc, #64	; (adr r3, 8001a78 <_ZN3IMU12updateValuesEv+0x98>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe fdf5 	bl	8000628 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fc39 	bl	80002bc <__adddf3>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	4621      	mov	r1, r4
 8001a52:	f7ff f899 	bl	8000b88 <__aeabi_d2iz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <_ZN3IMU12updateValuesEv+0xac>)
 8001a66:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a70:	eb851eb8 	.word	0xeb851eb8
 8001a74:	3f9eb851 	.word	0x3f9eb851
 8001a78:	70a3d70a 	.word	0x70a3d70a
 8001a7c:	3fef0a3d 	.word	0x3fef0a3d
 8001a80:	2003f7c8 	.word	0x2003f7c8
 8001a84:	2003f7c6 	.word	0x2003f7c6
 8001a88:	2003f7c0 	.word	0x2003f7c0
 8001a8c:	20000210 	.word	0x20000210

08001a90 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab0:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7fe fd5f 	bl	8000578 <__aeabi_f2d>
 8001aba:	a316      	add	r3, pc, #88	; (adr r3, 8001b14 <_ZN3IMU8getOmegaEv+0x84>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fedc 	bl	800087c <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4614      	mov	r4, r2
 8001aca:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ace:	a313      	add	r3, pc, #76	; (adr r3, 8001b1c <_ZN3IMU8getOmegaEv+0x8c>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fda6 	bl	8000628 <__aeabi_dmul>
 8001adc:	4603      	mov	r3, r0
 8001ade:	460c      	mov	r4, r1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <_ZN3IMU8getOmegaEv+0x80>)
 8001aea:	f7fe fec7 	bl	800087c <__aeabi_ddiv>
 8001aee:	4603      	mov	r3, r0
 8001af0:	460c      	mov	r4, r1
 8001af2:	4618      	mov	r0, r3
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7ff f88f 	bl	8000c18 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	ee07 3a90 	vmov	s15, r3
}
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	f3af 8000 	nop.w
 8001b10:	40668000 	.word	0x40668000
 8001b14:	66666666 	.word	0x66666666
 8001b18:	40306666 	.word	0x40306666
 8001b1c:	54411744 	.word	0x54411744
 8001b20:	400921fb 	.word	0x400921fb

08001b24 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b2c:	466b      	mov	r3, sp
 8001b2e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b34:	f007 fe48 	bl	80097c8 <HAL_Delay>
	lcd_clear();
 8001b38:	f7ff fab2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fabe 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001b44:	4840      	ldr	r0, [pc, #256]	; (8001c48 <_ZN3IMU11calibrationEv+0x124>)
 8001b46:	f7ff fae5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fab7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001b52:	483e      	ldr	r0, [pc, #248]	; (8001c4c <_ZN3IMU11calibrationEv+0x128>)
 8001b54:	f7ff fade 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001b58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b5c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001b5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b62:	1e5d      	subs	r5, r3, #1
 8001b64:	61bd      	str	r5, [r7, #24]
 8001b66:	462b      	mov	r3, r5
 8001b68:	3301      	adds	r3, #1
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f04f 0400 	mov.w	r4, #0
 8001b78:	0154      	lsls	r4, r2, #5
 8001b7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b7e:	014b      	lsls	r3, r1, #5
 8001b80:	462b      	mov	r3, r5
 8001b82:	3301      	adds	r3, #1
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	0154      	lsls	r4, r2, #5
 8001b94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b98:	014b      	lsls	r3, r1, #5
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	3307      	adds	r3, #7
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	ebad 0d03 	sub.w	sp, sp, r3
 8001bac:	466b      	mov	r3, sp
 8001bae:	3303      	adds	r3, #3
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	83fb      	strh	r3, [r7, #30]
 8001bba:	8bfa      	ldrh	r2, [r7, #30]
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	da13      	bge.n	8001bec <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001bca:	8bfb      	ldrh	r3, [r7, #30]
 8001bcc:	ee07 2a90 	vmov	s15, r2
 8001bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f007 fdf2 	bl	80097c8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001be4:	8bfb      	ldrh	r3, [r7, #30]
 8001be6:	3301      	adds	r3, #1
 8001be8:	83fb      	strh	r3, [r7, #30]
 8001bea:	e7e6      	b.n	8001bba <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	462b      	mov	r3, r5
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d00e      	beq.n	8001c22 <_ZN3IMU11calibrationEv+0xfe>
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	e7ec      	b.n	8001bfc <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001c22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c3c:	46b5      	mov	sp, r6
}
 8001c3e:	bf00      	nop
 8001c40:	372c      	adds	r7, #44	; 0x2c
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	080196a4 	.word	0x080196a4
 8001c4c:	080196b0 	.word	0x080196b0

08001c50 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	b299      	uxth	r1, r3
 8001c64:	1dfa      	adds	r2, r7, #7
 8001c66:	2364      	movs	r3, #100	; 0x64
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <INA260_read+0x50>)
 8001c6e:	f009 f993 	bl	800af98 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	b299      	uxth	r1, r3
 8001c76:	f107 020c 	add.w	r2, r7, #12
 8001c7a:	2364      	movs	r3, #100	; 0x64
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <INA260_read+0x50>)
 8001c82:	f009 fa87 	bl	800b194 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001c86:	7b3b      	ldrb	r3, [r7, #12]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	81fb      	strh	r3, [r7, #14]
	return val;
 8001c96:	89fb      	ldrh	r3, [r7, #14]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2003f9e0 	.word	0x2003f9e0

08001ca4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	4604      	mov	r4, r0
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71bb      	strb	r3, [r7, #6]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	717b      	strb	r3, [r7, #5]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	733b      	strb	r3, [r7, #12]
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	737b      	strb	r3, [r7, #13]
 8001cca:	797b      	ldrb	r3, [r7, #5]
 8001ccc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001cce:	793b      	ldrb	r3, [r7, #4]
 8001cd0:	b299      	uxth	r1, r3
 8001cd2:	f107 020c 	add.w	r2, r7, #12
 8001cd6:	2364      	movs	r3, #100	; 0x64
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2303      	movs	r3, #3
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <INA260_write+0x48>)
 8001cde:	f009 f95b 	bl	800af98 <HAL_I2C_Master_Transmit>
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2003f9e0 	.word	0x2003f9e0

08001cf0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	71bb      	strb	r3, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	79ba      	ldrb	r2, [r7, #6]
 8001d06:	79f9      	ldrb	r1, [r7, #7]
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff ffcb 	bl	8001ca4 <INA260_write>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	461a      	mov	r2, r3
 8001d24:	21df      	movs	r1, #223	; 0xdf
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff ffe2 	bl	8001cf0 <setConfig>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
{

}
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5c:	482a      	ldr	r0, [pc, #168]	; (8001e08 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d5e:	f008 ffb1 	bl	800acc4 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <_ZN8JoyStick8getValueEv+0x2e>
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4823      	ldr	r0, [pc, #140]	; (8001e0c <_ZN8JoyStick8getValueEv+0xc0>)
 8001d7e:	f008 ffa1 	bl	800acc4 <HAL_GPIO_ReadPin>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <_ZN8JoyStick8getValueEv+0x4e>
 8001d92:	89fb      	ldrh	r3, [r7, #14]
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9e:	481a      	ldr	r0, [pc, #104]	; (8001e08 <_ZN8JoyStick8getValueEv+0xbc>)
 8001da0:	f008 ff90 	bl	800acc4 <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <_ZN8JoyStick8getValueEv+0x70>
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4814      	ldr	r0, [pc, #80]	; (8001e10 <_ZN8JoyStick8getValueEv+0xc4>)
 8001dc0:	f008 ff80 	bl	800acc4 <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <_ZN8JoyStick8getValueEv+0x90>
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	480a      	ldr	r0, [pc, #40]	; (8001e08 <_ZN8JoyStick8getValueEv+0xbc>)
 8001de0:	f008 ff70 	bl	800acc4 <HAL_GPIO_ReadPin>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <_ZN8JoyStick8getValueEv+0xb0>
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40020400 	.word	0x40020400

08001e14 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	2b52      	cmp	r3, #82	; 0x52
 8001e24:	d112      	bne.n	8001e4c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	4856      	ldr	r0, [pc, #344]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e2e:	f008 ff61 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e38:	4853      	ldr	r0, [pc, #332]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e3a:	f008 ff5b 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	4850      	ldr	r0, [pc, #320]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e46:	f008 ff55 	bl	800acf4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001e4a:	e098      	b.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	2b47      	cmp	r3, #71	; 0x47
 8001e50:	d112      	bne.n	8001e78 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e58:	484b      	ldr	r0, [pc, #300]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e5a:	f008 ff4b 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e64:	4848      	ldr	r0, [pc, #288]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e66:	f008 ff45 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e70:	4845      	ldr	r0, [pc, #276]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e72:	f008 ff3f 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001e76:	e082      	b.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	2b42      	cmp	r3, #66	; 0x42
 8001e7c:	d112      	bne.n	8001ea4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e84:	4840      	ldr	r0, [pc, #256]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e86:	f008 ff35 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e90:	483d      	ldr	r0, [pc, #244]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e92:	f008 ff2f 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e9c:	483a      	ldr	r0, [pc, #232]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001e9e:	f008 ff29 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001ea2:	e06c      	b.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	2b43      	cmp	r3, #67	; 0x43
 8001ea8:	d112      	bne.n	8001ed0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb0:	4835      	ldr	r0, [pc, #212]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001eb2:	f008 ff1f 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ebc:	4832      	ldr	r0, [pc, #200]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001ebe:	f008 ff19 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec8:	482f      	ldr	r0, [pc, #188]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001eca:	f008 ff13 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001ece:	e056      	b.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b4d      	cmp	r3, #77	; 0x4d
 8001ed4:	d112      	bne.n	8001efc <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001edc:	482a      	ldr	r0, [pc, #168]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001ede:	f008 ff09 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee8:	4827      	ldr	r0, [pc, #156]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001eea:	f008 ff03 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef4:	4824      	ldr	r0, [pc, #144]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001ef6:	f008 fefd 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001efa:	e040      	b.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	2b59      	cmp	r3, #89	; 0x59
 8001f00:	d112      	bne.n	8001f28 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f08:	481f      	ldr	r0, [pc, #124]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f0a:	f008 fef3 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f14:	481c      	ldr	r0, [pc, #112]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f008 feed 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f20:	4819      	ldr	r0, [pc, #100]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f008 fee7 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001f26:	e02a      	b.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b57      	cmp	r3, #87	; 0x57
 8001f2c:	d112      	bne.n	8001f54 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f34:	4814      	ldr	r0, [pc, #80]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f36:	f008 fedd 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f40:	4811      	ldr	r0, [pc, #68]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f008 fed7 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f4c:	480e      	ldr	r0, [pc, #56]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f008 fed1 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001f52:	e014      	b.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	2b7e      	cmp	r3, #126	; 0x7e
 8001f58:	d111      	bne.n	8001f7e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f60:	4809      	ldr	r0, [pc, #36]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f62:	f008 fec7 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f6c:	4806      	ldr	r0, [pc, #24]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f008 fec1 	bl	800acf4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f008 febb 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40020000 	.word	0x40020000

08001f8c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001faa:	4813      	ldr	r0, [pc, #76]	; (8001ff8 <_ZN3LED2LREaa+0x6c>)
 8001fac:	f008 fea2 	bl	800acf4 <HAL_GPIO_WritePin>
 8001fb0:	e009      	b.n	8001fc6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d105      	bne.n	8001fc6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <_ZN3LED2LREaa+0x6c>)
 8001fc2:	f008 fe97 	bl	800acf4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001fc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d106      	bne.n	8001fdc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd4:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <_ZN3LED2LREaa+0x6c>)
 8001fd6:	f008 fe8d 	bl	800acf4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001fda:	e009      	b.n	8001ff0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001fdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <_ZN3LED2LREaa+0x6c>)
 8001fec:	f008 fe82 	bl	800acf4 <HAL_GPIO_WritePin>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40020000 	.word	0x40020000

08001ffc <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b092      	sub	sp, #72	; 0x48
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fe92 	bl	8001d34 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	331c      	adds	r3, #28
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
 800201e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	429a      	cmp	r2, r3
 8002024:	d008      	beq.n	8002038 <_ZN10LineSensorC1Ev+0x3c>
 8002026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	2200      	movs	r2, #0
 800202e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	3302      	adds	r3, #2
 8002034:	647b      	str	r3, [r7, #68]	; 0x44
 8002036:	e7f2      	b.n	800201e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	643b      	str	r3, [r7, #64]	; 0x40
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	3338      	adds	r3, #56	; 0x38
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	429a      	cmp	r2, r3
 8002050:	d009      	beq.n	8002066 <_ZN10LineSensorC1Ev+0x6a>
 8002052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002054:	623b      	str	r3, [r7, #32]
		s = 0;
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002060:	3304      	adds	r3, #4
 8002062:	643b      	str	r3, [r7, #64]	; 0x40
 8002064:	e7f1      	b.n	800204a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3338      	adds	r3, #56	; 0x38
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	429a      	cmp	r2, r3
 800207e:	d009      	beq.n	8002094 <_ZN10LineSensorC1Ev+0x98>
 8002080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002082:	617b      	str	r3, [r7, #20]
		m = 0;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800208c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208e:	3304      	adds	r3, #4
 8002090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002092:	e7f1      	b.n	8002078 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	3338      	adds	r3, #56	; 0x38
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d009      	beq.n	80020c2 <_ZN10LineSensorC1Ev+0xc6>
 80020ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020b8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80020ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020bc:	3304      	adds	r3, #4
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c0:	e7f1      	b.n	80020a6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	3748      	adds	r7, #72	; 0x48
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	220e      	movs	r2, #14
 80020d8:	4619      	mov	r1, r3
 80020da:	4803      	ldr	r0, [pc, #12]	; (80020e8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80020dc:	f007 fbda 	bl	8009894 <HAL_ADC_Start_DMA>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2003f904 	.word	0x2003f904

080020ec <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b0d      	cmp	r3, #13
 80020fc:	dc2f      	bgt.n	800215e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3392      	adds	r3, #146	; 0x92
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3304      	adds	r3, #4
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	33a0      	adds	r3, #160	; 0xa0
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	440b      	add	r3, r1
 800214a:	3306      	adds	r3, #6
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3301      	adds	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e7cc      	b.n	80020f8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002168:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b09      	cmp	r3, #9
 8002170:	d902      	bls.n	8002178 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]


}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	2000021c 	.word	0x2000021c

08002188 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002196:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800219a:	2b0d      	cmp	r3, #13
 800219c:	f200 80b8 	bhi.w	8002310 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021aa:	2b09      	cmp	r3, #9
 80021ac:	d81c      	bhi.n	80021e8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80021ae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80021b2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80021b6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4423      	add	r3, r4
 80021c6:	3306      	adds	r3, #6
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4403      	add	r3, r0
 80021cc:	3304      	adds	r3, #4
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	008b      	lsls	r3, r1, #2
 80021d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021d6:	440b      	add	r3, r1
 80021d8:	3b30      	subs	r3, #48	; 0x30
 80021da:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021e0:	3301      	adds	r3, #1
 80021e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021e6:	e7de      	b.n	80021a6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80021ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021f2:	2b09      	cmp	r3, #9
 80021f4:	d84d      	bhi.n	8002292 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80021f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021fa:	3301      	adds	r3, #1
 80021fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002200:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002204:	2b09      	cmp	r3, #9
 8002206:	d83e      	bhi.n	8002286 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002208:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002212:	4413      	add	r3, r2
 8002214:	3b30      	subs	r3, #48	; 0x30
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002224:	4413      	add	r3, r2
 8002226:	3b30      	subs	r3, #48	; 0x30
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	d521      	bpl.n	800227a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002236:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002240:	4413      	add	r3, r2
 8002242:	3b30      	subs	r3, #48	; 0x30
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002248:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800224c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002256:	440a      	add	r2, r1
 8002258:	3a30      	subs	r2, #48	; 0x30
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002262:	440b      	add	r3, r1
 8002264:	3b30      	subs	r3, #48	; 0x30
 8002266:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002268:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002272:	4413      	add	r3, r2
 8002274:	3b30      	subs	r3, #48	; 0x30
 8002276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002278:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800227a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800227e:	3301      	adds	r3, #1
 8002280:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002284:	e7bc      	b.n	8002200 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002286:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228a:	3301      	adds	r3, #1
 800228c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002290:	e7ad      	b.n	80021ee <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f96f 	bl	8000578 <__aeabi_f2d>
 800229a:	a32a      	add	r3, pc, #168	; (adr r3, 8002344 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4603      	mov	r3, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	4625      	mov	r5, r4
 80022aa:	461c      	mov	r4, r3
 80022ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f95d 	bl	8000578 <__aeabi_f2d>
 80022be:	a31c      	add	r3, pc, #112	; (adr r3, 8002330 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80022c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c4:	f7fe f9b0 	bl	8000628 <__aeabi_dmul>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4620      	mov	r0, r4
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4603      	mov	r3, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	461a      	mov	r2, r3
 80022da:	4623      	mov	r3, r4
 80022dc:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc98 	bl	8000c18 <__aeabi_d2f>
 80022e8:	4601      	mov	r1, r0
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80022f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002308:	3301      	adds	r3, #1
 800230a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800230e:	e742      	b.n	8002196 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002318:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	3738      	adds	r7, #56	; 0x38
 8002328:	46bd      	mov	sp, r7
 800232a:	bdb0      	pop	{r4, r5, r7, pc}
 800232c:	f3af 8000 	nop.w
 8002330:	66666666 	.word	0x66666666
 8002334:	3fee6666 	.word	0x3fee6666
 8002338:	20000220 	.word	0x20000220
 800233c:	20000214 	.word	0x20000214
 8002340:	20000218 	.word	0x20000218
 8002344:	9999999a 	.word	0x9999999a
 8002348:	3fa99999 	.word	0x3fa99999

0800234c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0a0      	sub	sp, #128	; 0x80
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002354:	2064      	movs	r0, #100	; 0x64
 8002356:	f007 fa37 	bl	80097c8 <HAL_Delay>

	lcd_clear();
 800235a:	f7fe fea1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800235e:	2100      	movs	r1, #0
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fead 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002366:	4886      	ldr	r0, [pc, #536]	; (8002580 <_ZN10LineSensor11calibrationEv+0x234>)
 8002368:	f7fe fed4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800236c:	2101      	movs	r1, #1
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fea6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002374:	4883      	ldr	r0, [pc, #524]	; (8002584 <_ZN10LineSensor11calibrationEv+0x238>)
 8002376:	f7fe fecd 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800237a:	2300      	movs	r3, #0
 800237c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002380:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002384:	2b0d      	cmp	r3, #13
 8002386:	d823      	bhi.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002388:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800238c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	32b0      	adds	r2, #176	; 0xb0
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	440a      	add	r2, r1
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023a0:	440b      	add	r3, r1
 80023a2:	3b40      	subs	r3, #64	; 0x40
 80023a4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80023a6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80023aa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	32b0      	adds	r2, #176	; 0xb0
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	440a      	add	r2, r1
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023be:	440b      	add	r3, r1
 80023c0:	3b78      	subs	r3, #120	; 0x78
 80023c2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023c8:	3301      	adds	r3, #1
 80023ca:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80023ce:	e7d7      	b.n	8002380 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fcb8 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b02      	cmp	r3, #2
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d079      	beq.n	80024e0 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80023f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023f6:	2b0d      	cmp	r3, #13
 80023f8:	d850      	bhi.n	800249c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80023fa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002404:	4413      	add	r3, r2
 8002406:	3b40      	subs	r3, #64	; 0x40
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	33b0      	adds	r3, #176	; 0xb0
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	d50f      	bpl.n	8002446 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002426:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800242a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	32b0      	adds	r2, #176	; 0xb0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	440a      	add	r2, r1
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800243e:	440b      	add	r3, r1
 8002440:	3b40      	subs	r3, #64	; 0x40
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e024      	b.n	8002490 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002446:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002450:	4413      	add	r3, r2
 8002452:	3b78      	subs	r3, #120	; 0x78
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	33b0      	adds	r3, #176	; 0xb0
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	dd0e      	ble.n	8002490 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002472:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002476:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	32b0      	adds	r2, #176	; 0xb0
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	440a      	add	r2, r1
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800248a:	440b      	add	r3, r1
 800248c:	3b78      	subs	r3, #120	; 0x78
 800248e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002490:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002494:	3301      	adds	r3, #1
 8002496:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800249a:	e7aa      	b.n	80023f2 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fe5a 	bl	800515c <_ZN12RotarySwitch8getValueEv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80024be:	2201      	movs	r2, #1
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fd61 	bl	8001f8c <_ZN3LED2LREaa>
 80024ca:	e781      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80024d2:	2200      	movs	r2, #0
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd57 	bl	8001f8c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80024de:	e777      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80024e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d826      	bhi.n	800253c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80024ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024f8:	4413      	add	r3, r2
 80024fa:	3b40      	subs	r3, #64	; 0x40
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800250a:	4413      	add	r3, r2
 800250c:	3b78      	subs	r3, #120	; 0x78
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002516:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800251a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002588 <_ZN10LineSensor11calibrationEv+0x23c>
 800251e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	3392      	adds	r3, #146	; 0x92
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002530:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002534:	3301      	adds	r3, #1
 8002536:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800253a:	e7d4      	b.n	80024e6 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800253c:	2300      	movs	r3, #0
 800253e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002542:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002546:	2b0d      	cmp	r3, #13
 8002548:	d815      	bhi.n	8002576 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800254a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800254e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002558:	440a      	add	r2, r1
 800255a:	3a78      	subs	r2, #120	; 0x78
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	33a0      	adds	r3, #160	; 0xa0
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3304      	adds	r3, #4
 8002568:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800256a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800256e:	3301      	adds	r3, #1
 8002570:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002574:	e7e5      	b.n	8002542 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002576:	bf00      	nop
 8002578:	3780      	adds	r7, #128	; 0x80
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	080196bc 	.word	0x080196bc
 8002584:	080196c8 	.word	0x080196c8
 8002588:	447a0000 	.word	0x447a0000

0800258c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3338      	adds	r3, #56	; 0x38
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d012      	beq.n	80025d8 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800262c <_ZN10LineSensor13emergencyStopEv+0xa0>
 80025c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	db02      	blt.n	80025d0 <_ZN10LineSensor13emergencyStopEv+0x44>
 80025ca:	8bfb      	ldrh	r3, [r7, #30]
 80025cc:	3301      	adds	r3, #1
 80025ce:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3304      	adds	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e7e8      	b.n	80025aa <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80025d8:	8bfb      	ldrh	r3, [r7, #30]
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	d906      	bls.n	80025ec <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	e002      	b.n	80025f2 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b31      	cmp	r3, #49	; 0x31
 80025f8:	d903      	bls.n	8002602 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e002      	b.n	8002608 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002610:	4293      	cmp	r3, r2
 8002612:	d903      	bls.n	800261c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002616:	f242 7210 	movw	r2, #10000	; 0x2710
 800261a:	801a      	strh	r2, [r3, #0]

	return flag;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800261e:	781b      	ldrb	r3, [r3, #0]

}
 8002620:	4618      	mov	r0, r3
 8002622:	3724      	adds	r7, #36	; 0x24
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	442f0000 	.word	0x442f0000
 8002630:	20000258 	.word	0x20000258
 8002634:	2000025a 	.word	0x2000025a

08002638 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002642:	edd7 7a01 	vldr	s15, [r7, #4]
 8002646:	eef0 7ae7 	vabs.f32	s15, s15
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	63da      	str	r2, [r3, #60]	; 0x3c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002706:	335c      	adds	r3, #92	; 0x5c
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002714:	3320      	adds	r3, #32
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002720:	3322      	adds	r3, #34	; 0x22
 8002722:	2200      	movs	r2, #0
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800272c:	3324      	adds	r3, #36	; 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002738:	33f8      	adds	r3, #248	; 0xf8
 800273a:	2200      	movs	r2, #0
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002744:	33fa      	adds	r3, #250	; 0xfa
 8002746:	2200      	movs	r2, #0
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002750:	33fc      	adds	r3, #252	; 0xfc
 8002752:	2200      	movs	r2, #0
 8002754:	801a      	strh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800275c:	33fe      	adds	r3, #254	; 0xfe
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002768:	33ff      	adds	r3, #255	; 0xff
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800277e:	3304      	adds	r3, #4
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800278c:	3308      	adds	r3, #8
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800279a:	330c      	adds	r3, #12
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027a8:	3310      	adds	r3, #16
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027b6:	3314      	adds	r3, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027c2:	3316      	adds	r3, #22
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ea:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f0:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f6:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027f8:	2300      	movs	r3, #0
 80027fa:	82fb      	strh	r3, [r7, #22]
 80027fc:	8afb      	ldrh	r3, [r7, #22]
 80027fe:	f241 726f 	movw	r2, #5999	; 0x176f
 8002802:	4293      	cmp	r3, r2
 8002804:	d80d      	bhi.n	8002822 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ca>
		velocity_table_[i] = 0;
 8002806:	8afb      	ldrh	r3, [r7, #22]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800280e:	3318      	adds	r3, #24
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800281a:	8afb      	ldrh	r3, [r7, #22]
 800281c:	3301      	adds	r3, #1
 800281e:	82fb      	strh	r3, [r7, #22]
 8002820:	e7ec      	b.n	80027fc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a4>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002822:	2300      	movs	r3, #0
 8002824:	82bb      	strh	r3, [r7, #20]
 8002826:	8abb      	ldrh	r3, [r7, #20]
 8002828:	2b63      	cmp	r3, #99	; 0x63
 800282a:	d80d      	bhi.n	8002848 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f0>
		crossline_distance_[i] = 0;
 800282c:	8abb      	ldrh	r3, [r7, #20]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002834:	330a      	adds	r3, #10
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002840:	8abb      	ldrh	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	82bb      	strh	r3, [r7, #20]
 8002846:	e7ee      	b.n	8002826 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ce>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002848:	2300      	movs	r3, #0
 800284a:	827b      	strh	r3, [r7, #18]
 800284c:	8a7b      	ldrh	r3, [r7, #18]
 800284e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002852:	d20d      	bcs.n	8002870 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x218>
		sideline_distance_[i] = 0;
 8002854:	8a7b      	ldrh	r3, [r7, #18]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800285c:	332e      	adds	r3, #46	; 0x2e
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002868:	8a7b      	ldrh	r3, [r7, #18]
 800286a:	3301      	adds	r3, #1
 800286c:	827b      	strh	r3, [r7, #18]
 800286e:	e7ed      	b.n	800284c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002870:	2300      	movs	r3, #0
 8002872:	823b      	strh	r3, [r7, #16]
 8002874:	8a3b      	ldrh	r3, [r7, #16]
 8002876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800287a:	d20d      	bcs.n	8002898 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x240>
		all_sideline_distance_[i] = 0;
 800287c:	8a3b      	ldrh	r3, [r7, #16]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8002884:	3316      	adds	r3, #22
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002890:	8a3b      	ldrh	r3, [r7, #16]
 8002892:	3301      	adds	r3, #1
 8002894:	823b      	strh	r3, [r7, #16]
 8002896:	e7ed      	b.n	8002874 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21c>
	}
}
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4618      	mov	r0, r3
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80028c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80028d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80028e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80028f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80028fc:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002910:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800291c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002934:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002940:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800294c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002954:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <_ZN9LineTrace9calcErrorEv+0x130>)
 800295c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fe09 	bl	8000578 <__aeabi_f2d>
 8002966:	a318      	add	r3, pc, #96	; (adr r3, 80029c8 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fe5c 	bl	8000628 <__aeabi_dmul>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	4625      	mov	r5, r4
 8002976:	461c      	mov	r4, r3
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <_ZN9LineTrace9calcErrorEv+0x134>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdfb 	bl	8000578 <__aeabi_f2d>
 8002982:	a313      	add	r3, pc, #76	; (adr r3, 80029d0 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fd fe4e 	bl	8000628 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fc92 	bl	80002bc <__adddf3>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	4618      	mov	r0, r3
 800299e:	4621      	mov	r1, r4
 80029a0:	f7fe f93a 	bl	8000c18 <__aeabi_d2f>
 80029a4:	4603      	mov	r3, r0
 80029a6:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <_ZN9LineTrace9calcErrorEv+0x138>)
 80029ac:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <_ZN9LineTrace9calcErrorEv+0x134>)
 80029b2:	6013      	str	r3, [r2, #0]

	return diff;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	ee07 3a90 	vmov	s15, r3

}
 80029ba:	eeb0 0a67 	vmov.f32	s0, s15
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdb0      	pop	{r4, r5, r7, pc}
 80029c4:	f3af 8000 	nop.w
 80029c8:	47ae147b 	.word	0x47ae147b
 80029cc:	3fb47ae1 	.word	0x3fb47ae1
 80029d0:	d70a3d71 	.word	0xd70a3d71
 80029d4:	3fed70a3 	.word	0x3fed70a3
 80029d8:	2000025c 	.word	0x2000025c
 80029dc:	20000280 	.word	0x20000280
 80029e0:	20000260 	.word	0x20000260
 80029e4:	00000000 	.word	0x00000000

080029e8 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff59 	bl	80028a8 <_ZN9LineTrace9calcErrorEv>
 80029f6:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}

	if(target_velocity_ >= 3){
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002a1a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	db4c      	blt.n	8002ac2 <_ZN9LineTrace8pidTraceEv+0xda>
		p = kp_fast_ * diff;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_fast_ * (diff - pre_diff) / DELTA_T;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002a40:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a52:	ee17 0a90 	vmov	r0, s15
 8002a56:	f7fd fd8f 	bl	8000578 <__aeabi_f2d>
 8002a5a:	a351      	add	r3, pc, #324	; (adr r3, 8002ba0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f7fd ff0c 	bl	800087c <__aeabi_ddiv>
 8002a64:	4603      	mov	r3, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	f7fe f8d4 	bl	8000c18 <__aeabi_d2f>
 8002a70:	4603      	mov	r3, r0
 8002a72:	613b      	str	r3, [r7, #16]
		i += ki_fast_ * diff * DELTA_T;
 8002a74:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd7d 	bl	8000578 <__aeabi_f2d>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	460d      	mov	r5, r1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a90:	ee17 0a90 	vmov	r0, s15
 8002a94:	f7fd fd70 	bl	8000578 <__aeabi_f2d>
 8002a98:	a341      	add	r3, pc, #260	; (adr r3, 8002ba0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f7fd fdc3 	bl	8000628 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7fd fc07 	bl	80002bc <__adddf3>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	f7fe f8af 	bl	8000c18 <__aeabi_d2f>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e04b      	b.n	8002b5a <_ZN9LineTrace8pidTraceEv+0x172>
	}
	else{
		p = kp_ * diff;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ac8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad0:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ae4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	ee17 0a90 	vmov	r0, s15
 8002af0:	f7fd fd42 	bl	8000578 <__aeabi_f2d>
 8002af4:	a32a      	add	r3, pc, #168	; (adr r3, 8002ba0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd febf 	bl	800087c <__aeabi_ddiv>
 8002afe:	4603      	mov	r3, r0
 8002b00:	460c      	mov	r4, r1
 8002b02:	4618      	mov	r0, r3
 8002b04:	4621      	mov	r1, r4
 8002b06:	f7fe f887 	bl	8000c18 <__aeabi_d2f>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fd30 	bl	8000578 <__aeabi_f2d>
 8002b18:	4604      	mov	r4, r0
 8002b1a:	460d      	mov	r5, r1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	ee17 0a90 	vmov	r0, s15
 8002b2e:	f7fd fd23 	bl	8000578 <__aeabi_f2d>
 8002b32:	a31b      	add	r3, pc, #108	; (adr r3, 8002ba0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fd76 	bl	8000628 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fbba 	bl	80002bc <__adddf3>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	4621      	mov	r1, r4
 8002b50:	f7fe f862 	bl	8000c18 <__aeabi_d2f>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b58:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002b5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b70:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002b7e:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b82:	eeb0 0a67 	vmov.f32	s0, s15
 8002b86:	4610      	mov	r0, r2
 8002b88:	f002 feca 	bl	8005920 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6013      	str	r3, [r2, #0]

}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ba4:	3f50624d 	.word	0x3f50624d
 8002ba8:	20000288 	.word	0x20000288
 8002bac:	20000284 	.word	0x20000284

08002bb0 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe fc73 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 f98a 	bl	8004ee0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 feb7 	bl	8004944 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 ff1c 	bl	8004a30 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c30:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c38:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c64:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c68:	4a3f      	ldr	r2, [pc, #252]	; (8002d68 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c6e:	4a3f      	ldr	r2, [pc, #252]	; (8002d6c <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c74:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	f083 0301 	eor.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d043      	beq.n	8002d0a <_ZN9LineTrace11isCrossLineEv+0x102>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c86:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002d74 <_ZN9LineTrace11isCrossLineEv+0x16c>
 8002c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	d50f      	bpl.n	8002cb4 <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c98:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002d74 <_ZN9LineTrace11isCrossLineEv+0x16c>
 8002c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	d506      	bpl.n	8002cb4 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	e002      	b.n	8002cba <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d94c      	bls.n	8002d5c <_ZN9LineTrace11isCrossLineEv+0x154>
			flag = true;
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002cce:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ce4:	3324      	adds	r3, #36	; 0x24
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <_ZN9LineTrace11isCrossLineEv+0xee>
				storeCrossLineDistance();
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f001 fad6 	bl	80042a0 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002cf4:	e032      	b.n	8002d5c <_ZN9LineTrace11isCrossLineEv+0x154>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f001 fb78 	bl	80043ec <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002d02:	3314      	adds	r3, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	e028      	b.n	8002d5c <_ZN9LineTrace11isCrossLineEv+0x154>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002d0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d0e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d80 <_ZN9LineTrace11isCrossLineEv+0x178>
 8002d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	dd0f      	ble.n	8002d3c <_ZN9LineTrace11isCrossLineEv+0x134>
 8002d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d20:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d80 <_ZN9LineTrace11isCrossLineEv+0x178>
 8002d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	dd06      	ble.n	8002d3c <_ZN9LineTrace11isCrossLineEv+0x134>
			cnt++;
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	e002      	b.n	8002d42 <_ZN9LineTrace11isCrossLineEv+0x13a>
		}
		else{
			cnt = 0;
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d908      	bls.n	8002d5c <_ZN9LineTrace11isCrossLineEv+0x154>
			flag = false;
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000268 	.word	0x20000268
 8002d6c:	2000026c 	.word	0x2000026c
 8002d70:	2000028f 	.word	0x2000028f
 8002d74:	44160000 	.word	0x44160000
 8002d78:	2000028c 	.word	0x2000028c
 8002d7c:	2000028e 	.word	0x2000028e
 8002d80:	43fa0000 	.word	0x43fa0000

08002d84 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d96:	3324      	adds	r3, #36	; 0x24
 8002d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d143      	bne.n	8002e28 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002da0:	edd7 7a00 	vldr	s15, [r7]
 8002da4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db0:	d504      	bpl.n	8002dbc <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e083      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 800) velocity = 1.7;
 8002dbc:	edd7 7a00 	vldr	s15, [r7]
 8002dc0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002edc <_ZN9LineTrace15radius2VelocityEf+0x158>
 8002dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	d502      	bpl.n	8002dd4 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002dce:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e077      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 1000) velocity = 2.0;
 8002dd4:	edd7 7a00 	vldr	s15, [r7]
 8002dd8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8002ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	d503      	bpl.n	8002dee <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e06a      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 1500) velocity = 2.3;
 8002dee:	edd7 7a00 	vldr	s15, [r7]
 8002df2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8002df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	d502      	bpl.n	8002e06 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e05e      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 2000) velocity = 2.5;
 8002e06:	edd7 7a00 	vldr	s15, [r7]
 8002e0a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002ef0 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8002e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d502      	bpl.n	8002e1e <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e052      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else velocity = max_velocity_;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	e04d      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e2e:	3324      	adds	r3, #36	; 0x24
 8002e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d143      	bne.n	8002ec0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
		if(radius < 300) velocity = min_velocity2_;
 8002e38:	edd7 7a00 	vldr	s15, [r7]
 8002e3c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ed8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	d504      	bpl.n	8002e54 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	e037      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 800) velocity = 1.7;
 8002e54:	edd7 7a00 	vldr	s15, [r7]
 8002e58:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002edc <_ZN9LineTrace15radius2VelocityEf+0x158>
 8002e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	d502      	bpl.n	8002e6c <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002e66:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e02b      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 1000) velocity = 2.0;
 8002e6c:	edd7 7a00 	vldr	s15, [r7]
 8002e70:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ee4 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8002e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d503      	bpl.n	8002e86 <_ZN9LineTrace15radius2VelocityEf+0x102>
 8002e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e01e      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 1500) velocity = 2.3;
 8002e86:	edd7 7a00 	vldr	s15, [r7]
 8002e8a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8002e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e96:	d502      	bpl.n	8002e9e <_ZN9LineTrace15radius2VelocityEf+0x11a>
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e012      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else if(radius < 2000) velocity = 2.5;
 8002e9e:	edd7 7a00 	vldr	s15, [r7]
 8002ea2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ef0 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8002ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eae:	d502      	bpl.n	8002eb6 <_ZN9LineTrace15radius2VelocityEf+0x132>
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e006      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
		else velocity = max_velocity2_;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e001      	b.n	8002ec4 <_ZN9LineTrace15radius2VelocityEf+0x140>
	}
	else velocity = 1.3;
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 8002ec2:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	ee07 3a90 	vmov	s15, r3
}
 8002eca:	eeb0 0a67 	vmov.f32	s0, s15
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	43960000 	.word	0x43960000
 8002edc:	44480000 	.word	0x44480000
 8002ee0:	3fd9999a 	.word	0x3fd9999a
 8002ee4:	447a0000 	.word	0x447a0000
 8002ee8:	44bb8000 	.word	0x44bb8000
 8002eec:	40133333 	.word	0x40133333
 8002ef0:	44fa0000 	.word	0x44fa0000
 8002ef4:	40200000 	.word	0x40200000
 8002ef8:	3fa66666 	.word	0x3fa66666

08002efc <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b08b      	sub	sp, #44	; 0x2c
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fc76 	bl	80047fa <_ZN6Logger23getDistanceArrayPointerEv>
 8002f0e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 fc7c 	bl	8004812 <_ZN6Logger20getThetaArrayPointerEv>
 8002f1a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	837b      	strh	r3, [r7, #26]
 8002f20:	8b7b      	ldrh	r3, [r7, #26]
 8002f22:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d84b      	bhi.n	8002fc2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002f2a:	8b7b      	ldrh	r3, [r7, #26]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f36:	8b7b      	ldrh	r3, [r7, #26]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4e:	d101      	bne.n	8002f54 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002f50:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8002f52:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f54:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f60:	eeb0 0a66 	vmov.f32	s0, s13
 8002f64:	f7ff fb68 	bl	8002638 <_ZSt3absf>
 8002f68:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f70:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003088 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8002f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	db01      	blt.n	8002f82 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8002f80:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002f82:	8b7c      	ldrh	r4, [r7, #26]
 8002f84:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fefb 	bl	8002d84 <_ZN9LineTrace15radius2VelocityEf>
 8002f8e:	eef0 7a40 	vmov.f32	s15, s0
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002f98:	3318      	adds	r3, #24
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002fa2:	8b7b      	ldrh	r3, [r7, #26]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	441a      	add	r2, r3
 8002faa:	8b7b      	ldrh	r3, [r7, #26]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	3326      	adds	r3, #38	; 0x26
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fba:	8b7b      	ldrh	r3, [r7, #26]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	837b      	strh	r3, [r7, #26]
 8002fc0:	e7ae      	b.n	8002f20 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fc8:	3324      	adds	r3, #36	; 0x24
 8002fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d120      	bne.n	8003014 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002fde:	3360      	adds	r3, #96	; 0x60
 8002fe0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002fe8:	3308      	adds	r3, #8
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	6939      	ldr	r1, [r7, #16]
 8002ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f93f 	bl	8003278 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003000:	3304      	adds	r3, #4
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	6939      	ldr	r1, [r7, #16]
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9d7 	bl	80033c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003012:	e027      	b.n	8003064 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800301a:	3324      	adds	r3, #36	; 0x24
 800301c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d11f      	bne.n	8003064 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003030:	3360      	adds	r3, #96	; 0x60
 8003032:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800303a:	3310      	adds	r3, #16
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	6939      	ldr	r1, [r7, #16]
 8003042:	eeb0 0a67 	vmov.f32	s0, s15
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f916 	bl	8003278 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003052:	330c      	adds	r3, #12
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	6939      	ldr	r1, [r7, #16]
 800305a:	eeb0 0a67 	vmov.f32	s0, s15
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9ae 	bl	80033c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800306a:	3360      	adds	r3, #96	; 0x60
 800306c:	2200      	movs	r2, #0
 800306e:	9200      	str	r2, [sp, #0]
 8003070:	f241 7270 	movw	r2, #6000	; 0x1770
 8003074:	4906      	ldr	r1, [pc, #24]	; (8003090 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8003076:	4807      	ldr	r0, [pc, #28]	; (8003094 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8003078:	f7fe fa50 	bl	800151c <sd_write_array_float>

}
 800307c:	bf00      	nop
 800307e:	3724      	adds	r7, #36	; 0x24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	3727c5ac 	.word	0x3727c5ac
 8003088:	459c4000 	.word	0x459c4000
 800308c:	459c4000 	.word	0x459c4000
 8003090:	0801970c 	.word	0x0801970c
 8003094:	0801971c 	.word	0x0801971c

08003098 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b08b      	sub	sp, #44	; 0x2c
 800309c:	af02      	add	r7, sp, #8
 800309e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69d8      	ldr	r0, [r3, #28]
 80030a4:	4b6b      	ldr	r3, [pc, #428]	; (8003254 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80030a6:	4a6c      	ldr	r2, [pc, #432]	; (8003258 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80030a8:	496c      	ldr	r1, [pc, #432]	; (800325c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80030aa:	f001 fc2e 	bl	800490a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030b4:	3328      	adds	r3, #40	; 0x28
 80030b6:	2264      	movs	r2, #100	; 0x64
 80030b8:	4969      	ldr	r1, [pc, #420]	; (8003260 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80030ba:	4868      	ldr	r0, [pc, #416]	; (800325c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80030bc:	f7fe fa94 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80030c6:	33b8      	adds	r3, #184	; 0xb8
 80030c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030cc:	4965      	ldr	r1, [pc, #404]	; (8003264 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80030ce:	4863      	ldr	r0, [pc, #396]	; (800325c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80030d0:	f7fe fa8a 	bl	80015e8 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 fb8e 	bl	80047fa <_ZN6Logger23getDistanceArrayPointerEv>
 80030de:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 fb94 	bl	8004812 <_ZN6Logger20getThetaArrayPointerEv>
 80030ea:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80030ec:	2300      	movs	r3, #0
 80030ee:	837b      	strh	r3, [r7, #26]
 80030f0:	8b7b      	ldrh	r3, [r7, #26]
 80030f2:	f241 726f 	movw	r2, #5999	; 0x176f
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d84b      	bhi.n	8003192 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80030fa:	8b7b      	ldrh	r3, [r7, #26]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8003106:	8b7b      	ldrh	r3, [r7, #26]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003112:	edd7 7a07 	vldr	s15, [r7, #28]
 8003116:	eef5 7a40 	vcmp.f32	s15, #0.0
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	d101      	bne.n	8003124 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8003120:	4b51      	ldr	r3, [pc, #324]	; (8003268 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8003122:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8003124:	ed97 7a02 	vldr	s14, [r7, #8]
 8003128:	edd7 7a07 	vldr	s15, [r7, #28]
 800312c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003130:	eeb0 0a66 	vmov.f32	s0, s13
 8003134:	f7ff fa80 	bl	8002638 <_ZSt3absf>
 8003138:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800313c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003140:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800326c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8003144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	db01      	blt.n	8003152 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800314e:	4b48      	ldr	r3, [pc, #288]	; (8003270 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8003150:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8003152:	8b7c      	ldrh	r4, [r7, #26]
 8003154:	ed97 0a05 	vldr	s0, [r7, #20]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fe13 	bl	8002d84 <_ZN9LineTrace15radius2VelocityEf>
 800315e:	eef0 7a40 	vmov.f32	s15, s0
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003168:	3318      	adds	r3, #24
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003172:	8b7b      	ldrh	r3, [r7, #26]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	441a      	add	r2, r3
 800317a:	8b7b      	ldrh	r3, [r7, #26]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	3326      	adds	r3, #38	; 0x26
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3304      	adds	r3, #4
 8003188:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800318a:	8b7b      	ldrh	r3, [r7, #26]
 800318c:	3301      	adds	r3, #1
 800318e:	837b      	strh	r3, [r7, #26]
 8003190:	e7ae      	b.n	80030f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003198:	3324      	adds	r3, #36	; 0x24
 800319a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d120      	bne.n	80031e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031ae:	3360      	adds	r3, #96	; 0x60
 80031b0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80031b8:	3308      	adds	r3, #8
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	eeb0 0a67 	vmov.f32	s0, s15
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f857 	bl	8003278 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80031d0:	3304      	adds	r3, #4
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	6939      	ldr	r1, [r7, #16]
 80031d8:	eeb0 0a67 	vmov.f32	s0, s15
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f8ef 	bl	80033c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80031e2:	e027      	b.n	8003234 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031ea:	3324      	adds	r3, #36	; 0x24
 80031ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d11f      	bne.n	8003234 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003200:	3360      	adds	r3, #96	; 0x60
 8003202:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800320a:	3310      	adds	r3, #16
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	6939      	ldr	r1, [r7, #16]
 8003212:	eeb0 0a67 	vmov.f32	s0, s15
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f82e 	bl	8003278 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003222:	330c      	adds	r3, #12
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	6939      	ldr	r1, [r7, #16]
 800322a:	eeb0 0a67 	vmov.f32	s0, s15
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8c6 	bl	80033c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800323a:	3360      	adds	r3, #96	; 0x60
 800323c:	2200      	movs	r2, #0
 800323e:	9200      	str	r2, [sp, #0]
 8003240:	f241 7270 	movw	r2, #6000	; 0x1770
 8003244:	490b      	ldr	r1, [pc, #44]	; (8003274 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003248:	f7fe f968 	bl	800151c <sd_write_array_float>

}
 800324c:	bf00      	nop
 800324e:	3724      	adds	r7, #36	; 0x24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd90      	pop	{r4, r7, pc}
 8003254:	08019728 	.word	0x08019728
 8003258:	08019734 	.word	0x08019734
 800325c:	0801971c 	.word	0x0801971c
 8003260:	08019744 	.word	0x08019744
 8003264:	08019754 	.word	0x08019754
 8003268:	3727c5ac 	.word	0x3727c5ac
 800326c:	459c4000 	.word	0x459c4000
 8003270:	459c4000 	.word	0x459c4000
 8003274:	0801970c 	.word	0x0801970c

08003278 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003278:	b5b0      	push	{r4, r5, r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	ed87 0a02 	vstr	s0, [r7, #8]
 8003284:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003286:	f241 736f 	movw	r3, #5999	; 0x176f
 800328a:	83fb      	strh	r3, [r7, #30]
 800328c:	8bfb      	ldrh	r3, [r7, #30]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 808d 	beq.w	80033ae <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003294:	8bfb      	ldrh	r3, [r7, #30]
 8003296:	3b01      	subs	r3, #1
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800329e:	3318      	adds	r3, #24
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	ed93 7a00 	vldr	s14, [r3]
 80032a8:	8bfb      	ldrh	r3, [r7, #30]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032b0:	3318      	adds	r3, #24
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032be:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80032c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80032c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	dd6a      	ble.n	80033a6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80032d0:	8bfb      	ldrh	r3, [r7, #30]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f94c 	bl	8000578 <__aeabi_f2d>
 80032e0:	a335      	add	r3, pc, #212	; (adr r3, 80033b8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f99f 	bl	8000628 <__aeabi_dmul>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	4625      	mov	r5, r4
 80032f0:	461c      	mov	r4, r3
 80032f2:	69b8      	ldr	r0, [r7, #24]
 80032f4:	f7fd f940 	bl	8000578 <__aeabi_f2d>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fd fabc 	bl	800087c <__aeabi_ddiv>
 8003304:	4603      	mov	r3, r0
 8003306:	460c      	mov	r4, r1
 8003308:	4618      	mov	r0, r3
 800330a:	4621      	mov	r1, r4
 800330c:	f7fd fc84 	bl	8000c18 <__aeabi_d2f>
 8003310:	4603      	mov	r3, r0
 8003312:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003314:	edd7 6a06 	vldr	s13, [r7, #24]
 8003318:	ed97 7a05 	vldr	s14, [r7, #20]
 800331c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003320:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003324:	ed97 7a04 	vldr	s14, [r7, #16]
 8003328:	edd7 7a02 	vldr	s15, [r7, #8]
 800332c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	dd37      	ble.n	80033a6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003336:	8bfb      	ldrh	r3, [r7, #30]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800333e:	3318      	adds	r3, #24
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f916 	bl	8000578 <__aeabi_f2d>
 800334c:	4604      	mov	r4, r0
 800334e:	460d      	mov	r5, r1
 8003350:	8bfb      	ldrh	r3, [r7, #30]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	ed93 7a00 	vldr	s14, [r3]
 800335c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003364:	ee17 0a90 	vmov	r0, s15
 8003368:	f7fd f906 	bl	8000578 <__aeabi_f2d>
 800336c:	a312      	add	r3, pc, #72	; (adr r3, 80033b8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f7fd f959 	bl	8000628 <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4620      	mov	r0, r4
 800337c:	4629      	mov	r1, r5
 800337e:	f7fc ff9d 	bl	80002bc <__adddf3>
 8003382:	4603      	mov	r3, r0
 8003384:	460c      	mov	r4, r1
 8003386:	4619      	mov	r1, r3
 8003388:	4622      	mov	r2, r4
 800338a:	8bfb      	ldrh	r3, [r7, #30]
 800338c:	1e5c      	subs	r4, r3, #1
 800338e:	4608      	mov	r0, r1
 8003390:	4611      	mov	r1, r2
 8003392:	f7fd fc41 	bl	8000c18 <__aeabi_d2f>
 8003396:	4601      	mov	r1, r0
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800339e:	3318      	adds	r3, #24
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80033a6:	8bfb      	ldrh	r3, [r7, #30]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	83fb      	strh	r3, [r7, #30]
 80033ac:	e76e      	b.n	800328c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80033ae:	bf00      	nop
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033bc:	3f50624d 	.word	0x3f50624d

080033c0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80033c0:	b5b0      	push	{r4, r5, r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80033cc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80033ce:	2300      	movs	r3, #0
 80033d0:	83fb      	strh	r3, [r7, #30]
 80033d2:	8bfb      	ldrh	r3, [r7, #30]
 80033d4:	f241 726f 	movw	r2, #5999	; 0x176f
 80033d8:	4293      	cmp	r3, r2
 80033da:	f200 808d 	bhi.w	80034f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	3301      	adds	r3, #1
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80033e8:	3318      	adds	r3, #24
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	ed93 7a00 	vldr	s14, [r3]
 80033f2:	8bfb      	ldrh	r3, [r7, #30]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80033fa:	3318      	adds	r3, #24
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003408:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800340c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	dd6a      	ble.n	80034f0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800341a:	8bfb      	ldrh	r3, [r7, #30]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd f8a7 	bl	8000578 <__aeabi_f2d>
 800342a:	a335      	add	r3, pc, #212	; (adr r3, 8003500 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fd f8fa 	bl	8000628 <__aeabi_dmul>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	4625      	mov	r5, r4
 800343a:	461c      	mov	r4, r3
 800343c:	69b8      	ldr	r0, [r7, #24]
 800343e:	f7fd f89b 	bl	8000578 <__aeabi_f2d>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4620      	mov	r0, r4
 8003448:	4629      	mov	r1, r5
 800344a:	f7fd fa17 	bl	800087c <__aeabi_ddiv>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	4618      	mov	r0, r3
 8003454:	4621      	mov	r1, r4
 8003456:	f7fd fbdf 	bl	8000c18 <__aeabi_d2f>
 800345a:	4603      	mov	r3, r0
 800345c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800345e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003462:	ed97 7a05 	vldr	s14, [r7, #20]
 8003466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800346e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003472:	edd7 7a02 	vldr	s15, [r7, #8]
 8003476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	dd37      	ble.n	80034f0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003480:	8bfb      	ldrh	r3, [r7, #30]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003488:	3318      	adds	r3, #24
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f871 	bl	8000578 <__aeabi_f2d>
 8003496:	4604      	mov	r4, r0
 8003498:	460d      	mov	r5, r1
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	ed93 7a00 	vldr	s14, [r3]
 80034a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	ee17 0a90 	vmov	r0, s15
 80034b2:	f7fd f861 	bl	8000578 <__aeabi_f2d>
 80034b6:	a312      	add	r3, pc, #72	; (adr r3, 8003500 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fd f8b4 	bl	8000628 <__aeabi_dmul>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4620      	mov	r0, r4
 80034c6:	4629      	mov	r1, r5
 80034c8:	f7fc fef8 	bl	80002bc <__adddf3>
 80034cc:	4603      	mov	r3, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	4619      	mov	r1, r3
 80034d2:	4622      	mov	r2, r4
 80034d4:	8bfb      	ldrh	r3, [r7, #30]
 80034d6:	1c5c      	adds	r4, r3, #1
 80034d8:	4608      	mov	r0, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	f7fd fb9c 	bl	8000c18 <__aeabi_d2f>
 80034e0:	4601      	mov	r1, r0
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80034e8:	3318      	adds	r3, #24
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034f0:	8bfb      	ldrh	r3, [r7, #30]
 80034f2:	3301      	adds	r3, #1
 80034f4:	83fb      	strh	r3, [r7, #30]
 80034f6:	e76c      	b.n	80033d2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80034f8:	bf00      	nop
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003500:	d2f1a9fc 	.word	0xd2f1a9fc
 8003504:	3f50624d 	.word	0x3f50624d

08003508 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003516:	3320      	adds	r3, #32
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8086 	beq.w	800362c <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd ffa1 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800352a:	eeb0 7a40 	vmov.f32	s14, s0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003534:	335c      	adds	r3, #92	; 0x5c
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003542:	bfac      	ite	ge
 8003544:	2301      	movge	r3, #1
 8003546:	2300      	movlt	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d026      	beq.n	800359c <_ZN9LineTrace20updateTargetVelocityEv+0x94>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003554:	335c      	adds	r3, #92	; 0x5c
 8003556:	ed93 7a00 	vldr	s14, [r3]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003560:	3322      	adds	r3, #34	; 0x22
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	3326      	adds	r3, #38	; 0x26
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	3304      	adds	r3, #4
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800357c:	335c      	adds	r3, #92	; 0x5c
 800357e:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003588:	3322      	adds	r3, #34	; 0x22
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003596:	3322      	adds	r3, #34	; 0x22
 8003598:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 800359a:	e7c1      	b.n	8003520 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a2:	3322      	adds	r3, #34	; 0x22
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	f241 726f 	movw	r2, #5999	; 0x176f
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d906      	bls.n	80035bc <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035b4:	3322      	adds	r3, #34	; 0x22
 80035b6:	f241 726f 	movw	r2, #5999	; 0x176f
 80035ba:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80035c2:	335c      	adds	r3, #92	; 0x5c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 80035c8:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd ff4c 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80035d4:	eef0 7a40 	vmov.f32	s15, s0
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80035da:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035e4:	3322      	adds	r3, #34	; 0x22
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80035ea:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035f2:	3322      	adds	r3, #34	; 0x22
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80035fc:	3318      	adds	r3, #24
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa04 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003616:	3322      	adds	r3, #34	; 0x22
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003620:	3318      	adds	r3, #24
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a05      	ldr	r2, [pc, #20]	; (8003640 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 800362a:	6013      	str	r3, [r2, #0]

	}
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000270 	.word	0x20000270
 8003638:	20000274 	.word	0x20000274
 800363c:	20000278 	.word	0x20000278
 8003640:	2000027c 	.word	0x2000027c

08003644 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fefa 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 800365a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fc2b 	bl	8004ebe <_ZN8Odometry8getThetaEv>
 8003668:	ec54 3b10 	vmov	r3, r4, d0
 800366c:	4618      	mov	r0, r3
 800366e:	4621      	mov	r1, r4
 8003670:	f7fd fad2 	bl	8000c18 <__aeabi_d2f>
 8003674:	4603      	mov	r3, r0
 8003676:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003678:	edd7 7a04 	vldr	s15, [r7, #16]
 800367c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003684:	d101      	bne.n	800368a <_ZN9LineTrace8isStableEv+0x46>
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <_ZN9LineTrace8isStableEv+0xcc>)
 8003688:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800368a:	ed97 7a02 	vldr	s14, [r7, #8]
 800368e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003692:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003696:	eeb0 0a66 	vmov.f32	s0, s13
 800369a:	f7fe ffcd 	bl	8002638 <_ZSt3absf>
 800369e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80036a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003714 <_ZN9LineTrace8isStableEv+0xd0>
 80036aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b2:	db01      	blt.n	80036b8 <_ZN9LineTrace8isStableEv+0x74>
 80036b4:	4b18      	ldr	r3, [pc, #96]	; (8003718 <_ZN9LineTrace8isStableEv+0xd4>)
 80036b6:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <_ZN9LineTrace8isStableEv+0x90>
		stable_cnt = 0;
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <_ZN9LineTrace8isStableEv+0xd8>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 80036d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003720 <_ZN9LineTrace8isStableEv+0xdc>
 80036dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	db06      	blt.n	80036f4 <_ZN9LineTrace8isStableEv+0xb0>
		stable_cnt++;
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <_ZN9LineTrace8isStableEv+0xd8>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <_ZN9LineTrace8isStableEv+0xd8>)
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	e002      	b.n	80036fa <_ZN9LineTrace8isStableEv+0xb6>
	}
	else{
		stable_cnt = 0;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <_ZN9LineTrace8isStableEv+0xd8>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <_ZN9LineTrace8isStableEv+0xd8>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	2b16      	cmp	r3, #22
 8003700:	d901      	bls.n	8003706 <_ZN9LineTrace8isStableEv+0xc2>
		ret = true;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003706:	7dfb      	ldrb	r3, [r7, #23]
}
 8003708:	4618      	mov	r0, r3
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd90      	pop	{r4, r7, pc}
 8003710:	3727c5ac 	.word	0x3727c5ac
 8003714:	459c4000 	.word	0x459c4000
 8003718:	459c4000 	.word	0x459c4000
 800371c:	20000290 	.word	0x20000290
 8003720:	44fa0000 	.word	0x44fa0000

08003724 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b092      	sub	sp, #72	; 0x48
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800372c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003730:	2201      	movs	r2, #1
 8003732:	4963      	ldr	r1, [pc, #396]	; (80038c0 <_ZN9LineTrace4initEv+0x19c>)
 8003734:	4863      	ldr	r0, [pc, #396]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 8003736:	f7fd ff57 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800373a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800373e:	2201      	movs	r2, #1
 8003740:	4961      	ldr	r1, [pc, #388]	; (80038c8 <_ZN9LineTrace4initEv+0x1a4>)
 8003742:	4860      	ldr	r0, [pc, #384]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 8003744:	f7fd ff50 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003748:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800374c:	2201      	movs	r2, #1
 800374e:	495f      	ldr	r1, [pc, #380]	; (80038cc <_ZN9LineTrace4initEv+0x1a8>)
 8003750:	485c      	ldr	r0, [pc, #368]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 8003752:	f7fd ff49 	bl	80015e8 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003756:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800375a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800375e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003762:	eeb0 1a66 	vmov.f32	s2, s13
 8003766:	eef0 0a47 	vmov.f32	s1, s14
 800376a:	eeb0 0a67 	vmov.f32	s0, s15
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8c6 	bl	8003900 <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 8003774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003778:	2201      	movs	r2, #1
 800377a:	4955      	ldr	r1, [pc, #340]	; (80038d0 <_ZN9LineTrace4initEv+0x1ac>)
 800377c:	4851      	ldr	r0, [pc, #324]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 800377e:	f7fd ff33 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 8003782:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003786:	2201      	movs	r2, #1
 8003788:	4952      	ldr	r1, [pc, #328]	; (80038d4 <_ZN9LineTrace4initEv+0x1b0>)
 800378a:	484e      	ldr	r0, [pc, #312]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 800378c:	f7fd ff2c 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 8003790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003794:	2201      	movs	r2, #1
 8003796:	4950      	ldr	r1, [pc, #320]	; (80038d8 <_ZN9LineTrace4initEv+0x1b4>)
 8003798:	484a      	ldr	r0, [pc, #296]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 800379a:	f7fd ff25 	bl	80015e8 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 800379e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80037a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80037a6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80037aa:	eeb0 1a66 	vmov.f32	s2, s13
 80037ae:	eef0 0a47 	vmov.f32	s1, s14
 80037b2:	eeb0 0a67 	vmov.f32	s0, s15
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8bb 	bl	8003932 <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80037bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c0:	2201      	movs	r2, #1
 80037c2:	4946      	ldr	r1, [pc, #280]	; (80038dc <_ZN9LineTrace4initEv+0x1b8>)
 80037c4:	483f      	ldr	r0, [pc, #252]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 80037c6:	f7fd ff0f 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80037ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ce:	2201      	movs	r2, #1
 80037d0:	4943      	ldr	r1, [pc, #268]	; (80038e0 <_ZN9LineTrace4initEv+0x1bc>)
 80037d2:	483c      	ldr	r0, [pc, #240]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 80037d4:	f7fd ff08 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80037d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037dc:	2201      	movs	r2, #1
 80037de:	4941      	ldr	r1, [pc, #260]	; (80038e4 <_ZN9LineTrace4initEv+0x1c0>)
 80037e0:	4838      	ldr	r0, [pc, #224]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 80037e2:	f7fd ff01 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 80037e6:	f107 0320 	add.w	r3, r7, #32
 80037ea:	2201      	movs	r2, #1
 80037ec:	493e      	ldr	r1, [pc, #248]	; (80038e8 <_ZN9LineTrace4initEv+0x1c4>)
 80037ee:	4835      	ldr	r0, [pc, #212]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 80037f0:	f7fd fefa 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 80037f4:	f107 031c 	add.w	r3, r7, #28
 80037f8:	2201      	movs	r2, #1
 80037fa:	493c      	ldr	r1, [pc, #240]	; (80038ec <_ZN9LineTrace4initEv+0x1c8>)
 80037fc:	4831      	ldr	r0, [pc, #196]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 80037fe:	f7fd fef3 	bl	80015e8 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003802:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003806:	eeb0 0a67 	vmov.f32	s0, s15
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f904 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003810:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003814:	eeb0 0a67 	vmov.f32	s0, s15
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f90d 	bl	8003a38 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 800381e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003822:	eeb0 0a67 	vmov.f32	s0, s15
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f916 	bl	8003a58 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 800382c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f91f 	bl	8003a78 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 800383a:	edd7 7a07 	vldr	s15, [r7, #28]
 800383e:	eeb0 0a67 	vmov.f32	s0, s15
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f928 	bl	8003a98 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003848:	f107 0318 	add.w	r3, r7, #24
 800384c:	2201      	movs	r2, #1
 800384e:	4928      	ldr	r1, [pc, #160]	; (80038f0 <_ZN9LineTrace4initEv+0x1cc>)
 8003850:	481c      	ldr	r0, [pc, #112]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 8003852:	f7fd fec9 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	2201      	movs	r2, #1
 800385c:	4925      	ldr	r1, [pc, #148]	; (80038f4 <_ZN9LineTrace4initEv+0x1d0>)
 800385e:	4819      	ldr	r0, [pc, #100]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 8003860:	f7fd fec2 	bl	80015e8 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003864:	edd7 7a06 	vldr	s15, [r7, #24]
 8003868:	ed97 7a05 	vldr	s14, [r7, #20]
 800386c:	eef0 0a47 	vmov.f32	s1, s14
 8003870:	eeb0 0a67 	vmov.f32	s0, s15
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f96f 	bl	8003b58 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	2201      	movs	r2, #1
 800388c:	491a      	ldr	r1, [pc, #104]	; (80038f8 <_ZN9LineTrace4initEv+0x1d4>)
 800388e:	480d      	ldr	r0, [pc, #52]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 8003890:	f7fd feaa 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	2201      	movs	r2, #1
 800389a:	4918      	ldr	r1, [pc, #96]	; (80038fc <_ZN9LineTrace4initEv+0x1d8>)
 800389c:	4809      	ldr	r0, [pc, #36]	; (80038c4 <_ZN9LineTrace4initEv+0x1a0>)
 800389e:	f7fd fea3 	bl	80015e8 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 80038a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80038aa:	eef0 0a47 	vmov.f32	s1, s14
 80038ae:	eeb0 0a67 	vmov.f32	s0, s15
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f96a 	bl	8003b8c <_ZN9LineTrace13setMaxAccDec2Eff>
}
 80038b8:	bf00      	nop
 80038ba:	3748      	adds	r7, #72	; 0x48
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	08019760 	.word	0x08019760
 80038c4:	08019768 	.word	0x08019768
 80038c8:	08019770 	.word	0x08019770
 80038cc:	08019778 	.word	0x08019778
 80038d0:	08019780 	.word	0x08019780
 80038d4:	0801978c 	.word	0x0801978c
 80038d8:	08019798 	.word	0x08019798
 80038dc:	080197a4 	.word	0x080197a4
 80038e0:	080197b0 	.word	0x080197b0
 80038e4:	080197bc 	.word	0x080197bc
 80038e8:	080197c8 	.word	0x080197c8
 80038ec:	080197d4 	.word	0x080197d4
 80038f0:	080197e0 	.word	0x080197e0
 80038f4:	080197e8 	.word	0x080197e8
 80038f8:	080197f0 	.word	0x080197f0
 80038fc:	080197fc 	.word	0x080197fc

08003900 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	ed87 0a02 	vstr	s0, [r7, #8]
 800390c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003910:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003926:	bf00      	nop
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	ed87 0a02 	vstr	s0, [r7, #8]
 800393e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003942:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	return kp_;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	ee07 3a90 	vmov	s15, r3
}
 8003974:	eeb0 0a67 	vmov.f32	s0, s15
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
	return ki_;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	ee07 3a90 	vmov	s15, r3
}
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	return kd_;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	ee07 3a90 	vmov	s15, r3
}
 80039b0:	eeb0 0a67 	vmov.f32	s0, s15
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	ee07 3a90 	vmov	s15, r3
}
 80039ce:	eeb0 0a67 	vmov.f32	s0, s15
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	ee07 3a90 	vmov	s15, r3
}
 80039ec:	eeb0 0a67 	vmov.f32	s0, s15
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	ee07 3a90 	vmov	s15, r3
}
 8003a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac6:	ee07 3a90 	vmov	s15, r3
}
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	ee07 3a90 	vmov	s15, r3
}
 8003aea:	eeb0 0a67 	vmov.f32	s0, s15
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b06:	ee07 3a90 	vmov	s15, r3
}
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	ee07 3a90 	vmov	s15, r3
}
 8003b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b46:	ee07 3a90 	vmov	s15, r3
}
 8003b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b64:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003b6e:	3304      	adds	r3, #4
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	601a      	str	r2, [r3, #0]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b98:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bae:	3310      	adds	r3, #16
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bce:	3304      	adds	r3, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	ee07 3a90 	vmov	s15, r3
}
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bf2:	3310      	adds	r3, #16
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	ee07 3a90 	vmov	s15, r3
}
 8003bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c16:	330c      	adds	r3, #12
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	ee07 3a90 	vmov	s15, r3
}
 8003c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	ee07 3a90 	vmov	s15, r3
}
 8003c42:	eeb0 0a67 	vmov.f32	s0, s15
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8142 	beq.w	8003ee8 <_ZN9LineTrace4flipEv+0x298>
		// ---- line following processing -----//
		pidTrace();
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fe febf 	bl	80029e8 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003c6a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 faf4 	bl	800425c <_ZN9LineTrace16isTargetDistanceEf>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d028      	beq.n	8003ccc <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa52 	bl	8004124 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fcdf 	bl	8003644 <_ZN9LineTrace8isStableEv>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <_ZN9LineTrace4flipEv+0x56>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fbb3 	bl	80053fc <_ZN10SideSensor9getStatusEv>
 8003c96:	4603      	mov	r3, r0
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d101      	bne.n	8003ca6 <_ZN9LineTrace4flipEv+0x56>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <_ZN9LineTrace4flipEv+0x58>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <_ZN9LineTrace4flipEv+0x68>
#endif
				stable_flag_ = true;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003cb2:	33ff      	adds	r3, #255	; 0xff
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd fbf3 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 f90a 	bl	8004ee0 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fc1b 	bl	8003508 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe ff98 	bl	8002c08 <_ZN9LineTrace11isCrossLineEv>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 fbb2 	bl	800544c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fc06 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fbc2 	bl	8005480 <_ZN10SideSensor13getIgnoreFlagEv>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00f      	beq.n	8003d22 <_ZN9LineTrace4flipEv+0xd2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fbea 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003d0c:	eeb0 7a40 	vmov.f32	s14, s0
 8003d10:	eddf 7a77 	vldr	s15, [pc, #476]	; 8003ef0 <_ZN9LineTrace4flipEv+0x2a0>
 8003d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	db01      	blt.n	8003d22 <_ZN9LineTrace4flipEv+0xd2>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <_ZN9LineTrace4flipEv+0xd4>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fb9a 	bl	8005466 <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d38:	33ff      	adds	r3, #255	; 0xff
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <_ZN9LineTrace4flipEv+0x108>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fb59 	bl	80053fc <_ZN10SideSensor9getStatusEv>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d101      	bne.n	8003d58 <_ZN9LineTrace4flipEv+0x108>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <_ZN9LineTrace4flipEv+0x10a>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01f      	beq.n	8003d9e <_ZN9LineTrace4flipEv+0x14e>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d64:	3324      	adds	r3, #36	; 0x24
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 facc 	bl	800430c <_ZN9LineTrace21storeSideLineDistanceEv>
 8003d74:	e008      	b.n	8003d88 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fb6e 	bl	8004458 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d82:	3314      	adds	r3, #20
 8003d84:	2200      	movs	r2, #0
 8003d86:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d8e:	33ff      	adds	r3, #255	; 0xff
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003da4:	33ff      	adds	r3, #255	; 0xff
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <_ZN9LineTrace4flipEv+0x16e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	330c      	adds	r3, #12
 8003db0:	2201      	movs	r2, #1
 8003db2:	f04f 31ff 	mov.w	r1, #4294967295
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe f8e8 	bl	8001f8c <_ZN3LED2LREaa>
 8003dbc:	e007      	b.n	8003dce <_ZN9LineTrace4flipEv+0x17e>
		else led_.LR(-1, 0);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe f8df 	bl	8001f8c <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dd4:	3316      	adds	r3, #22
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <_ZN9LineTrace4flipEv+0x1aa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 fb08 	bl	80053fc <_ZN10SideSensor9getStatusEv>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d101      	bne.n	8003dfa <_ZN9LineTrace4flipEv+0x1aa>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <_ZN9LineTrace4flipEv+0x1ac>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d011      	beq.n	8003e24 <_ZN9LineTrace4flipEv+0x1d4>
#endif
			all_sideline_flag_ = true;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e06:	3316      	adds	r3, #22
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e12:	3324      	adds	r3, #36	; 0x24
 8003e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d120      	bne.n	8003e5e <_ZN9LineTrace4flipEv+0x20e>
				storeAllSideLineDistance();
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 faad 	bl	800437c <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003e22:	e01c      	b.n	8003e5e <_ZN9LineTrace4flipEv+0x20e>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e2a:	3316      	adds	r3, #22
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <_ZN9LineTrace4flipEv+0x1fc>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fae0 	bl	80053fc <_ZN10SideSensor9getStatusEv>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d101      	bne.n	8003e4c <_ZN9LineTrace4flipEv+0x1fc>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <_ZN9LineTrace4flipEv+0x1fe>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <_ZN9LineTrace4flipEv+0x20e>
#endif
			all_sideline_flag_ = false;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e58:	3316      	adds	r3, #22
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fb92 	bl	800258c <_ZN10LineSensor13emergencyStopEv>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <_ZN9LineTrace4flipEv+0x230>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003ef4 <_ZN9LineTrace4flipEv+0x2a4>
 8003e76:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003ef4 <_ZN9LineTrace4flipEv+0x2a4>
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fd50 	bl	8005920 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e86:	3314      	adds	r3, #20
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e94:	3314      	adds	r3, #20
 8003e96:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d906      	bls.n	8003eb8 <_ZN9LineTrace4flipEv+0x268>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eb6:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	2b50      	cmp	r3, #80	; 0x50
 8003ec4:	d808      	bhi.n	8003ed8 <_ZN9LineTrace4flipEv+0x288>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe f85b 	bl	8001f8c <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003ed6:	e007      	b.n	8003ee8 <_ZN9LineTrace4flipEv+0x298>
		else led_.LR(-1, 0);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	330c      	adds	r3, #12
 8003edc:	2200      	movs	r2, #0
 8003ede:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe f852 	bl	8001f8c <_ZN3LED2LREaa>
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	43480000 	.word	0x43480000
 8003ef4:	00000000 	.word	0x00000000

08003ef8 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	velocity_ctrl_->start();
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fd5c 	bl	80059d2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 fa84 	bl	800542c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003f2a:	33f8      	adds	r3, #248	; 0xf8
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003f36:	33fa      	adds	r3, #250	; 0xfa
 8003f38:	2200      	movs	r2, #0
 8003f3a:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003f42:	33fc      	adds	r3, #252	; 0xfc
 8003f44:	2200      	movs	r2, #0
 8003f46:	801a      	strh	r2, [r3, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 fd47 	bl	80059f8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f04f 31ff 	mov.w	r1, #4294967295
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe f809 	bl	8001f8c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f80:	3324      	adds	r3, #36	; 0x24
 8003f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d107      	bne.n	8003f9a <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69d8      	ldr	r0, [r3, #28]
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <_ZN9LineTrace4stopEv+0xcc>)
 8003f90:	4a23      	ldr	r2, [pc, #140]	; (8004020 <_ZN9LineTrace4stopEv+0xd0>)
 8003f92:	4924      	ldr	r1, [pc, #144]	; (8004024 <_ZN9LineTrace4stopEv+0xd4>)
 8003f94:	f000 fc72 	bl	800487c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003f98:	e006      	b.n	8003fa8 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69d8      	ldr	r0, [r3, #28]
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <_ZN9LineTrace4stopEv+0xd8>)
 8003fa0:	4a22      	ldr	r2, [pc, #136]	; (800402c <_ZN9LineTrace4stopEv+0xdc>)
 8003fa2:	4920      	ldr	r1, [pc, #128]	; (8004024 <_ZN9LineTrace4stopEv+0xd4>)
 8003fa4:	f000 fc8d 	bl	80048c2 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fae:	3328      	adds	r3, #40	; 0x28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	9200      	str	r2, [sp, #0]
 8003fb4:	2264      	movs	r2, #100	; 0x64
 8003fb6:	491e      	ldr	r1, [pc, #120]	; (8004030 <_ZN9LineTrace4stopEv+0xe0>)
 8003fb8:	481a      	ldr	r0, [pc, #104]	; (8004024 <_ZN9LineTrace4stopEv+0xd4>)
 8003fba:	f7fd faaf 	bl	800151c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003fc4:	33b8      	adds	r3, #184	; 0xb8
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fce:	4919      	ldr	r1, [pc, #100]	; (8004034 <_ZN9LineTrace4stopEv+0xe4>)
 8003fd0:	4814      	ldr	r0, [pc, #80]	; (8004024 <_ZN9LineTrace4stopEv+0xd4>)
 8003fd2:	f7fd faa3 	bl	800151c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fdc:	3358      	adds	r3, #88	; 0x58
 8003fde:	2200      	movs	r2, #0
 8003fe0:	9200      	str	r2, [sp, #0]
 8003fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fe6:	4914      	ldr	r1, [pc, #80]	; (8004038 <_ZN9LineTrace4stopEv+0xe8>)
 8003fe8:	480e      	ldr	r0, [pc, #56]	; (8004024 <_ZN9LineTrace4stopEv+0xd4>)
 8003fea:	f7fd fa97 	bl	800151c <sd_write_array_float>

	led_.LR(-1, 0);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd ffc7 	bl	8001f8c <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fceb 	bl	80049de <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fc99 	bl	8004944 <_ZN6Logger10resetLogs2Ev>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	08019728 	.word	0x08019728
 8004020:	08019734 	.word	0x08019734
 8004024:	0801971c 	.word	0x0801971c
 8004028:	08019808 	.word	0x08019808
 800402c:	08019814 	.word	0x08019814
 8004030:	08019744 	.word	0x08019744
 8004034:	08019754 	.word	0x08019754
 8004038:	08019824 	.word	0x08019824

0800403c <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004048:	2300      	movs	r3, #0
 800404a:	737b      	strb	r3, [r7, #13]
	start();
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ff53 	bl	8003ef8 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8004052:	7b7b      	ldrb	r3, [r7, #13]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d15b      	bne.n	8004110 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004058:	89fb      	ldrh	r3, [r7, #14]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <_ZN9LineTrace7runningEv+0x28>
 800405e:	2b0a      	cmp	r3, #10
 8004060:	d030      	beq.n	80040c4 <_ZN9LineTrace7runningEv+0x88>
 8004062:	e054      	b.n	800410e <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f9d3 	bl	8005414 <_ZN10SideSensor16getWhiteLineCntREv>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d044      	beq.n	8004108 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe fd96 	bl	8002bb0 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800408a:	3324      	adds	r3, #36	; 0x24
 800408c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f89f 	bl	80041d8 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd fa2d 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd fa0b 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	330c      	adds	r3, #12
 80040b2:	f04f 32ff 	mov.w	r2, #4294967295
 80040b6:	2100      	movs	r1, #0
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd ff67 	bl	8001f8c <_ZN3LED2LREaa>
				stage = 10;
 80040be:	230a      	movs	r3, #10
 80040c0:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80040c2:	e021      	b.n	8004108 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f001 f9a3 	bl	8005414 <_ZN10SideSensor16getWhiteLineCntREv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fe fd81 	bl	8002be6 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f88a 	bl	80041fe <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80040ea:	2064      	movs	r0, #100	; 0x64
 80040ec:	f005 fb6c 	bl	80097c8 <HAL_Delay>

				setTargetVelocity(0);
 80040f0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004120 <_ZN9LineTrace7runningEv+0xe4>
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fc8f 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80040fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040fe:	f005 fb63 	bl	80097c8 <HAL_Delay>

				goal_flag = true;
 8004102:	2301      	movs	r3, #1
 8004104:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004106:	e001      	b.n	800410c <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004108:	bf00      	nop
 800410a:	e7a2      	b.n	8004052 <_ZN9LineTrace7runningEv+0x16>
			break;
 800410c:	bf00      	nop
	while(goal_flag == false){
 800410e:	e7a0      	b.n	8004052 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff1d 	bl	8003f50 <_ZN9LineTrace4stopEv>
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	00000000 	.word	0x00000000

08004124 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	ed2d 8b02 	vpush	{d8}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004136:	2b00      	cmp	r3, #0
 8004138:	d046      	beq.n	80041c8 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004140:	3324      	adds	r3, #36	; 0x24
 8004142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d11c      	bne.n	8004184 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69dc      	ldr	r4, [r3, #28]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd f97b 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8004158:	eeb0 8a40 	vmov.f32	s16, s0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 feac 	bl	8004ebe <_ZN8Odometry8getThetaEv>
 8004166:	ec53 2b10 	vmov	r2, r3, d0
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f7fc fd53 	bl	8000c18 <__aeabi_d2f>
 8004172:	4603      	mov	r3, r0
 8004174:	ee00 3a90 	vmov	s1, r3
 8004178:	eeb0 0a48 	vmov.f32	s0, s16
 800417c:	4620      	mov	r0, r4
 800417e:	f000 faac 	bl	80046da <_ZN6Logger21storeDistanceAndThetaEff>
 8004182:	e01b      	b.n	80041bc <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69dc      	ldr	r4, [r3, #28]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4618      	mov	r0, r3
 800418e:	f001 fc4f 	bl	8005a30 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8004192:	eeb0 8a40 	vmov.f32	s16, s0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fe8f 	bl	8004ebe <_ZN8Odometry8getThetaEv>
 80041a0:	ec53 2b10 	vmov	r2, r3, d0
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fd36 	bl	8000c18 <__aeabi_d2f>
 80041ac:	4603      	mov	r3, r0
 80041ae:	ee00 3a90 	vmov	s1, r3
 80041b2:	eeb0 0a48 	vmov.f32	s0, s16
 80041b6:	4620      	mov	r0, r4
 80041b8:	f000 fad6 	bl	8004768 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80041c6:	801a      	strh	r2, [r3, #0]
	}
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	ecbd 8b02 	vpop	{d8}
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	20000264 	.word	0x20000264

080041d8 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd f96d 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041f0:	3320      	adds	r3, #32
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800420c:	3320      	adds	r3, #32
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004218:	3322      	adds	r3, #34	; 0x22
 800421a:	2200      	movs	r2, #0
 800421c:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8004224:	335c      	adds	r3, #92	; 0x5c
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	887a      	ldrh	r2, [r7, #2]
 800424e:	801a      	strh	r2, [r3, #0]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fd f8ec 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8004276:	eeb0 7a40 	vmov.f32	s14, s0
 800427a:	edd7 7a00 	vldr	s15, [r7]
 800427e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004286:	bf94      	ite	ls
 8004288:	2301      	movls	r3, #1
 800428a:	2300      	movhi	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80042b2:	33f8      	adds	r3, #248	; 0xf8
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	461c      	mov	r4, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7fd f8d7 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80042be:	eef0 7a40 	vmov.f32	s15, s0
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80042c8:	330a      	adds	r3, #10
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80042d8:	33f8      	adds	r3, #248	; 0xf8
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80042e6:	33f8      	adds	r3, #248	; 0xf8
 80042e8:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80042f0:	33f8      	adds	r3, #248	; 0xf8
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	2b63      	cmp	r3, #99	; 0x63
 80042f6:	d905      	bls.n	8004304 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80042fe:	33f8      	adds	r3, #248	; 0xf8
 8004300:	2263      	movs	r2, #99	; 0x63
 8004302:	801a      	strh	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bd90      	pop	{r4, r7, pc}

0800430c <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800431e:	33fa      	adds	r3, #250	; 0xfa
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461c      	mov	r4, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7fd f8a1 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800432a:	eef0 7a40 	vmov.f32	s15, s0
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8004334:	332e      	adds	r3, #46	; 0x2e
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004344:	33fa      	adds	r3, #250	; 0xfa
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004352:	33fa      	adds	r3, #250	; 0xfa
 8004354:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800435c:	33fa      	adds	r3, #250	; 0xfa
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004364:	d306      	bcc.n	8004374 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800436c:	33fa      	adds	r3, #250	; 0xfa
 800436e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004372:	801a      	strh	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}

0800437c <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800438e:	33fc      	adds	r3, #252	; 0xfc
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	461c      	mov	r4, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7fd f869 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800439a:	eef0 7a40 	vmov.f32	s15, s0
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 80043a4:	3316      	adds	r3, #22
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043b4:	33fc      	adds	r3, #252	; 0xfc
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043c2:	33fc      	adds	r3, #252	; 0xfc
 80043c4:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043cc:	33fc      	adds	r3, #252	; 0xfc
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d4:	d306      	bcc.n	80043e4 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x68>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043dc:	33fc      	adds	r3, #252	; 0xfc
 80043de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043e2:	801a      	strh	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd90      	pop	{r4, r7, pc}

080043ec <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6959      	ldr	r1, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043fe:	33f8      	adds	r3, #248	; 0xf8
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8004408:	330a      	adds	r3, #10
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	edd3 7a00 	vldr	s15, [r3]
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	4608      	mov	r0, r1
 8004418:	f7fd f837 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004422:	33f8      	adds	r3, #248	; 0xf8
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004430:	33f8      	adds	r3, #248	; 0xf8
 8004432:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800443a:	33f8      	adds	r3, #248	; 0xf8
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	2b63      	cmp	r3, #99	; 0x63
 8004440:	d905      	bls.n	800444e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004448:	33f8      	adds	r3, #248	; 0xf8
 800444a:	2263      	movs	r2, #99	; 0x63
 800444c:	801a      	strh	r2, [r3, #0]

}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004460:	2300      	movs	r3, #0
 8004462:	82fb      	strh	r3, [r7, #22]
 8004464:	8afb      	ldrh	r3, [r7, #22]
 8004466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800446a:	d237      	bcs.n	80044dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 800446c:	8afb      	ldrh	r3, [r7, #22]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004474:	332e      	adds	r3, #46	; 0x2e
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc fff2 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004488:	eeb0 7a40 	vmov.f32	s14, s0
 800448c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004494:	eeb0 0a67 	vmov.f32	s0, s15
 8004498:	f7fe f8ce 	bl	8002638 <_ZSt3absf>
 800449c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80044a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044a4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004504 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 80044a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	d810      	bhi.n	80044d4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6959      	ldr	r1, [r3, #20]
 80044b6:	8afb      	ldrh	r3, [r7, #22]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80044be:	332e      	adds	r3, #46	; 0x2e
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	eeb0 0a67 	vmov.f32	s0, s15
 80044cc:	4608      	mov	r0, r1
 80044ce:	f7fc ffdc 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 80044d2:	e003      	b.n	80044dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80044d4:	8afb      	ldrh	r3, [r7, #22]
 80044d6:	3301      	adds	r3, #1
 80044d8:	82fb      	strh	r3, [r7, #22]
 80044da:	e7c3      	b.n	8004464 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80044e2:	33fa      	adds	r3, #250	; 0xfa
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ea:	d306      	bcc.n	80044fa <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80044f2:	33fa      	adds	r3, #250	; 0xfa
 80044f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044f8:	801a      	strh	r2, [r3, #0]

}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	42a00000 	.word	0x42a00000

08004508 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004516:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004524:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004528:	2200      	movs	r2, #0
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004532:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004536:	2200      	movs	r2, #0
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004540:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004544:	2200      	movs	r2, #0
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004564:	f7fd f8cc 	bl	8001700 <sd_mount>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d016      	beq.n	80045a6 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004578:	f7fc fd92 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800457c:	2100      	movs	r1, #0
 800457e:	2000      	movs	r0, #0
 8004580:	f7fc fd9e 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004584:	4815      	ldr	r0, [pc, #84]	; (80045dc <_ZN6Logger10sdCardInitEv+0x84>)
 8004586:	f7fc fdc5 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800458a:	2101      	movs	r1, #1
 800458c:	2000      	movs	r0, #0
 800458e:	f7fc fd97 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004592:	4813      	ldr	r0, [pc, #76]	; (80045e0 <_ZN6Logger10sdCardInitEv+0x88>)
 8004594:	f7fc fdbe 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800459c:	f005 f914 	bl	80097c8 <HAL_Delay>

	  ret = true;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e015      	b.n	80045d2 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80045a6:	f7fc fd7b 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80045aa:	2100      	movs	r1, #0
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7fc fd87 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80045b2:	480a      	ldr	r0, [pc, #40]	; (80045dc <_ZN6Logger10sdCardInitEv+0x84>)
 80045b4:	f7fc fdae 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80045b8:	2101      	movs	r1, #1
 80045ba:	2000      	movs	r0, #0
 80045bc:	f7fc fd80 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80045c0:	4808      	ldr	r0, [pc, #32]	; (80045e4 <_ZN6Logger10sdCardInitEv+0x8c>)
 80045c2:	f7fc fda7 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80045c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ca:	f005 f8fd 	bl	80097c8 <HAL_Delay>

	  ret = false;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	08019834 	.word	0x08019834
 80045e0:	08019840 	.word	0x08019840
 80045e4:	08019848 	.word	0x08019848

080045e8 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045fa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d027      	beq.n	8004654 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800460a:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004620:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004630:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004634:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800463c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <_ZN6Logger8storeLogEf+0x6c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800464c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004650:	2200      	movs	r2, #0
 8004652:	801a      	strh	r2, [r3, #0]
	}
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004672:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d028      	beq.n	80046ce <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004682:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	3304      	adds	r3, #4
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800469a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046aa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80046ae:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046b6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <_ZN6Logger9storeLog2Ef+0x6e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046c6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80046ca:	2200      	movs	r2, #0
 80046cc:	801a      	strh	r2, [r3, #0]
	}
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80046e6:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046f0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	3302      	adds	r3, #2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004708:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004714:	3312      	adds	r3, #18
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004724:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	3301      	adds	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004734:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004738:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004740:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	f241 726f 	movw	r2, #5999	; 0x176f
 800474a:	4293      	cmp	r3, r2
 800474c:	d906      	bls.n	800475c <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004754:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004758:	2200      	movs	r2, #0
 800475a:	801a      	strh	r2, [r3, #0]
	//}
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	ed87 0a02 	vstr	s0, [r7, #8]
 8004774:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800477e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800478a:	3322      	adds	r3, #34	; 0x22
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800479a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80047a6:	3352      	adds	r3, #82	; 0x52
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047b6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047c6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047ca:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047d2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	f241 726f 	movw	r2, #5999	; 0x176f
 80047dc:	4293      	cmp	r3, r2
 80047de:	d906      	bls.n	80047ee <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047e6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047ea:	2200      	movs	r2, #0
 80047ec:	801a      	strh	r2, [r3, #0]
	//}
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3308      	adds	r3, #8
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004820:	3348      	adds	r3, #72	; 0x48
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af02      	add	r7, sp, #8
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	2300      	movs	r3, #0
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	2201      	movs	r2, #1
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f7fc fe68 	bl	800151c <sd_write_array_float>
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	2300      	movs	r3, #0
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	2201      	movs	r2, #1
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	68b8      	ldr	r0, [r7, #8]
 8004870:	f7fc fe54 	bl	800151c <sd_write_array_float>
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f103 0208 	add.w	r2, r3, #8
 8004890:	2300      	movs	r3, #0
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	f241 7270 	movw	r2, #6000	; 0x1770
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	68b8      	ldr	r0, [r7, #8]
 800489e:	f7fc fe3d 	bl	800151c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80048a8:	3348      	adds	r3, #72	; 0x48
 80048aa:	2200      	movs	r2, #0
 80048ac:	9200      	str	r2, [sp, #0]
 80048ae:	f241 7270 	movw	r2, #6000	; 0x1770
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f7fc fe31 	bl	800151c <sd_write_array_float>
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af02      	add	r7, sp, #8
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80048d6:	3388      	adds	r3, #136	; 0x88
 80048d8:	2200      	movs	r2, #0
 80048da:	9200      	str	r2, [sp, #0]
 80048dc:	f241 7270 	movw	r2, #6000	; 0x1770
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	68b8      	ldr	r0, [r7, #8]
 80048e4:	f7fc fe1a 	bl	800151c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80048ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80048f2:	2200      	movs	r2, #0
 80048f4:	9200      	str	r2, [sp, #0]
 80048f6:	f241 7270 	movw	r2, #6000	; 0x1770
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	68b8      	ldr	r0, [r7, #8]
 80048fe:	f7fc fe0d 	bl	800151c <sd_write_array_float>
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3308      	adds	r3, #8
 800491c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f7fc fe60 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800492e:	3348      	adds	r3, #72	; 0x48
 8004930:	f241 7270 	movw	r2, #6000	; 0x1770
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	68b8      	ldr	r0, [r7, #8]
 8004938:	f7fc fe56 	bl	80015e8 <sd_read_array_float>
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004944:	b480      	push	{r7}
 8004946:	b08b      	sub	sp, #44	; 0x2c
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004952:	3388      	adds	r3, #136	; 0x88
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004960:	3340      	adds	r3, #64	; 0x40
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	d009      	beq.n	8004980 <_ZN6Logger10resetLogs2Ev+0x3c>
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	617b      	str	r3, [r7, #20]
		log = 0;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	3304      	adds	r3, #4
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	e7f1      	b.n	8004964 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004986:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	623b      	str	r3, [r7, #32]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004996:	3340      	adds	r3, #64	; 0x40
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	6a3a      	ldr	r2, [r7, #32]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d009      	beq.n	80049b6 <_ZN6Logger10resetLogs2Ev+0x72>
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	60bb      	str	r3, [r7, #8]
		log = 0;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	3304      	adds	r3, #4
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	e7f1      	b.n	800499a <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80049bc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80049c0:	2200      	movs	r2, #0
 80049c2:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80049ca:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80049ce:	2200      	movs	r2, #0
 80049d0:	801a      	strh	r2, [r3, #0]
}
 80049d2:	bf00      	nop
 80049d4:	372c      	adds	r7, #44	; 0x2c
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80049ec:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80049f0:	2200      	movs	r2, #0
 80049f2:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80049fa:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80049fe:	2200      	movs	r2, #0
 8004a00:	801a      	strh	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_ZN6Logger5startEv>:

void Logger::start()
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a3e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	805a      	strh	r2, [r3, #2]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004a7c:	2108      	movs	r1, #8
 8004a7e:	4805      	ldr	r0, [pc, #20]	; (8004a94 <_ZN5Motor4initEv+0x20>)
 8004a80:	f00a f852 	bl	800eb28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004a84:	210c      	movs	r1, #12
 8004a86:	4803      	ldr	r0, [pc, #12]	; (8004a94 <_ZN5Motor4initEv+0x20>)
 8004a88:	f00a f84e 	bl	800eb28 <HAL_TIM_PWM_Start>

}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	2003f8c4 	.word	0x2003f8c4

08004a98 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da0d      	bge.n	8004ac6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ab0:	481f      	ldr	r0, [pc, #124]	; (8004b30 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ab2:	f006 f91f 	bl	800acf4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	425b      	negs	r3, r3
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	81fb      	strh	r3, [r7, #14]
 8004ac4:	e00a      	b.n	8004adc <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004acc:	4818      	ldr	r0, [pc, #96]	; (8004b30 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ace:	f006 f911 	bl	800acf4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da0d      	bge.n	8004b02 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004aec:	4810      	ldr	r0, [pc, #64]	; (8004b30 <_ZN5Motor9motorCtrlEv+0x98>)
 8004aee:	f006 f901 	bl	800acf4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	425b      	negs	r3, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	81bb      	strh	r3, [r7, #12]
 8004b00:	e00a      	b.n	8004b18 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004b02:	2200      	movs	r2, #0
 8004b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b08:	4809      	ldr	r0, [pc, #36]	; (8004b30 <_ZN5Motor9motorCtrlEv+0x98>)
 8004b0a:	f006 f8f3 	bl	800acf4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004b18:	89fa      	ldrh	r2, [r7, #14]
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004b20:	89ba      	ldrh	r2, [r7, #12]
 8004b22:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40020c00 	.word	0x40020c00
 8004b34:	2003f8c4 	.word	0x2003f8c4

08004b38 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6178      	str	r0, [r7, #20]
 8004b40:	ed87 0b02 	vstr	d0, [r7, #8]
 8004b44:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <_ZN5Motor8setRatioEdd+0xd8>)
 8004b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b52:	f7fb fff9 	bl	8000b48 <__aeabi_dcmpgt>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <_ZN5Motor8setRatioEdd+0x30>
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	4c2b      	ldr	r4, [pc, #172]	; (8004c10 <_ZN5Motor8setRatioEdd+0xd8>)
 8004b62:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004b66:	e00e      	b.n	8004b86 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <_ZN5Motor8setRatioEdd+0xdc>)
 8004b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b72:	f7fb ffcb 	bl	8000b0c <__aeabi_dcmplt>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <_ZN5Motor8setRatioEdd+0x4e>
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	4c24      	ldr	r4, [pc, #144]	; (8004c14 <_ZN5Motor8setRatioEdd+0xdc>)
 8004b82:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <_ZN5Motor8setRatioEdd+0xd8>)
 8004b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b90:	f7fb ffda 	bl	8000b48 <__aeabi_dcmpgt>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <_ZN5Motor8setRatioEdd+0x6e>
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	4c1c      	ldr	r4, [pc, #112]	; (8004c10 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ba0:	e9c7 3400 	strd	r3, r4, [r7]
 8004ba4:	e00e      	b.n	8004bc4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <_ZN5Motor8setRatioEdd+0xdc>)
 8004bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bb0:	f7fb ffac 	bl	8000b0c <__aeabi_dcmplt>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <_ZN5Motor8setRatioEdd+0x8c>
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	4c15      	ldr	r4, [pc, #84]	; (8004c14 <_ZN5Motor8setRatioEdd+0xdc>)
 8004bc0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <_ZN5Motor8setRatioEdd+0xe0>)
 8004bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bce:	f7fb fd2b 	bl	8000628 <__aeabi_dmul>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	4621      	mov	r1, r4
 8004bda:	f7fb ffd5 	bl	8000b88 <__aeabi_d2iz>
 8004bde:	4603      	mov	r3, r0
 8004be0:	b21a      	sxth	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <_ZN5Motor8setRatioEdd+0xe0>)
 8004bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf0:	f7fb fd1a 	bl	8000628 <__aeabi_dmul>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	f7fb ffc4 	bl	8000b88 <__aeabi_d2iz>
 8004c00:	4603      	mov	r3, r0
 8004c02:	b21a      	sxth	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	805a      	strh	r2, [r3, #2]

}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd90      	pop	{r4, r7, pc}
 8004c10:	3ff00000 	.word	0x3ff00000
 8004c14:	bff00000 	.word	0xbff00000
 8004c18:	409c2000 	.word	0x409c2000

08004c1c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004c1c:	b490      	push	{r4, r7}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	f04f 0400 	mov.w	r4, #0
 8004c34:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	f04f 0400 	mov.w	r4, #0
 8004c42:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	f04f 0400 	mov.w	r4, #0
 8004c50:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	f04f 0400 	mov.w	r4, #0
 8004c6c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	609a      	str	r2, [r3, #8]
}
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc90      	pop	{r4, r7}
 8004c8c:	4770      	bx	lr
	...

08004c90 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c94:	b086      	sub	sp, #24
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fef6 	bl	8001a90 <_ZN3IMU8getOmegaEv>
 8004ca4:	ee10 3a10 	vmov	r3, s0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fb fc65 	bl	8000578 <__aeabi_f2d>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fbb8 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004cc0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004cc4:	a376      	add	r3, pc, #472	; (adr r3, 8004ea0 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004cce:	f7fb fcab 	bl	8000628 <__aeabi_dmul>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7fb fc48 	bl	8000578 <__aeabi_f2d>
 8004ce8:	4682      	mov	sl, r0
 8004cea:	468b      	mov	fp, r1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d00:	f7fb fdbc 	bl	800087c <__aeabi_ddiv>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4640      	mov	r0, r8
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	f7fb fad6 	bl	80002bc <__adddf3>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	ec43 2b17 	vmov	d7, r2, r3
 8004d18:	eeb0 0a47 	vmov.f32	s0, s14
 8004d1c:	eef0 0a67 	vmov.f32	s1, s15
 8004d20:	f00f fa46 	bl	80141b0 <cos>
 8004d24:	ec53 2b10 	vmov	r2, r3, d0
 8004d28:	4650      	mov	r0, sl
 8004d2a:	4659      	mov	r1, fp
 8004d2c:	f7fb fc7c 	bl	8000628 <__aeabi_dmul>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4620      	mov	r0, r4
 8004d36:	4629      	mov	r1, r5
 8004d38:	f7fb fac0 	bl	80002bc <__adddf3>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7fb fc13 	bl	8000578 <__aeabi_f2d>
 8004d52:	4682      	mov	sl, r0
 8004d54:	468b      	mov	fp, r1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d6a:	f7fb fd87 	bl	800087c <__aeabi_ddiv>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	f7fb faa1 	bl	80002bc <__adddf3>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	ec43 2b17 	vmov	d7, r2, r3
 8004d82:	eeb0 0a47 	vmov.f32	s0, s14
 8004d86:	eef0 0a67 	vmov.f32	s1, s15
 8004d8a:	f00f fa55 	bl	8014238 <sin>
 8004d8e:	ec53 2b10 	vmov	r2, r3, d0
 8004d92:	4650      	mov	r0, sl
 8004d94:	4659      	mov	r1, fp
 8004d96:	f7fb fc47 	bl	8000628 <__aeabi_dmul>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4620      	mov	r0, r4
 8004da0:	4629      	mov	r1, r5
 8004da2:	f7fb fa8b 	bl	80002bc <__adddf3>
 8004da6:	4603      	mov	r3, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4623      	mov	r3, r4
 8004dc0:	f7fb fa7c 	bl	80002bc <__adddf3>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	ed93 7b08 	vldr	d7, [r3, #32]
 8004dda:	eeb0 0a47 	vmov.f32	s0, s14
 8004dde:	eef0 0a67 	vmov.f32	s1, s15
 8004de2:	f00f f9e5 	bl	80141b0 <cos>
 8004de6:	ec51 0b10 	vmov	r0, r1, d0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004df0:	f7fb fc1a 	bl	8000628 <__aeabi_dmul>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4620      	mov	r0, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	f7fb fa5e 	bl	80002bc <__adddf3>
 8004e00:	4603      	mov	r3, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	ed93 7b08 	vldr	d7, [r3, #32]
 8004e16:	eeb0 0a47 	vmov.f32	s0, s14
 8004e1a:	eef0 0a67 	vmov.f32	s1, s15
 8004e1e:	f00f fa0b 	bl	8014238 <sin>
 8004e22:	ec51 0b10 	vmov	r0, r1, d0
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004e2c:	f7fb fbfc 	bl	8000628 <__aeabi_dmul>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fa40 	bl	80002bc <__adddf3>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	4621      	mov	r1, r4
 8004e50:	f7fb fee2 	bl	8000c18 <__aeabi_d2f>
 8004e54:	4602      	mov	r2, r0
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004e58:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004e60:	4618      	mov	r0, r3
 8004e62:	4621      	mov	r1, r4
 8004e64:	f7fb fed8 	bl	8000c18 <__aeabi_d2f>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004e6c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004e74:	4618      	mov	r0, r3
 8004e76:	4621      	mov	r1, r4
 8004e78:	f7fb fece 	bl	8000c18 <__aeabi_d2f>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e8c:	f3af 8000 	nop.w
 8004e90:	405b8000 	.word	0x405b8000
 8004e94:	20000294 	.word	0x20000294
 8004e98:	20000298 	.word	0x20000298
 8004e9c:	2000029c 	.word	0x2000029c
 8004ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ea4:	3f50624d 	.word	0x3f50624d

08004ea8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff feed 	bl	8004c90 <_ZN8Odometry12calcPotitionEv>
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004ebe:	b490      	push	{r4, r7}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
	return theta_;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004ecc:	ec44 3b17 	vmov	d7, r3, r4
}
 8004ed0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed4:	eef0 0a67 	vmov.f32	s1, s15
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc90      	pop	{r4, r7}
 8004ede:	4770      	bx	lr

08004ee0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004ee0:	b490      	push	{r4, r7}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	f04f 0400 	mov.w	r4, #0
 8004ef2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	f04f 0400 	mov.w	r4, #0
 8004f0e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc90      	pop	{r4, r7}
 8004f1a:	4770      	bx	lr

08004f1c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004f1c:	b490      	push	{r4, r7}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	f04f 0400 	mov.w	r4, #0
 8004f34:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	f04f 0400 	mov.w	r4, #0
 8004f42:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004f5a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004f5e:	2200      	movs	r2, #0
 8004f60:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004f62:	4a29      	ldr	r2, [pc, #164]	; (8005008 <_ZN13PathFollowingC1Ev+0xec>)
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	f04f 0400 	mov.w	r4, #0
 8004f6c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004f70:	4a25      	ldr	r2, [pc, #148]	; (8005008 <_ZN13PathFollowingC1Ev+0xec>)
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	f04f 0400 	mov.w	r4, #0
 8004f7a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004f7e:	4a22      	ldr	r2, [pc, #136]	; (8005008 <_ZN13PathFollowingC1Ev+0xec>)
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	f04f 0400 	mov.w	r4, #0
 8004f88:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	; (800500c <_ZN13PathFollowingC1Ev+0xf0>)
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	; (800500c <_ZN13PathFollowingC1Ev+0xf0>)
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	f04f 0400 	mov.w	r4, #0
 8004fa4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004fa8:	4a18      	ldr	r2, [pc, #96]	; (800500c <_ZN13PathFollowingC1Ev+0xf0>)
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	f04f 0400 	mov.w	r4, #0
 8004fb2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004fb6:	4a15      	ldr	r2, [pc, #84]	; (800500c <_ZN13PathFollowingC1Ev+0xf0>)
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	f04f 0400 	mov.w	r4, #0
 8004fc0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004fc4:	4a11      	ldr	r2, [pc, #68]	; (800500c <_ZN13PathFollowingC1Ev+0xf0>)
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004fd2:	4a0e      	ldr	r2, [pc, #56]	; (800500c <_ZN13PathFollowingC1Ev+0xf0>)
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	f04f 0400 	mov.w	r4, #0
 8004fdc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004fe0:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <_ZN13PathFollowingC1Ev+0xf4>)
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f04f 0400 	mov.w	r4, #0
 8004fea:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004fee:	4a08      	ldr	r2, [pc, #32]	; (8005010 <_ZN13PathFollowingC1Ev+0xf4>)
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	f04f 0400 	mov.w	r4, #0
 8004ff8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bc90      	pop	{r4, r7}
 8005006:	4770      	bx	lr
 8005008:	2003fdc8 	.word	0x2003fdc8
 800500c:	2003fd58 	.word	0x2003fd58
 8005010:	2003fdb8 	.word	0x2003fdb8

08005014 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800501c:	f001 fc92 	bl	8006944 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005020:	f107 0318 	add.w	r3, r7, #24
 8005024:	2201      	movs	r2, #1
 8005026:	4915      	ldr	r1, [pc, #84]	; (800507c <_ZN13PathFollowing4initEv+0x68>)
 8005028:	4815      	ldr	r0, [pc, #84]	; (8005080 <_ZN13PathFollowing4initEv+0x6c>)
 800502a:	f7fc fb23 	bl	8001674 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800502e:	f107 0310 	add.w	r3, r7, #16
 8005032:	2201      	movs	r2, #1
 8005034:	4913      	ldr	r1, [pc, #76]	; (8005084 <_ZN13PathFollowing4initEv+0x70>)
 8005036:	4812      	ldr	r0, [pc, #72]	; (8005080 <_ZN13PathFollowing4initEv+0x6c>)
 8005038:	f7fc fb1c 	bl	8001674 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800503c:	f107 0308 	add.w	r3, r7, #8
 8005040:	2201      	movs	r2, #1
 8005042:	4911      	ldr	r1, [pc, #68]	; (8005088 <_ZN13PathFollowing4initEv+0x74>)
 8005044:	480e      	ldr	r0, [pc, #56]	; (8005080 <_ZN13PathFollowing4initEv+0x6c>)
 8005046:	f7fc fb15 	bl	8001674 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800504a:	ed97 7b06 	vldr	d7, [r7, #24]
 800504e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005052:	ed97 5b02 	vldr	d5, [r7, #8]
 8005056:	eeb0 2a45 	vmov.f32	s4, s10
 800505a:	eef0 2a65 	vmov.f32	s5, s11
 800505e:	eeb0 1a46 	vmov.f32	s2, s12
 8005062:	eef0 1a66 	vmov.f32	s3, s13
 8005066:	eeb0 0a47 	vmov.f32	s0, s14
 800506a:	eef0 0a67 	vmov.f32	s1, s15
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f80c 	bl	800508c <_ZN13PathFollowing7setGainEddd>
}
 8005074:	bf00      	nop
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	08019850 	.word	0x08019850
 8005080:	08019858 	.word	0x08019858
 8005084:	08019860 	.word	0x08019860
 8005088:	08019868 	.word	0x08019868

0800508c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800508c:	b490      	push	{r4, r7}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	61f8      	str	r0, [r7, #28]
 8005094:	ed87 0b04 	vstr	d0, [r7, #16]
 8005098:	ed87 1b02 	vstr	d1, [r7, #8]
 800509c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80050a0:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80050a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80050a6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80050aa:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80050ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80050b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80050b4:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80050b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80050ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80050be:	bf00      	nop
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc90      	pop	{r4, r7}
 80050c6:	4770      	bx	lr
 80050c8:	2003fdc8 	.word	0x2003fdc8

080050cc <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80050d4:	2088      	movs	r0, #136	; 0x88
 80050d6:	f7fc fe1e 	bl	8001d16 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80050da:	2080      	movs	r0, #128	; 0x80
 80050dc:	f7fc fe1b 	bl	8001d16 <INA260_init>
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80050f0:	2188      	movs	r1, #136	; 0x88
 80050f2:	2002      	movs	r0, #2
 80050f4:	f7fc fdac 	bl	8001c50 <INA260_read>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fb fa2a 	bl	8000554 <__aeabi_i2d>
 8005100:	a30c      	add	r3, pc, #48	; (adr r3, 8005134 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb fa8f 	bl	8000628 <__aeabi_dmul>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	4618      	mov	r0, r3
 8005110:	4621      	mov	r1, r4
 8005112:	f7fb fd81 	bl	8000c18 <__aeabi_d2f>
 8005116:	4602      	mov	r2, r0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a03      	ldr	r2, [pc, #12]	; (8005130 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}
 800512c:	f3af 8000 	nop.w
 8005130:	200002a0 	.word	0x200002a0
 8005134:	47ae147b 	.word	0x47ae147b
 8005138:	3f547ae1 	.word	0x3f547ae1

0800513c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	ee07 3a90 	vmov	s15, r3

}
 800514c:	eeb0 0a67 	vmov.f32	s0, s15
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005168:	2102      	movs	r1, #2
 800516a:	4822      	ldr	r0, [pc, #136]	; (80051f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800516c:	f005 fdaa 	bl	800acc4 <HAL_GPIO_ReadPin>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005188:	2108      	movs	r1, #8
 800518a:	481a      	ldr	r0, [pc, #104]	; (80051f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800518c:	f005 fd9a 	bl	800acc4 <HAL_GPIO_ReadPin>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80051a8:	2110      	movs	r1, #16
 80051aa:	4812      	ldr	r0, [pc, #72]	; (80051f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80051ac:	f005 fd8a 	bl	800acc4 <HAL_GPIO_ReadPin>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80051c0:	89fb      	ldrh	r3, [r7, #14]
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80051c8:	2180      	movs	r1, #128	; 0x80
 80051ca:	480a      	ldr	r0, [pc, #40]	; (80051f4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80051cc:	f005 fd7a 	bl	800acc4 <HAL_GPIO_ReadPin>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80051e0:	89fb      	ldrh	r3, [r7, #14]
 80051e2:	f043 0308 	orr.w	r3, r3, #8
 80051e6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80051e8:	89fb      	ldrh	r3, [r7, #14]

}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40020c00 	.word	0x40020c00

080051f8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	805a      	strh	r2, [r3, #2]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	809a      	strh	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	719a      	strb	r2, [r3, #6]
{

}
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	799b      	ldrb	r3, [r3, #6]
 8005234:	f083 0301 	eor.w	r3, r3, #1
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80c7 	beq.w	80053ce <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005240:	4b65      	ldr	r3, [pc, #404]	; (80053d8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	f083 0301 	eor.w	r3, r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d027      	beq.n	800529e <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800524e:	2104      	movs	r1, #4
 8005250:	4862      	ldr	r0, [pc, #392]	; (80053dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005252:	f005 fd37 	bl	800acc4 <HAL_GPIO_ReadPin>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d006      	beq.n	8005274 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8005266:	4b5e      	ldr	r3, [pc, #376]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	3301      	adds	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	4b5c      	ldr	r3, [pc, #368]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e002      	b.n	800527a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8005274:	4b5a      	ldr	r3, [pc, #360]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005276:	2200      	movs	r2, #0
 8005278:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800527a:	4b59      	ldr	r3, [pc, #356]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d93f      	bls.n	8005302 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8005290:	4b51      	ldr	r3, [pc, #324]	; (80053d8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005296:	4b52      	ldr	r3, [pc, #328]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005298:	2200      	movs	r2, #0
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e031      	b.n	8005302 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 800529e:	4b4e      	ldr	r3, [pc, #312]	; (80053d8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02d      	beq.n	8005302 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80052a6:	2104      	movs	r1, #4
 80052a8:	484c      	ldr	r0, [pc, #304]	; (80053dc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80052aa:	f005 fd0b 	bl	800acc4 <HAL_GPIO_ReadPin>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 80052be:	4b48      	ldr	r3, [pc, #288]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	4b46      	ldr	r3, [pc, #280]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80052cc:	4b44      	ldr	r3, [pc, #272]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80052d2:	4b43      	ldr	r3, [pc, #268]	; (80053e0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d913      	bls.n	8005302 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	f083 0301 	eor.w	r3, r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80052e8:	4b3b      	ldr	r3, [pc, #236]	; (80053d8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	889b      	ldrh	r3, [r3, #4]
 80052f2:	3301      	adds	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	889a      	ldrh	r2, [r3, #4]
 80052fe:	4b39      	ldr	r3, [pc, #228]	; (80053e4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005300:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005302:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	f083 0301 	eor.w	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d027      	beq.n	8005360 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005314:	4835      	ldr	r0, [pc, #212]	; (80053ec <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005316:	f005 fcd5 	bl	800acc4 <HAL_GPIO_ReadPin>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 800532a:	4b31      	ldr	r3, [pc, #196]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	4b2f      	ldr	r3, [pc, #188]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	e002      	b.n	800533e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800533e:	4b2c      	ldr	r3, [pc, #176]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	2b04      	cmp	r3, #4
 8005344:	d90c      	bls.n	8005360 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	f043 0302 	orr.w	r3, r3, #2
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005354:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800535a:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800535c:	2200      	movs	r2, #0
 800535e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005360:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02e      	beq.n	80053c6 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800536c:	481f      	ldr	r0, [pc, #124]	; (80053ec <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800536e:	f005 fca9 	bl	800acc4 <HAL_GPIO_ReadPin>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d006      	beq.n	8005390 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8005382:	4b1b      	ldr	r3, [pc, #108]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	3301      	adds	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e002      	b.n	8005396 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8005390:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005392:	2200      	movs	r2, #0
 8005394:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d913      	bls.n	80053c6 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	f083 0302 	eor.w	r3, r3, #2
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	885b      	ldrh	r3, [r3, #2]
 80053b6:	3301      	adds	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	885a      	ldrh	r2, [r3, #2]
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80053c4:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80053cc:	801a      	strh	r2, [r3, #0]
	}

}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200002aa 	.word	0x200002aa
 80053dc:	40021000 	.word	0x40021000
 80053e0:	200002ae 	.word	0x200002ae
 80053e4:	200002a8 	.word	0x200002a8
 80053e8:	200002ab 	.word	0x200002ab
 80053ec:	40020c00 	.word	0x40020c00
 80053f0:	200002ac 	.word	0x200002ac
 80053f4:	200002a6 	.word	0x200002a6
 80053f8:	200002a4 	.word	0x200002a4

080053fc <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	return status_;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	881b      	ldrh	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	889b      	ldrh	r3, [r3, #4]
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	809a      	strh	r2, [r3, #4]
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	719a      	strb	r2, [r3, #6]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	719a      	strb	r2, [r3, #6]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	799b      	ldrb	r3, [r3, #6]
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80054a8:	3308      	adds	r3, #8
 80054aa:	4611      	mov	r1, r2
 80054ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f00f fefd 	bl	80152b0 <memcpy>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	0801988c 	.word	0x0801988c

080054ec <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	ed97 0a00 	vldr	s0, [r7]
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff f86c 	bl	80045e8 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800551a:	eeb0 0a67 	vmov.f32	s0, s15
 800551e:	4610      	mov	r0, r2
 8005520:	f7ff f89e 	bl	8004660 <_ZN6Logger9storeLog2Ef>
	}

}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a07      	ldr	r2, [pc, #28]	; (8005558 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800553a:	4908      	ldr	r1, [pc, #32]	; (800555c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff f976 	bl	800482e <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a06      	ldr	r2, [pc, #24]	; (8005560 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8005548:	4904      	ldr	r1, [pc, #16]	; (800555c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff f982 	bl	8004854 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08019a80 	.word	0x08019a80
 800555c:	08019a8c 	.word	0x08019a8c
 8005560:	08019a98 	.word	0x08019a98

08005564 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8005564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005572:	2b00      	cmp	r3, #0
 8005574:	d046      	beq.n	8005604 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3204      	adds	r2, #4
 8005588:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800558c:	ee07 3a90 	vmov	s15, r3
 8005590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80055a4:	3301      	adds	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055b4:	4a15      	ldr	r2, [pc, #84]	; (800560c <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80055b6:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80055be:	2bf9      	cmp	r3, #249	; 0xf9
 80055c0:	d903      	bls.n	80055ca <_ZN20SystemIdentification10updateMsigEv+0x66>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	22fa      	movs	r2, #250	; 0xfa
 80055c6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685c      	ldr	r4, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fa ffcf 	bl	8000578 <__aeabi_f2d>
 80055da:	4605      	mov	r5, r0
 80055dc:	460e      	mov	r6, r1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80055e4:	eef1 7a67 	vneg.f32	s15, s15
 80055e8:	ee17 3a90 	vmov	r3, s15
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fa ffc3 	bl	8000578 <__aeabi_f2d>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	ec43 2b11 	vmov	d1, r2, r3
 80055fa:	ec46 5b10 	vmov	d0, r5, r6
 80055fe:	4620      	mov	r0, r4
 8005600:	f7ff fa9a 	bl	8004b38 <_ZN5Motor8setRatioEdd>

	}

}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560c:	200002b0 	.word	0x200002b0

08005610 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff f9e6 	bl	8004a0e <_ZN6Logger5startEv>
	processing_flag_ = true;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	0000      	movs	r0, r0
 8005654:	0000      	movs	r0, r0
	...

08005658 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff f9e3 	bl	8004a30 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005698 <_ZN20SystemIdentification4stopEv+0x40>
 8005682:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005698 <_ZN20SystemIdentification4stopEv+0x40>
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fa56 	bl	8004b38 <_ZN5Motor8setRatioEdd>
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	f3af 8000 	nop.w
	...

080056a0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	611a      	str	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	615a      	str	r2, [r3, #20]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	619a      	str	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	61da      	str	r2, [r3, #28]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	621a      	str	r2, [r3, #32]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	f107 020c 	add.w	r2, r7, #12
 8005748:	f107 0110 	add.w	r1, r7, #16
 800574c:	4618      	mov	r0, r3
 800574e:	f7fb fe5b 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005752:	ed97 7a04 	vldr	s14, [r7, #16]
 8005756:	edd7 7a03 	vldr	s15, [r7, #12]
 800575a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800575e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005766:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f7fa ff04 	bl	8000578 <__aeabi_f2d>
 8005770:	a30b      	add	r3, pc, #44	; (adr r3, 80057a0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa ff57 	bl	8000628 <__aeabi_dmul>
 800577a:	4603      	mov	r3, r0
 800577c:	460c      	mov	r4, r1
 800577e:	4618      	mov	r0, r3
 8005780:	4621      	mov	r1, r4
 8005782:	f7fb fa49 	bl	8000c18 <__aeabi_d2f>
 8005786:	4602      	mov	r2, r0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	ee07 3a90 	vmov	s15, r3
}
 8005794:	eeb0 0a67 	vmov.f32	s0, s15
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	bd90      	pop	{r4, r7, pc}
 800579e:	bf00      	nop
 80057a0:	1ab1d998 	.word	0x1ab1d998
 80057a4:	3f7830b5 	.word	0x3f7830b5

080057a8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80057a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	ed93 7a00 	vldr	s14, [r3]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80057bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057c0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80057ce:	4b48      	ldr	r3, [pc, #288]	; (80058f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80057e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80057e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ec:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80057f0:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fa febf 	bl	8000578 <__aeabi_f2d>
 80057fa:	4604      	mov	r4, r0
 80057fc:	460d      	mov	r5, r1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	ed93 7a06 	vldr	s14, [r3, #24]
 8005804:	edd7 7a05 	vldr	s15, [r7, #20]
 8005808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580c:	ee17 0a90 	vmov	r0, s15
 8005810:	f7fa feb2 	bl	8000578 <__aeabi_f2d>
 8005814:	a334      	add	r3, pc, #208	; (adr r3, 80058e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f7fa ff05 	bl	8000628 <__aeabi_dmul>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4620      	mov	r0, r4
 8005824:	4629      	mov	r1, r5
 8005826:	f7fa fd49 	bl	80002bc <__adddf3>
 800582a:	4603      	mov	r3, r0
 800582c:	460c      	mov	r4, r1
 800582e:	4618      	mov	r0, r3
 8005830:	4621      	mov	r1, r4
 8005832:	f7fb f9f1 	bl	8000c18 <__aeabi_d2f>
 8005836:	4602      	mov	r2, r0
 8005838:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800583a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005842:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005844:	edd3 7a00 	vldr	s15, [r3]
 8005848:	edd7 6a05 	vldr	s13, [r7, #20]
 800584c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005854:	ee17 0a90 	vmov	r0, s15
 8005858:	f7fa fe8e 	bl	8000578 <__aeabi_f2d>
 800585c:	a322      	add	r3, pc, #136	; (adr r3, 80058e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fb f80b 	bl	800087c <__aeabi_ddiv>
 8005866:	4603      	mov	r3, r0
 8005868:	460c      	mov	r4, r1
 800586a:	4618      	mov	r0, r3
 800586c:	4621      	mov	r1, r4
 800586e:	f7fb f9d3 	bl	8000c18 <__aeabi_d2f>
 8005872:	4603      	mov	r3, r0
 8005874:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005876:	ed97 7a04 	vldr	s14, [r7, #16]
 800587a:	edd7 7a03 	vldr	s15, [r7, #12]
 800587e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005882:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005884:	edd3 7a00 	vldr	s15, [r3]
 8005888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800588c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800589a:	edd7 7a02 	vldr	s15, [r7, #8]
 800589e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a2:	ee17 0a90 	vmov	r0, s15
 80058a6:	f7fa fe67 	bl	8000578 <__aeabi_f2d>
 80058aa:	4605      	mov	r5, r0
 80058ac:	460e      	mov	r6, r1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80058b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80058b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058bc:	ee17 0a90 	vmov	r0, s15
 80058c0:	f7fa fe5a 	bl	8000578 <__aeabi_f2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	ec43 2b11 	vmov	d1, r2, r3
 80058cc:	ec46 5b10 	vmov	d0, r5, r6
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff f931 	bl	8004b38 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e4:	f3af 8000 	nop.w
 80058e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80058ec:	3f50624d 	.word	0x3f50624d
 80058f0:	200002b8 	.word	0x200002b8
 80058f4:	200002b4 	.word	0x200002b4

080058f8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	ed87 0a02 	vstr	s0, [r7, #8]
 8005904:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	605a      	str	r2, [r3, #4]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	ed87 0a02 	vstr	s0, [r7, #8]
 800592c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	ed87 0a02 	vstr	s0, [r7, #8]
 8005954:	edc7 0a01 	vstr	s1, [r7, #4]
 8005958:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	615a      	str	r2, [r3, #20]
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	ed87 0a02 	vstr	s0, [r7, #8]
 8005986:	edc7 0a01 	vstr	s1, [r7, #4]
 800598a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	621a      	str	r2, [r3, #32]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff febf 	bl	8005738 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff feef 	bl	80057a8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005a28 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a10:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005a28 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff f88f 	bl	8004b38 <_ZN5Motor8setRatioEdd>

}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	f3af 8000 	nop.w
	...

08005a30 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	ee07 3a90 	vmov	s15, r3
}
 8005a40:	eeb0 0a67 	vmov.f32	s0, s15
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d10e      	bne.n	8005a80 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005a62:	f001 fe27 	bl	80076b4 <cppFlip100ns>

		tim7_timer++;
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005a6e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005a70:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d902      	bls.n	8005a80 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005a7a:	4b18      	ldr	r3, [pc, #96]	; (8005adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005a8a:	f001 fdc9 	bl	8007620 <cppFlip1ms>

		tim6_timer++;
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005a96:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d902      	bls.n	8005aa8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005aa2:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005ab2:	f001 fe09 	bl	80076c8 <cppFlip10ms>

		tim13_timer++;
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	; (8005af0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005abe:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a06      	ldr	r2, [pc, #24]	; (8005ae0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d902      	bls.n	8005ad0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
	}

}
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40001400 	.word	0x40001400
 8005adc:	2003fa78 	.word	0x2003fa78
 8005ae0:	0001869f 	.word	0x0001869f
 8005ae4:	40001000 	.word	0x40001000
 8005ae8:	2003fa34 	.word	0x2003fa34
 8005aec:	40001c00 	.word	0x40001c00
 8005af0:	2003fa7c 	.word	0x2003fa7c

08005af4 <init>:

void init()
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005af8:	2201      	movs	r2, #1
 8005afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005afe:	4808      	ldr	r0, [pc, #32]	; (8005b20 <init+0x2c>)
 8005b00:	f005 f8f8 	bl	800acf4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005b04:	4807      	ldr	r0, [pc, #28]	; (8005b24 <init+0x30>)
 8005b06:	f008 ffc0 	bl	800ea8a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005b0a:	4807      	ldr	r0, [pc, #28]	; (8005b28 <init+0x34>)
 8005b0c:	f008 ffbd 	bl	800ea8a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005b10:	4806      	ldr	r0, [pc, #24]	; (8005b2c <init+0x38>)
 8005b12:	f008 ffba 	bl	800ea8a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005b16:	f001 fce3 	bl	80074e0 <cppInit>

	//path_following_initialize();

}
 8005b1a:	bf00      	nop
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000
 8005b24:	2003fb60 	.word	0x2003fb60
 8005b28:	2003fd04 	.word	0x2003fd04
 8005b2c:	2003fa80 	.word	0x2003fa80

08005b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b34:	f003 fdd6 	bl	80096e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b38:	f000 f82a 	bl	8005b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b3c:	f000 fdbc 	bl	80066b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b40:	f000 fd8a 	bl	8006658 <MX_DMA_Init>
  MX_I2C2_Init();
 8005b44:	f000 f9e8 	bl	8005f18 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005b48:	f000 fa14 	bl	8005f74 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005b4c:	f000 fa32 	bl	8005fb4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005b50:	f000 fa66 	bl	8006020 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005b54:	f000 fb70 	bl	8006238 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005b58:	f000 fc3c 	bl	80063d4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005b5c:	f000 fd52 	bl	8006604 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005b60:	f00a ff66 	bl	8010a30 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005b64:	f000 fbcc 	bl	8006300 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005b68:	f000 f9a8 	bl	8005ebc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005b6c:	f000 fb00 	bl	8006170 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005b70:	f000 fc88 	bl	8006484 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005b74:	f000 fcd4 	bl	8006520 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005b78:	f000 f898 	bl	8005cac <MX_ADC2_Init>
  MX_TIM7_Init();
 8005b7c:	f000 fbf6 	bl	800636c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005b80:	f000 fd1c 	bl	80065bc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005b84:	f7ff ffb6 	bl	8005af4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005b88:	f001 fdb6 	bl	80076f8 <cppLoop>
 8005b8c:	e7fc      	b.n	8005b88 <main+0x58>
	...

08005b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b0a4      	sub	sp, #144	; 0x90
 8005b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005b9a:	2234      	movs	r2, #52	; 0x34
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f00f fb91 	bl	80152c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bb4:	f107 030c 	add.w	r3, r7, #12
 8005bb8:	223c      	movs	r2, #60	; 0x3c
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f00f fb82 	bl	80152c6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <SystemClock_Config+0x114>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	4a36      	ldr	r2, [pc, #216]	; (8005ca4 <SystemClock_Config+0x114>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bd2:	4b34      	ldr	r3, [pc, #208]	; (8005ca4 <SystemClock_Config+0x114>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bde:	2300      	movs	r3, #0
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <SystemClock_Config+0x118>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a30      	ldr	r2, [pc, #192]	; (8005ca8 <SystemClock_Config+0x118>)
 8005be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <SystemClock_Config+0x118>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c04:	2302      	movs	r3, #2
 8005c06:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c0c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005c0e:	2308      	movs	r3, #8
 8005c10:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005c12:	23b4      	movs	r3, #180	; 0xb4
 8005c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005c1e:	2308      	movs	r3, #8
 8005c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005c24:	2302      	movs	r3, #2
 8005c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f006 fc82 	bl	800c538 <HAL_RCC_OscConfig>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005c3a:	f000 fe7f 	bl	800693c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005c3e:	f005 fffd 	bl	800bc3c <HAL_PWREx_EnableOverDrive>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005c48:	f000 fe78 	bl	800693c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c4c:	230f      	movs	r3, #15
 8005c4e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c50:	2302      	movs	r3, #2
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c54:	2300      	movs	r3, #0
 8005c56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005c58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005c5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c62:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005c64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c68:	2105      	movs	r1, #5
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f006 f836 	bl	800bcdc <HAL_RCC_ClockConfig>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005c76:	f000 fe61 	bl	800693c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005c7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005c7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005c80:	2300      	movs	r3, #0
 8005c82:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005c84:	2300      	movs	r3, #0
 8005c86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c88:	f107 030c 	add.w	r3, r7, #12
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f006 fa15 	bl	800c0bc <HAL_RCCEx_PeriphCLKConfig>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005c98:	f000 fe50 	bl	800693c <Error_Handler>
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3790      	adds	r7, #144	; 0x90
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40007000 	.word	0x40007000

08005cac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005cbe:	4b7c      	ldr	r3, [pc, #496]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cc0:	4a7c      	ldr	r2, [pc, #496]	; (8005eb4 <MX_ADC2_Init+0x208>)
 8005cc2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005cc4:	4b7a      	ldr	r3, [pc, #488]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005ccc:	4b78      	ldr	r3, [pc, #480]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005cd2:	4b77      	ldr	r3, [pc, #476]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005cd8:	4b75      	ldr	r3, [pc, #468]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005cde:	4b74      	ldr	r3, [pc, #464]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ce6:	4b72      	ldr	r3, [pc, #456]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005cec:	4b70      	ldr	r3, [pc, #448]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cee:	4a72      	ldr	r2, [pc, #456]	; (8005eb8 <MX_ADC2_Init+0x20c>)
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005cf2:	4b6f      	ldr	r3, [pc, #444]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005cf8:	4b6d      	ldr	r3, [pc, #436]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005cfa:	220e      	movs	r2, #14
 8005cfc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005cfe:	4b6c      	ldr	r3, [pc, #432]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d06:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005d0c:	4868      	ldr	r0, [pc, #416]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d0e:	f003 fd7d 	bl	800980c <HAL_ADC_Init>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005d18:	f000 fe10 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005d1c:	230a      	movs	r3, #10
 8005d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005d20:	2301      	movs	r3, #1
 8005d22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005d24:	2306      	movs	r3, #6
 8005d26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d28:	463b      	mov	r3, r7
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4860      	ldr	r0, [pc, #384]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d2e:	f003 fec1 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005d38:	f000 fe00 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005d3c:	230b      	movs	r3, #11
 8005d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005d40:	2302      	movs	r3, #2
 8005d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d44:	463b      	mov	r3, r7
 8005d46:	4619      	mov	r1, r3
 8005d48:	4859      	ldr	r0, [pc, #356]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d4a:	f003 feb3 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005d54:	f000 fdf2 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005d58:	230c      	movs	r3, #12
 8005d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d60:	463b      	mov	r3, r7
 8005d62:	4619      	mov	r1, r3
 8005d64:	4852      	ldr	r0, [pc, #328]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d66:	f003 fea5 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005d70:	f000 fde4 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005d74:	230d      	movs	r3, #13
 8005d76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005d78:	2304      	movs	r3, #4
 8005d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	4619      	mov	r1, r3
 8005d80:	484b      	ldr	r0, [pc, #300]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d82:	f003 fe97 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005d8c:	f000 fdd6 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005d94:	2305      	movs	r3, #5
 8005d96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d98:	463b      	mov	r3, r7
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4844      	ldr	r0, [pc, #272]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005d9e:	f003 fe89 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005da8:	f000 fdc8 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005dac:	2301      	movs	r3, #1
 8005dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005db0:	2306      	movs	r3, #6
 8005db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005db4:	463b      	mov	r3, r7
 8005db6:	4619      	mov	r1, r3
 8005db8:	483d      	ldr	r0, [pc, #244]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005dba:	f003 fe7b 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005dc4:	f000 fdba 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005dcc:	2307      	movs	r3, #7
 8005dce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4836      	ldr	r0, [pc, #216]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005dd6:	f003 fe6d 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005de0:	f000 fdac 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005de4:	2303      	movs	r3, #3
 8005de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005de8:	2308      	movs	r3, #8
 8005dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005dec:	463b      	mov	r3, r7
 8005dee:	4619      	mov	r1, r3
 8005df0:	482f      	ldr	r0, [pc, #188]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005df2:	f003 fe5f 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005dfc:	f000 fd9e 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005e00:	2304      	movs	r3, #4
 8005e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005e04:	2309      	movs	r3, #9
 8005e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e08:	463b      	mov	r3, r7
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4828      	ldr	r0, [pc, #160]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005e0e:	f003 fe51 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005e18:	f000 fd90 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005e1c:	2305      	movs	r3, #5
 8005e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005e20:	230a      	movs	r3, #10
 8005e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e24:	463b      	mov	r3, r7
 8005e26:	4619      	mov	r1, r3
 8005e28:	4821      	ldr	r0, [pc, #132]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005e2a:	f003 fe43 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005e34:	f000 fd82 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005e38:	2306      	movs	r3, #6
 8005e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005e3c:	230b      	movs	r3, #11
 8005e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e40:	463b      	mov	r3, r7
 8005e42:	4619      	mov	r1, r3
 8005e44:	481a      	ldr	r0, [pc, #104]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005e46:	f003 fe35 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005e50:	f000 fd74 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005e54:	2307      	movs	r3, #7
 8005e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005e58:	230c      	movs	r3, #12
 8005e5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4813      	ldr	r0, [pc, #76]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005e62:	f003 fe27 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005e6c:	f000 fd66 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005e70:	2308      	movs	r3, #8
 8005e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005e74:	230d      	movs	r3, #13
 8005e76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e78:	463b      	mov	r3, r7
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	480c      	ldr	r0, [pc, #48]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005e7e:	f003 fe19 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005e88:	f000 fd58 	bl	800693c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005e8c:	2309      	movs	r3, #9
 8005e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005e90:	230e      	movs	r3, #14
 8005e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e94:	463b      	mov	r3, r7
 8005e96:	4619      	mov	r1, r3
 8005e98:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <MX_ADC2_Init+0x204>)
 8005e9a:	f003 fe0b 	bl	8009ab4 <HAL_ADC_ConfigChannel>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005ea4:	f000 fd4a 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	2003f904 	.word	0x2003f904
 8005eb4:	40012100 	.word	0x40012100
 8005eb8:	0f000001 	.word	0x0f000001

08005ebc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005ec0:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005ec2:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <MX_I2C1_Init+0x54>)
 8005ec4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005ec8:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <MX_I2C1_Init+0x58>)
 8005eca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ede:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005ef4:	2280      	movs	r2, #128	; 0x80
 8005ef6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ef8:	4804      	ldr	r0, [pc, #16]	; (8005f0c <MX_I2C1_Init+0x50>)
 8005efa:	f004 ff15 	bl	800ad28 <HAL_I2C_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005f04:	f000 fd1a 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005f08:	bf00      	nop
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2003f94c 	.word	0x2003f94c
 8005f10:	40005400 	.word	0x40005400
 8005f14:	000186a0 	.word	0x000186a0

08005f18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005f1c:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f1e:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <MX_I2C2_Init+0x54>)
 8005f20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005f22:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f24:	4a12      	ldr	r2, [pc, #72]	; (8005f70 <MX_I2C2_Init+0x58>)
 8005f26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005f2e:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f34:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005f42:	4b09      	ldr	r3, [pc, #36]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f50:	2280      	movs	r2, #128	; 0x80
 8005f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005f54:	4804      	ldr	r0, [pc, #16]	; (8005f68 <MX_I2C2_Init+0x50>)
 8005f56:	f004 fee7 	bl	800ad28 <HAL_I2C_Init>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005f60:	f000 fcec 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005f64:	bf00      	nop
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	2003f9e0 	.word	0x2003f9e0
 8005f6c:	40005800 	.word	0x40005800
 8005f70:	000186a0 	.word	0x000186a0

08005f74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005f78:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <MX_SDIO_SD_Init+0x38>)
 8005f7a:	4a0d      	ldr	r2, [pc, #52]	; (8005fb0 <MX_SDIO_SD_Init+0x3c>)
 8005f7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <MX_SDIO_SD_Init+0x38>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005f84:	4b09      	ldr	r3, [pc, #36]	; (8005fac <MX_SDIO_SD_Init+0x38>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005f8a:	4b08      	ldr	r3, [pc, #32]	; (8005fac <MX_SDIO_SD_Init+0x38>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <MX_SDIO_SD_Init+0x38>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f96:	4b05      	ldr	r3, [pc, #20]	; (8005fac <MX_SDIO_SD_Init+0x38>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <MX_SDIO_SD_Init+0x38>)
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005fa2:	bf00      	nop
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	2003fbe0 	.word	0x2003fbe0
 8005fb0:	40012c00 	.word	0x40012c00

08005fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fba:	4a18      	ldr	r2, [pc, #96]	; (800601c <MX_SPI2_Init+0x68>)
 8005fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005fbe:	4b16      	ldr	r3, [pc, #88]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005fc6:	4b14      	ldr	r3, [pc, #80]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005fcc:	4b12      	ldr	r3, [pc, #72]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005fd2:	4b11      	ldr	r3, [pc, #68]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005fde:	4b0e      	ldr	r3, [pc, #56]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fe8:	2228      	movs	r2, #40	; 0x28
 8005fea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <MX_SPI2_Init+0x64>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ff2:	4b09      	ldr	r3, [pc, #36]	; (8006018 <MX_SPI2_Init+0x64>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ff8:	4b07      	ldr	r3, [pc, #28]	; (8006018 <MX_SPI2_Init+0x64>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <MX_SPI2_Init+0x64>)
 8006000:	220a      	movs	r2, #10
 8006002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006004:	4804      	ldr	r0, [pc, #16]	; (8006018 <MX_SPI2_Init+0x64>)
 8006006:	f007 ffc1 	bl	800df8c <HAL_SPI_Init>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006010:	f000 fc94 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006014:	bf00      	nop
 8006016:	bd80      	pop	{r7, pc}
 8006018:	2003f82c 	.word	0x2003f82c
 800601c:	40003800 	.word	0x40003800

08006020 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b09a      	sub	sp, #104	; 0x68
 8006024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006026:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800602a:	2224      	movs	r2, #36	; 0x24
 800602c:	2100      	movs	r1, #0
 800602e:	4618      	mov	r0, r3
 8006030:	f00f f949 	bl	80152c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006034:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800603e:	f107 0320 	add.w	r3, r7, #32
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	605a      	str	r2, [r3, #4]
 8006048:	609a      	str	r2, [r3, #8]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	611a      	str	r2, [r3, #16]
 800604e:	615a      	str	r2, [r3, #20]
 8006050:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006052:	463b      	mov	r3, r7
 8006054:	2220      	movs	r2, #32
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f00f f934 	bl	80152c6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <MX_TIM1_Init+0x148>)
 8006060:	4a42      	ldr	r2, [pc, #264]	; (800616c <MX_TIM1_Init+0x14c>)
 8006062:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006064:	4b40      	ldr	r3, [pc, #256]	; (8006168 <MX_TIM1_Init+0x148>)
 8006066:	2200      	movs	r2, #0
 8006068:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800606a:	4b3f      	ldr	r3, [pc, #252]	; (8006168 <MX_TIM1_Init+0x148>)
 800606c:	2200      	movs	r2, #0
 800606e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006070:	4b3d      	ldr	r3, [pc, #244]	; (8006168 <MX_TIM1_Init+0x148>)
 8006072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006076:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006078:	4b3b      	ldr	r3, [pc, #236]	; (8006168 <MX_TIM1_Init+0x148>)
 800607a:	2200      	movs	r2, #0
 800607c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800607e:	4b3a      	ldr	r3, [pc, #232]	; (8006168 <MX_TIM1_Init+0x148>)
 8006080:	2200      	movs	r2, #0
 8006082:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006084:	4b38      	ldr	r3, [pc, #224]	; (8006168 <MX_TIM1_Init+0x148>)
 8006086:	2200      	movs	r2, #0
 8006088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800608a:	4837      	ldr	r0, [pc, #220]	; (8006168 <MX_TIM1_Init+0x148>)
 800608c:	f008 fd21 	bl	800ead2 <HAL_TIM_PWM_Init>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006096:	f000 fc51 	bl	800693c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800609a:	2303      	movs	r3, #3
 800609c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800609e:	2300      	movs	r3, #0
 80060a0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80060a2:	2301      	movs	r3, #1
 80060a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80060a6:	2300      	movs	r3, #0
 80060a8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80060ae:	2300      	movs	r3, #0
 80060b0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80060b2:	2301      	movs	r3, #1
 80060b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80060b6:	2300      	movs	r3, #0
 80060b8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80060be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060c2:	4619      	mov	r1, r3
 80060c4:	4828      	ldr	r0, [pc, #160]	; (8006168 <MX_TIM1_Init+0x148>)
 80060c6:	f008 fd6d 	bl	800eba4 <HAL_TIM_Encoder_Init>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80060d0:	f000 fc34 	bl	800693c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060d4:	2300      	movs	r3, #0
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80060dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060e0:	4619      	mov	r1, r3
 80060e2:	4821      	ldr	r0, [pc, #132]	; (8006168 <MX_TIM1_Init+0x148>)
 80060e4:	f009 fa94 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80060ee:	f000 fc25 	bl	800693c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060f2:	2360      	movs	r3, #96	; 0x60
 80060f4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060fa:	2300      	movs	r3, #0
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80060fe:	2300      	movs	r3, #0
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006102:	2300      	movs	r3, #0
 8006104:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006106:	2300      	movs	r3, #0
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800610a:	2300      	movs	r3, #0
 800610c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800610e:	f107 0320 	add.w	r3, r7, #32
 8006112:	2208      	movs	r2, #8
 8006114:	4619      	mov	r1, r3
 8006116:	4814      	ldr	r0, [pc, #80]	; (8006168 <MX_TIM1_Init+0x148>)
 8006118:	f008 ff16 	bl	800ef48 <HAL_TIM_PWM_ConfigChannel>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006122:	f000 fc0b 	bl	800693c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006126:	2300      	movs	r3, #0
 8006128:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006136:	2300      	movs	r3, #0
 8006138:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800613a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800613e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006144:	463b      	mov	r3, r7
 8006146:	4619      	mov	r1, r3
 8006148:	4807      	ldr	r0, [pc, #28]	; (8006168 <MX_TIM1_Init+0x148>)
 800614a:	f009 fadd 	bl	800f708 <HAL_TIMEx_ConfigBreakDeadTime>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006154:	f000 fbf2 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006158:	4803      	ldr	r0, [pc, #12]	; (8006168 <MX_TIM1_Init+0x148>)
 800615a:	f000 ffdf 	bl	800711c <HAL_TIM_MspPostInit>

}
 800615e:	bf00      	nop
 8006160:	3768      	adds	r7, #104	; 0x68
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2003fba0 	.word	0x2003fba0
 800616c:	40010000 	.word	0x40010000

08006170 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006176:	f107 0320 	add.w	r3, r7, #32
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006180:	1d3b      	adds	r3, r7, #4
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	609a      	str	r2, [r3, #8]
 800618a:	60da      	str	r2, [r3, #12]
 800618c:	611a      	str	r2, [r3, #16]
 800618e:	615a      	str	r2, [r3, #20]
 8006190:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006192:	4b27      	ldr	r3, [pc, #156]	; (8006230 <MX_TIM3_Init+0xc0>)
 8006194:	4a27      	ldr	r2, [pc, #156]	; (8006234 <MX_TIM3_Init+0xc4>)
 8006196:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006198:	4b25      	ldr	r3, [pc, #148]	; (8006230 <MX_TIM3_Init+0xc0>)
 800619a:	2200      	movs	r2, #0
 800619c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800619e:	4b24      	ldr	r3, [pc, #144]	; (8006230 <MX_TIM3_Init+0xc0>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80061a4:	4b22      	ldr	r3, [pc, #136]	; (8006230 <MX_TIM3_Init+0xc0>)
 80061a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061ac:	4b20      	ldr	r3, [pc, #128]	; (8006230 <MX_TIM3_Init+0xc0>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061b2:	4b1f      	ldr	r3, [pc, #124]	; (8006230 <MX_TIM3_Init+0xc0>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80061b8:	481d      	ldr	r0, [pc, #116]	; (8006230 <MX_TIM3_Init+0xc0>)
 80061ba:	f008 fc8a 	bl	800ead2 <HAL_TIM_PWM_Init>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80061c4:	f000 fbba 	bl	800693c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061c8:	2300      	movs	r3, #0
 80061ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80061d0:	f107 0320 	add.w	r3, r7, #32
 80061d4:	4619      	mov	r1, r3
 80061d6:	4816      	ldr	r0, [pc, #88]	; (8006230 <MX_TIM3_Init+0xc0>)
 80061d8:	f009 fa1a 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80061e2:	f000 fbab 	bl	800693c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061e6:	2360      	movs	r3, #96	; 0x60
 80061e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80061f6:	1d3b      	adds	r3, r7, #4
 80061f8:	2200      	movs	r2, #0
 80061fa:	4619      	mov	r1, r3
 80061fc:	480c      	ldr	r0, [pc, #48]	; (8006230 <MX_TIM3_Init+0xc0>)
 80061fe:	f008 fea3 	bl	800ef48 <HAL_TIM_PWM_ConfigChannel>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006208:	f000 fb98 	bl	800693c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800620c:	1d3b      	adds	r3, r7, #4
 800620e:	2204      	movs	r2, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4807      	ldr	r0, [pc, #28]	; (8006230 <MX_TIM3_Init+0xc0>)
 8006214:	f008 fe98 	bl	800ef48 <HAL_TIM_PWM_ConfigChannel>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800621e:	f000 fb8d 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006222:	4803      	ldr	r0, [pc, #12]	; (8006230 <MX_TIM3_Init+0xc0>)
 8006224:	f000 ff7a 	bl	800711c <HAL_TIM_MspPostInit>

}
 8006228:	bf00      	nop
 800622a:	3728      	adds	r7, #40	; 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	2003fa38 	.word	0x2003fa38
 8006234:	40000400 	.word	0x40000400

08006238 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800623e:	f107 0320 	add.w	r3, r7, #32
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	609a      	str	r2, [r3, #8]
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	611a      	str	r2, [r3, #16]
 8006256:	615a      	str	r2, [r3, #20]
 8006258:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800625a:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <MX_TIM4_Init+0xc0>)
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <MX_TIM4_Init+0xc4>)
 800625e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006260:	4b25      	ldr	r3, [pc, #148]	; (80062f8 <MX_TIM4_Init+0xc0>)
 8006262:	2200      	movs	r2, #0
 8006264:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <MX_TIM4_Init+0xc0>)
 8006268:	2200      	movs	r2, #0
 800626a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800626c:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <MX_TIM4_Init+0xc0>)
 800626e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006272:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006274:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <MX_TIM4_Init+0xc0>)
 8006276:	2200      	movs	r2, #0
 8006278:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <MX_TIM4_Init+0xc0>)
 800627c:	2200      	movs	r2, #0
 800627e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006280:	481d      	ldr	r0, [pc, #116]	; (80062f8 <MX_TIM4_Init+0xc0>)
 8006282:	f008 fc26 	bl	800ead2 <HAL_TIM_PWM_Init>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800628c:	f000 fb56 	bl	800693c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006290:	2300      	movs	r3, #0
 8006292:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006294:	2300      	movs	r3, #0
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006298:	f107 0320 	add.w	r3, r7, #32
 800629c:	4619      	mov	r1, r3
 800629e:	4816      	ldr	r0, [pc, #88]	; (80062f8 <MX_TIM4_Init+0xc0>)
 80062a0:	f009 f9b6 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80062aa:	f000 fb47 	bl	800693c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062ae:	2360      	movs	r3, #96	; 0x60
 80062b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	2208      	movs	r2, #8
 80062c2:	4619      	mov	r1, r3
 80062c4:	480c      	ldr	r0, [pc, #48]	; (80062f8 <MX_TIM4_Init+0xc0>)
 80062c6:	f008 fe3f 	bl	800ef48 <HAL_TIM_PWM_ConfigChannel>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80062d0:	f000 fb34 	bl	800693c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	220c      	movs	r2, #12
 80062d8:	4619      	mov	r1, r3
 80062da:	4807      	ldr	r0, [pc, #28]	; (80062f8 <MX_TIM4_Init+0xc0>)
 80062dc:	f008 fe34 	bl	800ef48 <HAL_TIM_PWM_ConfigChannel>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80062e6:	f000 fb29 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80062ea:	4803      	ldr	r0, [pc, #12]	; (80062f8 <MX_TIM4_Init+0xc0>)
 80062ec:	f000 ff16 	bl	800711c <HAL_TIM_MspPostInit>

}
 80062f0:	bf00      	nop
 80062f2:	3728      	adds	r7, #40	; 0x28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	2003f8c4 	.word	0x2003f8c4
 80062fc:	40000800 	.word	0x40000800

08006300 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006306:	463b      	mov	r3, r7
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <MX_TIM6_Init+0x64>)
 8006310:	4a15      	ldr	r2, [pc, #84]	; (8006368 <MX_TIM6_Init+0x68>)
 8006312:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006314:	4b13      	ldr	r3, [pc, #76]	; (8006364 <MX_TIM6_Init+0x64>)
 8006316:	2259      	movs	r2, #89	; 0x59
 8006318:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <MX_TIM6_Init+0x64>)
 800631c:	2200      	movs	r2, #0
 800631e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006320:	4b10      	ldr	r3, [pc, #64]	; (8006364 <MX_TIM6_Init+0x64>)
 8006322:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006326:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <MX_TIM6_Init+0x64>)
 800632a:	2280      	movs	r2, #128	; 0x80
 800632c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800632e:	480d      	ldr	r0, [pc, #52]	; (8006364 <MX_TIM6_Init+0x64>)
 8006330:	f008 fb80 	bl	800ea34 <HAL_TIM_Base_Init>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800633a:	f000 faff 	bl	800693c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006342:	2300      	movs	r3, #0
 8006344:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006346:	463b      	mov	r3, r7
 8006348:	4619      	mov	r1, r3
 800634a:	4806      	ldr	r0, [pc, #24]	; (8006364 <MX_TIM6_Init+0x64>)
 800634c:	f009 f960 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006356:	f000 faf1 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	2003fb60 	.word	0x2003fb60
 8006368:	40001000 	.word	0x40001000

0800636c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006372:	463b      	mov	r3, r7
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800637a:	4b14      	ldr	r3, [pc, #80]	; (80063cc <MX_TIM7_Init+0x60>)
 800637c:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <MX_TIM7_Init+0x64>)
 800637e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006380:	4b12      	ldr	r3, [pc, #72]	; (80063cc <MX_TIM7_Init+0x60>)
 8006382:	22b3      	movs	r2, #179	; 0xb3
 8006384:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <MX_TIM7_Init+0x60>)
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <MX_TIM7_Init+0x60>)
 800638e:	2231      	movs	r2, #49	; 0x31
 8006390:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <MX_TIM7_Init+0x60>)
 8006394:	2280      	movs	r2, #128	; 0x80
 8006396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006398:	480c      	ldr	r0, [pc, #48]	; (80063cc <MX_TIM7_Init+0x60>)
 800639a:	f008 fb4b 	bl	800ea34 <HAL_TIM_Base_Init>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80063a4:	f000 faca 	bl	800693c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063a8:	2300      	movs	r3, #0
 80063aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80063b0:	463b      	mov	r3, r7
 80063b2:	4619      	mov	r1, r3
 80063b4:	4805      	ldr	r0, [pc, #20]	; (80063cc <MX_TIM7_Init+0x60>)
 80063b6:	f009 f92b 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80063c0:	f000 fabc 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2003fd04 	.word	0x2003fd04
 80063d0:	40001400 	.word	0x40001400

080063d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80063da:	f107 030c 	add.w	r3, r7, #12
 80063de:	2224      	movs	r2, #36	; 0x24
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f00e ff6f 	bl	80152c6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80063f0:	4b22      	ldr	r3, [pc, #136]	; (800647c <MX_TIM8_Init+0xa8>)
 80063f2:	4a23      	ldr	r2, [pc, #140]	; (8006480 <MX_TIM8_Init+0xac>)
 80063f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80063f6:	4b21      	ldr	r3, [pc, #132]	; (800647c <MX_TIM8_Init+0xa8>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80063fc:	4b1f      	ldr	r3, [pc, #124]	; (800647c <MX_TIM8_Init+0xa8>)
 80063fe:	2210      	movs	r2, #16
 8006400:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006402:	4b1e      	ldr	r3, [pc, #120]	; (800647c <MX_TIM8_Init+0xa8>)
 8006404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006408:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800640a:	4b1c      	ldr	r3, [pc, #112]	; (800647c <MX_TIM8_Init+0xa8>)
 800640c:	2200      	movs	r2, #0
 800640e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006410:	4b1a      	ldr	r3, [pc, #104]	; (800647c <MX_TIM8_Init+0xa8>)
 8006412:	2200      	movs	r2, #0
 8006414:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006416:	4b19      	ldr	r3, [pc, #100]	; (800647c <MX_TIM8_Init+0xa8>)
 8006418:	2200      	movs	r2, #0
 800641a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800641c:	2303      	movs	r3, #3
 800641e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006428:	2300      	movs	r3, #0
 800642a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006430:	2300      	movs	r3, #0
 8006432:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006434:	2301      	movs	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006438:	2300      	movs	r3, #0
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006440:	f107 030c 	add.w	r3, r7, #12
 8006444:	4619      	mov	r1, r3
 8006446:	480d      	ldr	r0, [pc, #52]	; (800647c <MX_TIM8_Init+0xa8>)
 8006448:	f008 fbac 	bl	800eba4 <HAL_TIM_Encoder_Init>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006452:	f000 fa73 	bl	800693c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006456:	2300      	movs	r3, #0
 8006458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	4619      	mov	r1, r3
 8006462:	4806      	ldr	r0, [pc, #24]	; (800647c <MX_TIM8_Init+0xa8>)
 8006464:	f009 f8d4 	bl	800f610 <HAL_TIMEx_MasterConfigSynchronization>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800646e:	f000 fa65 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006472:	bf00      	nop
 8006474:	3730      	adds	r7, #48	; 0x30
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2003f884 	.word	0x2003f884
 8006480:	40010400 	.word	0x40010400

08006484 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	605a      	str	r2, [r3, #4]
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	611a      	str	r2, [r3, #16]
 8006498:	615a      	str	r2, [r3, #20]
 800649a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800649c:	4b1e      	ldr	r3, [pc, #120]	; (8006518 <MX_TIM10_Init+0x94>)
 800649e:	4a1f      	ldr	r2, [pc, #124]	; (800651c <MX_TIM10_Init+0x98>)
 80064a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80064a2:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <MX_TIM10_Init+0x94>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064a8:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <MX_TIM10_Init+0x94>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80064ae:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <MX_TIM10_Init+0x94>)
 80064b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064b6:	4b18      	ldr	r3, [pc, #96]	; (8006518 <MX_TIM10_Init+0x94>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064bc:	4b16      	ldr	r3, [pc, #88]	; (8006518 <MX_TIM10_Init+0x94>)
 80064be:	2200      	movs	r2, #0
 80064c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80064c2:	4815      	ldr	r0, [pc, #84]	; (8006518 <MX_TIM10_Init+0x94>)
 80064c4:	f008 fab6 	bl	800ea34 <HAL_TIM_Base_Init>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80064ce:	f000 fa35 	bl	800693c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80064d2:	4811      	ldr	r0, [pc, #68]	; (8006518 <MX_TIM10_Init+0x94>)
 80064d4:	f008 fafd 	bl	800ead2 <HAL_TIM_PWM_Init>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80064de:	f000 fa2d 	bl	800693c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064e2:	2360      	movs	r3, #96	; 0x60
 80064e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	2200      	movs	r2, #0
 80064f6:	4619      	mov	r1, r3
 80064f8:	4807      	ldr	r0, [pc, #28]	; (8006518 <MX_TIM10_Init+0x94>)
 80064fa:	f008 fd25 	bl	800ef48 <HAL_TIM_PWM_ConfigChannel>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006504:	f000 fa1a 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006508:	4803      	ldr	r0, [pc, #12]	; (8006518 <MX_TIM10_Init+0x94>)
 800650a:	f000 fe07 	bl	800711c <HAL_TIM_MspPostInit>

}
 800650e:	bf00      	nop
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	2003f9a0 	.word	0x2003f9a0
 800651c:	40014400 	.word	0x40014400

08006520 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006526:	1d3b      	adds	r3, r7, #4
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	605a      	str	r2, [r3, #4]
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	611a      	str	r2, [r3, #16]
 8006534:	615a      	str	r2, [r3, #20]
 8006536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006538:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <MX_TIM11_Init+0x94>)
 800653a:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <MX_TIM11_Init+0x98>)
 800653c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800653e:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <MX_TIM11_Init+0x94>)
 8006540:	2200      	movs	r2, #0
 8006542:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006544:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <MX_TIM11_Init+0x94>)
 8006546:	2200      	movs	r2, #0
 8006548:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800654a:	4b1a      	ldr	r3, [pc, #104]	; (80065b4 <MX_TIM11_Init+0x94>)
 800654c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006550:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006552:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <MX_TIM11_Init+0x94>)
 8006554:	2200      	movs	r2, #0
 8006556:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006558:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <MX_TIM11_Init+0x94>)
 800655a:	2200      	movs	r2, #0
 800655c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800655e:	4815      	ldr	r0, [pc, #84]	; (80065b4 <MX_TIM11_Init+0x94>)
 8006560:	f008 fa68 	bl	800ea34 <HAL_TIM_Base_Init>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800656a:	f000 f9e7 	bl	800693c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800656e:	4811      	ldr	r0, [pc, #68]	; (80065b4 <MX_TIM11_Init+0x94>)
 8006570:	f008 faaf 	bl	800ead2 <HAL_TIM_PWM_Init>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800657a:	f000 f9df 	bl	800693c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800657e:	2360      	movs	r3, #96	; 0x60
 8006580:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	2200      	movs	r2, #0
 8006592:	4619      	mov	r1, r3
 8006594:	4807      	ldr	r0, [pc, #28]	; (80065b4 <MX_TIM11_Init+0x94>)
 8006596:	f008 fcd7 	bl	800ef48 <HAL_TIM_PWM_ConfigChannel>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80065a0:	f000 f9cc 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80065a4:	4803      	ldr	r0, [pc, #12]	; (80065b4 <MX_TIM11_Init+0x94>)
 80065a6:	f000 fdb9 	bl	800711c <HAL_TIM_MspPostInit>

}
 80065aa:	bf00      	nop
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	2003fac0 	.word	0x2003fac0
 80065b8:	40014800 	.word	0x40014800

080065bc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <MX_TIM13_Init+0x40>)
 80065c2:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <MX_TIM13_Init+0x44>)
 80065c4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <MX_TIM13_Init+0x40>)
 80065c8:	2259      	movs	r2, #89	; 0x59
 80065ca:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <MX_TIM13_Init+0x40>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <MX_TIM13_Init+0x40>)
 80065d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80065d8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065da:	4b08      	ldr	r3, [pc, #32]	; (80065fc <MX_TIM13_Init+0x40>)
 80065dc:	2200      	movs	r2, #0
 80065de:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <MX_TIM13_Init+0x40>)
 80065e2:	2280      	movs	r2, #128	; 0x80
 80065e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80065e6:	4805      	ldr	r0, [pc, #20]	; (80065fc <MX_TIM13_Init+0x40>)
 80065e8:	f008 fa24 	bl	800ea34 <HAL_TIM_Base_Init>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80065f2:	f000 f9a3 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2003fa80 	.word	0x2003fa80
 8006600:	40001c00 	.word	0x40001c00

08006604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 800660a:	4a12      	ldr	r2, [pc, #72]	; (8006654 <MX_USART2_UART_Init+0x50>)
 800660c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800660e:	4b10      	ldr	r3, [pc, #64]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 8006610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006616:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 8006618:	2200      	movs	r2, #0
 800661a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800661c:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 800661e:	2200      	movs	r2, #0
 8006620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006622:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 8006624:	2200      	movs	r2, #0
 8006626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006628:	4b09      	ldr	r3, [pc, #36]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 800662a:	220c      	movs	r2, #12
 800662c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800662e:	4b08      	ldr	r3, [pc, #32]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 8006630:	2200      	movs	r2, #0
 8006632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006634:	4b06      	ldr	r3, [pc, #24]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 8006636:	2200      	movs	r2, #0
 8006638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800663a:	4805      	ldr	r0, [pc, #20]	; (8006650 <MX_USART2_UART_Init+0x4c>)
 800663c:	f009 f8ca 	bl	800f7d4 <HAL_UART_Init>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006646:	f000 f979 	bl	800693c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800664a:	bf00      	nop
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	2003fc64 	.word	0x2003fc64
 8006654:	40004400 	.word	0x40004400

08006658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <MX_DMA_Init+0x5c>)
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <MX_DMA_Init+0x5c>)
 8006668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800666c:	6313      	str	r3, [r2, #48]	; 0x30
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <MX_DMA_Init+0x5c>)
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800667a:	2200      	movs	r2, #0
 800667c:	2100      	movs	r1, #0
 800667e:	203a      	movs	r0, #58	; 0x3a
 8006680:	f003 fda3 	bl	800a1ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006684:	203a      	movs	r0, #58	; 0x3a
 8006686:	f003 fdbc 	bl	800a202 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	203b      	movs	r0, #59	; 0x3b
 8006690:	f003 fd9b 	bl	800a1ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006694:	203b      	movs	r0, #59	; 0x3b
 8006696:	f003 fdb4 	bl	800a202 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800669a:	2200      	movs	r2, #0
 800669c:	2100      	movs	r1, #0
 800669e:	2045      	movs	r0, #69	; 0x45
 80066a0:	f003 fd93 	bl	800a1ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80066a4:	2045      	movs	r0, #69	; 0x45
 80066a6:	f003 fdac 	bl	800a202 <HAL_NVIC_EnableIRQ>

}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800

080066b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066be:	f107 031c 	add.w	r3, r7, #28
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	605a      	str	r2, [r3, #4]
 80066c8:	609a      	str	r2, [r3, #8]
 80066ca:	60da      	str	r2, [r3, #12]
 80066cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	4b94      	ldr	r3, [pc, #592]	; (8006924 <MX_GPIO_Init+0x26c>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a93      	ldr	r2, [pc, #588]	; (8006924 <MX_GPIO_Init+0x26c>)
 80066d8:	f043 0310 	orr.w	r3, r3, #16
 80066dc:	6313      	str	r3, [r2, #48]	; 0x30
 80066de:	4b91      	ldr	r3, [pc, #580]	; (8006924 <MX_GPIO_Init+0x26c>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	4b8d      	ldr	r3, [pc, #564]	; (8006924 <MX_GPIO_Init+0x26c>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	4a8c      	ldr	r2, [pc, #560]	; (8006924 <MX_GPIO_Init+0x26c>)
 80066f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f8:	6313      	str	r3, [r2, #48]	; 0x30
 80066fa:	4b8a      	ldr	r3, [pc, #552]	; (8006924 <MX_GPIO_Init+0x26c>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	4b86      	ldr	r3, [pc, #536]	; (8006924 <MX_GPIO_Init+0x26c>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	4a85      	ldr	r2, [pc, #532]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006710:	f043 0304 	orr.w	r3, r3, #4
 8006714:	6313      	str	r3, [r2, #48]	; 0x30
 8006716:	4b83      	ldr	r3, [pc, #524]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	4b7f      	ldr	r3, [pc, #508]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	4a7e      	ldr	r2, [pc, #504]	; (8006924 <MX_GPIO_Init+0x26c>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6313      	str	r3, [r2, #48]	; 0x30
 8006732:	4b7c      	ldr	r3, [pc, #496]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	4b78      	ldr	r3, [pc, #480]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	4a77      	ldr	r2, [pc, #476]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	6313      	str	r3, [r2, #48]	; 0x30
 800674e:	4b75      	ldr	r3, [pc, #468]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	60bb      	str	r3, [r7, #8]
 8006758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	4b71      	ldr	r3, [pc, #452]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	4a70      	ldr	r2, [pc, #448]	; (8006924 <MX_GPIO_Init+0x26c>)
 8006764:	f043 0308 	orr.w	r3, r3, #8
 8006768:	6313      	str	r3, [r2, #48]	; 0x30
 800676a:	4b6e      	ldr	r3, [pc, #440]	; (8006924 <MX_GPIO_Init+0x26c>)
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006776:	2200      	movs	r2, #0
 8006778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800677c:	486a      	ldr	r0, [pc, #424]	; (8006928 <MX_GPIO_Init+0x270>)
 800677e:	f004 fab9 	bl	800acf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006782:	2200      	movs	r2, #0
 8006784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006788:	4868      	ldr	r0, [pc, #416]	; (800692c <MX_GPIO_Init+0x274>)
 800678a:	f004 fab3 	bl	800acf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800678e:	2200      	movs	r2, #0
 8006790:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006794:	4866      	ldr	r0, [pc, #408]	; (8006930 <MX_GPIO_Init+0x278>)
 8006796:	f004 faad 	bl	800acf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800679a:	2200      	movs	r2, #0
 800679c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80067a0:	4864      	ldr	r0, [pc, #400]	; (8006934 <MX_GPIO_Init+0x27c>)
 80067a2:	f004 faa7 	bl	800acf4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80067a6:	2304      	movs	r3, #4
 80067a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067aa:	2300      	movs	r3, #0
 80067ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067b2:	f107 031c 	add.w	r3, r7, #28
 80067b6:	4619      	mov	r1, r3
 80067b8:	485b      	ldr	r0, [pc, #364]	; (8006928 <MX_GPIO_Init+0x270>)
 80067ba:	f004 f8d9 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80067be:	230f      	movs	r3, #15
 80067c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067c2:	2303      	movs	r3, #3
 80067c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067ca:	f107 031c 	add.w	r3, r7, #28
 80067ce:	4619      	mov	r1, r3
 80067d0:	4859      	ldr	r0, [pc, #356]	; (8006938 <MX_GPIO_Init+0x280>)
 80067d2:	f004 f8cd 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80067d6:	23e1      	movs	r3, #225	; 0xe1
 80067d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067da:	2303      	movs	r3, #3
 80067dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e2:	f107 031c 	add.w	r3, r7, #28
 80067e6:	4619      	mov	r1, r3
 80067e8:	4852      	ldr	r0, [pc, #328]	; (8006934 <MX_GPIO_Init+0x27c>)
 80067ea:	f004 f8c1 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80067ee:	2303      	movs	r3, #3
 80067f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067f2:	2303      	movs	r3, #3
 80067f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067fa:	f107 031c 	add.w	r3, r7, #28
 80067fe:	4619      	mov	r1, r3
 8006800:	484a      	ldr	r0, [pc, #296]	; (800692c <MX_GPIO_Init+0x274>)
 8006802:	f004 f8b5 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006806:	2304      	movs	r3, #4
 8006808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800680a:	2300      	movs	r3, #0
 800680c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800680e:	2301      	movs	r3, #1
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006812:	f107 031c 	add.w	r3, r7, #28
 8006816:	4619      	mov	r1, r3
 8006818:	4844      	ldr	r0, [pc, #272]	; (800692c <MX_GPIO_Init+0x274>)
 800681a:	f004 f8a9 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800681e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006824:	2300      	movs	r3, #0
 8006826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006828:	2301      	movs	r3, #1
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800682c:	f107 031c 	add.w	r3, r7, #28
 8006830:	4619      	mov	r1, r3
 8006832:	483d      	ldr	r0, [pc, #244]	; (8006928 <MX_GPIO_Init+0x270>)
 8006834:	f004 f89c 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006838:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800683c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800683e:	2301      	movs	r3, #1
 8006840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006842:	2300      	movs	r3, #0
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006846:	2300      	movs	r3, #0
 8006848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800684a:	f107 031c 	add.w	r3, r7, #28
 800684e:	4619      	mov	r1, r3
 8006850:	4835      	ldr	r0, [pc, #212]	; (8006928 <MX_GPIO_Init+0x270>)
 8006852:	f004 f88d 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800685a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800685c:	2301      	movs	r3, #1
 800685e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006860:	2300      	movs	r3, #0
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006864:	2300      	movs	r3, #0
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006868:	f107 031c 	add.w	r3, r7, #28
 800686c:	4619      	mov	r1, r3
 800686e:	482f      	ldr	r0, [pc, #188]	; (800692c <MX_GPIO_Init+0x274>)
 8006870:	f004 f87e 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800687a:	2300      	movs	r3, #0
 800687c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687e:	2300      	movs	r3, #0
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006882:	f107 031c 	add.w	r3, r7, #28
 8006886:	4619      	mov	r1, r3
 8006888:	4829      	ldr	r0, [pc, #164]	; (8006930 <MX_GPIO_Init+0x278>)
 800688a:	f004 f871 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800688e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006894:	2301      	movs	r3, #1
 8006896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689c:	2300      	movs	r3, #0
 800689e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068a0:	f107 031c 	add.w	r3, r7, #28
 80068a4:	4619      	mov	r1, r3
 80068a6:	4822      	ldr	r0, [pc, #136]	; (8006930 <MX_GPIO_Init+0x278>)
 80068a8:	f004 f862 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80068ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068b2:	2301      	movs	r3, #1
 80068b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068b6:	2301      	movs	r3, #1
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068ba:	2300      	movs	r3, #0
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068be:	f107 031c 	add.w	r3, r7, #28
 80068c2:	4619      	mov	r1, r3
 80068c4:	481a      	ldr	r0, [pc, #104]	; (8006930 <MX_GPIO_Init+0x278>)
 80068c6:	f004 f853 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80068ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068d0:	2301      	movs	r3, #1
 80068d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068d8:	2300      	movs	r3, #0
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068dc:	f107 031c 	add.w	r3, r7, #28
 80068e0:	4619      	mov	r1, r3
 80068e2:	4814      	ldr	r0, [pc, #80]	; (8006934 <MX_GPIO_Init+0x27c>)
 80068e4:	f004 f844 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80068e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068ee:	2300      	movs	r3, #0
 80068f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f6:	f107 031c 	add.w	r3, r7, #28
 80068fa:	4619      	mov	r1, r3
 80068fc:	480d      	ldr	r0, [pc, #52]	; (8006934 <MX_GPIO_Init+0x27c>)
 80068fe:	f004 f837 	bl	800a970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006902:	239b      	movs	r3, #155	; 0x9b
 8006904:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006906:	2300      	movs	r3, #0
 8006908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800690a:	2301      	movs	r3, #1
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800690e:	f107 031c 	add.w	r3, r7, #28
 8006912:	4619      	mov	r1, r3
 8006914:	4806      	ldr	r0, [pc, #24]	; (8006930 <MX_GPIO_Init+0x278>)
 8006916:	f004 f82b 	bl	800a970 <HAL_GPIO_Init>

}
 800691a:	bf00      	nop
 800691c:	3730      	adds	r7, #48	; 0x30
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800
 8006928:	40021000 	.word	0x40021000
 800692c:	40020400 	.word	0x40020400
 8006930:	40020c00 	.word	0x40020c00
 8006934:	40020000 	.word	0x40020000
 8006938:	40020800 	.word	0x40020800

0800693c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006940:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006942:	e7fe      	b.n	8006942 <Error_Handler+0x6>

08006944 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006948:	bf00      	nop
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <HAL_MspInit+0x4c>)
 8006960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006962:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <HAL_MspInit+0x4c>)
 8006964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006968:	6453      	str	r3, [r2, #68]	; 0x44
 800696a:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <HAL_MspInit+0x4c>)
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006972:	607b      	str	r3, [r7, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006976:	2300      	movs	r3, #0
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <HAL_MspInit+0x4c>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <HAL_MspInit+0x4c>)
 8006980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006984:	6413      	str	r3, [r2, #64]	; 0x40
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <HAL_MspInit+0x4c>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40023800 	.word	0x40023800

080069a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08c      	sub	sp, #48	; 0x30
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ac:	f107 031c 	add.w	r3, r7, #28
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	609a      	str	r2, [r3, #8]
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a4a      	ldr	r2, [pc, #296]	; (8006aec <HAL_ADC_MspInit+0x148>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	f040 808e 	bne.w	8006ae4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	4b48      	ldr	r3, [pc, #288]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	4a47      	ldr	r2, [pc, #284]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 80069d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069d6:	6453      	str	r3, [r2, #68]	; 0x44
 80069d8:	4b45      	ldr	r3, [pc, #276]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	4b41      	ldr	r3, [pc, #260]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 80069ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ec:	4a40      	ldr	r2, [pc, #256]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 80069ee:	f043 0304 	orr.w	r3, r3, #4
 80069f2:	6313      	str	r3, [r2, #48]	; 0x30
 80069f4:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	4b3a      	ldr	r3, [pc, #232]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	4a39      	ldr	r2, [pc, #228]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a10:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	4b33      	ldr	r3, [pc, #204]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 8006a26:	f043 0302 	orr.w	r3, r3, #2
 8006a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a2c:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <HAL_ADC_MspInit+0x14c>)
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006a38:	230f      	movs	r3, #15
 8006a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a44:	f107 031c 	add.w	r3, r7, #28
 8006a48:	4619      	mov	r1, r3
 8006a4a:	482a      	ldr	r0, [pc, #168]	; (8006af4 <HAL_ADC_MspInit+0x150>)
 8006a4c:	f003 ff90 	bl	800a970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006a50:	23ff      	movs	r3, #255	; 0xff
 8006a52:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a54:	2303      	movs	r3, #3
 8006a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a5c:	f107 031c 	add.w	r3, r7, #28
 8006a60:	4619      	mov	r1, r3
 8006a62:	4825      	ldr	r0, [pc, #148]	; (8006af8 <HAL_ADC_MspInit+0x154>)
 8006a64:	f003 ff84 	bl	800a970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a74:	f107 031c 	add.w	r3, r7, #28
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4820      	ldr	r0, [pc, #128]	; (8006afc <HAL_ADC_MspInit+0x158>)
 8006a7c:	f003 ff78 	bl	800a970 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006a80:	4b1f      	ldr	r3, [pc, #124]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006a82:	4a20      	ldr	r2, [pc, #128]	; (8006b04 <HAL_ADC_MspInit+0x160>)
 8006a84:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006a86:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a8c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a8e:	4b1c      	ldr	r3, [pc, #112]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a94:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006a9a:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006aa0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006aa2:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ab0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ab8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006aba:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006abc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ac0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ac2:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006ac8:	480d      	ldr	r0, [pc, #52]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006aca:	f003 fbb5 	bl	800a238 <HAL_DMA_Init>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006ad4:	f7ff ff32 	bl	800693c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ade:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <HAL_ADC_MspInit+0x15c>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006ae4:	bf00      	nop
 8006ae6:	3730      	adds	r7, #48	; 0x30
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40012100 	.word	0x40012100
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40020800 	.word	0x40020800
 8006af8:	40020000 	.word	0x40020000
 8006afc:	40020400 	.word	0x40020400
 8006b00:	2003fca4 	.word	0x2003fca4
 8006b04:	40026440 	.word	0x40026440

08006b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08c      	sub	sp, #48	; 0x30
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b10:	f107 031c 	add.w	r3, r7, #28
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	609a      	str	r2, [r3, #8]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a32      	ldr	r2, [pc, #200]	; (8006bf0 <HAL_I2C_MspInit+0xe8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d12c      	bne.n	8006b84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	4b31      	ldr	r3, [pc, #196]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	4a30      	ldr	r2, [pc, #192]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b46:	23c0      	movs	r3, #192	; 0xc0
 8006b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b4a:	2312      	movs	r3, #18
 8006b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b52:	2303      	movs	r3, #3
 8006b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b56:	2304      	movs	r3, #4
 8006b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b5a:	f107 031c 	add.w	r3, r7, #28
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4825      	ldr	r0, [pc, #148]	; (8006bf8 <HAL_I2C_MspInit+0xf0>)
 8006b62:	f003 ff05 	bl	800a970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	4b22      	ldr	r3, [pc, #136]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	4a21      	ldr	r2, [pc, #132]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b74:	6413      	str	r3, [r2, #64]	; 0x40
 8006b76:	4b1f      	ldr	r3, [pc, #124]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006b82:	e031      	b.n	8006be8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <HAL_I2C_MspInit+0xf4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d12c      	bne.n	8006be8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006b98:	f043 0302 	orr.w	r3, r3, #2
 8006b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9e:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006baa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bb0:	2312      	movs	r3, #18
 8006bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc0:	f107 031c 	add.w	r3, r7, #28
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	480c      	ldr	r0, [pc, #48]	; (8006bf8 <HAL_I2C_MspInit+0xf0>)
 8006bc8:	f003 fed2 	bl	800a970 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	4b08      	ldr	r3, [pc, #32]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	4a07      	ldr	r2, [pc, #28]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bda:	6413      	str	r3, [r2, #64]	; 0x40
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_I2C_MspInit+0xec>)
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	68fb      	ldr	r3, [r7, #12]
}
 8006be8:	bf00      	nop
 8006bea:	3730      	adds	r7, #48	; 0x30
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	40005400 	.word	0x40005400
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	40020400 	.word	0x40020400
 8006bfc:	40005800 	.word	0x40005800

08006c00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 0314 	add.w	r3, r7, #20
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a69      	ldr	r2, [pc, #420]	; (8006dc4 <HAL_SD_MspInit+0x1c4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	f040 80cb 	bne.w	8006dba <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	4b67      	ldr	r3, [pc, #412]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2c:	4a66      	ldr	r2, [pc, #408]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c32:	6453      	str	r3, [r2, #68]	; 0x44
 8006c34:	4b64      	ldr	r3, [pc, #400]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	4b60      	ldr	r3, [pc, #384]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	4a5f      	ldr	r2, [pc, #380]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c50:	4b5d      	ldr	r3, [pc, #372]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	4b59      	ldr	r3, [pc, #356]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	4a58      	ldr	r2, [pc, #352]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c66:	f043 0308 	orr.w	r3, r3, #8
 8006c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6c:	4b56      	ldr	r3, [pc, #344]	; (8006dc8 <HAL_SD_MspInit+0x1c8>)
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c78:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006c7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c86:	2303      	movs	r3, #3
 8006c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c8e:	f107 0314 	add.w	r3, r7, #20
 8006c92:	4619      	mov	r1, r3
 8006c94:	484d      	ldr	r0, [pc, #308]	; (8006dcc <HAL_SD_MspInit+0x1cc>)
 8006c96:	f003 fe6b 	bl	800a970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006caa:	230c      	movs	r3, #12
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cae:	f107 0314 	add.w	r3, r7, #20
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4846      	ldr	r0, [pc, #280]	; (8006dd0 <HAL_SD_MspInit+0x1d0>)
 8006cb6:	f003 fe5b 	bl	800a970 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006cba:	4b46      	ldr	r3, [pc, #280]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cbc:	4a46      	ldr	r2, [pc, #280]	; (8006dd8 <HAL_SD_MspInit+0x1d8>)
 8006cbe:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006cc0:	4b44      	ldr	r3, [pc, #272]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cc6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cc8:	4b42      	ldr	r3, [pc, #264]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cce:	4b41      	ldr	r3, [pc, #260]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cd4:	4b3f      	ldr	r3, [pc, #252]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cda:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006cdc:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ce2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ce4:	4b3b      	ldr	r3, [pc, #236]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006cea:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006cec:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cee:	2220      	movs	r2, #32
 8006cf0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006cf2:	4b38      	ldr	r3, [pc, #224]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006cf8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006cfa:	4b36      	ldr	r3, [pc, #216]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006d00:	4b34      	ldr	r3, [pc, #208]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006d02:	2203      	movs	r2, #3
 8006d04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006d06:	4b33      	ldr	r3, [pc, #204]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006d08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006d0e:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006d10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006d14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006d16:	482f      	ldr	r0, [pc, #188]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006d18:	f003 fa8e 	bl	800a238 <HAL_DMA_Init>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006d22:	f7ff fe0b 	bl	800693c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40
 8006d2c:	4a29      	ldr	r2, [pc, #164]	; (8006dd4 <HAL_SD_MspInit+0x1d4>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006d32:	4b2a      	ldr	r3, [pc, #168]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d34:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <HAL_SD_MspInit+0x1e0>)
 8006d36:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006d38:	4b28      	ldr	r3, [pc, #160]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d40:	4b26      	ldr	r3, [pc, #152]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d46:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d4c:	4b23      	ldr	r3, [pc, #140]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d52:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d54:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d5c:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d62:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d66:	2220      	movs	r2, #32
 8006d68:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006d6a:	4b1c      	ldr	r3, [pc, #112]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006d70:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006d72:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d74:	2204      	movs	r2, #4
 8006d76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006d78:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006d7e:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006d84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006d8e:	4813      	ldr	r0, [pc, #76]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006d90:	f003 fa52 	bl	800a238 <HAL_DMA_Init>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006d9a:	f7ff fdcf 	bl	800693c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006da2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006da4:	4a0d      	ldr	r2, [pc, #52]	; (8006ddc <HAL_SD_MspInit+0x1dc>)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	2031      	movs	r0, #49	; 0x31
 8006db0:	f003 fa0b 	bl	800a1ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006db4:	2031      	movs	r0, #49	; 0x31
 8006db6:	f003 fa24 	bl	800a202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006dba:	bf00      	nop
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40023800 	.word	0x40023800
 8006dcc:	40020800 	.word	0x40020800
 8006dd0:	40020c00 	.word	0x40020c00
 8006dd4:	2003f7cc 	.word	0x2003f7cc
 8006dd8:	40026458 	.word	0x40026458
 8006ddc:	2003fb00 	.word	0x2003fb00
 8006de0:	400264a0 	.word	0x400264a0

08006de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08a      	sub	sp, #40	; 0x28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dec:	f107 0314 	add.w	r3, r7, #20
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	609a      	str	r2, [r3, #8]
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a19      	ldr	r2, [pc, #100]	; (8006e68 <HAL_SPI_MspInit+0x84>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d12c      	bne.n	8006e60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <HAL_SPI_MspInit+0x88>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <HAL_SPI_MspInit+0x88>)
 8006e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e14:	6413      	str	r3, [r2, #64]	; 0x40
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <HAL_SPI_MspInit+0x88>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <HAL_SPI_MspInit+0x88>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <HAL_SPI_MspInit+0x88>)
 8006e2c:	f043 0302 	orr.w	r3, r3, #2
 8006e30:	6313      	str	r3, [r2, #48]	; 0x30
 8006e32:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <HAL_SPI_MspInit+0x88>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006e3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	2302      	movs	r3, #2
 8006e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e50:	2305      	movs	r3, #5
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4805      	ldr	r0, [pc, #20]	; (8006e70 <HAL_SPI_MspInit+0x8c>)
 8006e5c:	f003 fd88 	bl	800a970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006e60:	bf00      	nop
 8006e62:	3728      	adds	r7, #40	; 0x28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40003800 	.word	0x40003800
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40020400 	.word	0x40020400

08006e74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08c      	sub	sp, #48	; 0x30
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e7c:	f107 031c 	add.w	r3, r7, #28
 8006e80:	2200      	movs	r2, #0
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	605a      	str	r2, [r3, #4]
 8006e86:	609a      	str	r2, [r3, #8]
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2d      	ldr	r2, [pc, #180]	; (8006f48 <HAL_TIM_PWM_MspInit+0xd4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d12d      	bne.n	8006ef2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e96:	2300      	movs	r3, #0
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	4b2c      	ldr	r3, [pc, #176]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	4a2b      	ldr	r2, [pc, #172]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ea0:	f043 0301 	orr.w	r3, r3, #1
 8006ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	4b25      	ldr	r3, [pc, #148]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	4a24      	ldr	r2, [pc, #144]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ebc:	f043 0310 	orr.w	r3, r3, #16
 8006ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec2:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006ece:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006edc:	2300      	movs	r3, #0
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ee4:	f107 031c 	add.w	r3, r7, #28
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4819      	ldr	r0, [pc, #100]	; (8006f50 <HAL_TIM_PWM_MspInit+0xdc>)
 8006eec:	f003 fd40 	bl	800a970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006ef0:	e026      	b.n	8006f40 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <HAL_TIM_PWM_MspInit+0xe0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d10e      	bne.n	8006f1a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006efc:	2300      	movs	r3, #0
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	4a11      	ldr	r2, [pc, #68]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f06:	f043 0302 	orr.w	r3, r3, #2
 8006f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	693b      	ldr	r3, [r7, #16]
}
 8006f18:	e012      	b.n	8006f40 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a0e      	ldr	r2, [pc, #56]	; (8006f58 <HAL_TIM_PWM_MspInit+0xe4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10d      	bne.n	8006f40 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	4a07      	ldr	r2, [pc, #28]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f2e:	f043 0304 	orr.w	r3, r3, #4
 8006f32:	6413      	str	r3, [r2, #64]	; 0x40
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	bf00      	nop
 8006f42:	3730      	adds	r7, #48	; 0x30
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40010000 	.word	0x40010000
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	40021000 	.word	0x40021000
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800

08006f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a3e      	ldr	r2, [pc, #248]	; (8007064 <HAL_TIM_Base_MspInit+0x108>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d116      	bne.n	8006f9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	4b3d      	ldr	r3, [pc, #244]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	4a3c      	ldr	r2, [pc, #240]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006f78:	f043 0310 	orr.w	r3, r3, #16
 8006f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7e:	4b3a      	ldr	r3, [pc, #232]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	2036      	movs	r0, #54	; 0x36
 8006f90:	f003 f91b 	bl	800a1ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006f94:	2036      	movs	r0, #54	; 0x36
 8006f96:	f003 f934 	bl	800a202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006f9a:	e05e      	b.n	800705a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	; (800706c <HAL_TIM_Base_MspInit+0x110>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d116      	bne.n	8006fd4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	4a2e      	ldr	r2, [pc, #184]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006fb0:	f043 0320 	orr.w	r3, r3, #32
 8006fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb6:	4b2c      	ldr	r3, [pc, #176]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	2037      	movs	r0, #55	; 0x37
 8006fc8:	f003 f8ff 	bl	800a1ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006fcc:	2037      	movs	r0, #55	; 0x37
 8006fce:	f003 f918 	bl	800a202 <HAL_NVIC_EnableIRQ>
}
 8006fd2:	e042      	b.n	800705a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	; (8007070 <HAL_TIM_Base_MspInit+0x114>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d10e      	bne.n	8006ffc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	4b21      	ldr	r3, [pc, #132]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	4a20      	ldr	r2, [pc, #128]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fec:	6453      	str	r3, [r2, #68]	; 0x44
 8006fee:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	697b      	ldr	r3, [r7, #20]
}
 8006ffa:	e02e      	b.n	800705a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <HAL_TIM_Base_MspInit+0x118>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10e      	bne.n	8007024 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007006:	2300      	movs	r3, #0
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	4b17      	ldr	r3, [pc, #92]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	4a16      	ldr	r2, [pc, #88]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8007010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007014:	6453      	str	r3, [r2, #68]	; 0x44
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	693b      	ldr	r3, [r7, #16]
}
 8007022:	e01a      	b.n	800705a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a13      	ldr	r2, [pc, #76]	; (8007078 <HAL_TIM_Base_MspInit+0x11c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d115      	bne.n	800705a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	4b0d      	ldr	r3, [pc, #52]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	4a0c      	ldr	r2, [pc, #48]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8007038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703c:	6413      	str	r3, [r2, #64]	; 0x40
 800703e:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <HAL_TIM_Base_MspInit+0x10c>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	202c      	movs	r0, #44	; 0x2c
 8007050:	f003 f8bb 	bl	800a1ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007054:	202c      	movs	r0, #44	; 0x2c
 8007056:	f003 f8d4 	bl	800a202 <HAL_NVIC_EnableIRQ>
}
 800705a:	bf00      	nop
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40001000 	.word	0x40001000
 8007068:	40023800 	.word	0x40023800
 800706c:	40001400 	.word	0x40001400
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800
 8007078:	40001c00 	.word	0x40001c00

0800707c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08a      	sub	sp, #40	; 0x28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007084:	f107 0314 	add.w	r3, r7, #20
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	609a      	str	r2, [r3, #8]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1d      	ldr	r2, [pc, #116]	; (8007110 <HAL_TIM_Encoder_MspInit+0x94>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d133      	bne.n	8007106 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800709e:	2300      	movs	r3, #0
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <HAL_TIM_Encoder_MspInit+0x98>)
 80070a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a6:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <HAL_TIM_Encoder_MspInit+0x98>)
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	6453      	str	r3, [r2, #68]	; 0x44
 80070ae:	4b19      	ldr	r3, [pc, #100]	; (8007114 <HAL_TIM_Encoder_MspInit+0x98>)
 80070b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	4b15      	ldr	r3, [pc, #84]	; (8007114 <HAL_TIM_Encoder_MspInit+0x98>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	4a14      	ldr	r2, [pc, #80]	; (8007114 <HAL_TIM_Encoder_MspInit+0x98>)
 80070c4:	f043 0304 	orr.w	r3, r3, #4
 80070c8:	6313      	str	r3, [r2, #48]	; 0x30
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_TIM_Encoder_MspInit+0x98>)
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80070d6:	23c0      	movs	r3, #192	; 0xc0
 80070d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070da:	2302      	movs	r3, #2
 80070dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070e2:	2300      	movs	r3, #0
 80070e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80070e6:	2303      	movs	r3, #3
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ea:	f107 0314 	add.w	r3, r7, #20
 80070ee:	4619      	mov	r1, r3
 80070f0:	4809      	ldr	r0, [pc, #36]	; (8007118 <HAL_TIM_Encoder_MspInit+0x9c>)
 80070f2:	f003 fc3d 	bl	800a970 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80070f6:	2200      	movs	r2, #0
 80070f8:	2100      	movs	r1, #0
 80070fa:	202c      	movs	r0, #44	; 0x2c
 80070fc:	f003 f865 	bl	800a1ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007100:	202c      	movs	r0, #44	; 0x2c
 8007102:	f003 f87e 	bl	800a202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007106:	bf00      	nop
 8007108:	3728      	adds	r7, #40	; 0x28
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40010400 	.word	0x40010400
 8007114:	40023800 	.word	0x40023800
 8007118:	40020800 	.word	0x40020800

0800711c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08c      	sub	sp, #48	; 0x30
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007124:	f107 031c 	add.w	r3, r7, #28
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	605a      	str	r2, [r3, #4]
 800712e:	609a      	str	r2, [r3, #8]
 8007130:	60da      	str	r2, [r3, #12]
 8007132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a5c      	ldr	r2, [pc, #368]	; (80072ac <HAL_TIM_MspPostInit+0x190>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d11f      	bne.n	800717e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	4b5b      	ldr	r3, [pc, #364]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007146:	4a5a      	ldr	r2, [pc, #360]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 8007148:	f043 0310 	orr.w	r3, r3, #16
 800714c:	6313      	str	r3, [r2, #48]	; 0x30
 800714e:	4b58      	ldr	r3, [pc, #352]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	61bb      	str	r3, [r7, #24]
 8007158:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800715a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800715e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007160:	2302      	movs	r3, #2
 8007162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007164:	2300      	movs	r3, #0
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007168:	2300      	movs	r3, #0
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800716c:	2301      	movs	r3, #1
 800716e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007170:	f107 031c 	add.w	r3, r7, #28
 8007174:	4619      	mov	r1, r3
 8007176:	484f      	ldr	r0, [pc, #316]	; (80072b4 <HAL_TIM_MspPostInit+0x198>)
 8007178:	f003 fbfa 	bl	800a970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800717c:	e091      	b.n	80072a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a4d      	ldr	r2, [pc, #308]	; (80072b8 <HAL_TIM_MspPostInit+0x19c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d11e      	bne.n	80071c6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	4b48      	ldr	r3, [pc, #288]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	4a47      	ldr	r2, [pc, #284]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 8007192:	f043 0302 	orr.w	r3, r3, #2
 8007196:	6313      	str	r3, [r2, #48]	; 0x30
 8007198:	4b45      	ldr	r3, [pc, #276]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80071a4:	2330      	movs	r3, #48	; 0x30
 80071a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a8:	2302      	movs	r3, #2
 80071aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b0:	2300      	movs	r3, #0
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80071b4:	2302      	movs	r3, #2
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071b8:	f107 031c 	add.w	r3, r7, #28
 80071bc:	4619      	mov	r1, r3
 80071be:	483f      	ldr	r0, [pc, #252]	; (80072bc <HAL_TIM_MspPostInit+0x1a0>)
 80071c0:	f003 fbd6 	bl	800a970 <HAL_GPIO_Init>
}
 80071c4:	e06d      	b.n	80072a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3d      	ldr	r2, [pc, #244]	; (80072c0 <HAL_TIM_MspPostInit+0x1a4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d11f      	bne.n	8007210 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071d0:	2300      	movs	r3, #0
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	4a35      	ldr	r2, [pc, #212]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 80071da:	f043 0308 	orr.w	r3, r3, #8
 80071de:	6313      	str	r3, [r2, #48]	; 0x30
 80071e0:	4b33      	ldr	r3, [pc, #204]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80071ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80071f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f2:	2302      	movs	r3, #2
 80071f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071fa:	2300      	movs	r3, #0
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80071fe:	2302      	movs	r3, #2
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007202:	f107 031c 	add.w	r3, r7, #28
 8007206:	4619      	mov	r1, r3
 8007208:	482e      	ldr	r0, [pc, #184]	; (80072c4 <HAL_TIM_MspPostInit+0x1a8>)
 800720a:	f003 fbb1 	bl	800a970 <HAL_GPIO_Init>
}
 800720e:	e048      	b.n	80072a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a2c      	ldr	r2, [pc, #176]	; (80072c8 <HAL_TIM_MspPostInit+0x1ac>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d11f      	bne.n	800725a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	4a23      	ldr	r2, [pc, #140]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	6313      	str	r3, [r2, #48]	; 0x30
 800722a:	4b21      	ldr	r3, [pc, #132]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800723a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800723c:	2302      	movs	r3, #2
 800723e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007244:	2300      	movs	r3, #0
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007248:	2303      	movs	r3, #3
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800724c:	f107 031c 	add.w	r3, r7, #28
 8007250:	4619      	mov	r1, r3
 8007252:	481a      	ldr	r0, [pc, #104]	; (80072bc <HAL_TIM_MspPostInit+0x1a0>)
 8007254:	f003 fb8c 	bl	800a970 <HAL_GPIO_Init>
}
 8007258:	e023      	b.n	80072a2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <HAL_TIM_MspPostInit+0x1b0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d11e      	bne.n	80072a2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007264:	2300      	movs	r3, #0
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	4a10      	ldr	r2, [pc, #64]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 800726e:	f043 0302 	orr.w	r3, r3, #2
 8007272:	6313      	str	r3, [r2, #48]	; 0x30
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <HAL_TIM_MspPostInit+0x194>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007286:	2302      	movs	r3, #2
 8007288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728a:	2300      	movs	r3, #0
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800728e:	2300      	movs	r3, #0
 8007290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007292:	2303      	movs	r3, #3
 8007294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007296:	f107 031c 	add.w	r3, r7, #28
 800729a:	4619      	mov	r1, r3
 800729c:	4807      	ldr	r0, [pc, #28]	; (80072bc <HAL_TIM_MspPostInit+0x1a0>)
 800729e:	f003 fb67 	bl	800a970 <HAL_GPIO_Init>
}
 80072a2:	bf00      	nop
 80072a4:	3730      	adds	r7, #48	; 0x30
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40021000 	.word	0x40021000
 80072b8:	40000400 	.word	0x40000400
 80072bc:	40020400 	.word	0x40020400
 80072c0:	40000800 	.word	0x40000800
 80072c4:	40020c00 	.word	0x40020c00
 80072c8:	40014400 	.word	0x40014400
 80072cc:	40014800 	.word	0x40014800

080072d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	609a      	str	r2, [r3, #8]
 80072e4:	60da      	str	r2, [r3, #12]
 80072e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a19      	ldr	r2, [pc, #100]	; (8007354 <HAL_UART_MspInit+0x84>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d12b      	bne.n	800734a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	4b18      	ldr	r3, [pc, #96]	; (8007358 <HAL_UART_MspInit+0x88>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <HAL_UART_MspInit+0x88>)
 80072fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007300:	6413      	str	r3, [r2, #64]	; 0x40
 8007302:	4b15      	ldr	r3, [pc, #84]	; (8007358 <HAL_UART_MspInit+0x88>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	613b      	str	r3, [r7, #16]
 800730c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	4b11      	ldr	r3, [pc, #68]	; (8007358 <HAL_UART_MspInit+0x88>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	4a10      	ldr	r2, [pc, #64]	; (8007358 <HAL_UART_MspInit+0x88>)
 8007318:	f043 0308 	orr.w	r3, r3, #8
 800731c:	6313      	str	r3, [r2, #48]	; 0x30
 800731e:	4b0e      	ldr	r3, [pc, #56]	; (8007358 <HAL_UART_MspInit+0x88>)
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800732a:	2360      	movs	r3, #96	; 0x60
 800732c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800732e:	2302      	movs	r3, #2
 8007330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007336:	2303      	movs	r3, #3
 8007338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800733a:	2307      	movs	r3, #7
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800733e:	f107 0314 	add.w	r3, r7, #20
 8007342:	4619      	mov	r1, r3
 8007344:	4805      	ldr	r0, [pc, #20]	; (800735c <HAL_UART_MspInit+0x8c>)
 8007346:	f003 fb13 	bl	800a970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800734a:	bf00      	nop
 800734c:	3728      	adds	r7, #40	; 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40004400 	.word	0x40004400
 8007358:	40023800 	.word	0x40023800
 800735c:	40020c00 	.word	0x40020c00

08007360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007364:	e7fe      	b.n	8007364 <NMI_Handler+0x4>

08007366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007366:	b480      	push	{r7}
 8007368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800736a:	e7fe      	b.n	800736a <HardFault_Handler+0x4>

0800736c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007370:	e7fe      	b.n	8007370 <MemManage_Handler+0x4>

08007372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007372:	b480      	push	{r7}
 8007374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007376:	e7fe      	b.n	8007376 <BusFault_Handler+0x4>

08007378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800737c:	e7fe      	b.n	800737c <UsageFault_Handler+0x4>

0800737e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800737e:	b480      	push	{r7}
 8007380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007382:	bf00      	nop
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800739e:	bf00      	nop
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073ac:	f002 f9ec 	bl	8009788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073b0:	bf00      	nop
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80073b8:	4803      	ldr	r0, [pc, #12]	; (80073c8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80073ba:	f007 fcbc 	bl	800ed36 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80073be:	4803      	ldr	r0, [pc, #12]	; (80073cc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80073c0:	f007 fcb9 	bl	800ed36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80073c4:	bf00      	nop
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	2003f884 	.word	0x2003f884
 80073cc:	2003fa80 	.word	0x2003fa80

080073d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80073d4:	4802      	ldr	r0, [pc, #8]	; (80073e0 <SDIO_IRQHandler+0x10>)
 80073d6:	f005 fd55 	bl	800ce84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80073da:	bf00      	nop
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	2003fbe0 	.word	0x2003fbe0

080073e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80073e8:	4802      	ldr	r0, [pc, #8]	; (80073f4 <TIM6_DAC_IRQHandler+0x10>)
 80073ea:	f007 fca4 	bl	800ed36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80073ee:	bf00      	nop
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	2003fb60 	.word	0x2003fb60

080073f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80073fc:	4802      	ldr	r0, [pc, #8]	; (8007408 <TIM7_IRQHandler+0x10>)
 80073fe:	f007 fc9a 	bl	800ed36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007402:	bf00      	nop
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	2003fd04 	.word	0x2003fd04

0800740c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007410:	4802      	ldr	r0, [pc, #8]	; (800741c <DMA2_Stream2_IRQHandler+0x10>)
 8007412:	f003 f839 	bl	800a488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	2003fca4 	.word	0x2003fca4

08007420 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007424:	4802      	ldr	r0, [pc, #8]	; (8007430 <DMA2_Stream3_IRQHandler+0x10>)
 8007426:	f003 f82f 	bl	800a488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800742a:	bf00      	nop
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	2003f7cc 	.word	0x2003f7cc

08007434 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007438:	4802      	ldr	r0, [pc, #8]	; (8007444 <DMA2_Stream6_IRQHandler+0x10>)
 800743a:	f003 f825 	bl	800a488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800743e:	bf00      	nop
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	2003fb00 	.word	0x2003fb00

08007448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007450:	4a14      	ldr	r2, [pc, #80]	; (80074a4 <_sbrk+0x5c>)
 8007452:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <_sbrk+0x60>)
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800745c:	4b13      	ldr	r3, [pc, #76]	; (80074ac <_sbrk+0x64>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <_sbrk+0x64>)
 8007466:	4a12      	ldr	r2, [pc, #72]	; (80074b0 <_sbrk+0x68>)
 8007468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800746a:	4b10      	ldr	r3, [pc, #64]	; (80074ac <_sbrk+0x64>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4413      	add	r3, r2
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	429a      	cmp	r2, r3
 8007476:	d207      	bcs.n	8007488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007478:	f00d fef0 	bl	801525c <__errno>
 800747c:	4602      	mov	r2, r0
 800747e:	230c      	movs	r3, #12
 8007480:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295
 8007486:	e009      	b.n	800749c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007488:	4b08      	ldr	r3, [pc, #32]	; (80074ac <_sbrk+0x64>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <_sbrk+0x64>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	4a05      	ldr	r2, [pc, #20]	; (80074ac <_sbrk+0x64>)
 8007498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800749a:	68fb      	ldr	r3, [r7, #12]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20050000 	.word	0x20050000
 80074a8:	00000800 	.word	0x00000800
 80074ac:	200002bc 	.word	0x200002bc
 80074b0:	20041e58 	.word	0x20041e58

080074b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074b8:	4b08      	ldr	r3, [pc, #32]	; (80074dc <SystemInit+0x28>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	4a07      	ldr	r2, [pc, #28]	; (80074dc <SystemInit+0x28>)
 80074c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074c8:	4b04      	ldr	r3, [pc, #16]	; (80074dc <SystemInit+0x28>)
 80074ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80074ce:	609a      	str	r2, [r3, #8]
#endif
}
 80074d0:	bf00      	nop
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	e000ed00 	.word	0xe000ed00

080074e0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80074e0:	b598      	push	{r3, r4, r7, lr}
 80074e2:	af00      	add	r7, sp, #0
	lcd_init();
 80074e4:	f7f9 fd98 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80074e8:	483a      	ldr	r0, [pc, #232]	; (80075d4 <cppInit+0xf4>)
 80074ea:	f7fd fdef 	bl	80050cc <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80074ee:	2064      	movs	r0, #100	; 0x64
 80074f0:	f002 f96a 	bl	80097c8 <HAL_Delay>
	power_sensor.updateValues();
 80074f4:	4837      	ldr	r0, [pc, #220]	; (80075d4 <cppInit+0xf4>)
 80074f6:	f7fd fdf7 	bl	80050e8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80074fa:	f7f9 fdd1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80074fe:	2100      	movs	r1, #0
 8007500:	2000      	movs	r0, #0
 8007502:	f7f9 fddd 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007506:	4834      	ldr	r0, [pc, #208]	; (80075d8 <cppInit+0xf8>)
 8007508:	f7f9 fe04 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800750c:	2101      	movs	r1, #1
 800750e:	2000      	movs	r0, #0
 8007510:	f7f9 fdd6 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007514:	482f      	ldr	r0, [pc, #188]	; (80075d4 <cppInit+0xf4>)
 8007516:	f7fd fe11 	bl	800513c <_ZN11PowerSensor17getButteryVoltageEv>
 800751a:	ee10 3a10 	vmov	r3, s0
 800751e:	4618      	mov	r0, r3
 8007520:	f7f9 f82a 	bl	8000578 <__aeabi_f2d>
 8007524:	4603      	mov	r3, r0
 8007526:	460c      	mov	r4, r1
 8007528:	461a      	mov	r2, r3
 800752a:	4623      	mov	r3, r4
 800752c:	482b      	ldr	r0, [pc, #172]	; (80075dc <cppInit+0xfc>)
 800752e:	f7f9 fdf1 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007536:	f002 f947 	bl	80097c8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800753a:	4829      	ldr	r0, [pc, #164]	; (80075e0 <cppInit+0x100>)
 800753c:	f7fd f80c 	bl	8004558 <_ZN6Logger10sdCardInitEv>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <cppInit+0x76>
		led.fullColor('G');
 8007546:	2147      	movs	r1, #71	; 0x47
 8007548:	4826      	ldr	r0, [pc, #152]	; (80075e4 <cppInit+0x104>)
 800754a:	f7fa fc63 	bl	8001e14 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800754e:	2064      	movs	r0, #100	; 0x64
 8007550:	f002 f93a 	bl	80097c8 <HAL_Delay>
 8007554:	e006      	b.n	8007564 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007556:	2152      	movs	r1, #82	; 0x52
 8007558:	4822      	ldr	r0, [pc, #136]	; (80075e4 <cppInit+0x104>)
 800755a:	f7fa fc5b 	bl	8001e14 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800755e:	2064      	movs	r0, #100	; 0x64
 8007560:	f002 f932 	bl	80097c8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007564:	4820      	ldr	r0, [pc, #128]	; (80075e8 <cppInit+0x108>)
 8007566:	f7fa fdb1 	bl	80020cc <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800756a:	4820      	ldr	r0, [pc, #128]	; (80075ec <cppInit+0x10c>)
 800756c:	f7fd fa82 	bl	8004a74 <_ZN5Motor4initEv>
	encoder.init();
 8007570:	481f      	ldr	r0, [pc, #124]	; (80075f0 <cppInit+0x110>)
 8007572:	f7f9 fe1b 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8007576:	481f      	ldr	r0, [pc, #124]	; (80075f4 <cppInit+0x114>)
 8007578:	f7fa fa0a 	bl	8001990 <_ZN3IMU4initEv>
	line_trace.init();
 800757c:	481e      	ldr	r0, [pc, #120]	; (80075f8 <cppInit+0x118>)
 800757e:	f7fc f8d1 	bl	8003724 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007582:	4819      	ldr	r0, [pc, #100]	; (80075e8 <cppInit+0x108>)
 8007584:	f7fa fee2 	bl	800234c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800758c:	f002 f91c 	bl	80097c8 <HAL_Delay>

	led.fullColor('M');
 8007590:	214d      	movs	r1, #77	; 0x4d
 8007592:	4814      	ldr	r0, [pc, #80]	; (80075e4 <cppInit+0x104>)
 8007594:	f7fa fc3e 	bl	8001e14 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007598:	4816      	ldr	r0, [pc, #88]	; (80075f4 <cppInit+0x114>)
 800759a:	f7fa fac3 	bl	8001b24 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 800759e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80075fc <cppInit+0x11c>
 80075a2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007600 <cppInit+0x120>
 80075a6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007604 <cppInit+0x124>
 80075aa:	4817      	ldr	r0, [pc, #92]	; (8007608 <cppInit+0x128>)
 80075ac:	f7fe f9cc 	bl	8005948 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80075b0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800760c <cppInit+0x12c>
 80075b4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007610 <cppInit+0x130>
 80075b8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007614 <cppInit+0x134>
 80075bc:	4812      	ldr	r0, [pc, #72]	; (8007608 <cppInit+0x128>)
 80075be:	f7fe f9dc 	bl	800597a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80075c2:	4815      	ldr	r0, [pc, #84]	; (8007618 <cppInit+0x138>)
 80075c4:	f7fd fc8c 	bl	8004ee0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80075c8:	4814      	ldr	r0, [pc, #80]	; (800761c <cppInit+0x13c>)
 80075ca:	f7fd fd23 	bl	8005014 <_ZN13PathFollowing4initEv>

}
 80075ce:	bf00      	nop
 80075d0:	bd98      	pop	{r3, r4, r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200005d0 	.word	0x200005d0
 80075d8:	08019ab0 	.word	0x08019ab0
 80075dc:	08019ab8 	.word	0x08019ab8
 80075e0:	200005f0 	.word	0x200005f0
 80075e4:	200005cc 	.word	0x200005cc
 80075e8:	200002c0 	.word	0x200002c0
 80075ec:	200005c8 	.word	0x200005c8
 80075f0:	20017d00 	.word	0x20017d00
 80075f4:	200005dc 	.word	0x200005dc
 80075f8:	20017da0 	.word	0x20017da0
 80075fc:	3cceca68 	.word	0x3cceca68
 8007600:	4180f06f 	.word	0x4180f06f
 8007604:	3fea2d0e 	.word	0x3fea2d0e
 8007608:	20017d20 	.word	0x20017d20
 800760c:	3ab7dacd 	.word	0x3ab7dacd
 8007610:	3f5e3fbc 	.word	0x3f5e3fbc
 8007614:	3d8eefa2 	.word	0x3d8eefa2
 8007618:	20017d60 	.word	0x20017d60
 800761c:	20025cc8 	.word	0x20025cc8

08007620 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007624:	4819      	ldr	r0, [pc, #100]	; (800768c <cppFlip1ms+0x6c>)
 8007626:	f7fa fdaf 	bl	8002188 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800762a:	4819      	ldr	r0, [pc, #100]	; (8007690 <cppFlip1ms+0x70>)
 800762c:	f7fa f9d8 	bl	80019e0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007630:	4818      	ldr	r0, [pc, #96]	; (8007694 <cppFlip1ms+0x74>)
 8007632:	f7f9 fddd 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007636:	4818      	ldr	r0, [pc, #96]	; (8007698 <cppFlip1ms+0x78>)
 8007638:	f7fc fb0a 	bl	8003c50 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800763c:	4817      	ldr	r0, [pc, #92]	; (800769c <cppFlip1ms+0x7c>)
 800763e:	f7fe f9b5 	bl	80059ac <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007642:	4817      	ldr	r0, [pc, #92]	; (80076a0 <cppFlip1ms+0x80>)
 8007644:	f7fd fc30 	bl	8004ea8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007648:	4816      	ldr	r0, [pc, #88]	; (80076a4 <cppFlip1ms+0x84>)
 800764a:	f7fd fded 	bl	8005228 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800764e:	4816      	ldr	r0, [pc, #88]	; (80076a8 <cppFlip1ms+0x88>)
 8007650:	f7fd fa22 	bl	8004a98 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007654:	4b15      	ldr	r3, [pc, #84]	; (80076ac <cppFlip1ms+0x8c>)
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	3301      	adds	r3, #1
 800765a:	b29a      	uxth	r2, r3
 800765c:	4b13      	ldr	r3, [pc, #76]	; (80076ac <cppFlip1ms+0x8c>)
 800765e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007660:	4b12      	ldr	r3, [pc, #72]	; (80076ac <cppFlip1ms+0x8c>)
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d90c      	bls.n	8007682 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007668:	4809      	ldr	r0, [pc, #36]	; (8007690 <cppFlip1ms+0x70>)
 800766a:	f7fa fa11 	bl	8001a90 <_ZN3IMU8getOmegaEv>
 800766e:	eef0 7a40 	vmov.f32	s15, s0
 8007672:	eeb0 0a67 	vmov.f32	s0, s15
 8007676:	480e      	ldr	r0, [pc, #56]	; (80076b0 <cppFlip1ms+0x90>)
 8007678:	f7fd ff38 	bl	80054ec <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <cppFlip1ms+0x8c>)
 800767e:	2200      	movs	r2, #0
 8007680:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007682:	4804      	ldr	r0, [pc, #16]	; (8007694 <cppFlip1ms+0x74>)
 8007684:	f7f9 fe9e 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007688:	bf00      	nop
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200002c0 	.word	0x200002c0
 8007690:	200005dc 	.word	0x200005dc
 8007694:	20017d00 	.word	0x20017d00
 8007698:	20017da0 	.word	0x20017da0
 800769c:	20017d20 	.word	0x20017d20
 80076a0:	20017d60 	.word	0x20017d60
 80076a4:	200005b8 	.word	0x200005b8
 80076a8:	200005c8 	.word	0x200005c8
 80076ac:	2003d3f0 	.word	0x2003d3f0
 80076b0:	20025ab8 	.word	0x20025ab8

080076b4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80076b8:	4802      	ldr	r0, [pc, #8]	; (80076c4 <cppFlip100ns+0x10>)
 80076ba:	f7fa fd17 	bl	80020ec <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 80076be:	bf00      	nop
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	200002c0 	.word	0x200002c0

080076c8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <cppFlip10ms+0x28>)
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <cppFlip10ms+0x28>)
 80076d6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <cppFlip10ms+0x28>)
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	2b06      	cmp	r3, #6
 80076de:	d905      	bls.n	80076ec <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80076e0:	4804      	ldr	r0, [pc, #16]	; (80076f4 <cppFlip10ms+0x2c>)
 80076e2:	f7fd ff3f 	bl	8005564 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80076e6:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <cppFlip10ms+0x28>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80076ec:	bf00      	nop
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	2003d3f2 	.word	0x2003d3f2
 80076f4:	20025ab8 	.word	0x20025ab8

080076f8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80076f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 80076fe:	4baf      	ldr	r3, [pc, #700]	; (80079bc <cppLoop+0x2c4>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	f3bf 8f5b 	dmb	ish
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf0c      	ite	eq
 8007710:	2301      	moveq	r3, #1
 8007712:	2300      	movne	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d015      	beq.n	8007746 <cppLoop+0x4e>
 800771a:	48a8      	ldr	r0, [pc, #672]	; (80079bc <cppLoop+0x2c4>)
 800771c:	f00c fd39 	bl	8014192 <__cxa_guard_acquire>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf14      	ite	ne
 8007726:	2301      	movne	r3, #1
 8007728:	2300      	moveq	r3, #0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <cppLoop+0x4e>
 8007730:	48a3      	ldr	r0, [pc, #652]	; (80079c0 <cppLoop+0x2c8>)
 8007732:	f7fc f917 	bl	8003964 <_ZN9LineTrace5getKpEv>
 8007736:	eef0 7a40 	vmov.f32	s15, s0
 800773a:	4ba2      	ldr	r3, [pc, #648]	; (80079c4 <cppLoop+0x2cc>)
 800773c:	edc3 7a00 	vstr	s15, [r3]
 8007740:	489e      	ldr	r0, [pc, #632]	; (80079bc <cppLoop+0x2c4>)
 8007742:	f00c fd32 	bl	80141aa <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007746:	4ba0      	ldr	r3, [pc, #640]	; (80079c8 <cppLoop+0x2d0>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f3bf 8f5b 	dmb	ish
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d015      	beq.n	800778e <cppLoop+0x96>
 8007762:	4899      	ldr	r0, [pc, #612]	; (80079c8 <cppLoop+0x2d0>)
 8007764:	f00c fd15 	bl	8014192 <__cxa_guard_acquire>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	bf14      	ite	ne
 800776e:	2301      	movne	r3, #1
 8007770:	2300      	moveq	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <cppLoop+0x96>
 8007778:	4891      	ldr	r0, [pc, #580]	; (80079c0 <cppLoop+0x2c8>)
 800777a:	f7fc f902 	bl	8003982 <_ZN9LineTrace5getKiEv>
 800777e:	eef0 7a40 	vmov.f32	s15, s0
 8007782:	4b92      	ldr	r3, [pc, #584]	; (80079cc <cppLoop+0x2d4>)
 8007784:	edc3 7a00 	vstr	s15, [r3]
 8007788:	488f      	ldr	r0, [pc, #572]	; (80079c8 <cppLoop+0x2d0>)
 800778a:	f00c fd0e 	bl	80141aa <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800778e:	4b90      	ldr	r3, [pc, #576]	; (80079d0 <cppLoop+0x2d8>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f3bf 8f5b 	dmb	ish
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	bf0c      	ite	eq
 80077a0:	2301      	moveq	r3, #1
 80077a2:	2300      	movne	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d015      	beq.n	80077d6 <cppLoop+0xde>
 80077aa:	4889      	ldr	r0, [pc, #548]	; (80079d0 <cppLoop+0x2d8>)
 80077ac:	f00c fcf1 	bl	8014192 <__cxa_guard_acquire>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bf14      	ite	ne
 80077b6:	2301      	movne	r3, #1
 80077b8:	2300      	moveq	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <cppLoop+0xde>
 80077c0:	487f      	ldr	r0, [pc, #508]	; (80079c0 <cppLoop+0x2c8>)
 80077c2:	f7fc f8ed 	bl	80039a0 <_ZN9LineTrace5getKdEv>
 80077c6:	eef0 7a40 	vmov.f32	s15, s0
 80077ca:	4b82      	ldr	r3, [pc, #520]	; (80079d4 <cppLoop+0x2dc>)
 80077cc:	edc3 7a00 	vstr	s15, [r3]
 80077d0:	487f      	ldr	r0, [pc, #508]	; (80079d0 <cppLoop+0x2d8>)
 80077d2:	f00c fcea 	bl	80141aa <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 80077d6:	4b80      	ldr	r3, [pc, #512]	; (80079d8 <cppLoop+0x2e0>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f3bf 8f5b 	dmb	ish
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bf0c      	ite	eq
 80077e8:	2301      	moveq	r3, #1
 80077ea:	2300      	movne	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d015      	beq.n	800781e <cppLoop+0x126>
 80077f2:	4879      	ldr	r0, [pc, #484]	; (80079d8 <cppLoop+0x2e0>)
 80077f4:	f00c fccd 	bl	8014192 <__cxa_guard_acquire>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bf14      	ite	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	2300      	moveq	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <cppLoop+0x126>
 8007808:	486d      	ldr	r0, [pc, #436]	; (80079c0 <cppLoop+0x2c8>)
 800780a:	f7fc f8d8 	bl	80039be <_ZN9LineTrace9getKpFastEv>
 800780e:	eef0 7a40 	vmov.f32	s15, s0
 8007812:	4b72      	ldr	r3, [pc, #456]	; (80079dc <cppLoop+0x2e4>)
 8007814:	edc3 7a00 	vstr	s15, [r3]
 8007818:	486f      	ldr	r0, [pc, #444]	; (80079d8 <cppLoop+0x2e0>)
 800781a:	f00c fcc6 	bl	80141aa <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 800781e:	4b70      	ldr	r3, [pc, #448]	; (80079e0 <cppLoop+0x2e8>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f3bf 8f5b 	dmb	ish
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d015      	beq.n	8007866 <cppLoop+0x16e>
 800783a:	4869      	ldr	r0, [pc, #420]	; (80079e0 <cppLoop+0x2e8>)
 800783c:	f00c fca9 	bl	8014192 <__cxa_guard_acquire>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf14      	ite	ne
 8007846:	2301      	movne	r3, #1
 8007848:	2300      	moveq	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <cppLoop+0x16e>
 8007850:	485b      	ldr	r0, [pc, #364]	; (80079c0 <cppLoop+0x2c8>)
 8007852:	f7fc f8c3 	bl	80039dc <_ZN9LineTrace9getKiFastEv>
 8007856:	eef0 7a40 	vmov.f32	s15, s0
 800785a:	4b62      	ldr	r3, [pc, #392]	; (80079e4 <cppLoop+0x2ec>)
 800785c:	edc3 7a00 	vstr	s15, [r3]
 8007860:	485f      	ldr	r0, [pc, #380]	; (80079e0 <cppLoop+0x2e8>)
 8007862:	f00c fca2 	bl	80141aa <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 8007866:	4b60      	ldr	r3, [pc, #384]	; (80079e8 <cppLoop+0x2f0>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f3bf 8f5b 	dmb	ish
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d015      	beq.n	80078ae <cppLoop+0x1b6>
 8007882:	4859      	ldr	r0, [pc, #356]	; (80079e8 <cppLoop+0x2f0>)
 8007884:	f00c fc85 	bl	8014192 <__cxa_guard_acquire>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <cppLoop+0x1b6>
 8007898:	4849      	ldr	r0, [pc, #292]	; (80079c0 <cppLoop+0x2c8>)
 800789a:	f7fc f8ae 	bl	80039fa <_ZN9LineTrace9getKdFastEv>
 800789e:	eef0 7a40 	vmov.f32	s15, s0
 80078a2:	4b52      	ldr	r3, [pc, #328]	; (80079ec <cppLoop+0x2f4>)
 80078a4:	edc3 7a00 	vstr	s15, [r3]
 80078a8:	484f      	ldr	r0, [pc, #316]	; (80079e8 <cppLoop+0x2f0>)
 80078aa:	f00c fc7e 	bl	80141aa <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80078ae:	4b50      	ldr	r3, [pc, #320]	; (80079f0 <cppLoop+0x2f8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	f3bf 8f5b 	dmb	ish
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d015      	beq.n	80078f6 <cppLoop+0x1fe>
 80078ca:	4849      	ldr	r0, [pc, #292]	; (80079f0 <cppLoop+0x2f8>)
 80078cc:	f00c fc61 	bl	8014192 <__cxa_guard_acquire>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bf14      	ite	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	2300      	moveq	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <cppLoop+0x1fe>
 80078e0:	4837      	ldr	r0, [pc, #220]	; (80079c0 <cppLoop+0x2c8>)
 80078e2:	f7fc f8e9 	bl	8003ab8 <_ZN9LineTrace17getTargetVelocityEv>
 80078e6:	eef0 7a40 	vmov.f32	s15, s0
 80078ea:	4b42      	ldr	r3, [pc, #264]	; (80079f4 <cppLoop+0x2fc>)
 80078ec:	edc3 7a00 	vstr	s15, [r3]
 80078f0:	483f      	ldr	r0, [pc, #252]	; (80079f0 <cppLoop+0x2f8>)
 80078f2:	f00c fc5a 	bl	80141aa <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 80078f6:	4b40      	ldr	r3, [pc, #256]	; (80079f8 <cppLoop+0x300>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f3bf 8f5b 	dmb	ish
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d015      	beq.n	800793e <cppLoop+0x246>
 8007912:	4839      	ldr	r0, [pc, #228]	; (80079f8 <cppLoop+0x300>)
 8007914:	f00c fc3d 	bl	8014192 <__cxa_guard_acquire>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf14      	ite	ne
 800791e:	2301      	movne	r3, #1
 8007920:	2300      	moveq	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <cppLoop+0x246>
 8007928:	4825      	ldr	r0, [pc, #148]	; (80079c0 <cppLoop+0x2c8>)
 800792a:	f7fc f8d5 	bl	8003ad8 <_ZN9LineTrace14getMaxVelocityEv>
 800792e:	eef0 7a40 	vmov.f32	s15, s0
 8007932:	4b32      	ldr	r3, [pc, #200]	; (80079fc <cppLoop+0x304>)
 8007934:	edc3 7a00 	vstr	s15, [r3]
 8007938:	482f      	ldr	r0, [pc, #188]	; (80079f8 <cppLoop+0x300>)
 800793a:	f00c fc36 	bl	80141aa <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 800793e:	4b30      	ldr	r3, [pc, #192]	; (8007a00 <cppLoop+0x308>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f3bf 8f5b 	dmb	ish
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d015      	beq.n	8007986 <cppLoop+0x28e>
 800795a:	4829      	ldr	r0, [pc, #164]	; (8007a00 <cppLoop+0x308>)
 800795c:	f00c fc19 	bl	8014192 <__cxa_guard_acquire>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf14      	ite	ne
 8007966:	2301      	movne	r3, #1
 8007968:	2300      	moveq	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <cppLoop+0x28e>
 8007970:	4813      	ldr	r0, [pc, #76]	; (80079c0 <cppLoop+0x2c8>)
 8007972:	f7fc f8c1 	bl	8003af8 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007976:	eef0 7a40 	vmov.f32	s15, s0
 800797a:	4b22      	ldr	r3, [pc, #136]	; (8007a04 <cppLoop+0x30c>)
 800797c:	edc3 7a00 	vstr	s15, [r3]
 8007980:	481f      	ldr	r0, [pc, #124]	; (8007a00 <cppLoop+0x308>)
 8007982:	f00c fc12 	bl	80141aa <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007986:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <cppLoop+0x310>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f3bf 8f5b 	dmb	ish
 800798e:	b2db      	uxtb	r3, r3
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d03f      	beq.n	8007a22 <cppLoop+0x32a>
 80079a2:	4819      	ldr	r0, [pc, #100]	; (8007a08 <cppLoop+0x310>)
 80079a4:	f00c fbf5 	bl	8014192 <__cxa_guard_acquire>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d034      	beq.n	8007a22 <cppLoop+0x32a>
 80079b8:	e028      	b.n	8007a0c <cppLoop+0x314>
 80079ba:	bf00      	nop
 80079bc:	2003d404 	.word	0x2003d404
 80079c0:	20017da0 	.word	0x20017da0
 80079c4:	2003d400 	.word	0x2003d400
 80079c8:	2003d40c 	.word	0x2003d40c
 80079cc:	2003d408 	.word	0x2003d408
 80079d0:	2003d414 	.word	0x2003d414
 80079d4:	2003d410 	.word	0x2003d410
 80079d8:	2003d41c 	.word	0x2003d41c
 80079dc:	2003d418 	.word	0x2003d418
 80079e0:	2003d424 	.word	0x2003d424
 80079e4:	2003d420 	.word	0x2003d420
 80079e8:	2003d42c 	.word	0x2003d42c
 80079ec:	2003d428 	.word	0x2003d428
 80079f0:	2003d434 	.word	0x2003d434
 80079f4:	2003d430 	.word	0x2003d430
 80079f8:	2003d43c 	.word	0x2003d43c
 80079fc:	2003d438 	.word	0x2003d438
 8007a00:	2003d444 	.word	0x2003d444
 8007a04:	2003d440 	.word	0x2003d440
 8007a08:	2003d44c 	.word	0x2003d44c
 8007a0c:	48af      	ldr	r0, [pc, #700]	; (8007ccc <cppLoop+0x5d4>)
 8007a0e:	f7fc f883 	bl	8003b18 <_ZN9LineTrace14getMinVelocityEv>
 8007a12:	eef0 7a40 	vmov.f32	s15, s0
 8007a16:	4bae      	ldr	r3, [pc, #696]	; (8007cd0 <cppLoop+0x5d8>)
 8007a18:	edc3 7a00 	vstr	s15, [r3]
 8007a1c:	48ad      	ldr	r0, [pc, #692]	; (8007cd4 <cppLoop+0x5dc>)
 8007a1e:	f00c fbc4 	bl	80141aa <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007a22:	4bad      	ldr	r3, [pc, #692]	; (8007cd8 <cppLoop+0x5e0>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	f3bf 8f5b 	dmb	ish
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bf0c      	ite	eq
 8007a34:	2301      	moveq	r3, #1
 8007a36:	2300      	movne	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d015      	beq.n	8007a6a <cppLoop+0x372>
 8007a3e:	48a6      	ldr	r0, [pc, #664]	; (8007cd8 <cppLoop+0x5e0>)
 8007a40:	f00c fba7 	bl	8014192 <__cxa_guard_acquire>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf14      	ite	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	2300      	moveq	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <cppLoop+0x372>
 8007a54:	489d      	ldr	r0, [pc, #628]	; (8007ccc <cppLoop+0x5d4>)
 8007a56:	f7fc f86f 	bl	8003b38 <_ZN9LineTrace15getMinVelocity2Ev>
 8007a5a:	eef0 7a40 	vmov.f32	s15, s0
 8007a5e:	4b9f      	ldr	r3, [pc, #636]	; (8007cdc <cppLoop+0x5e4>)
 8007a60:	edc3 7a00 	vstr	s15, [r3]
 8007a64:	489c      	ldr	r0, [pc, #624]	; (8007cd8 <cppLoop+0x5e0>)
 8007a66:	f00c fba0 	bl	80141aa <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007a6a:	4b9d      	ldr	r3, [pc, #628]	; (8007ce0 <cppLoop+0x5e8>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	f3bf 8f5b 	dmb	ish
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d015      	beq.n	8007ab2 <cppLoop+0x3ba>
 8007a86:	4896      	ldr	r0, [pc, #600]	; (8007ce0 <cppLoop+0x5e8>)
 8007a88:	f00c fb83 	bl	8014192 <__cxa_guard_acquire>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <cppLoop+0x3ba>
 8007a9c:	488b      	ldr	r0, [pc, #556]	; (8007ccc <cppLoop+0x5d4>)
 8007a9e:	f7fc f88f 	bl	8003bc0 <_ZN9LineTrace9getMaxAccEv>
 8007aa2:	eef0 7a40 	vmov.f32	s15, s0
 8007aa6:	4b8f      	ldr	r3, [pc, #572]	; (8007ce4 <cppLoop+0x5ec>)
 8007aa8:	edc3 7a00 	vstr	s15, [r3]
 8007aac:	488c      	ldr	r0, [pc, #560]	; (8007ce0 <cppLoop+0x5e8>)
 8007aae:	f00c fb7c 	bl	80141aa <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007ab2:	4b8d      	ldr	r3, [pc, #564]	; (8007ce8 <cppLoop+0x5f0>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f3bf 8f5b 	dmb	ish
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2301      	moveq	r3, #1
 8007ac6:	2300      	movne	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d015      	beq.n	8007afa <cppLoop+0x402>
 8007ace:	4886      	ldr	r0, [pc, #536]	; (8007ce8 <cppLoop+0x5f0>)
 8007ad0:	f00c fb5f 	bl	8014192 <__cxa_guard_acquire>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bf14      	ite	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	2300      	moveq	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <cppLoop+0x402>
 8007ae4:	4879      	ldr	r0, [pc, #484]	; (8007ccc <cppLoop+0x5d4>)
 8007ae6:	f7fc f8a1 	bl	8003c2c <_ZN9LineTrace9getMaxDecEv>
 8007aea:	eef0 7a40 	vmov.f32	s15, s0
 8007aee:	4b7f      	ldr	r3, [pc, #508]	; (8007cec <cppLoop+0x5f4>)
 8007af0:	edc3 7a00 	vstr	s15, [r3]
 8007af4:	487c      	ldr	r0, [pc, #496]	; (8007ce8 <cppLoop+0x5f0>)
 8007af6:	f00c fb58 	bl	80141aa <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007afa:	4b7d      	ldr	r3, [pc, #500]	; (8007cf0 <cppLoop+0x5f8>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	f3bf 8f5b 	dmb	ish
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d015      	beq.n	8007b42 <cppLoop+0x44a>
 8007b16:	4876      	ldr	r0, [pc, #472]	; (8007cf0 <cppLoop+0x5f8>)
 8007b18:	f00c fb3b 	bl	8014192 <__cxa_guard_acquire>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bf14      	ite	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	2300      	moveq	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <cppLoop+0x44a>
 8007b2c:	4867      	ldr	r0, [pc, #412]	; (8007ccc <cppLoop+0x5d4>)
 8007b2e:	f7fc f86b 	bl	8003c08 <_ZN9LineTrace10getMaxAcc2Ev>
 8007b32:	eef0 7a40 	vmov.f32	s15, s0
 8007b36:	4b6f      	ldr	r3, [pc, #444]	; (8007cf4 <cppLoop+0x5fc>)
 8007b38:	edc3 7a00 	vstr	s15, [r3]
 8007b3c:	486c      	ldr	r0, [pc, #432]	; (8007cf0 <cppLoop+0x5f8>)
 8007b3e:	f00c fb34 	bl	80141aa <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007b42:	4b6d      	ldr	r3, [pc, #436]	; (8007cf8 <cppLoop+0x600>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f3bf 8f5b 	dmb	ish
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d015      	beq.n	8007b8a <cppLoop+0x492>
 8007b5e:	4866      	ldr	r0, [pc, #408]	; (8007cf8 <cppLoop+0x600>)
 8007b60:	f00c fb17 	bl	8014192 <__cxa_guard_acquire>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf14      	ite	ne
 8007b6a:	2301      	movne	r3, #1
 8007b6c:	2300      	moveq	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <cppLoop+0x492>
 8007b74:	4855      	ldr	r0, [pc, #340]	; (8007ccc <cppLoop+0x5d4>)
 8007b76:	f7fc f835 	bl	8003be4 <_ZN9LineTrace10getMaxDec2Ev>
 8007b7a:	eef0 7a40 	vmov.f32	s15, s0
 8007b7e:	4b5f      	ldr	r3, [pc, #380]	; (8007cfc <cppLoop+0x604>)
 8007b80:	edc3 7a00 	vstr	s15, [r3]
 8007b84:	485c      	ldr	r0, [pc, #368]	; (8007cf8 <cppLoop+0x600>)
 8007b86:	f00c fb10 	bl	80141aa <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007b8a:	485d      	ldr	r0, [pc, #372]	; (8007d00 <cppLoop+0x608>)
 8007b8c:	f7fd fae6 	bl	800515c <_ZN12RotarySwitch8getValueEv>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b0f      	cmp	r3, #15
 8007b94:	f201 84d9 	bhi.w	800954a <cppLoop+0x1e52>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <cppLoop+0x4a8>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007be1 	.word	0x08007be1
 8007ba4:	08007fcd 	.word	0x08007fcd
 8007ba8:	08008061 	.word	0x08008061
 8007bac:	080081b3 	.word	0x080081b3
 8007bb0:	080082b9 	.word	0x080082b9
 8007bb4:	0800853d 	.word	0x0800853d
 8007bb8:	08008609 	.word	0x08008609
 8007bbc:	08008889 	.word	0x08008889
 8007bc0:	08008b1d 	.word	0x08008b1d
 8007bc4:	08008d9d 	.word	0x08008d9d
 8007bc8:	08009127 	.word	0x08009127
 8007bcc:	080091b7 	.word	0x080091b7
 8007bd0:	08009253 	.word	0x08009253
 8007bd4:	080092ed 	.word	0x080092ed
 8007bd8:	080093fd 	.word	0x080093fd
 8007bdc:	080094a5 	.word	0x080094a5
	case 0:
		led.fullColor('W');
 8007be0:	2157      	movs	r1, #87	; 0x57
 8007be2:	4848      	ldr	r0, [pc, #288]	; (8007d04 <cppLoop+0x60c>)
 8007be4:	f7fa f916 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007be8:	f7f9 fa5a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007bec:	2100      	movs	r1, #0
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f7f9 fa66 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007bf4:	4835      	ldr	r0, [pc, #212]	; (8007ccc <cppLoop+0x5d4>)
 8007bf6:	f7fb feb5 	bl	8003964 <_ZN9LineTrace5getKpEv>
 8007bfa:	eeb0 7a40 	vmov.f32	s14, s0
 8007bfe:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007d08 <cppLoop+0x610>
 8007c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c06:	ee17 0a90 	vmov	r0, s15
 8007c0a:	f7f8 fcb5 	bl	8000578 <__aeabi_f2d>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	461a      	mov	r2, r3
 8007c14:	4623      	mov	r3, r4
 8007c16:	483d      	ldr	r0, [pc, #244]	; (8007d0c <cppLoop+0x614>)
 8007c18:	f7f9 fa7c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f7f9 fa4e 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007c24:	4829      	ldr	r0, [pc, #164]	; (8007ccc <cppLoop+0x5d4>)
 8007c26:	f7fb feac 	bl	8003982 <_ZN9LineTrace5getKiEv>
 8007c2a:	eeb0 7a40 	vmov.f32	s14, s0
 8007c2e:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007d10 <cppLoop+0x618>
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	ee17 0a90 	vmov	r0, s15
 8007c3a:	f7f8 fc9d 	bl	8000578 <__aeabi_f2d>
 8007c3e:	4605      	mov	r5, r0
 8007c40:	460e      	mov	r6, r1
 8007c42:	4822      	ldr	r0, [pc, #136]	; (8007ccc <cppLoop+0x5d4>)
 8007c44:	f7fb feac 	bl	80039a0 <_ZN9LineTrace5getKdEv>
 8007c48:	eeb0 7a40 	vmov.f32	s14, s0
 8007c4c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007d14 <cppLoop+0x61c>
 8007c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c54:	ee17 0a90 	vmov	r0, s15
 8007c58:	f7f8 fc8e 	bl	8000578 <__aeabi_f2d>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	e9cd 3400 	strd	r3, r4, [sp]
 8007c64:	462a      	mov	r2, r5
 8007c66:	4633      	mov	r3, r6
 8007c68:	482b      	ldr	r0, [pc, #172]	; (8007d18 <cppLoop+0x620>)
 8007c6a:	f7f9 fa53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007c6e:	482b      	ldr	r0, [pc, #172]	; (8007d1c <cppLoop+0x624>)
 8007c70:	f7fa f86c 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	bf0c      	ite	eq
 8007c7a:	2301      	moveq	r3, #1
 8007c7c:	2300      	movne	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d04f      	beq.n	8007d24 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007c84:	2201      	movs	r2, #1
 8007c86:	f04f 31ff 	mov.w	r1, #4294967295
 8007c8a:	481e      	ldr	r0, [pc, #120]	; (8007d04 <cppLoop+0x60c>)
 8007c8c:	f7fa f97e 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007c90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007c94:	f001 fd98 	bl	80097c8 <HAL_Delay>

			selector++;
 8007c98:	4b21      	ldr	r3, [pc, #132]	; (8007d20 <cppLoop+0x628>)
 8007c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	b21a      	sxth	r2, r3
 8007ca6:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <cppLoop+0x628>)
 8007ca8:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007caa:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <cppLoop+0x628>)
 8007cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	dd02      	ble.n	8007cba <cppLoop+0x5c2>
 8007cb4:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <cppLoop+0x628>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8007cc0:	4810      	ldr	r0, [pc, #64]	; (8007d04 <cppLoop+0x60c>)
 8007cc2:	f7fa f963 	bl	8001f8c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007cc6:	f001 bc42 	b.w	800954e <cppLoop+0x1e56>
 8007cca:	bf00      	nop
 8007ccc:	20017da0 	.word	0x20017da0
 8007cd0:	2003d448 	.word	0x2003d448
 8007cd4:	2003d44c 	.word	0x2003d44c
 8007cd8:	2003d454 	.word	0x2003d454
 8007cdc:	2003d450 	.word	0x2003d450
 8007ce0:	2003d45c 	.word	0x2003d45c
 8007ce4:	2003d458 	.word	0x2003d458
 8007ce8:	2003d464 	.word	0x2003d464
 8007cec:	2003d460 	.word	0x2003d460
 8007cf0:	2003d46c 	.word	0x2003d46c
 8007cf4:	2003d468 	.word	0x2003d468
 8007cf8:	2003d474 	.word	0x2003d474
 8007cfc:	2003d470 	.word	0x2003d470
 8007d00:	200005c4 	.word	0x200005c4
 8007d04:	200005cc 	.word	0x200005cc
 8007d08:	447a0000 	.word	0x447a0000
 8007d0c:	08019abc 	.word	0x08019abc
 8007d10:	42c80000 	.word	0x42c80000
 8007d14:	461c4000 	.word	0x461c4000
 8007d18:	08019ac8 	.word	0x08019ac8
 8007d1c:	200005c0 	.word	0x200005c0
 8007d20:	2003d3f4 	.word	0x2003d3f4
		else if(joy_stick.getValue() == JOY_R){
 8007d24:	489e      	ldr	r0, [pc, #632]	; (8007fa0 <cppLoop+0x8a8>)
 8007d26:	f7fa f811 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	bf0c      	ite	eq
 8007d30:	2301      	moveq	r3, #1
 8007d32:	2300      	movne	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d059      	beq.n	8007dee <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d40:	4898      	ldr	r0, [pc, #608]	; (8007fa4 <cppLoop+0x8ac>)
 8007d42:	f7fa f923 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d46:	2064      	movs	r0, #100	; 0x64
 8007d48:	f001 fd3e 	bl	80097c8 <HAL_Delay>
			if(selector == 0){
 8007d4c:	4b96      	ldr	r3, [pc, #600]	; (8007fa8 <cppLoop+0x8b0>)
 8007d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d113      	bne.n	8007d7e <cppLoop+0x686>
				adj_kp = adj_kp + 0.00001;
 8007d56:	4b95      	ldr	r3, [pc, #596]	; (8007fac <cppLoop+0x8b4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7f8 fc0c 	bl	8000578 <__aeabi_f2d>
 8007d60:	a389      	add	r3, pc, #548	; (adr r3, 8007f88 <cppLoop+0x890>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f7f8 faa9 	bl	80002bc <__adddf3>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	4621      	mov	r1, r4
 8007d72:	f7f8 ff51 	bl	8000c18 <__aeabi_d2f>
 8007d76:	4602      	mov	r2, r0
 8007d78:	4b8c      	ldr	r3, [pc, #560]	; (8007fac <cppLoop+0x8b4>)
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	e02b      	b.n	8007dd6 <cppLoop+0x6de>
			else if(selector == 1){
 8007d7e:	4b8a      	ldr	r3, [pc, #552]	; (8007fa8 <cppLoop+0x8b0>)
 8007d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d113      	bne.n	8007db0 <cppLoop+0x6b8>
				adj_ki = adj_ki + 0.0001;
 8007d88:	4b89      	ldr	r3, [pc, #548]	; (8007fb0 <cppLoop+0x8b8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7f8 fbf3 	bl	8000578 <__aeabi_f2d>
 8007d92:	a37f      	add	r3, pc, #508	; (adr r3, 8007f90 <cppLoop+0x898>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fa90 	bl	80002bc <__adddf3>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	4618      	mov	r0, r3
 8007da2:	4621      	mov	r1, r4
 8007da4:	f7f8 ff38 	bl	8000c18 <__aeabi_d2f>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4b81      	ldr	r3, [pc, #516]	; (8007fb0 <cppLoop+0x8b8>)
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e012      	b.n	8007dd6 <cppLoop+0x6de>
				adj_kd = adj_kd + 0.000001;
 8007db0:	4b80      	ldr	r3, [pc, #512]	; (8007fb4 <cppLoop+0x8bc>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7f8 fbdf 	bl	8000578 <__aeabi_f2d>
 8007dba:	a377      	add	r3, pc, #476	; (adr r3, 8007f98 <cppLoop+0x8a0>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fa7c 	bl	80002bc <__adddf3>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4618      	mov	r0, r3
 8007dca:	4621      	mov	r1, r4
 8007dcc:	f7f8 ff24 	bl	8000c18 <__aeabi_d2f>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b78      	ldr	r3, [pc, #480]	; (8007fb4 <cppLoop+0x8bc>)
 8007dd4:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007dd6:	2152      	movs	r1, #82	; 0x52
 8007dd8:	4872      	ldr	r0, [pc, #456]	; (8007fa4 <cppLoop+0x8ac>)
 8007dda:	f7fa f81b 	bl	8001e14 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007dde:	2200      	movs	r2, #0
 8007de0:	f04f 31ff 	mov.w	r1, #4294967295
 8007de4:	486f      	ldr	r0, [pc, #444]	; (8007fa4 <cppLoop+0x8ac>)
 8007de6:	f7fa f8d1 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8007dea:	f001 bbb0 	b.w	800954e <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_L){
 8007dee:	486c      	ldr	r0, [pc, #432]	; (8007fa0 <cppLoop+0x8a8>)
 8007df0:	f7f9 ffac 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	bf0c      	ite	eq
 8007dfa:	2301      	moveq	r3, #1
 8007dfc:	2300      	movne	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d059      	beq.n	8007eb8 <cppLoop+0x7c0>
			led.LR(-1, 1);
 8007e04:	2201      	movs	r2, #1
 8007e06:	f04f 31ff 	mov.w	r1, #4294967295
 8007e0a:	4866      	ldr	r0, [pc, #408]	; (8007fa4 <cppLoop+0x8ac>)
 8007e0c:	f7fa f8be 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e10:	2064      	movs	r0, #100	; 0x64
 8007e12:	f001 fcd9 	bl	80097c8 <HAL_Delay>
			if(selector == 0){
 8007e16:	4b64      	ldr	r3, [pc, #400]	; (8007fa8 <cppLoop+0x8b0>)
 8007e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d113      	bne.n	8007e48 <cppLoop+0x750>
				adj_kp = adj_kp - 0.00001;
 8007e20:	4b62      	ldr	r3, [pc, #392]	; (8007fac <cppLoop+0x8b4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7f8 fba7 	bl	8000578 <__aeabi_f2d>
 8007e2a:	a357      	add	r3, pc, #348	; (adr r3, 8007f88 <cppLoop+0x890>)
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f7f8 fa42 	bl	80002b8 <__aeabi_dsub>
 8007e34:	4603      	mov	r3, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	f7f8 feec 	bl	8000c18 <__aeabi_d2f>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4b5a      	ldr	r3, [pc, #360]	; (8007fac <cppLoop+0x8b4>)
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	e02b      	b.n	8007ea0 <cppLoop+0x7a8>
			else if(selector == 1){
 8007e48:	4b57      	ldr	r3, [pc, #348]	; (8007fa8 <cppLoop+0x8b0>)
 8007e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d113      	bne.n	8007e7a <cppLoop+0x782>
				adj_ki = adj_ki - 0.0001;
 8007e52:	4b57      	ldr	r3, [pc, #348]	; (8007fb0 <cppLoop+0x8b8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7f8 fb8e 	bl	8000578 <__aeabi_f2d>
 8007e5c:	a34c      	add	r3, pc, #304	; (adr r3, 8007f90 <cppLoop+0x898>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fa29 	bl	80002b8 <__aeabi_dsub>
 8007e66:	4603      	mov	r3, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	f7f8 fed3 	bl	8000c18 <__aeabi_d2f>
 8007e72:	4602      	mov	r2, r0
 8007e74:	4b4e      	ldr	r3, [pc, #312]	; (8007fb0 <cppLoop+0x8b8>)
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e012      	b.n	8007ea0 <cppLoop+0x7a8>
				adj_kd = adj_kd - 0.000001;
 8007e7a:	4b4e      	ldr	r3, [pc, #312]	; (8007fb4 <cppLoop+0x8bc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7f8 fb7a 	bl	8000578 <__aeabi_f2d>
 8007e84:	a344      	add	r3, pc, #272	; (adr r3, 8007f98 <cppLoop+0x8a0>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f7f8 fa15 	bl	80002b8 <__aeabi_dsub>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	4618      	mov	r0, r3
 8007e94:	4621      	mov	r1, r4
 8007e96:	f7f8 febf 	bl	8000c18 <__aeabi_d2f>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4b45      	ldr	r3, [pc, #276]	; (8007fb4 <cppLoop+0x8bc>)
 8007e9e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007ea0:	2152      	movs	r1, #82	; 0x52
 8007ea2:	4840      	ldr	r0, [pc, #256]	; (8007fa4 <cppLoop+0x8ac>)
 8007ea4:	f7f9 ffb6 	bl	8001e14 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8007eae:	483d      	ldr	r0, [pc, #244]	; (8007fa4 <cppLoop+0x8ac>)
 8007eb0:	f7fa f86c 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8007eb4:	f001 bb4b 	b.w	800954e <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_D){
 8007eb8:	4839      	ldr	r0, [pc, #228]	; (8007fa0 <cppLoop+0x8a8>)
 8007eba:	f7f9 ff47 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2301      	moveq	r3, #1
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d011      	beq.n	8007ef2 <cppLoop+0x7fa>
			led.LR(-1, 1);
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed4:	4833      	ldr	r0, [pc, #204]	; (8007fa4 <cppLoop+0x8ac>)
 8007ed6:	f7fa f859 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007eda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ede:	f001 fc73 	bl	80097c8 <HAL_Delay>
			led.LR(-1, 0);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ee8:	482e      	ldr	r0, [pc, #184]	; (8007fa4 <cppLoop+0x8ac>)
 8007eea:	f7fa f84f 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8007eee:	f001 bb2e 	b.w	800954e <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_C){
 8007ef2:	482b      	ldr	r0, [pc, #172]	; (8007fa0 <cppLoop+0x8a8>)
 8007ef4:	f7f9 ff2a 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	bf0c      	ite	eq
 8007efe:	2301      	moveq	r3, #1
 8007f00:	2300      	movne	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f001 8322 	beq.w	800954e <cppLoop+0x1e56>
			led.LR(-1, 1);
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f10:	4824      	ldr	r0, [pc, #144]	; (8007fa4 <cppLoop+0x8ac>)
 8007f12:	f7fa f83b 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f1a:	f001 fc55 	bl	80097c8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	4b22      	ldr	r3, [pc, #136]	; (8007fac <cppLoop+0x8b4>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	4924      	ldr	r1, [pc, #144]	; (8007fb8 <cppLoop+0x8c0>)
 8007f28:	4824      	ldr	r0, [pc, #144]	; (8007fbc <cppLoop+0x8c4>)
 8007f2a:	f7f9 faf7 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <cppLoop+0x8b8>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	4922      	ldr	r1, [pc, #136]	; (8007fc0 <cppLoop+0x8c8>)
 8007f38:	4820      	ldr	r0, [pc, #128]	; (8007fbc <cppLoop+0x8c4>)
 8007f3a:	f7f9 faef 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <cppLoop+0x8bc>)
 8007f44:	2201      	movs	r2, #1
 8007f46:	491f      	ldr	r1, [pc, #124]	; (8007fc4 <cppLoop+0x8cc>)
 8007f48:	481c      	ldr	r0, [pc, #112]	; (8007fbc <cppLoop+0x8c4>)
 8007f4a:	f7f9 fae7 	bl	800151c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007f4e:	4b17      	ldr	r3, [pc, #92]	; (8007fac <cppLoop+0x8b4>)
 8007f50:	edd3 7a00 	vldr	s15, [r3]
 8007f54:	4b16      	ldr	r3, [pc, #88]	; (8007fb0 <cppLoop+0x8b8>)
 8007f56:	ed93 7a00 	vldr	s14, [r3]
 8007f5a:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <cppLoop+0x8bc>)
 8007f5c:	edd3 6a00 	vldr	s13, [r3]
 8007f60:	eeb0 1a66 	vmov.f32	s2, s13
 8007f64:	eef0 0a47 	vmov.f32	s1, s14
 8007f68:	eeb0 0a67 	vmov.f32	s0, s15
 8007f6c:	4816      	ldr	r0, [pc, #88]	; (8007fc8 <cppLoop+0x8d0>)
 8007f6e:	f7fb fcc7 	bl	8003900 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007f72:	2200      	movs	r2, #0
 8007f74:	f04f 31ff 	mov.w	r1, #4294967295
 8007f78:	480a      	ldr	r0, [pc, #40]	; (8007fa4 <cppLoop+0x8ac>)
 8007f7a:	f7fa f807 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8007f7e:	f001 bae6 	b.w	800954e <cppLoop+0x1e56>
 8007f82:	bf00      	nop
 8007f84:	f3af 8000 	nop.w
 8007f88:	88e368f1 	.word	0x88e368f1
 8007f8c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007f90:	eb1c432d 	.word	0xeb1c432d
 8007f94:	3f1a36e2 	.word	0x3f1a36e2
 8007f98:	a0b5ed8d 	.word	0xa0b5ed8d
 8007f9c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007fa0:	200005c0 	.word	0x200005c0
 8007fa4:	200005cc 	.word	0x200005cc
 8007fa8:	2003d3f4 	.word	0x2003d3f4
 8007fac:	2003d400 	.word	0x2003d400
 8007fb0:	2003d408 	.word	0x2003d408
 8007fb4:	2003d410 	.word	0x2003d410
 8007fb8:	08019ad8 	.word	0x08019ad8
 8007fbc:	08019ae0 	.word	0x08019ae0
 8007fc0:	08019ae8 	.word	0x08019ae8
 8007fc4:	08019af0 	.word	0x08019af0
 8007fc8:	20017da0 	.word	0x20017da0

	case 1:
		led.fullColor('C');
 8007fcc:	2143      	movs	r1, #67	; 0x43
 8007fce:	48ae      	ldr	r0, [pc, #696]	; (8008288 <cppLoop+0xb90>)
 8007fd0:	f7f9 ff20 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fd4:	f7f9 f864 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fd8:	2100      	movs	r1, #0
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f7f9 f870 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007fe0:	48aa      	ldr	r0, [pc, #680]	; (800828c <cppLoop+0xb94>)
 8007fe2:	f7f9 f897 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f7f9 f869 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007fee:	4ba8      	ldr	r3, [pc, #672]	; (8008290 <cppLoop+0xb98>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 fac0 	bl	8000578 <__aeabi_f2d>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4623      	mov	r3, r4
 8008000:	48a4      	ldr	r0, [pc, #656]	; (8008294 <cppLoop+0xb9c>)
 8008002:	f7f9 f887 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008006:	48a4      	ldr	r0, [pc, #656]	; (8008298 <cppLoop+0xba0>)
 8008008:	f7f9 fea0 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 800800c:	4603      	mov	r3, r0
 800800e:	2b02      	cmp	r3, #2
 8008010:	bf0c      	ite	eq
 8008012:	2301      	moveq	r3, #1
 8008014:	2300      	movne	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	f001 829a 	beq.w	8009552 <cppLoop+0x1e5a>
			HAL_Delay(500);
 800801e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008022:	f001 fbd1 	bl	80097c8 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008026:	4b9a      	ldr	r3, [pc, #616]	; (8008290 <cppLoop+0xb98>)
 8008028:	edd3 7a00 	vldr	s15, [r3]
 800802c:	eeb0 0a67 	vmov.f32	s0, s15
 8008030:	489a      	ldr	r0, [pc, #616]	; (800829c <cppLoop+0xba4>)
 8008032:	f7fb fcf1 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	2101      	movs	r1, #1
 800803c:	4892      	ldr	r0, [pc, #584]	; (8008288 <cppLoop+0xb90>)
 800803e:	f7f9 ffa5 	bl	8001f8c <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8008042:	2100      	movs	r1, #0
 8008044:	4895      	ldr	r0, [pc, #596]	; (800829c <cppLoop+0xba4>)
 8008046:	f7fc f8f7 	bl	8004238 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 800804a:	4894      	ldr	r0, [pc, #592]	; (800829c <cppLoop+0xba4>)
 800804c:	f7fb fff6 	bl	800403c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008050:	f04f 32ff 	mov.w	r2, #4294967295
 8008054:	2100      	movs	r1, #0
 8008056:	488c      	ldr	r0, [pc, #560]	; (8008288 <cppLoop+0xb90>)
 8008058:	f7f9 ff98 	bl	8001f8c <_ZN3LED2LREaa>
		}

		break;
 800805c:	f001 ba79 	b.w	8009552 <cppLoop+0x1e5a>

	case 2:
		led.fullColor('B');
 8008060:	2142      	movs	r1, #66	; 0x42
 8008062:	4889      	ldr	r0, [pc, #548]	; (8008288 <cppLoop+0xb90>)
 8008064:	f7f9 fed6 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008068:	f7f9 f81a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800806c:	2100      	movs	r1, #0
 800806e:	2000      	movs	r0, #0
 8008070:	f7f9 f826 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008074:	4885      	ldr	r0, [pc, #532]	; (800828c <cppLoop+0xb94>)
 8008076:	f7f9 f84d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800807a:	2101      	movs	r1, #1
 800807c:	2000      	movs	r0, #0
 800807e:	f7f9 f81f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008082:	4b83      	ldr	r3, [pc, #524]	; (8008290 <cppLoop+0xb98>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f7f8 fa76 	bl	8000578 <__aeabi_f2d>
 800808c:	4603      	mov	r3, r0
 800808e:	460c      	mov	r4, r1
 8008090:	461a      	mov	r2, r3
 8008092:	4623      	mov	r3, r4
 8008094:	4882      	ldr	r0, [pc, #520]	; (80082a0 <cppLoop+0xba8>)
 8008096:	f7f9 f83d 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800809a:	487f      	ldr	r0, [pc, #508]	; (8008298 <cppLoop+0xba0>)
 800809c:	f7f9 fe56 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b10      	cmp	r3, #16
 80080a4:	bf0c      	ite	eq
 80080a6:	2301      	moveq	r3, #1
 80080a8:	2300      	movne	r3, #0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d023      	beq.n	80080f8 <cppLoop+0xa00>
			led.LR(-1, 1);
 80080b0:	2201      	movs	r2, #1
 80080b2:	f04f 31ff 	mov.w	r1, #4294967295
 80080b6:	4874      	ldr	r0, [pc, #464]	; (8008288 <cppLoop+0xb90>)
 80080b8:	f7f9 ff68 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80080bc:	2064      	movs	r0, #100	; 0x64
 80080be:	f001 fb83 	bl	80097c8 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80080c2:	4b73      	ldr	r3, [pc, #460]	; (8008290 <cppLoop+0xb98>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7f8 fa56 	bl	8000578 <__aeabi_f2d>
 80080cc:	a36c      	add	r3, pc, #432	; (adr r3, 8008280 <cppLoop+0xb88>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f7f8 f8f3 	bl	80002bc <__adddf3>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	4618      	mov	r0, r3
 80080dc:	4621      	mov	r1, r4
 80080de:	f7f8 fd9b 	bl	8000c18 <__aeabi_d2f>
 80080e2:	4602      	mov	r2, r0
 80080e4:	4b6a      	ldr	r3, [pc, #424]	; (8008290 <cppLoop+0xb98>)
 80080e6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80080e8:	2200      	movs	r2, #0
 80080ea:	f04f 31ff 	mov.w	r1, #4294967295
 80080ee:	4866      	ldr	r0, [pc, #408]	; (8008288 <cppLoop+0xb90>)
 80080f0:	f7f9 ff4c 	bl	8001f8c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80080f4:	f001 ba2f 	b.w	8009556 <cppLoop+0x1e5e>
		else if(joy_stick.getValue() == JOY_L){
 80080f8:	4867      	ldr	r0, [pc, #412]	; (8008298 <cppLoop+0xba0>)
 80080fa:	f7f9 fe27 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b01      	cmp	r3, #1
 8008102:	bf0c      	ite	eq
 8008104:	2301      	moveq	r3, #1
 8008106:	2300      	movne	r3, #0
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d023      	beq.n	8008156 <cppLoop+0xa5e>
			led.LR(-1, 1);
 800810e:	2201      	movs	r2, #1
 8008110:	f04f 31ff 	mov.w	r1, #4294967295
 8008114:	485c      	ldr	r0, [pc, #368]	; (8008288 <cppLoop+0xb90>)
 8008116:	f7f9 ff39 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800811a:	2064      	movs	r0, #100	; 0x64
 800811c:	f001 fb54 	bl	80097c8 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008120:	4b5b      	ldr	r3, [pc, #364]	; (8008290 <cppLoop+0xb98>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f7f8 fa27 	bl	8000578 <__aeabi_f2d>
 800812a:	a355      	add	r3, pc, #340	; (adr r3, 8008280 <cppLoop+0xb88>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 f8c2 	bl	80002b8 <__aeabi_dsub>
 8008134:	4603      	mov	r3, r0
 8008136:	460c      	mov	r4, r1
 8008138:	4618      	mov	r0, r3
 800813a:	4621      	mov	r1, r4
 800813c:	f7f8 fd6c 	bl	8000c18 <__aeabi_d2f>
 8008140:	4602      	mov	r2, r0
 8008142:	4b53      	ldr	r3, [pc, #332]	; (8008290 <cppLoop+0xb98>)
 8008144:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008146:	2200      	movs	r2, #0
 8008148:	f04f 31ff 	mov.w	r1, #4294967295
 800814c:	484e      	ldr	r0, [pc, #312]	; (8008288 <cppLoop+0xb90>)
 800814e:	f7f9 ff1d 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008152:	f001 ba00 	b.w	8009556 <cppLoop+0x1e5e>
		else if(joy_stick.getValue() == JOY_C){
 8008156:	4850      	ldr	r0, [pc, #320]	; (8008298 <cppLoop+0xba0>)
 8008158:	f7f9 fdf8 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 800815c:	4603      	mov	r3, r0
 800815e:	2b02      	cmp	r3, #2
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	f001 81f4 	beq.w	8009556 <cppLoop+0x1e5e>
			led.LR(-1, 1);
 800816e:	2201      	movs	r2, #1
 8008170:	f04f 31ff 	mov.w	r1, #4294967295
 8008174:	4844      	ldr	r0, [pc, #272]	; (8008288 <cppLoop+0xb90>)
 8008176:	f7f9 ff09 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800817a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800817e:	f001 fb23 	bl	80097c8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008182:	2300      	movs	r3, #0
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	4b42      	ldr	r3, [pc, #264]	; (8008290 <cppLoop+0xb98>)
 8008188:	2201      	movs	r2, #1
 800818a:	4946      	ldr	r1, [pc, #280]	; (80082a4 <cppLoop+0xbac>)
 800818c:	4846      	ldr	r0, [pc, #280]	; (80082a8 <cppLoop+0xbb0>)
 800818e:	f7f9 f9c5 	bl	800151c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008192:	4b3f      	ldr	r3, [pc, #252]	; (8008290 <cppLoop+0xb98>)
 8008194:	edd3 7a00 	vldr	s15, [r3]
 8008198:	eeb0 0a67 	vmov.f32	s0, s15
 800819c:	483f      	ldr	r0, [pc, #252]	; (800829c <cppLoop+0xba4>)
 800819e:	f7fb fc3b 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80081a2:	2200      	movs	r2, #0
 80081a4:	f04f 31ff 	mov.w	r1, #4294967295
 80081a8:	4837      	ldr	r0, [pc, #220]	; (8008288 <cppLoop+0xb90>)
 80081aa:	f7f9 feef 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 80081ae:	f001 b9d2 	b.w	8009556 <cppLoop+0x1e5e>

	case 3:
		led.fullColor('Y');
 80081b2:	2159      	movs	r1, #89	; 0x59
 80081b4:	4834      	ldr	r0, [pc, #208]	; (8008288 <cppLoop+0xb90>)
 80081b6:	f7f9 fe2d 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 80081ba:	f7f8 ff71 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081be:	2100      	movs	r1, #0
 80081c0:	2000      	movs	r0, #0
 80081c2:	f7f8 ff7d 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80081c6:	4b39      	ldr	r3, [pc, #228]	; (80082ac <cppLoop+0xbb4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7f8 f9d4 	bl	8000578 <__aeabi_f2d>
 80081d0:	4603      	mov	r3, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	461a      	mov	r2, r3
 80081d6:	4623      	mov	r3, r4
 80081d8:	4835      	ldr	r0, [pc, #212]	; (80082b0 <cppLoop+0xbb8>)
 80081da:	f7f8 ff9b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80081de:	2101      	movs	r1, #1
 80081e0:	2000      	movs	r0, #0
 80081e2:	f7f8 ff6d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80081e6:	4b33      	ldr	r3, [pc, #204]	; (80082b4 <cppLoop+0xbbc>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7f8 f9c4 	bl	8000578 <__aeabi_f2d>
 80081f0:	4603      	mov	r3, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	461a      	mov	r2, r3
 80081f6:	4623      	mov	r3, r4
 80081f8:	4826      	ldr	r0, [pc, #152]	; (8008294 <cppLoop+0xb9c>)
 80081fa:	f7f8 ff8b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80081fe:	4826      	ldr	r0, [pc, #152]	; (8008298 <cppLoop+0xba0>)
 8008200:	f7f9 fda4 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008204:	4603      	mov	r3, r0
 8008206:	2b02      	cmp	r3, #2
 8008208:	bf0c      	ite	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	2300      	movne	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	f001 81a2 	beq.w	800955a <cppLoop+0x1e62>
			HAL_Delay(500);
 8008216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800821a:	f001 fad5 	bl	80097c8 <HAL_Delay>

			led.LR(1, -1);
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	2101      	movs	r1, #1
 8008224:	4818      	ldr	r0, [pc, #96]	; (8008288 <cppLoop+0xb90>)
 8008226:	f7f9 feb1 	bl	8001f8c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800822a:	2101      	movs	r1, #1
 800822c:	481b      	ldr	r0, [pc, #108]	; (800829c <cppLoop+0xba4>)
 800822e:	f7fc f803 	bl	8004238 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008232:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <cppLoop+0xbbc>)
 8008234:	edd3 7a00 	vldr	s15, [r3]
 8008238:	eeb0 0a67 	vmov.f32	s0, s15
 800823c:	4817      	ldr	r0, [pc, #92]	; (800829c <cppLoop+0xba4>)
 800823e:	f7fb fbeb 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008242:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <cppLoop+0xbb4>)
 8008244:	edd3 7a00 	vldr	s15, [r3]
 8008248:	eeb0 0a67 	vmov.f32	s0, s15
 800824c:	4813      	ldr	r0, [pc, #76]	; (800829c <cppLoop+0xba4>)
 800824e:	f7fb fbf3 	bl	8003a38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008252:	4b18      	ldr	r3, [pc, #96]	; (80082b4 <cppLoop+0xbbc>)
 8008254:	edd3 7a00 	vldr	s15, [r3]
 8008258:	eeb0 0a67 	vmov.f32	s0, s15
 800825c:	480f      	ldr	r0, [pc, #60]	; (800829c <cppLoop+0xba4>)
 800825e:	f7fb fc0b 	bl	8003a78 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008262:	480e      	ldr	r0, [pc, #56]	; (800829c <cppLoop+0xba4>)
 8008264:	f7fa fe4a 	bl	8002efc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008268:	480c      	ldr	r0, [pc, #48]	; (800829c <cppLoop+0xba4>)
 800826a:	f7fb fee7 	bl	800403c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	2100      	movs	r1, #0
 8008274:	4804      	ldr	r0, [pc, #16]	; (8008288 <cppLoop+0xb90>)
 8008276:	f7f9 fe89 	bl	8001f8c <_ZN3LED2LREaa>
		}

		break;
 800827a:	f001 b96e 	b.w	800955a <cppLoop+0x1e62>
 800827e:	bf00      	nop
 8008280:	9999999a 	.word	0x9999999a
 8008284:	3fb99999 	.word	0x3fb99999
 8008288:	200005cc 	.word	0x200005cc
 800828c:	08019af8 	.word	0x08019af8
 8008290:	2003d430 	.word	0x2003d430
 8008294:	08019b04 	.word	0x08019b04
 8008298:	200005c0 	.word	0x200005c0
 800829c:	20017da0 	.word	0x20017da0
 80082a0:	08019b10 	.word	0x08019b10
 80082a4:	08019b1c 	.word	0x08019b1c
 80082a8:	08019ae0 	.word	0x08019ae0
 80082ac:	2003d438 	.word	0x2003d438
 80082b0:	08019b28 	.word	0x08019b28
 80082b4:	2003d448 	.word	0x2003d448

	case 4:
		led.fullColor('G');
 80082b8:	2147      	movs	r1, #71	; 0x47
 80082ba:	4895      	ldr	r0, [pc, #596]	; (8008510 <cppLoop+0xe18>)
 80082bc:	f7f9 fdaa 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 80082c0:	f7f8 feee 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082c4:	2100      	movs	r1, #0
 80082c6:	2000      	movs	r0, #0
 80082c8:	f7f8 fefa 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80082cc:	4891      	ldr	r0, [pc, #580]	; (8008514 <cppLoop+0xe1c>)
 80082ce:	f7fb fc03 	bl	8003ad8 <_ZN9LineTrace14getMaxVelocityEv>
 80082d2:	ee10 3a10 	vmov	r3, s0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7f8 f94e 	bl	8000578 <__aeabi_f2d>
 80082dc:	4603      	mov	r3, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	461a      	mov	r2, r3
 80082e2:	4623      	mov	r3, r4
 80082e4:	488c      	ldr	r0, [pc, #560]	; (8008518 <cppLoop+0xe20>)
 80082e6:	f7f8 ff15 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80082ea:	2101      	movs	r1, #1
 80082ec:	2000      	movs	r0, #0
 80082ee:	f7f8 fee7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80082f2:	4888      	ldr	r0, [pc, #544]	; (8008514 <cppLoop+0xe1c>)
 80082f4:	f7fb fc10 	bl	8003b18 <_ZN9LineTrace14getMinVelocityEv>
 80082f8:	ee10 3a10 	vmov	r3, s0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7f8 f93b 	bl	8000578 <__aeabi_f2d>
 8008302:	4603      	mov	r3, r0
 8008304:	460c      	mov	r4, r1
 8008306:	461a      	mov	r2, r3
 8008308:	4623      	mov	r3, r4
 800830a:	4884      	ldr	r0, [pc, #528]	; (800851c <cppLoop+0xe24>)
 800830c:	f7f8 ff02 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008310:	4883      	ldr	r0, [pc, #524]	; (8008520 <cppLoop+0xe28>)
 8008312:	f7f9 fd1b 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008316:	4603      	mov	r3, r0
 8008318:	2b08      	cmp	r3, #8
 800831a:	bf0c      	ite	eq
 800831c:	2301      	moveq	r3, #1
 800831e:	2300      	movne	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d022      	beq.n	800836c <cppLoop+0xc74>
			led.LR(-1, 1);
 8008326:	2201      	movs	r2, #1
 8008328:	f04f 31ff 	mov.w	r1, #4294967295
 800832c:	4878      	ldr	r0, [pc, #480]	; (8008510 <cppLoop+0xe18>)
 800832e:	f7f9 fe2d 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008336:	f001 fa47 	bl	80097c8 <HAL_Delay>

			selector_vel++;
 800833a:	4b7a      	ldr	r3, [pc, #488]	; (8008524 <cppLoop+0xe2c>)
 800833c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008340:	b29b      	uxth	r3, r3
 8008342:	3301      	adds	r3, #1
 8008344:	b29b      	uxth	r3, r3
 8008346:	b21a      	sxth	r2, r3
 8008348:	4b76      	ldr	r3, [pc, #472]	; (8008524 <cppLoop+0xe2c>)
 800834a:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800834c:	4b75      	ldr	r3, [pc, #468]	; (8008524 <cppLoop+0xe2c>)
 800834e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008352:	2b01      	cmp	r3, #1
 8008354:	dd02      	ble.n	800835c <cppLoop+0xc64>
 8008356:	4b73      	ldr	r3, [pc, #460]	; (8008524 <cppLoop+0xe2c>)
 8008358:	2200      	movs	r2, #0
 800835a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800835c:	2200      	movs	r2, #0
 800835e:	f04f 31ff 	mov.w	r1, #4294967295
 8008362:	486b      	ldr	r0, [pc, #428]	; (8008510 <cppLoop+0xe18>)
 8008364:	f7f9 fe12 	bl	8001f8c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008368:	f001 b8f9 	b.w	800955e <cppLoop+0x1e66>
		else if(joy_stick.getValue() == JOY_R){
 800836c:	486c      	ldr	r0, [pc, #432]	; (8008520 <cppLoop+0xe28>)
 800836e:	f7f9 fced 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008372:	4603      	mov	r3, r0
 8008374:	2b10      	cmp	r3, #16
 8008376:	bf0c      	ite	eq
 8008378:	2301      	moveq	r3, #1
 800837a:	2300      	movne	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d03c      	beq.n	80083fc <cppLoop+0xd04>
			led.LR(-1, 1);
 8008382:	2201      	movs	r2, #1
 8008384:	f04f 31ff 	mov.w	r1, #4294967295
 8008388:	4861      	ldr	r0, [pc, #388]	; (8008510 <cppLoop+0xe18>)
 800838a:	f7f9 fdff 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800838e:	2064      	movs	r0, #100	; 0x64
 8008390:	f001 fa1a 	bl	80097c8 <HAL_Delay>
			if(selector_vel == 0)
 8008394:	4b63      	ldr	r3, [pc, #396]	; (8008524 <cppLoop+0xe2c>)
 8008396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d113      	bne.n	80083c6 <cppLoop+0xcce>
				adj_max_velocity = adj_max_velocity + 0.1;
 800839e:	4b62      	ldr	r3, [pc, #392]	; (8008528 <cppLoop+0xe30>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f8 f8e8 	bl	8000578 <__aeabi_f2d>
 80083a8:	a357      	add	r3, pc, #348	; (adr r3, 8008508 <cppLoop+0xe10>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f7 ff85 	bl	80002bc <__adddf3>
 80083b2:	4603      	mov	r3, r0
 80083b4:	460c      	mov	r4, r1
 80083b6:	4618      	mov	r0, r3
 80083b8:	4621      	mov	r1, r4
 80083ba:	f7f8 fc2d 	bl	8000c18 <__aeabi_d2f>
 80083be:	4602      	mov	r2, r0
 80083c0:	4b59      	ldr	r3, [pc, #356]	; (8008528 <cppLoop+0xe30>)
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	e012      	b.n	80083ec <cppLoop+0xcf4>
				adj_min_velocity = adj_min_velocity + 0.1;
 80083c6:	4b59      	ldr	r3, [pc, #356]	; (800852c <cppLoop+0xe34>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f8 f8d4 	bl	8000578 <__aeabi_f2d>
 80083d0:	a34d      	add	r3, pc, #308	; (adr r3, 8008508 <cppLoop+0xe10>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f7 ff71 	bl	80002bc <__adddf3>
 80083da:	4603      	mov	r3, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	4618      	mov	r0, r3
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7f8 fc19 	bl	8000c18 <__aeabi_d2f>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b50      	ldr	r3, [pc, #320]	; (800852c <cppLoop+0xe34>)
 80083ea:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80083ec:	2200      	movs	r2, #0
 80083ee:	f04f 31ff 	mov.w	r1, #4294967295
 80083f2:	4847      	ldr	r0, [pc, #284]	; (8008510 <cppLoop+0xe18>)
 80083f4:	f7f9 fdca 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 80083f8:	f001 b8b1 	b.w	800955e <cppLoop+0x1e66>
		else if(joy_stick.getValue() == JOY_L){
 80083fc:	4848      	ldr	r0, [pc, #288]	; (8008520 <cppLoop+0xe28>)
 80083fe:	f7f9 fca5 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008402:	4603      	mov	r3, r0
 8008404:	2b01      	cmp	r3, #1
 8008406:	bf0c      	ite	eq
 8008408:	2301      	moveq	r3, #1
 800840a:	2300      	movne	r3, #0
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d03c      	beq.n	800848c <cppLoop+0xd94>
			led.LR(-1, 1);
 8008412:	2201      	movs	r2, #1
 8008414:	f04f 31ff 	mov.w	r1, #4294967295
 8008418:	483d      	ldr	r0, [pc, #244]	; (8008510 <cppLoop+0xe18>)
 800841a:	f7f9 fdb7 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800841e:	2064      	movs	r0, #100	; 0x64
 8008420:	f001 f9d2 	bl	80097c8 <HAL_Delay>
			if(selector_vel == 0)
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <cppLoop+0xe2c>)
 8008426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d113      	bne.n	8008456 <cppLoop+0xd5e>
				adj_max_velocity = adj_max_velocity - 0.1;
 800842e:	4b3e      	ldr	r3, [pc, #248]	; (8008528 <cppLoop+0xe30>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f7f8 f8a0 	bl	8000578 <__aeabi_f2d>
 8008438:	a333      	add	r3, pc, #204	; (adr r3, 8008508 <cppLoop+0xe10>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f7f7 ff3b 	bl	80002b8 <__aeabi_dsub>
 8008442:	4603      	mov	r3, r0
 8008444:	460c      	mov	r4, r1
 8008446:	4618      	mov	r0, r3
 8008448:	4621      	mov	r1, r4
 800844a:	f7f8 fbe5 	bl	8000c18 <__aeabi_d2f>
 800844e:	4602      	mov	r2, r0
 8008450:	4b35      	ldr	r3, [pc, #212]	; (8008528 <cppLoop+0xe30>)
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	e012      	b.n	800847c <cppLoop+0xd84>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008456:	4b35      	ldr	r3, [pc, #212]	; (800852c <cppLoop+0xe34>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7f8 f88c 	bl	8000578 <__aeabi_f2d>
 8008460:	a329      	add	r3, pc, #164	; (adr r3, 8008508 <cppLoop+0xe10>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f7 ff27 	bl	80002b8 <__aeabi_dsub>
 800846a:	4603      	mov	r3, r0
 800846c:	460c      	mov	r4, r1
 800846e:	4618      	mov	r0, r3
 8008470:	4621      	mov	r1, r4
 8008472:	f7f8 fbd1 	bl	8000c18 <__aeabi_d2f>
 8008476:	4602      	mov	r2, r0
 8008478:	4b2c      	ldr	r3, [pc, #176]	; (800852c <cppLoop+0xe34>)
 800847a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800847c:	2200      	movs	r2, #0
 800847e:	f04f 31ff 	mov.w	r1, #4294967295
 8008482:	4823      	ldr	r0, [pc, #140]	; (8008510 <cppLoop+0xe18>)
 8008484:	f7f9 fd82 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008488:	f001 b869 	b.w	800955e <cppLoop+0x1e66>
		else if(joy_stick.getValue() == JOY_C){
 800848c:	4824      	ldr	r0, [pc, #144]	; (8008520 <cppLoop+0xe28>)
 800848e:	f7f9 fc5d 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008492:	4603      	mov	r3, r0
 8008494:	2b02      	cmp	r3, #2
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f001 805d 	beq.w	800955e <cppLoop+0x1e66>
			led.LR(-1, 1);
 80084a4:	2201      	movs	r2, #1
 80084a6:	f04f 31ff 	mov.w	r1, #4294967295
 80084aa:	4819      	ldr	r0, [pc, #100]	; (8008510 <cppLoop+0xe18>)
 80084ac:	f7f9 fd6e 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084b4:	f001 f988 	bl	80097c8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80084b8:	2300      	movs	r3, #0
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <cppLoop+0xe30>)
 80084be:	2201      	movs	r2, #1
 80084c0:	491b      	ldr	r1, [pc, #108]	; (8008530 <cppLoop+0xe38>)
 80084c2:	481c      	ldr	r0, [pc, #112]	; (8008534 <cppLoop+0xe3c>)
 80084c4:	f7f9 f82a 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80084c8:	2300      	movs	r3, #0
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4b17      	ldr	r3, [pc, #92]	; (800852c <cppLoop+0xe34>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	4919      	ldr	r1, [pc, #100]	; (8008538 <cppLoop+0xe40>)
 80084d2:	4818      	ldr	r0, [pc, #96]	; (8008534 <cppLoop+0xe3c>)
 80084d4:	f7f9 f822 	bl	800151c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80084d8:	4b13      	ldr	r3, [pc, #76]	; (8008528 <cppLoop+0xe30>)
 80084da:	edd3 7a00 	vldr	s15, [r3]
 80084de:	eeb0 0a67 	vmov.f32	s0, s15
 80084e2:	480c      	ldr	r0, [pc, #48]	; (8008514 <cppLoop+0xe1c>)
 80084e4:	f7fb faa8 	bl	8003a38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80084e8:	4b10      	ldr	r3, [pc, #64]	; (800852c <cppLoop+0xe34>)
 80084ea:	edd3 7a00 	vldr	s15, [r3]
 80084ee:	eeb0 0a67 	vmov.f32	s0, s15
 80084f2:	4808      	ldr	r0, [pc, #32]	; (8008514 <cppLoop+0xe1c>)
 80084f4:	f7fb fac0 	bl	8003a78 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80084f8:	2200      	movs	r2, #0
 80084fa:	f04f 31ff 	mov.w	r1, #4294967295
 80084fe:	4804      	ldr	r0, [pc, #16]	; (8008510 <cppLoop+0xe18>)
 8008500:	f7f9 fd44 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008504:	f001 b82b 	b.w	800955e <cppLoop+0x1e66>
 8008508:	9999999a 	.word	0x9999999a
 800850c:	3fb99999 	.word	0x3fb99999
 8008510:	200005cc 	.word	0x200005cc
 8008514:	20017da0 	.word	0x20017da0
 8008518:	08019b28 	.word	0x08019b28
 800851c:	08019b10 	.word	0x08019b10
 8008520:	200005c0 	.word	0x200005c0
 8008524:	2003d3fa 	.word	0x2003d3fa
 8008528:	2003d438 	.word	0x2003d438
 800852c:	2003d448 	.word	0x2003d448
 8008530:	08019b34 	.word	0x08019b34
 8008534:	08019ae0 	.word	0x08019ae0
 8008538:	08019b40 	.word	0x08019b40

	case 5:
		led.fullColor('M');
 800853c:	214d      	movs	r1, #77	; 0x4d
 800853e:	48aa      	ldr	r0, [pc, #680]	; (80087e8 <cppLoop+0x10f0>)
 8008540:	f7f9 fc68 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008544:	f7f8 fdac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008548:	2100      	movs	r1, #0
 800854a:	2000      	movs	r0, #0
 800854c:	f7f8 fdb8 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008550:	4ba6      	ldr	r3, [pc, #664]	; (80087ec <cppLoop+0x10f4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f7f8 f80f 	bl	8000578 <__aeabi_f2d>
 800855a:	4603      	mov	r3, r0
 800855c:	460c      	mov	r4, r1
 800855e:	461a      	mov	r2, r3
 8008560:	4623      	mov	r3, r4
 8008562:	48a3      	ldr	r0, [pc, #652]	; (80087f0 <cppLoop+0x10f8>)
 8008564:	f7f8 fdd6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008568:	2101      	movs	r1, #1
 800856a:	2000      	movs	r0, #0
 800856c:	f7f8 fda8 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008570:	4ba0      	ldr	r3, [pc, #640]	; (80087f4 <cppLoop+0x10fc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f7f7 ffff 	bl	8000578 <__aeabi_f2d>
 800857a:	4603      	mov	r3, r0
 800857c:	460c      	mov	r4, r1
 800857e:	461a      	mov	r2, r3
 8008580:	4623      	mov	r3, r4
 8008582:	489d      	ldr	r0, [pc, #628]	; (80087f8 <cppLoop+0x1100>)
 8008584:	f7f8 fdc6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008588:	489c      	ldr	r0, [pc, #624]	; (80087fc <cppLoop+0x1104>)
 800858a:	f7f9 fbdf 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 800858e:	4603      	mov	r3, r0
 8008590:	2b02      	cmp	r3, #2
 8008592:	bf0c      	ite	eq
 8008594:	2301      	moveq	r3, #1
 8008596:	2300      	movne	r3, #0
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 87e1 	beq.w	8009562 <cppLoop+0x1e6a>
			HAL_Delay(500);
 80085a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085a4:	f001 f910 	bl	80097c8 <HAL_Delay>

			led.LR(1, -1);
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	2101      	movs	r1, #1
 80085ae:	488e      	ldr	r0, [pc, #568]	; (80087e8 <cppLoop+0x10f0>)
 80085b0:	f7f9 fcec 	bl	8001f8c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80085b4:	2102      	movs	r1, #2
 80085b6:	4892      	ldr	r0, [pc, #584]	; (8008800 <cppLoop+0x1108>)
 80085b8:	f7fb fe3e 	bl	8004238 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80085bc:	4b8d      	ldr	r3, [pc, #564]	; (80087f4 <cppLoop+0x10fc>)
 80085be:	edd3 7a00 	vldr	s15, [r3]
 80085c2:	eeb0 0a67 	vmov.f32	s0, s15
 80085c6:	488e      	ldr	r0, [pc, #568]	; (8008800 <cppLoop+0x1108>)
 80085c8:	f7fb fa26 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80085cc:	4b87      	ldr	r3, [pc, #540]	; (80087ec <cppLoop+0x10f4>)
 80085ce:	edd3 7a00 	vldr	s15, [r3]
 80085d2:	eeb0 0a67 	vmov.f32	s0, s15
 80085d6:	488a      	ldr	r0, [pc, #552]	; (8008800 <cppLoop+0x1108>)
 80085d8:	f7fb fa3e 	bl	8003a58 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80085dc:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <cppLoop+0x10fc>)
 80085de:	edd3 7a00 	vldr	s15, [r3]
 80085e2:	eeb0 0a67 	vmov.f32	s0, s15
 80085e6:	4886      	ldr	r0, [pc, #536]	; (8008800 <cppLoop+0x1108>)
 80085e8:	f7fb fa56 	bl	8003a98 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 80085ec:	4884      	ldr	r0, [pc, #528]	; (8008800 <cppLoop+0x1108>)
 80085ee:	f7fa fc85 	bl	8002efc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80085f2:	4883      	ldr	r0, [pc, #524]	; (8008800 <cppLoop+0x1108>)
 80085f4:	f7fb fd22 	bl	800403c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80085f8:	f04f 32ff 	mov.w	r2, #4294967295
 80085fc:	2100      	movs	r1, #0
 80085fe:	487a      	ldr	r0, [pc, #488]	; (80087e8 <cppLoop+0x10f0>)
 8008600:	f7f9 fcc4 	bl	8001f8c <_ZN3LED2LREaa>
		}

		break;
 8008604:	f000 bfad 	b.w	8009562 <cppLoop+0x1e6a>

	case 6:
		led.fullColor('R');
 8008608:	2152      	movs	r1, #82	; 0x52
 800860a:	4877      	ldr	r0, [pc, #476]	; (80087e8 <cppLoop+0x10f0>)
 800860c:	f7f9 fc02 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008610:	f7f8 fd46 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008614:	2100      	movs	r1, #0
 8008616:	2000      	movs	r0, #0
 8008618:	f7f8 fd52 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 800861c:	4878      	ldr	r0, [pc, #480]	; (8008800 <cppLoop+0x1108>)
 800861e:	f7fb fa6b 	bl	8003af8 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008622:	ee10 3a10 	vmov	r3, s0
 8008626:	4618      	mov	r0, r3
 8008628:	f7f7 ffa6 	bl	8000578 <__aeabi_f2d>
 800862c:	4603      	mov	r3, r0
 800862e:	460c      	mov	r4, r1
 8008630:	461a      	mov	r2, r3
 8008632:	4623      	mov	r3, r4
 8008634:	486e      	ldr	r0, [pc, #440]	; (80087f0 <cppLoop+0x10f8>)
 8008636:	f7f8 fd6d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800863a:	2101      	movs	r1, #1
 800863c:	2000      	movs	r0, #0
 800863e:	f7f8 fd3f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008642:	486f      	ldr	r0, [pc, #444]	; (8008800 <cppLoop+0x1108>)
 8008644:	f7fb fa78 	bl	8003b38 <_ZN9LineTrace15getMinVelocity2Ev>
 8008648:	ee10 3a10 	vmov	r3, s0
 800864c:	4618      	mov	r0, r3
 800864e:	f7f7 ff93 	bl	8000578 <__aeabi_f2d>
 8008652:	4603      	mov	r3, r0
 8008654:	460c      	mov	r4, r1
 8008656:	461a      	mov	r2, r3
 8008658:	4623      	mov	r3, r4
 800865a:	486a      	ldr	r0, [pc, #424]	; (8008804 <cppLoop+0x110c>)
 800865c:	f7f8 fd5a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008660:	4866      	ldr	r0, [pc, #408]	; (80087fc <cppLoop+0x1104>)
 8008662:	f7f9 fb73 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008666:	4603      	mov	r3, r0
 8008668:	2b08      	cmp	r3, #8
 800866a:	bf0c      	ite	eq
 800866c:	2301      	moveq	r3, #1
 800866e:	2300      	movne	r3, #0
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d022      	beq.n	80086bc <cppLoop+0xfc4>
			led.LR(-1, 1);
 8008676:	2201      	movs	r2, #1
 8008678:	f04f 31ff 	mov.w	r1, #4294967295
 800867c:	485a      	ldr	r0, [pc, #360]	; (80087e8 <cppLoop+0x10f0>)
 800867e:	f7f9 fc85 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008682:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008686:	f001 f89f 	bl	80097c8 <HAL_Delay>

			selector_vel2++;
 800868a:	4b5f      	ldr	r3, [pc, #380]	; (8008808 <cppLoop+0x1110>)
 800868c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008690:	b29b      	uxth	r3, r3
 8008692:	3301      	adds	r3, #1
 8008694:	b29b      	uxth	r3, r3
 8008696:	b21a      	sxth	r2, r3
 8008698:	4b5b      	ldr	r3, [pc, #364]	; (8008808 <cppLoop+0x1110>)
 800869a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 800869c:	4b5a      	ldr	r3, [pc, #360]	; (8008808 <cppLoop+0x1110>)
 800869e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	dd02      	ble.n	80086ac <cppLoop+0xfb4>
 80086a6:	4b58      	ldr	r3, [pc, #352]	; (8008808 <cppLoop+0x1110>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80086ac:	2200      	movs	r2, #0
 80086ae:	f04f 31ff 	mov.w	r1, #4294967295
 80086b2:	484d      	ldr	r0, [pc, #308]	; (80087e8 <cppLoop+0x10f0>)
 80086b4:	f7f9 fc6a 	bl	8001f8c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80086b8:	f000 bf55 	b.w	8009566 <cppLoop+0x1e6e>
		else if(joy_stick.getValue() == JOY_R){
 80086bc:	484f      	ldr	r0, [pc, #316]	; (80087fc <cppLoop+0x1104>)
 80086be:	f7f9 fb45 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	bf0c      	ite	eq
 80086c8:	2301      	moveq	r3, #1
 80086ca:	2300      	movne	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d03c      	beq.n	800874c <cppLoop+0x1054>
			led.LR(-1, 1);
 80086d2:	2201      	movs	r2, #1
 80086d4:	f04f 31ff 	mov.w	r1, #4294967295
 80086d8:	4843      	ldr	r0, [pc, #268]	; (80087e8 <cppLoop+0x10f0>)
 80086da:	f7f9 fc57 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086de:	2064      	movs	r0, #100	; 0x64
 80086e0:	f001 f872 	bl	80097c8 <HAL_Delay>
			if(selector_vel2 == 0)
 80086e4:	4b48      	ldr	r3, [pc, #288]	; (8008808 <cppLoop+0x1110>)
 80086e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d113      	bne.n	8008716 <cppLoop+0x101e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 80086ee:	4b3f      	ldr	r3, [pc, #252]	; (80087ec <cppLoop+0x10f4>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7f7 ff40 	bl	8000578 <__aeabi_f2d>
 80086f8:	a339      	add	r3, pc, #228	; (adr r3, 80087e0 <cppLoop+0x10e8>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 fddd 	bl	80002bc <__adddf3>
 8008702:	4603      	mov	r3, r0
 8008704:	460c      	mov	r4, r1
 8008706:	4618      	mov	r0, r3
 8008708:	4621      	mov	r1, r4
 800870a:	f7f8 fa85 	bl	8000c18 <__aeabi_d2f>
 800870e:	4602      	mov	r2, r0
 8008710:	4b36      	ldr	r3, [pc, #216]	; (80087ec <cppLoop+0x10f4>)
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	e012      	b.n	800873c <cppLoop+0x1044>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008716:	4b37      	ldr	r3, [pc, #220]	; (80087f4 <cppLoop+0x10fc>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f7f7 ff2c 	bl	8000578 <__aeabi_f2d>
 8008720:	a32f      	add	r3, pc, #188	; (adr r3, 80087e0 <cppLoop+0x10e8>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdc9 	bl	80002bc <__adddf3>
 800872a:	4603      	mov	r3, r0
 800872c:	460c      	mov	r4, r1
 800872e:	4618      	mov	r0, r3
 8008730:	4621      	mov	r1, r4
 8008732:	f7f8 fa71 	bl	8000c18 <__aeabi_d2f>
 8008736:	4602      	mov	r2, r0
 8008738:	4b2e      	ldr	r3, [pc, #184]	; (80087f4 <cppLoop+0x10fc>)
 800873a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800873c:	2200      	movs	r2, #0
 800873e:	f04f 31ff 	mov.w	r1, #4294967295
 8008742:	4829      	ldr	r0, [pc, #164]	; (80087e8 <cppLoop+0x10f0>)
 8008744:	f7f9 fc22 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008748:	f000 bf0d 	b.w	8009566 <cppLoop+0x1e6e>
		else if(joy_stick.getValue() == JOY_L){
 800874c:	482b      	ldr	r0, [pc, #172]	; (80087fc <cppLoop+0x1104>)
 800874e:	f7f9 fafd 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008752:	4603      	mov	r3, r0
 8008754:	2b01      	cmp	r3, #1
 8008756:	bf0c      	ite	eq
 8008758:	2301      	moveq	r3, #1
 800875a:	2300      	movne	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d054      	beq.n	800880c <cppLoop+0x1114>
			led.LR(-1, 1);
 8008762:	2201      	movs	r2, #1
 8008764:	f04f 31ff 	mov.w	r1, #4294967295
 8008768:	481f      	ldr	r0, [pc, #124]	; (80087e8 <cppLoop+0x10f0>)
 800876a:	f7f9 fc0f 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800876e:	2064      	movs	r0, #100	; 0x64
 8008770:	f001 f82a 	bl	80097c8 <HAL_Delay>
			if(selector_vel2 == 0)
 8008774:	4b24      	ldr	r3, [pc, #144]	; (8008808 <cppLoop+0x1110>)
 8008776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d113      	bne.n	80087a6 <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800877e:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <cppLoop+0x10f4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4618      	mov	r0, r3
 8008784:	f7f7 fef8 	bl	8000578 <__aeabi_f2d>
 8008788:	a315      	add	r3, pc, #84	; (adr r3, 80087e0 <cppLoop+0x10e8>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd93 	bl	80002b8 <__aeabi_dsub>
 8008792:	4603      	mov	r3, r0
 8008794:	460c      	mov	r4, r1
 8008796:	4618      	mov	r0, r3
 8008798:	4621      	mov	r1, r4
 800879a:	f7f8 fa3d 	bl	8000c18 <__aeabi_d2f>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b12      	ldr	r3, [pc, #72]	; (80087ec <cppLoop+0x10f4>)
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e012      	b.n	80087cc <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80087a6:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <cppLoop+0x10fc>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f7 fee4 	bl	8000578 <__aeabi_f2d>
 80087b0:	a30b      	add	r3, pc, #44	; (adr r3, 80087e0 <cppLoop+0x10e8>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fd7f 	bl	80002b8 <__aeabi_dsub>
 80087ba:	4603      	mov	r3, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	4618      	mov	r0, r3
 80087c0:	4621      	mov	r1, r4
 80087c2:	f7f8 fa29 	bl	8000c18 <__aeabi_d2f>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <cppLoop+0x10fc>)
 80087ca:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80087cc:	2200      	movs	r2, #0
 80087ce:	f04f 31ff 	mov.w	r1, #4294967295
 80087d2:	4805      	ldr	r0, [pc, #20]	; (80087e8 <cppLoop+0x10f0>)
 80087d4:	f7f9 fbda 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 80087d8:	f000 bec5 	b.w	8009566 <cppLoop+0x1e6e>
 80087dc:	f3af 8000 	nop.w
 80087e0:	9999999a 	.word	0x9999999a
 80087e4:	3fb99999 	.word	0x3fb99999
 80087e8:	200005cc 	.word	0x200005cc
 80087ec:	2003d440 	.word	0x2003d440
 80087f0:	08019b4c 	.word	0x08019b4c
 80087f4:	2003d450 	.word	0x2003d450
 80087f8:	08019b04 	.word	0x08019b04
 80087fc:	200005c0 	.word	0x200005c0
 8008800:	20017da0 	.word	0x20017da0
 8008804:	08019b10 	.word	0x08019b10
 8008808:	2003d3fc 	.word	0x2003d3fc
		else if(joy_stick.getValue() == JOY_C){
 800880c:	48b4      	ldr	r0, [pc, #720]	; (8008ae0 <cppLoop+0x13e8>)
 800880e:	f7f9 fa9d 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008812:	4603      	mov	r3, r0
 8008814:	2b02      	cmp	r3, #2
 8008816:	bf0c      	ite	eq
 8008818:	2301      	moveq	r3, #1
 800881a:	2300      	movne	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 86a1 	beq.w	8009566 <cppLoop+0x1e6e>
			led.LR(-1, 1);
 8008824:	2201      	movs	r2, #1
 8008826:	f04f 31ff 	mov.w	r1, #4294967295
 800882a:	48ae      	ldr	r0, [pc, #696]	; (8008ae4 <cppLoop+0x13ec>)
 800882c:	f7f9 fbae 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008830:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008834:	f000 ffc8 	bl	80097c8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008838:	2300      	movs	r3, #0
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4baa      	ldr	r3, [pc, #680]	; (8008ae8 <cppLoop+0x13f0>)
 800883e:	2201      	movs	r2, #1
 8008840:	49aa      	ldr	r1, [pc, #680]	; (8008aec <cppLoop+0x13f4>)
 8008842:	48ab      	ldr	r0, [pc, #684]	; (8008af0 <cppLoop+0x13f8>)
 8008844:	f7f8 fe6a 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008848:	2300      	movs	r3, #0
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4ba9      	ldr	r3, [pc, #676]	; (8008af4 <cppLoop+0x13fc>)
 800884e:	2201      	movs	r2, #1
 8008850:	49a9      	ldr	r1, [pc, #676]	; (8008af8 <cppLoop+0x1400>)
 8008852:	48a7      	ldr	r0, [pc, #668]	; (8008af0 <cppLoop+0x13f8>)
 8008854:	f7f8 fe62 	bl	800151c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008858:	4ba3      	ldr	r3, [pc, #652]	; (8008ae8 <cppLoop+0x13f0>)
 800885a:	edd3 7a00 	vldr	s15, [r3]
 800885e:	eeb0 0a67 	vmov.f32	s0, s15
 8008862:	48a6      	ldr	r0, [pc, #664]	; (8008afc <cppLoop+0x1404>)
 8008864:	f7fb f8f8 	bl	8003a58 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008868:	4ba2      	ldr	r3, [pc, #648]	; (8008af4 <cppLoop+0x13fc>)
 800886a:	edd3 7a00 	vldr	s15, [r3]
 800886e:	eeb0 0a67 	vmov.f32	s0, s15
 8008872:	48a2      	ldr	r0, [pc, #648]	; (8008afc <cppLoop+0x1404>)
 8008874:	f7fb f910 	bl	8003a98 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008878:	2200      	movs	r2, #0
 800887a:	f04f 31ff 	mov.w	r1, #4294967295
 800887e:	4899      	ldr	r0, [pc, #612]	; (8008ae4 <cppLoop+0x13ec>)
 8008880:	f7f9 fb84 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008884:	f000 be6f 	b.w	8009566 <cppLoop+0x1e6e>

	case 7:
		led.fullColor('W');
 8008888:	2157      	movs	r1, #87	; 0x57
 800888a:	4896      	ldr	r0, [pc, #600]	; (8008ae4 <cppLoop+0x13ec>)
 800888c:	f7f9 fac2 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008890:	f7f8 fc06 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008894:	2100      	movs	r1, #0
 8008896:	2000      	movs	r0, #0
 8008898:	f7f8 fc12 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800889c:	4897      	ldr	r0, [pc, #604]	; (8008afc <cppLoop+0x1404>)
 800889e:	f7fb f98f 	bl	8003bc0 <_ZN9LineTrace9getMaxAccEv>
 80088a2:	ee10 3a10 	vmov	r3, s0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f7 fe66 	bl	8000578 <__aeabi_f2d>
 80088ac:	4603      	mov	r3, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	461a      	mov	r2, r3
 80088b2:	4623      	mov	r3, r4
 80088b4:	4892      	ldr	r0, [pc, #584]	; (8008b00 <cppLoop+0x1408>)
 80088b6:	f7f8 fc2d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088ba:	2101      	movs	r1, #1
 80088bc:	2000      	movs	r0, #0
 80088be:	f7f8 fbff 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80088c2:	488e      	ldr	r0, [pc, #568]	; (8008afc <cppLoop+0x1404>)
 80088c4:	f7fb f9b2 	bl	8003c2c <_ZN9LineTrace9getMaxDecEv>
 80088c8:	ee10 3a10 	vmov	r3, s0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7f7 fe53 	bl	8000578 <__aeabi_f2d>
 80088d2:	4603      	mov	r3, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	461a      	mov	r2, r3
 80088d8:	4623      	mov	r3, r4
 80088da:	488a      	ldr	r0, [pc, #552]	; (8008b04 <cppLoop+0x140c>)
 80088dc:	f7f8 fc1a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80088e0:	487f      	ldr	r0, [pc, #508]	; (8008ae0 <cppLoop+0x13e8>)
 80088e2:	f7f9 fa33 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	bf0c      	ite	eq
 80088ec:	2301      	moveq	r3, #1
 80088ee:	2300      	movne	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d022      	beq.n	800893c <cppLoop+0x1244>
			led.LR(-1, 1);
 80088f6:	2201      	movs	r2, #1
 80088f8:	f04f 31ff 	mov.w	r1, #4294967295
 80088fc:	4879      	ldr	r0, [pc, #484]	; (8008ae4 <cppLoop+0x13ec>)
 80088fe:	f7f9 fb45 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008902:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008906:	f000 ff5f 	bl	80097c8 <HAL_Delay>

			selector_acc++;
 800890a:	4b7f      	ldr	r3, [pc, #508]	; (8008b08 <cppLoop+0x1410>)
 800890c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008910:	b29b      	uxth	r3, r3
 8008912:	3301      	adds	r3, #1
 8008914:	b29b      	uxth	r3, r3
 8008916:	b21a      	sxth	r2, r3
 8008918:	4b7b      	ldr	r3, [pc, #492]	; (8008b08 <cppLoop+0x1410>)
 800891a:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800891c:	4b7a      	ldr	r3, [pc, #488]	; (8008b08 <cppLoop+0x1410>)
 800891e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008922:	2b01      	cmp	r3, #1
 8008924:	dd02      	ble.n	800892c <cppLoop+0x1234>
 8008926:	4b78      	ldr	r3, [pc, #480]	; (8008b08 <cppLoop+0x1410>)
 8008928:	2200      	movs	r2, #0
 800892a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800892c:	2200      	movs	r2, #0
 800892e:	f04f 31ff 	mov.w	r1, #4294967295
 8008932:	486c      	ldr	r0, [pc, #432]	; (8008ae4 <cppLoop+0x13ec>)
 8008934:	f7f9 fb2a 	bl	8001f8c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008938:	f000 be17 	b.w	800956a <cppLoop+0x1e72>
		else if(joy_stick.getValue() == JOY_R){
 800893c:	4868      	ldr	r0, [pc, #416]	; (8008ae0 <cppLoop+0x13e8>)
 800893e:	f7f9 fa05 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008942:	4603      	mov	r3, r0
 8008944:	2b10      	cmp	r3, #16
 8008946:	bf0c      	ite	eq
 8008948:	2301      	moveq	r3, #1
 800894a:	2300      	movne	r3, #0
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d03c      	beq.n	80089cc <cppLoop+0x12d4>
			led.LR(-1, 1);
 8008952:	2201      	movs	r2, #1
 8008954:	f04f 31ff 	mov.w	r1, #4294967295
 8008958:	4862      	ldr	r0, [pc, #392]	; (8008ae4 <cppLoop+0x13ec>)
 800895a:	f7f9 fb17 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800895e:	2064      	movs	r0, #100	; 0x64
 8008960:	f000 ff32 	bl	80097c8 <HAL_Delay>
			if(selector_acc == 0){
 8008964:	4b68      	ldr	r3, [pc, #416]	; (8008b08 <cppLoop+0x1410>)
 8008966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d113      	bne.n	8008996 <cppLoop+0x129e>
				adj_acc = adj_acc + 0.1;
 800896e:	4b67      	ldr	r3, [pc, #412]	; (8008b0c <cppLoop+0x1414>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7f7 fe00 	bl	8000578 <__aeabi_f2d>
 8008978:	a357      	add	r3, pc, #348	; (adr r3, 8008ad8 <cppLoop+0x13e0>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 fc9d 	bl	80002bc <__adddf3>
 8008982:	4603      	mov	r3, r0
 8008984:	460c      	mov	r4, r1
 8008986:	4618      	mov	r0, r3
 8008988:	4621      	mov	r1, r4
 800898a:	f7f8 f945 	bl	8000c18 <__aeabi_d2f>
 800898e:	4602      	mov	r2, r0
 8008990:	4b5e      	ldr	r3, [pc, #376]	; (8008b0c <cppLoop+0x1414>)
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e012      	b.n	80089bc <cppLoop+0x12c4>
				adj_dec = adj_dec + 0.1;
 8008996:	4b5e      	ldr	r3, [pc, #376]	; (8008b10 <cppLoop+0x1418>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f7f7 fdec 	bl	8000578 <__aeabi_f2d>
 80089a0:	a34d      	add	r3, pc, #308	; (adr r3, 8008ad8 <cppLoop+0x13e0>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fc89 	bl	80002bc <__adddf3>
 80089aa:	4603      	mov	r3, r0
 80089ac:	460c      	mov	r4, r1
 80089ae:	4618      	mov	r0, r3
 80089b0:	4621      	mov	r1, r4
 80089b2:	f7f8 f931 	bl	8000c18 <__aeabi_d2f>
 80089b6:	4602      	mov	r2, r0
 80089b8:	4b55      	ldr	r3, [pc, #340]	; (8008b10 <cppLoop+0x1418>)
 80089ba:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80089bc:	2200      	movs	r2, #0
 80089be:	f04f 31ff 	mov.w	r1, #4294967295
 80089c2:	4848      	ldr	r0, [pc, #288]	; (8008ae4 <cppLoop+0x13ec>)
 80089c4:	f7f9 fae2 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 80089c8:	f000 bdcf 	b.w	800956a <cppLoop+0x1e72>
		else if(joy_stick.getValue() == JOY_L){
 80089cc:	4844      	ldr	r0, [pc, #272]	; (8008ae0 <cppLoop+0x13e8>)
 80089ce:	f7f9 f9bd 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	bf0c      	ite	eq
 80089d8:	2301      	moveq	r3, #1
 80089da:	2300      	movne	r3, #0
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d03c      	beq.n	8008a5c <cppLoop+0x1364>
			led.LR(-1, 1);
 80089e2:	2201      	movs	r2, #1
 80089e4:	f04f 31ff 	mov.w	r1, #4294967295
 80089e8:	483e      	ldr	r0, [pc, #248]	; (8008ae4 <cppLoop+0x13ec>)
 80089ea:	f7f9 facf 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089ee:	2064      	movs	r0, #100	; 0x64
 80089f0:	f000 feea 	bl	80097c8 <HAL_Delay>
			if(selector_acc == 0){
 80089f4:	4b44      	ldr	r3, [pc, #272]	; (8008b08 <cppLoop+0x1410>)
 80089f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d113      	bne.n	8008a26 <cppLoop+0x132e>
				adj_acc = adj_acc - 0.1;
 80089fe:	4b43      	ldr	r3, [pc, #268]	; (8008b0c <cppLoop+0x1414>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f7 fdb8 	bl	8000578 <__aeabi_f2d>
 8008a08:	a333      	add	r3, pc, #204	; (adr r3, 8008ad8 <cppLoop+0x13e0>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fc53 	bl	80002b8 <__aeabi_dsub>
 8008a12:	4603      	mov	r3, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	4618      	mov	r0, r3
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7f8 f8fd 	bl	8000c18 <__aeabi_d2f>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b3a      	ldr	r3, [pc, #232]	; (8008b0c <cppLoop+0x1414>)
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	e012      	b.n	8008a4c <cppLoop+0x1354>
				adj_dec = adj_dec - 0.1;
 8008a26:	4b3a      	ldr	r3, [pc, #232]	; (8008b10 <cppLoop+0x1418>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7f7 fda4 	bl	8000578 <__aeabi_f2d>
 8008a30:	a329      	add	r3, pc, #164	; (adr r3, 8008ad8 <cppLoop+0x13e0>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fc3f 	bl	80002b8 <__aeabi_dsub>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	4618      	mov	r0, r3
 8008a40:	4621      	mov	r1, r4
 8008a42:	f7f8 f8e9 	bl	8000c18 <__aeabi_d2f>
 8008a46:	4602      	mov	r2, r0
 8008a48:	4b31      	ldr	r3, [pc, #196]	; (8008b10 <cppLoop+0x1418>)
 8008a4a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a52:	4824      	ldr	r0, [pc, #144]	; (8008ae4 <cppLoop+0x13ec>)
 8008a54:	f7f9 fa9a 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008a58:	f000 bd87 	b.w	800956a <cppLoop+0x1e72>
		else if(joy_stick.getValue() == JOY_C){
 8008a5c:	4820      	ldr	r0, [pc, #128]	; (8008ae0 <cppLoop+0x13e8>)
 8008a5e:	f7f9 f975 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 857b 	beq.w	800956a <cppLoop+0x1e72>
			led.LR(-1, 1);
 8008a74:	2201      	movs	r2, #1
 8008a76:	f04f 31ff 	mov.w	r1, #4294967295
 8008a7a:	481a      	ldr	r0, [pc, #104]	; (8008ae4 <cppLoop+0x13ec>)
 8008a7c:	f7f9 fa86 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a84:	f000 fea0 	bl	80097c8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	4b1f      	ldr	r3, [pc, #124]	; (8008b0c <cppLoop+0x1414>)
 8008a8e:	2201      	movs	r2, #1
 8008a90:	4920      	ldr	r1, [pc, #128]	; (8008b14 <cppLoop+0x141c>)
 8008a92:	4817      	ldr	r0, [pc, #92]	; (8008af0 <cppLoop+0x13f8>)
 8008a94:	f7f8 fd42 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <cppLoop+0x1418>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	491d      	ldr	r1, [pc, #116]	; (8008b18 <cppLoop+0x1420>)
 8008aa2:	4813      	ldr	r0, [pc, #76]	; (8008af0 <cppLoop+0x13f8>)
 8008aa4:	f7f8 fd3a 	bl	800151c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008aa8:	4b18      	ldr	r3, [pc, #96]	; (8008b0c <cppLoop+0x1414>)
 8008aaa:	edd3 7a00 	vldr	s15, [r3]
 8008aae:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <cppLoop+0x1418>)
 8008ab0:	ed93 7a00 	vldr	s14, [r3]
 8008ab4:	eef0 0a47 	vmov.f32	s1, s14
 8008ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8008abc:	480f      	ldr	r0, [pc, #60]	; (8008afc <cppLoop+0x1404>)
 8008abe:	f7fb f84b 	bl	8003b58 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ac8:	4806      	ldr	r0, [pc, #24]	; (8008ae4 <cppLoop+0x13ec>)
 8008aca:	f7f9 fa5f 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008ace:	f000 bd4c 	b.w	800956a <cppLoop+0x1e72>
 8008ad2:	bf00      	nop
 8008ad4:	f3af 8000 	nop.w
 8008ad8:	9999999a 	.word	0x9999999a
 8008adc:	3fb99999 	.word	0x3fb99999
 8008ae0:	200005c0 	.word	0x200005c0
 8008ae4:	200005cc 	.word	0x200005cc
 8008ae8:	2003d440 	.word	0x2003d440
 8008aec:	08019b58 	.word	0x08019b58
 8008af0:	08019ae0 	.word	0x08019ae0
 8008af4:	2003d450 	.word	0x2003d450
 8008af8:	08019b64 	.word	0x08019b64
 8008afc:	20017da0 	.word	0x20017da0
 8008b00:	08019b70 	.word	0x08019b70
 8008b04:	08019b7c 	.word	0x08019b7c
 8008b08:	2003d3f6 	.word	0x2003d3f6
 8008b0c:	2003d458 	.word	0x2003d458
 8008b10:	2003d460 	.word	0x2003d460
 8008b14:	08019b88 	.word	0x08019b88
 8008b18:	08019b90 	.word	0x08019b90

	case 8:
		led.fullColor('W');
 8008b1c:	2157      	movs	r1, #87	; 0x57
 8008b1e:	4894      	ldr	r0, [pc, #592]	; (8008d70 <cppLoop+0x1678>)
 8008b20:	f7f9 f978 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b24:	f7f8 fabc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b28:	2100      	movs	r1, #0
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f7f8 fac8 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008b30:	4890      	ldr	r0, [pc, #576]	; (8008d74 <cppLoop+0x167c>)
 8008b32:	f7fb f869 	bl	8003c08 <_ZN9LineTrace10getMaxAcc2Ev>
 8008b36:	ee10 3a10 	vmov	r3, s0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f7 fd1c 	bl	8000578 <__aeabi_f2d>
 8008b40:	4603      	mov	r3, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	461a      	mov	r2, r3
 8008b46:	4623      	mov	r3, r4
 8008b48:	488b      	ldr	r0, [pc, #556]	; (8008d78 <cppLoop+0x1680>)
 8008b4a:	f7f8 fae3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b4e:	2101      	movs	r1, #1
 8008b50:	2000      	movs	r0, #0
 8008b52:	f7f8 fab5 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008b56:	4887      	ldr	r0, [pc, #540]	; (8008d74 <cppLoop+0x167c>)
 8008b58:	f7fb f844 	bl	8003be4 <_ZN9LineTrace10getMaxDec2Ev>
 8008b5c:	ee10 3a10 	vmov	r3, s0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7f7 fd09 	bl	8000578 <__aeabi_f2d>
 8008b66:	4603      	mov	r3, r0
 8008b68:	460c      	mov	r4, r1
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	4623      	mov	r3, r4
 8008b6e:	4883      	ldr	r0, [pc, #524]	; (8008d7c <cppLoop+0x1684>)
 8008b70:	f7f8 fad0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b74:	4882      	ldr	r0, [pc, #520]	; (8008d80 <cppLoop+0x1688>)
 8008b76:	f7f9 f8e9 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b08      	cmp	r3, #8
 8008b7e:	bf0c      	ite	eq
 8008b80:	2301      	moveq	r3, #1
 8008b82:	2300      	movne	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d022      	beq.n	8008bd0 <cppLoop+0x14d8>
			led.LR(-1, 1);
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b90:	4877      	ldr	r0, [pc, #476]	; (8008d70 <cppLoop+0x1678>)
 8008b92:	f7f9 f9fb 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b9a:	f000 fe15 	bl	80097c8 <HAL_Delay>

			selector_acc2++;
 8008b9e:	4b79      	ldr	r3, [pc, #484]	; (8008d84 <cppLoop+0x168c>)
 8008ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	b21a      	sxth	r2, r3
 8008bac:	4b75      	ldr	r3, [pc, #468]	; (8008d84 <cppLoop+0x168c>)
 8008bae:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008bb0:	4b74      	ldr	r3, [pc, #464]	; (8008d84 <cppLoop+0x168c>)
 8008bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	dd02      	ble.n	8008bc0 <cppLoop+0x14c8>
 8008bba:	4b72      	ldr	r3, [pc, #456]	; (8008d84 <cppLoop+0x168c>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8008bc6:	486a      	ldr	r0, [pc, #424]	; (8008d70 <cppLoop+0x1678>)
 8008bc8:	f7f9 f9e0 	bl	8001f8c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008bcc:	f000 bccf 	b.w	800956e <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_R){
 8008bd0:	486b      	ldr	r0, [pc, #428]	; (8008d80 <cppLoop+0x1688>)
 8008bd2:	f7f9 f8bb 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	bf0c      	ite	eq
 8008bdc:	2301      	moveq	r3, #1
 8008bde:	2300      	movne	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d03c      	beq.n	8008c60 <cppLoop+0x1568>
			led.LR(-1, 1);
 8008be6:	2201      	movs	r2, #1
 8008be8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bec:	4860      	ldr	r0, [pc, #384]	; (8008d70 <cppLoop+0x1678>)
 8008bee:	f7f9 f9cd 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bf2:	2064      	movs	r0, #100	; 0x64
 8008bf4:	f000 fde8 	bl	80097c8 <HAL_Delay>
			if(selector_acc2 == 0){
 8008bf8:	4b62      	ldr	r3, [pc, #392]	; (8008d84 <cppLoop+0x168c>)
 8008bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d113      	bne.n	8008c2a <cppLoop+0x1532>
				adj_acc2 = adj_acc2 + 0.1;
 8008c02:	4b61      	ldr	r3, [pc, #388]	; (8008d88 <cppLoop+0x1690>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f7 fcb6 	bl	8000578 <__aeabi_f2d>
 8008c0c:	a356      	add	r3, pc, #344	; (adr r3, 8008d68 <cppLoop+0x1670>)
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f7f7 fb53 	bl	80002bc <__adddf3>
 8008c16:	4603      	mov	r3, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f7f7 fffb 	bl	8000c18 <__aeabi_d2f>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4b58      	ldr	r3, [pc, #352]	; (8008d88 <cppLoop+0x1690>)
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e012      	b.n	8008c50 <cppLoop+0x1558>
				adj_dec2 = adj_dec2 + 0.1;
 8008c2a:	4b58      	ldr	r3, [pc, #352]	; (8008d8c <cppLoop+0x1694>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f7 fca2 	bl	8000578 <__aeabi_f2d>
 8008c34:	a34c      	add	r3, pc, #304	; (adr r3, 8008d68 <cppLoop+0x1670>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fb3f 	bl	80002bc <__adddf3>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	460c      	mov	r4, r1
 8008c42:	4618      	mov	r0, r3
 8008c44:	4621      	mov	r1, r4
 8008c46:	f7f7 ffe7 	bl	8000c18 <__aeabi_d2f>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	4b4f      	ldr	r3, [pc, #316]	; (8008d8c <cppLoop+0x1694>)
 8008c4e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c50:	2200      	movs	r2, #0
 8008c52:	f04f 31ff 	mov.w	r1, #4294967295
 8008c56:	4846      	ldr	r0, [pc, #280]	; (8008d70 <cppLoop+0x1678>)
 8008c58:	f7f9 f998 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008c5c:	f000 bc87 	b.w	800956e <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_L){
 8008c60:	4847      	ldr	r0, [pc, #284]	; (8008d80 <cppLoop+0x1688>)
 8008c62:	f7f9 f873 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	bf0c      	ite	eq
 8008c6c:	2301      	moveq	r3, #1
 8008c6e:	2300      	movne	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d03c      	beq.n	8008cf0 <cppLoop+0x15f8>
			led.LR(-1, 1);
 8008c76:	2201      	movs	r2, #1
 8008c78:	f04f 31ff 	mov.w	r1, #4294967295
 8008c7c:	483c      	ldr	r0, [pc, #240]	; (8008d70 <cppLoop+0x1678>)
 8008c7e:	f7f9 f985 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c82:	2064      	movs	r0, #100	; 0x64
 8008c84:	f000 fda0 	bl	80097c8 <HAL_Delay>
			if(selector_acc2 == 0){
 8008c88:	4b3e      	ldr	r3, [pc, #248]	; (8008d84 <cppLoop+0x168c>)
 8008c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d113      	bne.n	8008cba <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 - 0.1;
 8008c92:	4b3d      	ldr	r3, [pc, #244]	; (8008d88 <cppLoop+0x1690>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7f7 fc6e 	bl	8000578 <__aeabi_f2d>
 8008c9c:	a332      	add	r3, pc, #200	; (adr r3, 8008d68 <cppLoop+0x1670>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fb09 	bl	80002b8 <__aeabi_dsub>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	4618      	mov	r0, r3
 8008cac:	4621      	mov	r1, r4
 8008cae:	f7f7 ffb3 	bl	8000c18 <__aeabi_d2f>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	4b34      	ldr	r3, [pc, #208]	; (8008d88 <cppLoop+0x1690>)
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	e012      	b.n	8008ce0 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 - 0.1;
 8008cba:	4b34      	ldr	r3, [pc, #208]	; (8008d8c <cppLoop+0x1694>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f7 fc5a 	bl	8000578 <__aeabi_f2d>
 8008cc4:	a328      	add	r3, pc, #160	; (adr r3, 8008d68 <cppLoop+0x1670>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 faf5 	bl	80002b8 <__aeabi_dsub>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f7f7 ff9f 	bl	8000c18 <__aeabi_d2f>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	4b2b      	ldr	r3, [pc, #172]	; (8008d8c <cppLoop+0x1694>)
 8008cde:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ce6:	4822      	ldr	r0, [pc, #136]	; (8008d70 <cppLoop+0x1678>)
 8008ce8:	f7f9 f950 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008cec:	f000 bc3f 	b.w	800956e <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_C){
 8008cf0:	4823      	ldr	r0, [pc, #140]	; (8008d80 <cppLoop+0x1688>)
 8008cf2:	f7f9 f82b 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2301      	moveq	r3, #1
 8008cfe:	2300      	movne	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8433 	beq.w	800956e <cppLoop+0x1e76>
			led.LR(-1, 1);
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0e:	4818      	ldr	r0, [pc, #96]	; (8008d70 <cppLoop+0x1678>)
 8008d10:	f7f9 f93c 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d18:	f000 fd56 	bl	80097c8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	4b19      	ldr	r3, [pc, #100]	; (8008d88 <cppLoop+0x1690>)
 8008d22:	2201      	movs	r2, #1
 8008d24:	491a      	ldr	r1, [pc, #104]	; (8008d90 <cppLoop+0x1698>)
 8008d26:	481b      	ldr	r0, [pc, #108]	; (8008d94 <cppLoop+0x169c>)
 8008d28:	f7f8 fbf8 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4b16      	ldr	r3, [pc, #88]	; (8008d8c <cppLoop+0x1694>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	4918      	ldr	r1, [pc, #96]	; (8008d98 <cppLoop+0x16a0>)
 8008d36:	4817      	ldr	r0, [pc, #92]	; (8008d94 <cppLoop+0x169c>)
 8008d38:	f7f8 fbf0 	bl	800151c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008d3c:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <cppLoop+0x1690>)
 8008d3e:	edd3 7a00 	vldr	s15, [r3]
 8008d42:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <cppLoop+0x1694>)
 8008d44:	ed93 7a00 	vldr	s14, [r3]
 8008d48:	eef0 0a47 	vmov.f32	s1, s14
 8008d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d50:	4808      	ldr	r0, [pc, #32]	; (8008d74 <cppLoop+0x167c>)
 8008d52:	f7fa ff1b 	bl	8003b8c <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008d56:	2200      	movs	r2, #0
 8008d58:	f04f 31ff 	mov.w	r1, #4294967295
 8008d5c:	4804      	ldr	r0, [pc, #16]	; (8008d70 <cppLoop+0x1678>)
 8008d5e:	f7f9 f915 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008d62:	f000 bc04 	b.w	800956e <cppLoop+0x1e76>
 8008d66:	bf00      	nop
 8008d68:	9999999a 	.word	0x9999999a
 8008d6c:	3fb99999 	.word	0x3fb99999
 8008d70:	200005cc 	.word	0x200005cc
 8008d74:	20017da0 	.word	0x20017da0
 8008d78:	08019b98 	.word	0x08019b98
 8008d7c:	08019ba4 	.word	0x08019ba4
 8008d80:	200005c0 	.word	0x200005c0
 8008d84:	2003d3f8 	.word	0x2003d3f8
 8008d88:	2003d468 	.word	0x2003d468
 8008d8c:	2003d470 	.word	0x2003d470
 8008d90:	08019bb0 	.word	0x08019bb0
 8008d94:	08019ae0 	.word	0x08019ae0
 8008d98:	08019bbc 	.word	0x08019bbc

	case 9:
		led.fullColor('W');
 8008d9c:	2157      	movs	r1, #87	; 0x57
 8008d9e:	48b2      	ldr	r0, [pc, #712]	; (8009068 <cppLoop+0x1970>)
 8008da0:	f7f9 f838 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008da4:	f7f8 f97c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008da8:	2100      	movs	r1, #0
 8008daa:	2000      	movs	r0, #0
 8008dac:	f7f8 f988 	bl	80010c0 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008db0:	48ae      	ldr	r0, [pc, #696]	; (800906c <cppLoop+0x1974>)
 8008db2:	f7fa fe04 	bl	80039be <_ZN9LineTrace9getKpFastEv>
 8008db6:	eeb0 7a40 	vmov.f32	s14, s0
 8008dba:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009070 <cppLoop+0x1978>
 8008dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc2:	ee17 0a90 	vmov	r0, s15
 8008dc6:	f7f7 fbd7 	bl	8000578 <__aeabi_f2d>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	460c      	mov	r4, r1
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	48a8      	ldr	r0, [pc, #672]	; (8009074 <cppLoop+0x197c>)
 8008dd4:	f7f8 f99e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008dd8:	2101      	movs	r1, #1
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f7f8 f970 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8008de0:	48a2      	ldr	r0, [pc, #648]	; (800906c <cppLoop+0x1974>)
 8008de2:	f7fa fdfb 	bl	80039dc <_ZN9LineTrace9getKiFastEv>
 8008de6:	eeb0 7a40 	vmov.f32	s14, s0
 8008dea:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8009078 <cppLoop+0x1980>
 8008dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df2:	ee17 0a90 	vmov	r0, s15
 8008df6:	f7f7 fbbf 	bl	8000578 <__aeabi_f2d>
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	460e      	mov	r6, r1
 8008dfe:	489b      	ldr	r0, [pc, #620]	; (800906c <cppLoop+0x1974>)
 8008e00:	f7fa fdfb 	bl	80039fa <_ZN9LineTrace9getKdFastEv>
 8008e04:	eeb0 7a40 	vmov.f32	s14, s0
 8008e08:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800907c <cppLoop+0x1984>
 8008e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e10:	ee17 0a90 	vmov	r0, s15
 8008e14:	f7f7 fbb0 	bl	8000578 <__aeabi_f2d>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	e9cd 3400 	strd	r3, r4, [sp]
 8008e20:	462a      	mov	r2, r5
 8008e22:	4633      	mov	r3, r6
 8008e24:	4896      	ldr	r0, [pc, #600]	; (8009080 <cppLoop+0x1988>)
 8008e26:	f7f8 f975 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008e2a:	4896      	ldr	r0, [pc, #600]	; (8009084 <cppLoop+0x198c>)
 8008e2c:	f7f8 ff8e 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b08      	cmp	r3, #8
 8008e34:	bf0c      	ite	eq
 8008e36:	2301      	moveq	r3, #1
 8008e38:	2300      	movne	r3, #0
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d021      	beq.n	8008e84 <cppLoop+0x178c>
			led.LR(-1, 1);
 8008e40:	2201      	movs	r2, #1
 8008e42:	f04f 31ff 	mov.w	r1, #4294967295
 8008e46:	4888      	ldr	r0, [pc, #544]	; (8009068 <cppLoop+0x1970>)
 8008e48:	f7f9 f8a0 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e50:	f000 fcba 	bl	80097c8 <HAL_Delay>

			selector_fast++;
 8008e54:	4b8c      	ldr	r3, [pc, #560]	; (8009088 <cppLoop+0x1990>)
 8008e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	b21a      	sxth	r2, r3
 8008e62:	4b89      	ldr	r3, [pc, #548]	; (8009088 <cppLoop+0x1990>)
 8008e64:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 8008e66:	4b88      	ldr	r3, [pc, #544]	; (8009088 <cppLoop+0x1990>)
 8008e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	dd02      	ble.n	8008e76 <cppLoop+0x177e>
 8008e70:	4b85      	ldr	r3, [pc, #532]	; (8009088 <cppLoop+0x1990>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e76:	2200      	movs	r2, #0
 8008e78:	f04f 31ff 	mov.w	r1, #4294967295
 8008e7c:	487a      	ldr	r0, [pc, #488]	; (8009068 <cppLoop+0x1970>)
 8008e7e:	f7f9 f885 	bl	8001f8c <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 8008e82:	e376      	b.n	8009572 <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_R){
 8008e84:	487f      	ldr	r0, [pc, #508]	; (8009084 <cppLoop+0x198c>)
 8008e86:	f7f8 ff61 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b10      	cmp	r3, #16
 8008e8e:	bf0c      	ite	eq
 8008e90:	2301      	moveq	r3, #1
 8008e92:	2300      	movne	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d058      	beq.n	8008f4c <cppLoop+0x1854>
			led.LR(-1, 1);
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008ea0:	4871      	ldr	r0, [pc, #452]	; (8009068 <cppLoop+0x1970>)
 8008ea2:	f7f9 f873 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ea6:	2064      	movs	r0, #100	; 0x64
 8008ea8:	f000 fc8e 	bl	80097c8 <HAL_Delay>
			if(selector_fast == 0){
 8008eac:	4b76      	ldr	r3, [pc, #472]	; (8009088 <cppLoop+0x1990>)
 8008eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d113      	bne.n	8008ede <cppLoop+0x17e6>
				adj_kp_fast = adj_kp_fast + 0.00001;
 8008eb6:	4b75      	ldr	r3, [pc, #468]	; (800908c <cppLoop+0x1994>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f7 fb5c 	bl	8000578 <__aeabi_f2d>
 8008ec0:	a363      	add	r3, pc, #396	; (adr r3, 8009050 <cppLoop+0x1958>)
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f7f7 f9f9 	bl	80002bc <__adddf3>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	460c      	mov	r4, r1
 8008ece:	4618      	mov	r0, r3
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f7f7 fea1 	bl	8000c18 <__aeabi_d2f>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	4b6c      	ldr	r3, [pc, #432]	; (800908c <cppLoop+0x1994>)
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e02b      	b.n	8008f36 <cppLoop+0x183e>
			else if(selector_fast == 1){
 8008ede:	4b6a      	ldr	r3, [pc, #424]	; (8009088 <cppLoop+0x1990>)
 8008ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d113      	bne.n	8008f10 <cppLoop+0x1818>
				adj_ki_fast = adj_ki_fast + 0.0001;
 8008ee8:	4b69      	ldr	r3, [pc, #420]	; (8009090 <cppLoop+0x1998>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7f7 fb43 	bl	8000578 <__aeabi_f2d>
 8008ef2:	a359      	add	r3, pc, #356	; (adr r3, 8009058 <cppLoop+0x1960>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 f9e0 	bl	80002bc <__adddf3>
 8008efc:	4603      	mov	r3, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4618      	mov	r0, r3
 8008f02:	4621      	mov	r1, r4
 8008f04:	f7f7 fe88 	bl	8000c18 <__aeabi_d2f>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	4b61      	ldr	r3, [pc, #388]	; (8009090 <cppLoop+0x1998>)
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e012      	b.n	8008f36 <cppLoop+0x183e>
				adj_kd_fast = adj_kd_fast + 0.000001;
 8008f10:	4b60      	ldr	r3, [pc, #384]	; (8009094 <cppLoop+0x199c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7f7 fb2f 	bl	8000578 <__aeabi_f2d>
 8008f1a:	a351      	add	r3, pc, #324	; (adr r3, 8009060 <cppLoop+0x1968>)
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f7f7 f9cc 	bl	80002bc <__adddf3>
 8008f24:	4603      	mov	r3, r0
 8008f26:	460c      	mov	r4, r1
 8008f28:	4618      	mov	r0, r3
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	f7f7 fe74 	bl	8000c18 <__aeabi_d2f>
 8008f30:	4602      	mov	r2, r0
 8008f32:	4b58      	ldr	r3, [pc, #352]	; (8009094 <cppLoop+0x199c>)
 8008f34:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008f36:	2152      	movs	r1, #82	; 0x52
 8008f38:	484b      	ldr	r0, [pc, #300]	; (8009068 <cppLoop+0x1970>)
 8008f3a:	f7f8 ff6b 	bl	8001e14 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f04f 31ff 	mov.w	r1, #4294967295
 8008f44:	4848      	ldr	r0, [pc, #288]	; (8009068 <cppLoop+0x1970>)
 8008f46:	f7f9 f821 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8008f4a:	e312      	b.n	8009572 <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_L){
 8008f4c:	484d      	ldr	r0, [pc, #308]	; (8009084 <cppLoop+0x198c>)
 8008f4e:	f7f8 fefd 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	bf0c      	ite	eq
 8008f58:	2301      	moveq	r3, #1
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d058      	beq.n	8009014 <cppLoop+0x191c>
			led.LR(-1, 1);
 8008f62:	2201      	movs	r2, #1
 8008f64:	f04f 31ff 	mov.w	r1, #4294967295
 8008f68:	483f      	ldr	r0, [pc, #252]	; (8009068 <cppLoop+0x1970>)
 8008f6a:	f7f9 f80f 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f6e:	2064      	movs	r0, #100	; 0x64
 8008f70:	f000 fc2a 	bl	80097c8 <HAL_Delay>
			if(selector_fast == 0){
 8008f74:	4b44      	ldr	r3, [pc, #272]	; (8009088 <cppLoop+0x1990>)
 8008f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d113      	bne.n	8008fa6 <cppLoop+0x18ae>
				adj_kp_fast = adj_kp_fast - 0.00001;
 8008f7e:	4b43      	ldr	r3, [pc, #268]	; (800908c <cppLoop+0x1994>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f7 faf8 	bl	8000578 <__aeabi_f2d>
 8008f88:	a331      	add	r3, pc, #196	; (adr r3, 8009050 <cppLoop+0x1958>)
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f7f7 f993 	bl	80002b8 <__aeabi_dsub>
 8008f92:	4603      	mov	r3, r0
 8008f94:	460c      	mov	r4, r1
 8008f96:	4618      	mov	r0, r3
 8008f98:	4621      	mov	r1, r4
 8008f9a:	f7f7 fe3d 	bl	8000c18 <__aeabi_d2f>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4b3a      	ldr	r3, [pc, #232]	; (800908c <cppLoop+0x1994>)
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	e02b      	b.n	8008ffe <cppLoop+0x1906>
			else if(selector_fast == 1){
 8008fa6:	4b38      	ldr	r3, [pc, #224]	; (8009088 <cppLoop+0x1990>)
 8008fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d113      	bne.n	8008fd8 <cppLoop+0x18e0>
				adj_ki_fast = adj_ki_fast - 0.0001;
 8008fb0:	4b37      	ldr	r3, [pc, #220]	; (8009090 <cppLoop+0x1998>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f7 fadf 	bl	8000578 <__aeabi_f2d>
 8008fba:	a327      	add	r3, pc, #156	; (adr r3, 8009058 <cppLoop+0x1960>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f7f7 f97a 	bl	80002b8 <__aeabi_dsub>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	4618      	mov	r0, r3
 8008fca:	4621      	mov	r1, r4
 8008fcc:	f7f7 fe24 	bl	8000c18 <__aeabi_d2f>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	4b2f      	ldr	r3, [pc, #188]	; (8009090 <cppLoop+0x1998>)
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e012      	b.n	8008ffe <cppLoop+0x1906>
				adj_kd_fast = adj_kd_fast - 0.000001;
 8008fd8:	4b2e      	ldr	r3, [pc, #184]	; (8009094 <cppLoop+0x199c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7f7 facb 	bl	8000578 <__aeabi_f2d>
 8008fe2:	a31f      	add	r3, pc, #124	; (adr r3, 8009060 <cppLoop+0x1968>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 f966 	bl	80002b8 <__aeabi_dsub>
 8008fec:	4603      	mov	r3, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	f7f7 fe10 	bl	8000c18 <__aeabi_d2f>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	4b26      	ldr	r3, [pc, #152]	; (8009094 <cppLoop+0x199c>)
 8008ffc:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008ffe:	2152      	movs	r1, #82	; 0x52
 8009000:	4819      	ldr	r0, [pc, #100]	; (8009068 <cppLoop+0x1970>)
 8009002:	f7f8 ff07 	bl	8001e14 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009006:	2200      	movs	r2, #0
 8009008:	f04f 31ff 	mov.w	r1, #4294967295
 800900c:	4816      	ldr	r0, [pc, #88]	; (8009068 <cppLoop+0x1970>)
 800900e:	f7f8 ffbd 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8009012:	e2ae      	b.n	8009572 <cppLoop+0x1e7a>
		else if(joy_stick.getValue() == JOY_D){
 8009014:	481b      	ldr	r0, [pc, #108]	; (8009084 <cppLoop+0x198c>)
 8009016:	f7f8 fe99 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 800901a:	4603      	mov	r3, r0
 800901c:	2b04      	cmp	r3, #4
 800901e:	bf0c      	ite	eq
 8009020:	2301      	moveq	r3, #1
 8009022:	2300      	movne	r3, #0
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d036      	beq.n	8009098 <cppLoop+0x19a0>
			led.LR(-1, 1);
 800902a:	2201      	movs	r2, #1
 800902c:	f04f 31ff 	mov.w	r1, #4294967295
 8009030:	480d      	ldr	r0, [pc, #52]	; (8009068 <cppLoop+0x1970>)
 8009032:	f7f8 ffab 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009036:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800903a:	f000 fbc5 	bl	80097c8 <HAL_Delay>
			led.LR(-1, 0);
 800903e:	2200      	movs	r2, #0
 8009040:	f04f 31ff 	mov.w	r1, #4294967295
 8009044:	4808      	ldr	r0, [pc, #32]	; (8009068 <cppLoop+0x1970>)
 8009046:	f7f8 ffa1 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 800904a:	e292      	b.n	8009572 <cppLoop+0x1e7a>
 800904c:	f3af 8000 	nop.w
 8009050:	88e368f1 	.word	0x88e368f1
 8009054:	3ee4f8b5 	.word	0x3ee4f8b5
 8009058:	eb1c432d 	.word	0xeb1c432d
 800905c:	3f1a36e2 	.word	0x3f1a36e2
 8009060:	a0b5ed8d 	.word	0xa0b5ed8d
 8009064:	3eb0c6f7 	.word	0x3eb0c6f7
 8009068:	200005cc 	.word	0x200005cc
 800906c:	20017da0 	.word	0x20017da0
 8009070:	447a0000 	.word	0x447a0000
 8009074:	08019bc8 	.word	0x08019bc8
 8009078:	42c80000 	.word	0x42c80000
 800907c:	461c4000 	.word	0x461c4000
 8009080:	08019ac8 	.word	0x08019ac8
 8009084:	200005c0 	.word	0x200005c0
 8009088:	2003d3fe 	.word	0x2003d3fe
 800908c:	2003d418 	.word	0x2003d418
 8009090:	2003d420 	.word	0x2003d420
 8009094:	2003d428 	.word	0x2003d428
		else if(joy_stick.getValue() == JOY_C){
 8009098:	48bd      	ldr	r0, [pc, #756]	; (8009390 <cppLoop+0x1c98>)
 800909a:	f7f8 fe57 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	bf0c      	ite	eq
 80090a4:	2301      	moveq	r3, #1
 80090a6:	2300      	movne	r3, #0
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8261 	beq.w	8009572 <cppLoop+0x1e7a>
			led.LR(-1, 1);
 80090b0:	2201      	movs	r2, #1
 80090b2:	f04f 31ff 	mov.w	r1, #4294967295
 80090b6:	48b7      	ldr	r0, [pc, #732]	; (8009394 <cppLoop+0x1c9c>)
 80090b8:	f7f8 ff68 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80090bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80090c0:	f000 fb82 	bl	80097c8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 80090c4:	2300      	movs	r3, #0
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4bb3      	ldr	r3, [pc, #716]	; (8009398 <cppLoop+0x1ca0>)
 80090ca:	2201      	movs	r2, #1
 80090cc:	49b3      	ldr	r1, [pc, #716]	; (800939c <cppLoop+0x1ca4>)
 80090ce:	48b4      	ldr	r0, [pc, #720]	; (80093a0 <cppLoop+0x1ca8>)
 80090d0:	f7f8 fa24 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 80090d4:	2300      	movs	r3, #0
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4bb2      	ldr	r3, [pc, #712]	; (80093a4 <cppLoop+0x1cac>)
 80090da:	2201      	movs	r2, #1
 80090dc:	49b2      	ldr	r1, [pc, #712]	; (80093a8 <cppLoop+0x1cb0>)
 80090de:	48b0      	ldr	r0, [pc, #704]	; (80093a0 <cppLoop+0x1ca8>)
 80090e0:	f7f8 fa1c 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 80090e4:	2300      	movs	r3, #0
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	4bb0      	ldr	r3, [pc, #704]	; (80093ac <cppLoop+0x1cb4>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	49b0      	ldr	r1, [pc, #704]	; (80093b0 <cppLoop+0x1cb8>)
 80090ee:	48ac      	ldr	r0, [pc, #688]	; (80093a0 <cppLoop+0x1ca8>)
 80090f0:	f7f8 fa14 	bl	800151c <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 80090f4:	4ba8      	ldr	r3, [pc, #672]	; (8009398 <cppLoop+0x1ca0>)
 80090f6:	edd3 7a00 	vldr	s15, [r3]
 80090fa:	4baa      	ldr	r3, [pc, #680]	; (80093a4 <cppLoop+0x1cac>)
 80090fc:	ed93 7a00 	vldr	s14, [r3]
 8009100:	4baa      	ldr	r3, [pc, #680]	; (80093ac <cppLoop+0x1cb4>)
 8009102:	edd3 6a00 	vldr	s13, [r3]
 8009106:	eeb0 1a66 	vmov.f32	s2, s13
 800910a:	eef0 0a47 	vmov.f32	s1, s14
 800910e:	eeb0 0a67 	vmov.f32	s0, s15
 8009112:	48a8      	ldr	r0, [pc, #672]	; (80093b4 <cppLoop+0x1cbc>)
 8009114:	f7fa fc0d 	bl	8003932 <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 8009118:	2200      	movs	r2, #0
 800911a:	f04f 31ff 	mov.w	r1, #4294967295
 800911e:	489d      	ldr	r0, [pc, #628]	; (8009394 <cppLoop+0x1c9c>)
 8009120:	f7f8 ff34 	bl	8001f8c <_ZN3LED2LREaa>
		break;
 8009124:	e225      	b.n	8009572 <cppLoop+0x1e7a>

	case 10:
		led.fullColor('~');
 8009126:	217e      	movs	r1, #126	; 0x7e
 8009128:	489a      	ldr	r0, [pc, #616]	; (8009394 <cppLoop+0x1c9c>)
 800912a:	f7f8 fe73 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 800912e:	f7f7 ffb7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009132:	2100      	movs	r1, #0
 8009134:	2000      	movs	r0, #0
 8009136:	f7f7 ffc3 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800913a:	489f      	ldr	r0, [pc, #636]	; (80093b8 <cppLoop+0x1cc0>)
 800913c:	f7f7 ffea 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009140:	2101      	movs	r1, #1
 8009142:	2000      	movs	r0, #0
 8009144:	f7f7 ffbc 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009148:	489c      	ldr	r0, [pc, #624]	; (80093bc <cppLoop+0x1cc4>)
 800914a:	f7f7 ffe3 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800914e:	4890      	ldr	r0, [pc, #576]	; (8009390 <cppLoop+0x1c98>)
 8009150:	f7f8 fdfc 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8009154:	4603      	mov	r3, r0
 8009156:	2b02      	cmp	r3, #2
 8009158:	bf0c      	ite	eq
 800915a:	2301      	moveq	r3, #1
 800915c:	2300      	movne	r3, #0
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 8208 	beq.w	8009576 <cppLoop+0x1e7e>
			HAL_Delay(500);
 8009166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800916a:	f000 fb2d 	bl	80097c8 <HAL_Delay>
			led.LR(-1, 1);
 800916e:	2201      	movs	r2, #1
 8009170:	f04f 31ff 	mov.w	r1, #4294967295
 8009174:	4887      	ldr	r0, [pc, #540]	; (8009394 <cppLoop+0x1c9c>)
 8009176:	f7f8 ff09 	bl	8001f8c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800917a:	2102      	movs	r1, #2
 800917c:	488d      	ldr	r0, [pc, #564]	; (80093b4 <cppLoop+0x1cbc>)
 800917e:	f7fb f85b 	bl	8004238 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009182:	4b8f      	ldr	r3, [pc, #572]	; (80093c0 <cppLoop+0x1cc8>)
 8009184:	edd3 7a00 	vldr	s15, [r3]
 8009188:	eeb0 0a67 	vmov.f32	s0, s15
 800918c:	4889      	ldr	r0, [pc, #548]	; (80093b4 <cppLoop+0x1cbc>)
 800918e:	f7fa fc43 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009192:	4b8b      	ldr	r3, [pc, #556]	; (80093c0 <cppLoop+0x1cc8>)
 8009194:	edd3 7a00 	vldr	s15, [r3]
 8009198:	eeb0 0a67 	vmov.f32	s0, s15
 800919c:	4885      	ldr	r0, [pc, #532]	; (80093b4 <cppLoop+0x1cbc>)
 800919e:	f7fa fc4b 	bl	8003a38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80091a2:	4884      	ldr	r0, [pc, #528]	; (80093b4 <cppLoop+0x1cbc>)
 80091a4:	f7f9 ff78 	bl	8003098 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80091a8:	2200      	movs	r2, #0
 80091aa:	f04f 31ff 	mov.w	r1, #4294967295
 80091ae:	4879      	ldr	r0, [pc, #484]	; (8009394 <cppLoop+0x1c9c>)
 80091b0:	f7f8 feec 	bl	8001f8c <_ZN3LED2LREaa>
		}

		break;
 80091b4:	e1df      	b.n	8009576 <cppLoop+0x1e7e>

	case 11:
		led.fullColor('~');
 80091b6:	217e      	movs	r1, #126	; 0x7e
 80091b8:	4876      	ldr	r0, [pc, #472]	; (8009394 <cppLoop+0x1c9c>)
 80091ba:	f7f8 fe2b 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091be:	f7f7 ff6f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091c2:	2100      	movs	r1, #0
 80091c4:	2000      	movs	r0, #0
 80091c6:	f7f7 ff7b 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80091ca:	487e      	ldr	r0, [pc, #504]	; (80093c4 <cppLoop+0x1ccc>)
 80091cc:	f7f7 ffa2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091d0:	2101      	movs	r1, #1
 80091d2:	2000      	movs	r0, #0
 80091d4:	f7f7 ff74 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80091d8:	487b      	ldr	r0, [pc, #492]	; (80093c8 <cppLoop+0x1cd0>)
 80091da:	f7f7 ff9b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80091de:	486c      	ldr	r0, [pc, #432]	; (8009390 <cppLoop+0x1c98>)
 80091e0:	f7f8 fdb4 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	bf0c      	ite	eq
 80091ea:	2301      	moveq	r3, #1
 80091ec:	2300      	movne	r3, #0
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 81c2 	beq.w	800957a <cppLoop+0x1e82>
			HAL_Delay(1500);
 80091f6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80091fa:	f000 fae5 	bl	80097c8 <HAL_Delay>
			led.LR(-1, 1);
 80091fe:	2201      	movs	r2, #1
 8009200:	f04f 31ff 	mov.w	r1, #4294967295
 8009204:	4863      	ldr	r0, [pc, #396]	; (8009394 <cppLoop+0x1c9c>)
 8009206:	f7f8 fec1 	bl	8001f8c <_ZN3LED2LREaa>

			logger.start();
 800920a:	4870      	ldr	r0, [pc, #448]	; (80093cc <cppLoop+0x1cd4>)
 800920c:	f7fb fbff 	bl	8004a0e <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8009210:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8009378 <cppLoop+0x1c80>
 8009214:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8009380 <cppLoop+0x1c88>
 8009218:	486d      	ldr	r0, [pc, #436]	; (80093d0 <cppLoop+0x1cd8>)
 800921a:	f7fb fc8d 	bl	8004b38 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800921e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009222:	f000 fad1 	bl	80097c8 <HAL_Delay>

			logger.stop();
 8009226:	4869      	ldr	r0, [pc, #420]	; (80093cc <cppLoop+0x1cd4>)
 8009228:	f7fb fc02 	bl	8004a30 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 800922c:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8009388 <cppLoop+0x1c90>
 8009230:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8009388 <cppLoop+0x1c90>
 8009234:	4866      	ldr	r0, [pc, #408]	; (80093d0 <cppLoop+0x1cd8>)
 8009236:	f7fb fc7f 	bl	8004b38 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 800923a:	4a66      	ldr	r2, [pc, #408]	; (80093d4 <cppLoop+0x1cdc>)
 800923c:	4966      	ldr	r1, [pc, #408]	; (80093d8 <cppLoop+0x1ce0>)
 800923e:	4863      	ldr	r0, [pc, #396]	; (80093cc <cppLoop+0x1cd4>)
 8009240:	f7fb faf5 	bl	800482e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009244:	2200      	movs	r2, #0
 8009246:	f04f 31ff 	mov.w	r1, #4294967295
 800924a:	4852      	ldr	r0, [pc, #328]	; (8009394 <cppLoop+0x1c9c>)
 800924c:	f7f8 fe9e 	bl	8001f8c <_ZN3LED2LREaa>
		}
		break;
 8009250:	e193      	b.n	800957a <cppLoop+0x1e82>

	case 12:
		led.fullColor('~');
 8009252:	217e      	movs	r1, #126	; 0x7e
 8009254:	484f      	ldr	r0, [pc, #316]	; (8009394 <cppLoop+0x1c9c>)
 8009256:	f7f8 fddd 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 800925a:	f7f7 ff21 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800925e:	2100      	movs	r1, #0
 8009260:	2000      	movs	r0, #0
 8009262:	f7f7 ff2d 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009266:	485d      	ldr	r0, [pc, #372]	; (80093dc <cppLoop+0x1ce4>)
 8009268:	f7f7 ff54 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800926c:	2101      	movs	r1, #1
 800926e:	2000      	movs	r0, #0
 8009270:	f7f7 ff26 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009274:	485a      	ldr	r0, [pc, #360]	; (80093e0 <cppLoop+0x1ce8>)
 8009276:	f7f7 ff4d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800927a:	4845      	ldr	r0, [pc, #276]	; (8009390 <cppLoop+0x1c98>)
 800927c:	f7f8 fd66 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 8009280:	4603      	mov	r3, r0
 8009282:	2b02      	cmp	r3, #2
 8009284:	bf0c      	ite	eq
 8009286:	2301      	moveq	r3, #1
 8009288:	2300      	movne	r3, #0
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 8176 	beq.w	800957e <cppLoop+0x1e86>
			HAL_Delay(1500);
 8009292:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009296:	f000 fa97 	bl	80097c8 <HAL_Delay>
			led.LR(-1, 1);
 800929a:	2201      	movs	r2, #1
 800929c:	f04f 31ff 	mov.w	r1, #4294967295
 80092a0:	483c      	ldr	r0, [pc, #240]	; (8009394 <cppLoop+0x1c9c>)
 80092a2:	f7f8 fe73 	bl	8001f8c <_ZN3LED2LREaa>

			logger.start();
 80092a6:	4849      	ldr	r0, [pc, #292]	; (80093cc <cppLoop+0x1cd4>)
 80092a8:	f7fb fbb1 	bl	8004a0e <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80092ac:	484d      	ldr	r0, [pc, #308]	; (80093e4 <cppLoop+0x1cec>)
 80092ae:	f7fc fb90 	bl	80059d2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80092b2:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80093e8 <cppLoop+0x1cf0>
 80092b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80092ba:	484a      	ldr	r0, [pc, #296]	; (80093e4 <cppLoop+0x1cec>)
 80092bc:	f7fc fb1c 	bl	80058f8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80092c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092c4:	f000 fa80 	bl	80097c8 <HAL_Delay>

			logger.stop();
 80092c8:	4840      	ldr	r0, [pc, #256]	; (80093cc <cppLoop+0x1cd4>)
 80092ca:	f7fb fbb1 	bl	8004a30 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80092ce:	4845      	ldr	r0, [pc, #276]	; (80093e4 <cppLoop+0x1cec>)
 80092d0:	f7fc fb92 	bl	80059f8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80092d4:	4a45      	ldr	r2, [pc, #276]	; (80093ec <cppLoop+0x1cf4>)
 80092d6:	4940      	ldr	r1, [pc, #256]	; (80093d8 <cppLoop+0x1ce0>)
 80092d8:	483c      	ldr	r0, [pc, #240]	; (80093cc <cppLoop+0x1cd4>)
 80092da:	f7fb faa8 	bl	800482e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80092de:	2200      	movs	r2, #0
 80092e0:	f04f 31ff 	mov.w	r1, #4294967295
 80092e4:	482b      	ldr	r0, [pc, #172]	; (8009394 <cppLoop+0x1c9c>)
 80092e6:	f7f8 fe51 	bl	8001f8c <_ZN3LED2LREaa>
		}
		break;
 80092ea:	e148      	b.n	800957e <cppLoop+0x1e86>

	case 13:
		led.fullColor('~');
 80092ec:	217e      	movs	r1, #126	; 0x7e
 80092ee:	4829      	ldr	r0, [pc, #164]	; (8009394 <cppLoop+0x1c9c>)
 80092f0:	f7f8 fd90 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 80092f4:	f7f7 fed4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092f8:	2100      	movs	r1, #0
 80092fa:	2000      	movs	r0, #0
 80092fc:	f7f7 fee0 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8009300:	483b      	ldr	r0, [pc, #236]	; (80093f0 <cppLoop+0x1cf8>)
 8009302:	f7f7 ff07 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009306:	2101      	movs	r1, #1
 8009308:	2000      	movs	r0, #0
 800930a:	f7f7 fed9 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800930e:	482e      	ldr	r0, [pc, #184]	; (80093c8 <cppLoop+0x1cd0>)
 8009310:	f7f7 ff00 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009314:	481e      	ldr	r0, [pc, #120]	; (8009390 <cppLoop+0x1c98>)
 8009316:	f7f8 fd19 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 800931a:	4603      	mov	r3, r0
 800931c:	2b02      	cmp	r3, #2
 800931e:	bf0c      	ite	eq
 8009320:	2301      	moveq	r3, #1
 8009322:	2300      	movne	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 812b 	beq.w	8009582 <cppLoop+0x1e8a>
			led.LR(-1, 1);
 800932c:	2201      	movs	r2, #1
 800932e:	f04f 31ff 	mov.w	r1, #4294967295
 8009332:	4818      	ldr	r0, [pc, #96]	; (8009394 <cppLoop+0x1c9c>)
 8009334:	f7f8 fe2a 	bl	8001f8c <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8009338:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800933c:	f000 fa44 	bl	80097c8 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8009340:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80093f4 <cppLoop+0x1cfc>
 8009344:	482c      	ldr	r0, [pc, #176]	; (80093f8 <cppLoop+0x1d00>)
 8009346:	f7fc f963 	bl	8005610 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 800934a:	482b      	ldr	r0, [pc, #172]	; (80093f8 <cppLoop+0x1d00>)
 800934c:	f7fc f970 	bl	8005630 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8009350:	f244 405c 	movw	r0, #17500	; 0x445c
 8009354:	f000 fa38 	bl	80097c8 <HAL_Delay>
			sys_ident.stop();
 8009358:	4827      	ldr	r0, [pc, #156]	; (80093f8 <cppLoop+0x1d00>)
 800935a:	f7fc f97d 	bl	8005658 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800935e:	4826      	ldr	r0, [pc, #152]	; (80093f8 <cppLoop+0x1d00>)
 8009360:	f7fc f8e4 	bl	800552c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8009364:	2200      	movs	r2, #0
 8009366:	f04f 31ff 	mov.w	r1, #4294967295
 800936a:	480a      	ldr	r0, [pc, #40]	; (8009394 <cppLoop+0x1c9c>)
 800936c:	f7f8 fe0e 	bl	8001f8c <_ZN3LED2LREaa>
		}
		break;
 8009370:	e107      	b.n	8009582 <cppLoop+0x1e8a>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
 8009378:	33333333 	.word	0x33333333
 800937c:	bfd33333 	.word	0xbfd33333
 8009380:	33333333 	.word	0x33333333
 8009384:	3fd33333 	.word	0x3fd33333
	...
 8009390:	200005c0 	.word	0x200005c0
 8009394:	200005cc 	.word	0x200005cc
 8009398:	2003d418 	.word	0x2003d418
 800939c:	08019bd4 	.word	0x08019bd4
 80093a0:	08019ae0 	.word	0x08019ae0
 80093a4:	2003d420 	.word	0x2003d420
 80093a8:	08019be0 	.word	0x08019be0
 80093ac:	2003d428 	.word	0x2003d428
 80093b0:	08019bec 	.word	0x08019bec
 80093b4:	20017da0 	.word	0x20017da0
 80093b8:	08019bf8 	.word	0x08019bf8
 80093bc:	08019c04 	.word	0x08019c04
 80093c0:	2003d440 	.word	0x2003d440
 80093c4:	08019c10 	.word	0x08019c10
 80093c8:	08019c18 	.word	0x08019c18
 80093cc:	200005f0 	.word	0x200005f0
 80093d0:	200005c8 	.word	0x200005c8
 80093d4:	08019c20 	.word	0x08019c20
 80093d8:	08019c2c 	.word	0x08019c2c
 80093dc:	08019c38 	.word	0x08019c38
 80093e0:	08019c3c 	.word	0x08019c3c
 80093e4:	20017d20 	.word	0x20017d20
 80093e8:	00000000 	.word	0x00000000
 80093ec:	08019c48 	.word	0x08019c48
 80093f0:	08019c54 	.word	0x08019c54
 80093f4:	3e99999a 	.word	0x3e99999a
 80093f8:	20025ab8 	.word	0x20025ab8

	case 14:
		led.fullColor('W');
 80093fc:	2157      	movs	r1, #87	; 0x57
 80093fe:	4867      	ldr	r0, [pc, #412]	; (800959c <cppLoop+0x1ea4>)
 8009400:	f7f8 fd08 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009404:	f7f7 fe4c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009408:	2100      	movs	r1, #0
 800940a:	2000      	movs	r0, #0
 800940c:	f7f7 fe58 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009410:	4863      	ldr	r0, [pc, #396]	; (80095a0 <cppLoop+0x1ea8>)
 8009412:	f7f7 fe7f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009416:	2101      	movs	r1, #1
 8009418:	2000      	movs	r0, #0
 800941a:	f7f7 fe51 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800941e:	4b61      	ldr	r3, [pc, #388]	; (80095a4 <cppLoop+0x1eac>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f7f7 f8a8 	bl	8000578 <__aeabi_f2d>
 8009428:	4603      	mov	r3, r0
 800942a:	460c      	mov	r4, r1
 800942c:	461a      	mov	r2, r3
 800942e:	4623      	mov	r3, r4
 8009430:	485d      	ldr	r0, [pc, #372]	; (80095a8 <cppLoop+0x1eb0>)
 8009432:	f7f7 fe6f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009436:	485d      	ldr	r0, [pc, #372]	; (80095ac <cppLoop+0x1eb4>)
 8009438:	f7f8 fc88 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 800943c:	4603      	mov	r3, r0
 800943e:	2b02      	cmp	r3, #2
 8009440:	bf0c      	ite	eq
 8009442:	2301      	moveq	r3, #1
 8009444:	2300      	movne	r3, #0
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 809c 	beq.w	8009586 <cppLoop+0x1e8e>
			HAL_Delay(500);
 800944e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009452:	f000 f9b9 	bl	80097c8 <HAL_Delay>

			led.LR(1, -1);
 8009456:	f04f 32ff 	mov.w	r2, #4294967295
 800945a:	2101      	movs	r1, #1
 800945c:	484f      	ldr	r0, [pc, #316]	; (800959c <cppLoop+0x1ea4>)
 800945e:	f7f8 fd95 	bl	8001f8c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009462:	2102      	movs	r1, #2
 8009464:	4852      	ldr	r0, [pc, #328]	; (80095b0 <cppLoop+0x1eb8>)
 8009466:	f7fa fee7 	bl	8004238 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800946a:	4b4e      	ldr	r3, [pc, #312]	; (80095a4 <cppLoop+0x1eac>)
 800946c:	edd3 7a00 	vldr	s15, [r3]
 8009470:	eeb0 0a67 	vmov.f32	s0, s15
 8009474:	484e      	ldr	r0, [pc, #312]	; (80095b0 <cppLoop+0x1eb8>)
 8009476:	f7fa facf 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800947a:	4b4a      	ldr	r3, [pc, #296]	; (80095a4 <cppLoop+0x1eac>)
 800947c:	edd3 7a00 	vldr	s15, [r3]
 8009480:	eeb0 0a67 	vmov.f32	s0, s15
 8009484:	484a      	ldr	r0, [pc, #296]	; (80095b0 <cppLoop+0x1eb8>)
 8009486:	f7fa fad7 	bl	8003a38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800948a:	4849      	ldr	r0, [pc, #292]	; (80095b0 <cppLoop+0x1eb8>)
 800948c:	f7f9 fe04 	bl	8003098 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009490:	4847      	ldr	r0, [pc, #284]	; (80095b0 <cppLoop+0x1eb8>)
 8009492:	f7fa fdd3 	bl	800403c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009496:	f04f 32ff 	mov.w	r2, #4294967295
 800949a:	2100      	movs	r1, #0
 800949c:	483f      	ldr	r0, [pc, #252]	; (800959c <cppLoop+0x1ea4>)
 800949e:	f7f8 fd75 	bl	8001f8c <_ZN3LED2LREaa>
		}

		break;
 80094a2:	e070      	b.n	8009586 <cppLoop+0x1e8e>

	case 15:
		led.fullColor('W');
 80094a4:	2157      	movs	r1, #87	; 0x57
 80094a6:	483d      	ldr	r0, [pc, #244]	; (800959c <cppLoop+0x1ea4>)
 80094a8:	f7f8 fcb4 	bl	8001e14 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094ac:	f7f7 fdf8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094b0:	2100      	movs	r1, #0
 80094b2:	2000      	movs	r0, #0
 80094b4:	f7f7 fe04 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80094b8:	483e      	ldr	r0, [pc, #248]	; (80095b4 <cppLoop+0x1ebc>)
 80094ba:	f7f7 fe2b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094be:	2101      	movs	r1, #1
 80094c0:	2000      	movs	r0, #0
 80094c2:	f7f7 fdfd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80094c6:	4b3c      	ldr	r3, [pc, #240]	; (80095b8 <cppLoop+0x1ec0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f7 f854 	bl	8000578 <__aeabi_f2d>
 80094d0:	4603      	mov	r3, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	461a      	mov	r2, r3
 80094d6:	4623      	mov	r3, r4
 80094d8:	4833      	ldr	r0, [pc, #204]	; (80095a8 <cppLoop+0x1eb0>)
 80094da:	f7f7 fe1b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80094de:	4833      	ldr	r0, [pc, #204]	; (80095ac <cppLoop+0x1eb4>)
 80094e0:	f7f8 fc34 	bl	8001d4c <_ZN8JoyStick8getValueEv>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d04a      	beq.n	800958a <cppLoop+0x1e92>
			HAL_Delay(500);
 80094f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094f8:	f000 f966 	bl	80097c8 <HAL_Delay>

			led.LR(1, -1);
 80094fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009500:	2101      	movs	r1, #1
 8009502:	4826      	ldr	r0, [pc, #152]	; (800959c <cppLoop+0x1ea4>)
 8009504:	f7f8 fd42 	bl	8001f8c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009508:	2101      	movs	r1, #1
 800950a:	4829      	ldr	r0, [pc, #164]	; (80095b0 <cppLoop+0x1eb8>)
 800950c:	f7fa fe94 	bl	8004238 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8009510:	4b29      	ldr	r3, [pc, #164]	; (80095b8 <cppLoop+0x1ec0>)
 8009512:	edd3 7a00 	vldr	s15, [r3]
 8009516:	eeb0 0a67 	vmov.f32	s0, s15
 800951a:	4825      	ldr	r0, [pc, #148]	; (80095b0 <cppLoop+0x1eb8>)
 800951c:	f7fa fa7c 	bl	8003a18 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009520:	4b25      	ldr	r3, [pc, #148]	; (80095b8 <cppLoop+0x1ec0>)
 8009522:	edd3 7a00 	vldr	s15, [r3]
 8009526:	eeb0 0a67 	vmov.f32	s0, s15
 800952a:	4821      	ldr	r0, [pc, #132]	; (80095b0 <cppLoop+0x1eb8>)
 800952c:	f7fa fa84 	bl	8003a38 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009530:	481f      	ldr	r0, [pc, #124]	; (80095b0 <cppLoop+0x1eb8>)
 8009532:	f7f9 fdb1 	bl	8003098 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009536:	481e      	ldr	r0, [pc, #120]	; (80095b0 <cppLoop+0x1eb8>)
 8009538:	f7fa fd80 	bl	800403c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	2100      	movs	r1, #0
 8009542:	4816      	ldr	r0, [pc, #88]	; (800959c <cppLoop+0x1ea4>)
 8009544:	f7f8 fd22 	bl	8001f8c <_ZN3LED2LREaa>
		}
		break;
 8009548:	e01f      	b.n	800958a <cppLoop+0x1e92>

	default:
		break;
 800954a:	bf00      	nop
 800954c:	e01e      	b.n	800958c <cppLoop+0x1e94>
		break;
 800954e:	bf00      	nop
 8009550:	e01c      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009552:	bf00      	nop
 8009554:	e01a      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009556:	bf00      	nop
 8009558:	e018      	b.n	800958c <cppLoop+0x1e94>
		break;
 800955a:	bf00      	nop
 800955c:	e016      	b.n	800958c <cppLoop+0x1e94>
		break;
 800955e:	bf00      	nop
 8009560:	e014      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009562:	bf00      	nop
 8009564:	e012      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009566:	bf00      	nop
 8009568:	e010      	b.n	800958c <cppLoop+0x1e94>
		break;
 800956a:	bf00      	nop
 800956c:	e00e      	b.n	800958c <cppLoop+0x1e94>
		break;
 800956e:	bf00      	nop
 8009570:	e00c      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009572:	bf00      	nop
 8009574:	e00a      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009576:	bf00      	nop
 8009578:	e008      	b.n	800958c <cppLoop+0x1e94>
		break;
 800957a:	bf00      	nop
 800957c:	e006      	b.n	800958c <cppLoop+0x1e94>
		break;
 800957e:	bf00      	nop
 8009580:	e004      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009582:	bf00      	nop
 8009584:	e002      	b.n	800958c <cppLoop+0x1e94>
		break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <cppLoop+0x1e94>
		break;
 800958a:	bf00      	nop

	}

	HAL_Delay(30);
 800958c:	201e      	movs	r0, #30
 800958e:	f000 f91b 	bl	80097c8 <HAL_Delay>

}
 8009592:	bf00      	nop
 8009594:	3704      	adds	r7, #4
 8009596:	46bd      	mov	sp, r7
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959a:	bf00      	nop
 800959c:	200005cc 	.word	0x200005cc
 80095a0:	08019c5c 	.word	0x08019c5c
 80095a4:	2003d440 	.word	0x2003d440
 80095a8:	08019b04 	.word	0x08019b04
 80095ac:	200005c0 	.word	0x200005c0
 80095b0:	20017da0 	.word	0x20017da0
 80095b4:	08019c68 	.word	0x08019c68
 80095b8:	2003d438 	.word	0x2003d438

080095bc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af06      	add	r7, sp, #24
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d13d      	bne.n	8009648 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d138      	bne.n	8009648 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 80095d6:	481e      	ldr	r0, [pc, #120]	; (8009650 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80095d8:	f7f8 fd10 	bl	8001ffc <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80095dc:	481d      	ldr	r0, [pc, #116]	; (8009654 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80095de:	f7fb fe0b 	bl	80051f8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80095e2:	481d      	ldr	r0, [pc, #116]	; (8009658 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80095e4:	f7f8 fba6 	bl	8001d34 <_ZN8JoyStickC1Ev>
Motor motor;
 80095e8:	481c      	ldr	r0, [pc, #112]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80095ea:	f7fb fa32 	bl	8004a52 <_ZN5MotorC1Ev>
IMU imu;
 80095ee:	481c      	ldr	r0, [pc, #112]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80095f0:	f7f8 f9ac 	bl	800194c <_ZN3IMUC1Ev>
Logger logger;
 80095f4:	481b      	ldr	r0, [pc, #108]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80095f6:	f7fa ff87 	bl	8004508 <_ZN6LoggerC1Ev>
Encoder encoder;
 80095fa:	481b      	ldr	r0, [pc, #108]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80095fc:	f7f7 fdaa 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009600:	4b17      	ldr	r3, [pc, #92]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009602:	4a19      	ldr	r2, [pc, #100]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009604:	4915      	ldr	r1, [pc, #84]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009606:	4819      	ldr	r0, [pc, #100]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009608:	f7fc f84a 	bl	80056a0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800960c:	4b17      	ldr	r3, [pc, #92]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800960e:	4a14      	ldr	r2, [pc, #80]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009610:	4915      	ldr	r1, [pc, #84]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009612:	4817      	ldr	r0, [pc, #92]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009614:	f7fb fb02 	bl	8004c1c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8009618:	4b11      	ldr	r3, [pc, #68]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800961e:	9303      	str	r3, [sp, #12]
 8009620:	4b13      	ldr	r3, [pc, #76]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009622:	9302      	str	r3, [sp, #8]
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4b0f      	ldr	r3, [pc, #60]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800962e:	4a08      	ldr	r2, [pc, #32]	; (8009650 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8009630:	490a      	ldr	r1, [pc, #40]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009632:	4810      	ldr	r0, [pc, #64]	; (8009674 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009634:	f7f9 f810 	bl	8002658 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8009638:	4a08      	ldr	r2, [pc, #32]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800963a:	490a      	ldr	r1, [pc, #40]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800963c:	480e      	ldr	r0, [pc, #56]	; (8009678 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800963e:	f7fb ff2b 	bl	8005498 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009642:	480e      	ldr	r0, [pc, #56]	; (800967c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009644:	f7fb fc6a 	bl	8004f1c <_ZN13PathFollowingC1Ev>
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	200002c0 	.word	0x200002c0
 8009654:	200005b8 	.word	0x200005b8
 8009658:	200005c0 	.word	0x200005c0
 800965c:	200005c8 	.word	0x200005c8
 8009660:	200005dc 	.word	0x200005dc
 8009664:	200005f0 	.word	0x200005f0
 8009668:	20017d00 	.word	0x20017d00
 800966c:	20017d20 	.word	0x20017d20
 8009670:	20017d60 	.word	0x20017d60
 8009674:	20017da0 	.word	0x20017da0
 8009678:	20025ab8 	.word	0x20025ab8
 800967c:	20025cc8 	.word	0x20025cc8

08009680 <_GLOBAL__sub_I_line_sensor>:
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
 8009684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009688:	2001      	movs	r0, #1
 800968a:	f7ff ff97 	bl	80095bc <_Z41__static_initialization_and_destruction_0ii>
 800968e:	bd80      	pop	{r7, pc}

08009690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009694:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009696:	e003      	b.n	80096a0 <LoopCopyDataInit>

08009698 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009698:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800969a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800969c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800969e:	3104      	adds	r1, #4

080096a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80096a0:	480b      	ldr	r0, [pc, #44]	; (80096d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80096a2:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80096a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80096a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80096a8:	d3f6      	bcc.n	8009698 <CopyDataInit>
  ldr  r2, =_sbss
 80096aa:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80096ac:	e002      	b.n	80096b4 <LoopFillZerobss>

080096ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80096ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80096b0:	f842 3b04 	str.w	r3, [r2], #4

080096b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80096b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80096b8:	d3f9      	bcc.n	80096ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096ba:	f7fd fefb 	bl	80074b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096be:	f00b fdd3 	bl	8015268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096c2:	f7fc fa35 	bl	8005b30 <main>
  bx  lr    
 80096c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80096c8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80096cc:	0801a268 	.word	0x0801a268
  ldr  r0, =_sdata
 80096d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80096d4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80096d8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80096dc:	20041e58 	.word	0x20041e58

080096e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80096e0:	e7fe      	b.n	80096e0 <ADC_IRQHandler>
	...

080096e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <HAL_Init+0x40>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a0d      	ldr	r2, [pc, #52]	; (8009724 <HAL_Init+0x40>)
 80096ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80096f4:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <HAL_Init+0x40>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a0a      	ldr	r2, [pc, #40]	; (8009724 <HAL_Init+0x40>)
 80096fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009700:	4b08      	ldr	r3, [pc, #32]	; (8009724 <HAL_Init+0x40>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a07      	ldr	r2, [pc, #28]	; (8009724 <HAL_Init+0x40>)
 8009706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800970a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800970c:	2003      	movs	r0, #3
 800970e:	f000 fd51 	bl	800a1b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009712:	2000      	movs	r0, #0
 8009714:	f000 f808 	bl	8009728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009718:	f7fd f91c 	bl	8006954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	40023c00 	.word	0x40023c00

08009728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <HAL_InitTick+0x54>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	4b12      	ldr	r3, [pc, #72]	; (8009780 <HAL_InitTick+0x58>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	4619      	mov	r1, r3
 800973a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800973e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009742:	fbb2 f3f3 	udiv	r3, r2, r3
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fd69 	bl	800a21e <HAL_SYSTICK_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e00e      	b.n	8009774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b0f      	cmp	r3, #15
 800975a:	d80a      	bhi.n	8009772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800975c:	2200      	movs	r2, #0
 800975e:	6879      	ldr	r1, [r7, #4]
 8009760:	f04f 30ff 	mov.w	r0, #4294967295
 8009764:	f000 fd31 	bl	800a1ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009768:	4a06      	ldr	r2, [pc, #24]	; (8009784 <HAL_InitTick+0x5c>)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	e000      	b.n	8009774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20000000 	.word	0x20000000
 8009780:	20000008 	.word	0x20000008
 8009784:	20000004 	.word	0x20000004

08009788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800978c:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <HAL_IncTick+0x20>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	4b06      	ldr	r3, [pc, #24]	; (80097ac <HAL_IncTick+0x24>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4413      	add	r3, r2
 8009798:	4a04      	ldr	r2, [pc, #16]	; (80097ac <HAL_IncTick+0x24>)
 800979a:	6013      	str	r3, [r2, #0]
}
 800979c:	bf00      	nop
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20000008 	.word	0x20000008
 80097ac:	2003fde0 	.word	0x2003fde0

080097b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0
  return uwTick;
 80097b4:	4b03      	ldr	r3, [pc, #12]	; (80097c4 <HAL_GetTick+0x14>)
 80097b6:	681b      	ldr	r3, [r3, #0]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	2003fde0 	.word	0x2003fde0

080097c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097d0:	f7ff ffee 	bl	80097b0 <HAL_GetTick>
 80097d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e0:	d005      	beq.n	80097ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <HAL_Delay+0x40>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4413      	add	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80097ee:	bf00      	nop
 80097f0:	f7ff ffde 	bl	80097b0 <HAL_GetTick>
 80097f4:	4602      	mov	r2, r0
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	1ad3      	subs	r3, r2, r3
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d8f7      	bhi.n	80097f0 <HAL_Delay+0x28>
  {
  }
}
 8009800:	bf00      	nop
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000008 	.word	0x20000008

0800980c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e033      	b.n	800988a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009826:	2b00      	cmp	r3, #0
 8009828:	d109      	bne.n	800983e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fd f8ba 	bl	80069a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	f003 0310 	and.w	r3, r3, #16
 8009846:	2b00      	cmp	r3, #0
 8009848:	d118      	bne.n	800987c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009852:	f023 0302 	bic.w	r3, r3, #2
 8009856:	f043 0202 	orr.w	r2, r3, #2
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa5a 	bl	8009d18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	f023 0303 	bic.w	r3, r3, #3
 8009872:	f043 0201 	orr.w	r2, r3, #1
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	641a      	str	r2, [r3, #64]	; 0x40
 800987a:	e001      	b.n	8009880 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_ADC_Start_DMA+0x1e>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e0cc      	b.n	8009a4c <HAL_ADC_Start_DMA+0x1b8>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d018      	beq.n	80098fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0201 	orr.w	r2, r2, #1
 80098d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80098d8:	4b5e      	ldr	r3, [pc, #376]	; (8009a54 <HAL_ADC_Start_DMA+0x1c0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a5e      	ldr	r2, [pc, #376]	; (8009a58 <HAL_ADC_Start_DMA+0x1c4>)
 80098de:	fba2 2303 	umull	r2, r3, r2, r3
 80098e2:	0c9a      	lsrs	r2, r3, #18
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80098ec:	e002      	b.n	80098f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f9      	bne.n	80098ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b01      	cmp	r3, #1
 8009906:	f040 80a0 	bne.w	8009a4a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009912:	f023 0301 	bic.w	r3, r3, #1
 8009916:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009928:	2b00      	cmp	r3, #0
 800992a:	d007      	beq.n	800993c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009934:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009948:	d106      	bne.n	8009958 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994e:	f023 0206 	bic.w	r2, r3, #6
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	645a      	str	r2, [r3, #68]	; 0x44
 8009956:	e002      	b.n	800995e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009966:	4b3d      	ldr	r3, [pc, #244]	; (8009a5c <HAL_ADC_Start_DMA+0x1c8>)
 8009968:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996e:	4a3c      	ldr	r2, [pc, #240]	; (8009a60 <HAL_ADC_Start_DMA+0x1cc>)
 8009970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	4a3b      	ldr	r2, [pc, #236]	; (8009a64 <HAL_ADC_Start_DMA+0x1d0>)
 8009978:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997e:	4a3a      	ldr	r2, [pc, #232]	; (8009a68 <HAL_ADC_Start_DMA+0x1d4>)
 8009980:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800998a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800999a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	334c      	adds	r3, #76	; 0x4c
 80099b6:	4619      	mov	r1, r3
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f000 fcea 	bl	800a394 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f003 031f 	and.w	r3, r3, #31
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d12a      	bne.n	8009a22 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a26      	ldr	r2, [pc, #152]	; (8009a6c <HAL_ADC_Start_DMA+0x1d8>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d015      	beq.n	8009a02 <HAL_ADC_Start_DMA+0x16e>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a25      	ldr	r2, [pc, #148]	; (8009a70 <HAL_ADC_Start_DMA+0x1dc>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d105      	bne.n	80099ec <HAL_ADC_Start_DMA+0x158>
 80099e0:	4b1e      	ldr	r3, [pc, #120]	; (8009a5c <HAL_ADC_Start_DMA+0x1c8>)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f003 031f 	and.w	r3, r3, #31
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a20      	ldr	r2, [pc, #128]	; (8009a74 <HAL_ADC_Start_DMA+0x1e0>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d129      	bne.n	8009a4a <HAL_ADC_Start_DMA+0x1b6>
 80099f6:	4b19      	ldr	r3, [pc, #100]	; (8009a5c <HAL_ADC_Start_DMA+0x1c8>)
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f003 031f 	and.w	r3, r3, #31
 80099fe:	2b0f      	cmp	r3, #15
 8009a00:	d823      	bhi.n	8009a4a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d11c      	bne.n	8009a4a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009a1e:	609a      	str	r2, [r3, #8]
 8009a20:	e013      	b.n	8009a4a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a11      	ldr	r2, [pc, #68]	; (8009a6c <HAL_ADC_Start_DMA+0x1d8>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d10e      	bne.n	8009a4a <HAL_ADC_Start_DMA+0x1b6>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d107      	bne.n	8009a4a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009a48:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20000000 	.word	0x20000000
 8009a58:	431bde83 	.word	0x431bde83
 8009a5c:	40012300 	.word	0x40012300
 8009a60:	08009f11 	.word	0x08009f11
 8009a64:	08009fcb 	.word	0x08009fcb
 8009a68:	08009fe7 	.word	0x08009fe7
 8009a6c:	40012000 	.word	0x40012000
 8009a70:	40012100 	.word	0x40012100
 8009a74:	40012200 	.word	0x40012200

08009a78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d101      	bne.n	8009ad0 <HAL_ADC_ConfigChannel+0x1c>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e113      	b.n	8009cf8 <HAL_ADC_ConfigChannel+0x244>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b09      	cmp	r3, #9
 8009ade:	d925      	bls.n	8009b2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68d9      	ldr	r1, [r3, #12]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	4613      	mov	r3, r2
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	4413      	add	r3, r2
 8009af4:	3b1e      	subs	r3, #30
 8009af6:	2207      	movs	r2, #7
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	43da      	mvns	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	400a      	ands	r2, r1
 8009b04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68d9      	ldr	r1, [r3, #12]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4618      	mov	r0, r3
 8009b18:	4603      	mov	r3, r0
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	4403      	add	r3, r0
 8009b1e:	3b1e      	subs	r3, #30
 8009b20:	409a      	lsls	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	60da      	str	r2, [r3, #12]
 8009b2a:	e022      	b.n	8009b72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6919      	ldr	r1, [r3, #16]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	4413      	add	r3, r2
 8009b40:	2207      	movs	r2, #7
 8009b42:	fa02 f303 	lsl.w	r3, r2, r3
 8009b46:	43da      	mvns	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	400a      	ands	r2, r1
 8009b4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6919      	ldr	r1, [r3, #16]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	4618      	mov	r0, r3
 8009b62:	4603      	mov	r3, r0
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4403      	add	r3, r0
 8009b68:	409a      	lsls	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	2b06      	cmp	r3, #6
 8009b78:	d824      	bhi.n	8009bc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	3b05      	subs	r3, #5
 8009b8c:	221f      	movs	r2, #31
 8009b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b92:	43da      	mvns	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	400a      	ands	r2, r1
 8009b9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	4618      	mov	r0, r3
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	3b05      	subs	r3, #5
 8009bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8009bc2:	e04c      	b.n	8009c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	2b0c      	cmp	r3, #12
 8009bca:	d824      	bhi.n	8009c16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	3b23      	subs	r3, #35	; 0x23
 8009bde:	221f      	movs	r2, #31
 8009be0:	fa02 f303 	lsl.w	r3, r2, r3
 8009be4:	43da      	mvns	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	400a      	ands	r2, r1
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	3b23      	subs	r3, #35	; 0x23
 8009c08:	fa00 f203 	lsl.w	r2, r0, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	430a      	orrs	r2, r1
 8009c12:	631a      	str	r2, [r3, #48]	; 0x30
 8009c14:	e023      	b.n	8009c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	3b41      	subs	r3, #65	; 0x41
 8009c28:	221f      	movs	r2, #31
 8009c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2e:	43da      	mvns	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	400a      	ands	r2, r1
 8009c36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	4618      	mov	r0, r3
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	3b41      	subs	r3, #65	; 0x41
 8009c52:	fa00 f203 	lsl.w	r2, r0, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009c5e:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <HAL_ADC_ConfigChannel+0x250>)
 8009c60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a28      	ldr	r2, [pc, #160]	; (8009d08 <HAL_ADC_ConfigChannel+0x254>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d10f      	bne.n	8009c8c <HAL_ADC_ConfigChannel+0x1d8>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b12      	cmp	r3, #18
 8009c72:	d10b      	bne.n	8009c8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a1d      	ldr	r2, [pc, #116]	; (8009d08 <HAL_ADC_ConfigChannel+0x254>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d12b      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x23a>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a1c      	ldr	r2, [pc, #112]	; (8009d0c <HAL_ADC_ConfigChannel+0x258>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d003      	beq.n	8009ca8 <HAL_ADC_ConfigChannel+0x1f4>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b11      	cmp	r3, #17
 8009ca6:	d122      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a11      	ldr	r2, [pc, #68]	; (8009d0c <HAL_ADC_ConfigChannel+0x258>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d111      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009cca:	4b11      	ldr	r3, [pc, #68]	; (8009d10 <HAL_ADC_ConfigChannel+0x25c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a11      	ldr	r2, [pc, #68]	; (8009d14 <HAL_ADC_ConfigChannel+0x260>)
 8009cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd4:	0c9a      	lsrs	r2, r3, #18
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009ce0:	e002      	b.n	8009ce8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f9      	bne.n	8009ce2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	40012300 	.word	0x40012300
 8009d08:	40012000 	.word	0x40012000
 8009d0c:	10000012 	.word	0x10000012
 8009d10:	20000000 	.word	0x20000000
 8009d14:	431bde83 	.word	0x431bde83

08009d18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009d20:	4b79      	ldr	r3, [pc, #484]	; (8009f08 <ADC_Init+0x1f0>)
 8009d22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6859      	ldr	r1, [r3, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	021a      	lsls	r2, r3, #8
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6859      	ldr	r1, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689a      	ldr	r2, [r3, #8]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6899      	ldr	r1, [r3, #8]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009daa:	4a58      	ldr	r2, [pc, #352]	; (8009f0c <ADC_Init+0x1f4>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d022      	beq.n	8009df6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009dbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6899      	ldr	r1, [r3, #8]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6899      	ldr	r1, [r3, #8]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	609a      	str	r2, [r3, #8]
 8009df4:	e00f      	b.n	8009e16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009e14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689a      	ldr	r2, [r3, #8]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 0202 	bic.w	r2, r2, #2
 8009e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6899      	ldr	r1, [r3, #8]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7e1b      	ldrb	r3, [r3, #24]
 8009e30:	005a      	lsls	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d01b      	beq.n	8009e7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009e62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6859      	ldr	r1, [r3, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	035a      	lsls	r2, r3, #13
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	605a      	str	r2, [r3, #4]
 8009e7a:	e007      	b.n	8009e8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	051a      	lsls	r2, r3, #20
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689a      	ldr	r2, [r3, #8]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6899      	ldr	r1, [r3, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ece:	025a      	lsls	r2, r3, #9
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689a      	ldr	r2, [r3, #8]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6899      	ldr	r1, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	029a      	lsls	r2, r3, #10
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	609a      	str	r2, [r3, #8]
}
 8009efc:	bf00      	nop
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	40012300 	.word	0x40012300
 8009f0c:	0f000001 	.word	0x0f000001

08009f10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d13c      	bne.n	8009fa4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d12b      	bne.n	8009f9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d127      	bne.n	8009f9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d006      	beq.n	8009f68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d119      	bne.n	8009f9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0220 	bic.w	r2, r2, #32
 8009f76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d105      	bne.n	8009f9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	f043 0201 	orr.w	r2, r3, #1
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f7ff fd6b 	bl	8009a78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009fa2:	e00e      	b.n	8009fc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fd75 	bl	8009aa0 <HAL_ADC_ErrorCallback>
}
 8009fb6:	e004      	b.n	8009fc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	4798      	blx	r3
}
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff fd57 	bl	8009a8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2240      	movs	r2, #64	; 0x40
 8009ff8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffe:	f043 0204 	orr.w	r2, r3, #4
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fd4a 	bl	8009aa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a00c:	bf00      	nop
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <__NVIC_SetPriorityGrouping+0x44>)
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a030:	4013      	ands	r3, r2
 800a032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a03c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a046:	4a04      	ldr	r2, [pc, #16]	; (800a058 <__NVIC_SetPriorityGrouping+0x44>)
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	60d3      	str	r3, [r2, #12]
}
 800a04c:	bf00      	nop
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	e000ed00 	.word	0xe000ed00

0800a05c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a060:	4b04      	ldr	r3, [pc, #16]	; (800a074 <__NVIC_GetPriorityGrouping+0x18>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	0a1b      	lsrs	r3, r3, #8
 800a066:	f003 0307 	and.w	r3, r3, #7
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	e000ed00 	.word	0xe000ed00

0800a078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a086:	2b00      	cmp	r3, #0
 800a088:	db0b      	blt.n	800a0a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	f003 021f 	and.w	r2, r3, #31
 800a090:	4907      	ldr	r1, [pc, #28]	; (800a0b0 <__NVIC_EnableIRQ+0x38>)
 800a092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	2001      	movs	r0, #1
 800a09a:	fa00 f202 	lsl.w	r2, r0, r2
 800a09e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	e000e100 	.word	0xe000e100

0800a0b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6039      	str	r1, [r7, #0]
 800a0be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	db0a      	blt.n	800a0de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	490c      	ldr	r1, [pc, #48]	; (800a100 <__NVIC_SetPriority+0x4c>)
 800a0ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0d2:	0112      	lsls	r2, r2, #4
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	440b      	add	r3, r1
 800a0d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a0dc:	e00a      	b.n	800a0f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	4908      	ldr	r1, [pc, #32]	; (800a104 <__NVIC_SetPriority+0x50>)
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	f003 030f 	and.w	r3, r3, #15
 800a0ea:	3b04      	subs	r3, #4
 800a0ec:	0112      	lsls	r2, r2, #4
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	440b      	add	r3, r1
 800a0f2:	761a      	strb	r2, [r3, #24]
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	e000e100 	.word	0xe000e100
 800a104:	e000ed00 	.word	0xe000ed00

0800a108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a108:	b480      	push	{r7}
 800a10a:	b089      	sub	sp, #36	; 0x24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f1c3 0307 	rsb	r3, r3, #7
 800a122:	2b04      	cmp	r3, #4
 800a124:	bf28      	it	cs
 800a126:	2304      	movcs	r3, #4
 800a128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	3304      	adds	r3, #4
 800a12e:	2b06      	cmp	r3, #6
 800a130:	d902      	bls.n	800a138 <NVIC_EncodePriority+0x30>
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	3b03      	subs	r3, #3
 800a136:	e000      	b.n	800a13a <NVIC_EncodePriority+0x32>
 800a138:	2300      	movs	r3, #0
 800a13a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	43da      	mvns	r2, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	401a      	ands	r2, r3
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a150:	f04f 31ff 	mov.w	r1, #4294967295
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	fa01 f303 	lsl.w	r3, r1, r3
 800a15a:	43d9      	mvns	r1, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a160:	4313      	orrs	r3, r2
         );
}
 800a162:	4618      	mov	r0, r3
 800a164:	3724      	adds	r7, #36	; 0x24
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a180:	d301      	bcc.n	800a186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a182:	2301      	movs	r3, #1
 800a184:	e00f      	b.n	800a1a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a186:	4a0a      	ldr	r2, [pc, #40]	; (800a1b0 <SysTick_Config+0x40>)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a18e:	210f      	movs	r1, #15
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	f7ff ff8e 	bl	800a0b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <SysTick_Config+0x40>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a19e:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <SysTick_Config+0x40>)
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	e000e010 	.word	0xe000e010

0800a1b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff ff29 	bl	800a014 <__NVIC_SetPriorityGrouping>
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b086      	sub	sp, #24
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a1dc:	f7ff ff3e 	bl	800a05c <__NVIC_GetPriorityGrouping>
 800a1e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	6978      	ldr	r0, [r7, #20]
 800a1e8:	f7ff ff8e 	bl	800a108 <NVIC_EncodePriority>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff ff5d 	bl	800a0b4 <__NVIC_SetPriority>
}
 800a1fa:	bf00      	nop
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	4603      	mov	r3, r0
 800a20a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a20c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff ff31 	bl	800a078 <__NVIC_EnableIRQ>
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff ffa2 	bl	800a170 <SysTick_Config>
 800a22c:	4603      	mov	r3, r0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a244:	f7ff fab4 	bl	80097b0 <HAL_GetTick>
 800a248:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e099      	b.n	800a388 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2202      	movs	r2, #2
 800a260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f022 0201 	bic.w	r2, r2, #1
 800a272:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a274:	e00f      	b.n	800a296 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a276:	f7ff fa9b 	bl	80097b0 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b05      	cmp	r3, #5
 800a282:	d908      	bls.n	800a296 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2203      	movs	r2, #3
 800a28e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e078      	b.n	800a388 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e8      	bne.n	800a276 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4b38      	ldr	r3, [pc, #224]	; (800a390 <HAL_DMA_Init+0x158>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a2c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	2b04      	cmp	r3, #4
 800a2ee:	d107      	bne.n	800a300 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f023 0307 	bic.w	r3, r3, #7
 800a316:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	4313      	orrs	r3, r2
 800a320:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b04      	cmp	r3, #4
 800a328:	d117      	bne.n	800a35a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00e      	beq.n	800a35a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fa9d 	bl	800a87c <DMA_CheckFifoParam>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2240      	movs	r2, #64	; 0x40
 800a34c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a356:	2301      	movs	r3, #1
 800a358:	e016      	b.n	800a388 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fa54 	bl	800a810 <DMA_CalcBaseAndBitshift>
 800a368:	4603      	mov	r3, r0
 800a36a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a370:	223f      	movs	r2, #63	; 0x3f
 800a372:	409a      	lsls	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	f010803f 	.word	0xf010803f

0800a394 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <HAL_DMA_Start_IT+0x26>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	e040      	b.n	800a43c <HAL_DMA_Start_IT+0xa8>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d12f      	bne.n	800a42e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f9e6 	bl	800a7b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ec:	223f      	movs	r2, #63	; 0x3f
 800a3ee:	409a      	lsls	r2, r3
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0216 	orr.w	r2, r2, #22
 800a402:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d007      	beq.n	800a41c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f042 0208 	orr.w	r2, r2, #8
 800a41a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f042 0201 	orr.w	r2, r2, #1
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	e005      	b.n	800a43a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a436:	2302      	movs	r3, #2
 800a438:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b02      	cmp	r3, #2
 800a456:	d004      	beq.n	800a462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2280      	movs	r2, #128	; 0x80
 800a45c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e00c      	b.n	800a47c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2205      	movs	r2, #5
 800a466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f022 0201 	bic.w	r2, r2, #1
 800a478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a494:	4b92      	ldr	r3, [pc, #584]	; (800a6e0 <HAL_DMA_IRQHandler+0x258>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a92      	ldr	r2, [pc, #584]	; (800a6e4 <HAL_DMA_IRQHandler+0x25c>)
 800a49a:	fba2 2303 	umull	r2, r3, r2, r3
 800a49e:	0a9b      	lsrs	r3, r3, #10
 800a4a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b2:	2208      	movs	r2, #8
 800a4b4:	409a      	lsls	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01a      	beq.n	800a4f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d013      	beq.n	800a4f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0204 	bic.w	r2, r2, #4
 800a4da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e0:	2208      	movs	r2, #8
 800a4e2:	409a      	lsls	r2, r3
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ec:	f043 0201 	orr.w	r2, r3, #1
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	409a      	lsls	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4013      	ands	r3, r2
 800a500:	2b00      	cmp	r3, #0
 800a502:	d012      	beq.n	800a52a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00b      	beq.n	800a52a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a516:	2201      	movs	r2, #1
 800a518:	409a      	lsls	r2, r3
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a522:	f043 0202 	orr.w	r2, r3, #2
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52e:	2204      	movs	r2, #4
 800a530:	409a      	lsls	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4013      	ands	r3, r2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d012      	beq.n	800a560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54c:	2204      	movs	r2, #4
 800a54e:	409a      	lsls	r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a558:	f043 0204 	orr.w	r2, r3, #4
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a564:	2210      	movs	r2, #16
 800a566:	409a      	lsls	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4013      	ands	r3, r2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d043      	beq.n	800a5f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0308 	and.w	r3, r3, #8
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d03c      	beq.n	800a5f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a582:	2210      	movs	r2, #16
 800a584:	409a      	lsls	r2, r3
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d018      	beq.n	800a5ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d108      	bne.n	800a5b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d024      	beq.n	800a5f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	4798      	blx	r3
 800a5b6:	e01f      	b.n	800a5f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01b      	beq.n	800a5f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	4798      	blx	r3
 800a5c8:	e016      	b.n	800a5f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d107      	bne.n	800a5e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0208 	bic.w	r2, r2, #8
 800a5e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	409a      	lsls	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4013      	ands	r3, r2
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 808e 	beq.w	800a726 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0310 	and.w	r3, r3, #16
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 8086 	beq.w	800a726 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a61e:	2220      	movs	r2, #32
 800a620:	409a      	lsls	r2, r3
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d136      	bne.n	800a6a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0216 	bic.w	r2, r2, #22
 800a640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	695a      	ldr	r2, [r3, #20]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	2b00      	cmp	r3, #0
 800a658:	d103      	bne.n	800a662 <HAL_DMA_IRQHandler+0x1da>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d007      	beq.n	800a672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0208 	bic.w	r2, r2, #8
 800a670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a676:	223f      	movs	r2, #63	; 0x3f
 800a678:	409a      	lsls	r2, r3
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a692:	2b00      	cmp	r3, #0
 800a694:	d07d      	beq.n	800a792 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	4798      	blx	r3
        }
        return;
 800a69e:	e078      	b.n	800a792 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d01c      	beq.n	800a6e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d108      	bne.n	800a6ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d030      	beq.n	800a726 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	4798      	blx	r3
 800a6cc:	e02b      	b.n	800a726 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d027      	beq.n	800a726 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	4798      	blx	r3
 800a6de:	e022      	b.n	800a726 <HAL_DMA_IRQHandler+0x29e>
 800a6e0:	20000000 	.word	0x20000000
 800a6e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10f      	bne.n	800a716 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0210 	bic.w	r2, r2, #16
 800a704:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d032      	beq.n	800a794 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d022      	beq.n	800a780 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2205      	movs	r2, #5
 800a73e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0201 	bic.w	r2, r2, #1
 800a750:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	3301      	adds	r3, #1
 800a756:	60bb      	str	r3, [r7, #8]
 800a758:	697a      	ldr	r2, [r7, #20]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d307      	bcc.n	800a76e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1f2      	bne.n	800a752 <HAL_DMA_IRQHandler+0x2ca>
 800a76c:	e000      	b.n	800a770 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a76e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d005      	beq.n	800a794 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	4798      	blx	r3
 800a790:	e000      	b.n	800a794 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a792:	bf00      	nop
    }
  }
}
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop

0800a79c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b40      	cmp	r3, #64	; 0x40
 800a7e0:	d108      	bne.n	800a7f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a7f2:	e007      	b.n	800a804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	60da      	str	r2, [r3, #12]
}
 800a804:	bf00      	nop
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	3b10      	subs	r3, #16
 800a820:	4a14      	ldr	r2, [pc, #80]	; (800a874 <DMA_CalcBaseAndBitshift+0x64>)
 800a822:	fba2 2303 	umull	r2, r3, r2, r3
 800a826:	091b      	lsrs	r3, r3, #4
 800a828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a82a:	4a13      	ldr	r2, [pc, #76]	; (800a878 <DMA_CalcBaseAndBitshift+0x68>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4413      	add	r3, r2
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d909      	bls.n	800a852 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a846:	f023 0303 	bic.w	r3, r3, #3
 800a84a:	1d1a      	adds	r2, r3, #4
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	659a      	str	r2, [r3, #88]	; 0x58
 800a850:	e007      	b.n	800a862 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a85a:	f023 0303 	bic.w	r3, r3, #3
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	aaaaaaab 	.word	0xaaaaaaab
 800a878:	08019ca8 	.word	0x08019ca8

0800a87c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d11f      	bne.n	800a8d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d855      	bhi.n	800a948 <DMA_CheckFifoParam+0xcc>
 800a89c:	a201      	add	r2, pc, #4	; (adr r2, 800a8a4 <DMA_CheckFifoParam+0x28>)
 800a89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a2:	bf00      	nop
 800a8a4:	0800a8b5 	.word	0x0800a8b5
 800a8a8:	0800a8c7 	.word	0x0800a8c7
 800a8ac:	0800a8b5 	.word	0x0800a8b5
 800a8b0:	0800a949 	.word	0x0800a949
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d045      	beq.n	800a94c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8c4:	e042      	b.n	800a94c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a8ce:	d13f      	bne.n	800a950 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8d4:	e03c      	b.n	800a950 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8de:	d121      	bne.n	800a924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d836      	bhi.n	800a954 <DMA_CheckFifoParam+0xd8>
 800a8e6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <DMA_CheckFifoParam+0x70>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a8fd 	.word	0x0800a8fd
 800a8f0:	0800a903 	.word	0x0800a903
 800a8f4:	0800a8fd 	.word	0x0800a8fd
 800a8f8:	0800a915 	.word	0x0800a915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a900:	e02f      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d024      	beq.n	800a958 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a912:	e021      	b.n	800a958 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a91c:	d11e      	bne.n	800a95c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a922:	e01b      	b.n	800a95c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b02      	cmp	r3, #2
 800a928:	d902      	bls.n	800a930 <DMA_CheckFifoParam+0xb4>
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d003      	beq.n	800a936 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a92e:	e018      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	73fb      	strb	r3, [r7, #15]
      break;
 800a934:	e015      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00e      	beq.n	800a960 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	73fb      	strb	r3, [r7, #15]
      break;
 800a946:	e00b      	b.n	800a960 <DMA_CheckFifoParam+0xe4>
      break;
 800a948:	bf00      	nop
 800a94a:	e00a      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      break;
 800a94c:	bf00      	nop
 800a94e:	e008      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      break;
 800a950:	bf00      	nop
 800a952:	e006      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      break;
 800a954:	bf00      	nop
 800a956:	e004      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      break;
 800a958:	bf00      	nop
 800a95a:	e002      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      break;   
 800a95c:	bf00      	nop
 800a95e:	e000      	b.n	800a962 <DMA_CheckFifoParam+0xe6>
      break;
 800a960:	bf00      	nop
    }
  } 
  
  return status; 
 800a962:	7bfb      	ldrb	r3, [r7, #15]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a970:	b480      	push	{r7}
 800a972:	b089      	sub	sp, #36	; 0x24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a97a:	2300      	movs	r3, #0
 800a97c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a97e:	2300      	movs	r3, #0
 800a980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a982:	2300      	movs	r3, #0
 800a984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a986:	2300      	movs	r3, #0
 800a988:	61fb      	str	r3, [r7, #28]
 800a98a:	e177      	b.n	800ac7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a98c:	2201      	movs	r2, #1
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	fa02 f303 	lsl.w	r3, r2, r3
 800a994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	4013      	ands	r3, r2
 800a99e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	f040 8166 	bne.w	800ac76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d00b      	beq.n	800a9ca <HAL_GPIO_Init+0x5a>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d007      	beq.n	800a9ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a9be:	2b11      	cmp	r3, #17
 800a9c0:	d003      	beq.n	800a9ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	2b12      	cmp	r3, #18
 800a9c8:	d130      	bne.n	800aa2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9da:	43db      	mvns	r3, r3
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aa00:	2201      	movs	r2, #1
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	fa02 f303 	lsl.w	r3, r2, r3
 800aa08:	43db      	mvns	r3, r3
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	091b      	lsrs	r3, r3, #4
 800aa16:	f003 0201 	and.w	r2, r3, #1
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	2203      	movs	r2, #3
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	43db      	mvns	r3, r3
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	4013      	ands	r3, r2
 800aa42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	689a      	ldr	r2, [r3, #8]
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	69ba      	ldr	r2, [r7, #24]
 800aa5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d003      	beq.n	800aa6c <HAL_GPIO_Init+0xfc>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	2b12      	cmp	r3, #18
 800aa6a:	d123      	bne.n	800aab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	08da      	lsrs	r2, r3, #3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3208      	adds	r2, #8
 800aa74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	220f      	movs	r2, #15
 800aa84:	fa02 f303 	lsl.w	r3, r2, r3
 800aa88:	43db      	mvns	r3, r3
 800aa8a:	69ba      	ldr	r2, [r7, #24]
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	691a      	ldr	r2, [r3, #16]
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa0:	69ba      	ldr	r2, [r7, #24]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	08da      	lsrs	r2, r3, #3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3208      	adds	r2, #8
 800aaae:	69b9      	ldr	r1, [r7, #24]
 800aab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	2203      	movs	r2, #3
 800aac0:	fa02 f303 	lsl.w	r3, r2, r3
 800aac4:	43db      	mvns	r3, r3
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	4013      	ands	r3, r2
 800aaca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	f003 0203 	and.w	r2, r3, #3
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	fa02 f303 	lsl.w	r3, r2, r3
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	4313      	orrs	r3, r2
 800aae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 80c0 	beq.w	800ac76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	4b65      	ldr	r3, [pc, #404]	; (800ac90 <HAL_GPIO_Init+0x320>)
 800aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafe:	4a64      	ldr	r2, [pc, #400]	; (800ac90 <HAL_GPIO_Init+0x320>)
 800ab00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab04:	6453      	str	r3, [r2, #68]	; 0x44
 800ab06:	4b62      	ldr	r3, [pc, #392]	; (800ac90 <HAL_GPIO_Init+0x320>)
 800ab08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ab12:	4a60      	ldr	r2, [pc, #384]	; (800ac94 <HAL_GPIO_Init+0x324>)
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	089b      	lsrs	r3, r3, #2
 800ab18:	3302      	adds	r3, #2
 800ab1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	220f      	movs	r2, #15
 800ab2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2e:	43db      	mvns	r3, r3
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	4013      	ands	r3, r2
 800ab34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a57      	ldr	r2, [pc, #348]	; (800ac98 <HAL_GPIO_Init+0x328>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d037      	beq.n	800abae <HAL_GPIO_Init+0x23e>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a56      	ldr	r2, [pc, #344]	; (800ac9c <HAL_GPIO_Init+0x32c>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d031      	beq.n	800abaa <HAL_GPIO_Init+0x23a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a55      	ldr	r2, [pc, #340]	; (800aca0 <HAL_GPIO_Init+0x330>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d02b      	beq.n	800aba6 <HAL_GPIO_Init+0x236>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a54      	ldr	r2, [pc, #336]	; (800aca4 <HAL_GPIO_Init+0x334>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d025      	beq.n	800aba2 <HAL_GPIO_Init+0x232>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a53      	ldr	r2, [pc, #332]	; (800aca8 <HAL_GPIO_Init+0x338>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d01f      	beq.n	800ab9e <HAL_GPIO_Init+0x22e>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a52      	ldr	r2, [pc, #328]	; (800acac <HAL_GPIO_Init+0x33c>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d019      	beq.n	800ab9a <HAL_GPIO_Init+0x22a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a51      	ldr	r2, [pc, #324]	; (800acb0 <HAL_GPIO_Init+0x340>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d013      	beq.n	800ab96 <HAL_GPIO_Init+0x226>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a50      	ldr	r2, [pc, #320]	; (800acb4 <HAL_GPIO_Init+0x344>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00d      	beq.n	800ab92 <HAL_GPIO_Init+0x222>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a4f      	ldr	r2, [pc, #316]	; (800acb8 <HAL_GPIO_Init+0x348>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d007      	beq.n	800ab8e <HAL_GPIO_Init+0x21e>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a4e      	ldr	r2, [pc, #312]	; (800acbc <HAL_GPIO_Init+0x34c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d101      	bne.n	800ab8a <HAL_GPIO_Init+0x21a>
 800ab86:	2309      	movs	r3, #9
 800ab88:	e012      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800ab8a:	230a      	movs	r3, #10
 800ab8c:	e010      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800ab8e:	2308      	movs	r3, #8
 800ab90:	e00e      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800ab92:	2307      	movs	r3, #7
 800ab94:	e00c      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800ab96:	2306      	movs	r3, #6
 800ab98:	e00a      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800ab9a:	2305      	movs	r3, #5
 800ab9c:	e008      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800ab9e:	2304      	movs	r3, #4
 800aba0:	e006      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800aba2:	2303      	movs	r3, #3
 800aba4:	e004      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800aba6:	2302      	movs	r3, #2
 800aba8:	e002      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <HAL_GPIO_Init+0x240>
 800abae:	2300      	movs	r3, #0
 800abb0:	69fa      	ldr	r2, [r7, #28]
 800abb2:	f002 0203 	and.w	r2, r2, #3
 800abb6:	0092      	lsls	r2, r2, #2
 800abb8:	4093      	lsls	r3, r2
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800abc0:	4934      	ldr	r1, [pc, #208]	; (800ac94 <HAL_GPIO_Init+0x324>)
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	089b      	lsrs	r3, r3, #2
 800abc6:	3302      	adds	r3, #2
 800abc8:	69ba      	ldr	r2, [r7, #24]
 800abca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800abce:	4b3c      	ldr	r3, [pc, #240]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	43db      	mvns	r3, r3
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	4013      	ands	r3, r2
 800abdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	4313      	orrs	r3, r2
 800abf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abf2:	4a33      	ldr	r2, [pc, #204]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800abf8:	4b31      	ldr	r3, [pc, #196]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	43db      	mvns	r3, r3
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	4013      	ands	r3, r2
 800ac06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d003      	beq.n	800ac1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ac1c:	4a28      	ldr	r2, [pc, #160]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ac22:	4b27      	ldr	r3, [pc, #156]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	43db      	mvns	r3, r3
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ac3e:	69ba      	ldr	r2, [r7, #24]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ac46:	4a1e      	ldr	r2, [pc, #120]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ac4c:	4b1c      	ldr	r3, [pc, #112]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	43db      	mvns	r3, r3
 800ac56:	69ba      	ldr	r2, [r7, #24]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d003      	beq.n	800ac70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ac68:	69ba      	ldr	r2, [r7, #24]
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ac70:	4a13      	ldr	r2, [pc, #76]	; (800acc0 <HAL_GPIO_Init+0x350>)
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	61fb      	str	r3, [r7, #28]
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	2b0f      	cmp	r3, #15
 800ac80:	f67f ae84 	bls.w	800a98c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ac84:	bf00      	nop
 800ac86:	3724      	adds	r7, #36	; 0x24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	40023800 	.word	0x40023800
 800ac94:	40013800 	.word	0x40013800
 800ac98:	40020000 	.word	0x40020000
 800ac9c:	40020400 	.word	0x40020400
 800aca0:	40020800 	.word	0x40020800
 800aca4:	40020c00 	.word	0x40020c00
 800aca8:	40021000 	.word	0x40021000
 800acac:	40021400 	.word	0x40021400
 800acb0:	40021800 	.word	0x40021800
 800acb4:	40021c00 	.word	0x40021c00
 800acb8:	40022000 	.word	0x40022000
 800acbc:	40022400 	.word	0x40022400
 800acc0:	40013c00 	.word	0x40013c00

0800acc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	887b      	ldrh	r3, [r7, #2]
 800acd6:	4013      	ands	r3, r2
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800acdc:	2301      	movs	r3, #1
 800acde:	73fb      	strb	r3, [r7, #15]
 800ace0:	e001      	b.n	800ace6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	807b      	strh	r3, [r7, #2]
 800ad00:	4613      	mov	r3, r2
 800ad02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad04:	787b      	ldrb	r3, [r7, #1]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ad0a:	887a      	ldrh	r2, [r7, #2]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ad10:	e003      	b.n	800ad1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ad12:	887b      	ldrh	r3, [r7, #2]
 800ad14:	041a      	lsls	r2, r3, #16
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	619a      	str	r2, [r3, #24]
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e11f      	b.n	800af7a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7fb feda 	bl	8006b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2224      	movs	r2, #36	; 0x24
 800ad58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0201 	bic.w	r2, r2, #1
 800ad6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ad8c:	f001 f96e 	bl	800c06c <HAL_RCC_GetPCLK1Freq>
 800ad90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	4a7b      	ldr	r2, [pc, #492]	; (800af84 <HAL_I2C_Init+0x25c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d807      	bhi.n	800adac <HAL_I2C_Init+0x84>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4a7a      	ldr	r2, [pc, #488]	; (800af88 <HAL_I2C_Init+0x260>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	bf94      	ite	ls
 800ada4:	2301      	movls	r3, #1
 800ada6:	2300      	movhi	r3, #0
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	e006      	b.n	800adba <HAL_I2C_Init+0x92>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4a77      	ldr	r2, [pc, #476]	; (800af8c <HAL_I2C_Init+0x264>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	bf94      	ite	ls
 800adb4:	2301      	movls	r3, #1
 800adb6:	2300      	movhi	r3, #0
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e0db      	b.n	800af7a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4a72      	ldr	r2, [pc, #456]	; (800af90 <HAL_I2C_Init+0x268>)
 800adc6:	fba2 2303 	umull	r2, r3, r2, r3
 800adca:	0c9b      	lsrs	r3, r3, #18
 800adcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	430a      	orrs	r2, r1
 800ade0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4a64      	ldr	r2, [pc, #400]	; (800af84 <HAL_I2C_Init+0x25c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d802      	bhi.n	800adfc <HAL_I2C_Init+0xd4>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	3301      	adds	r3, #1
 800adfa:	e009      	b.n	800ae10 <HAL_I2C_Init+0xe8>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ae02:	fb02 f303 	mul.w	r3, r2, r3
 800ae06:	4a63      	ldr	r2, [pc, #396]	; (800af94 <HAL_I2C_Init+0x26c>)
 800ae08:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0c:	099b      	lsrs	r3, r3, #6
 800ae0e:	3301      	adds	r3, #1
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6812      	ldr	r2, [r2, #0]
 800ae14:	430b      	orrs	r3, r1
 800ae16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ae22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	4956      	ldr	r1, [pc, #344]	; (800af84 <HAL_I2C_Init+0x25c>)
 800ae2c:	428b      	cmp	r3, r1
 800ae2e:	d80d      	bhi.n	800ae4c <HAL_I2C_Init+0x124>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	1e59      	subs	r1, r3, #1
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	005b      	lsls	r3, r3, #1
 800ae3a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	bf38      	it	cc
 800ae48:	2304      	movcc	r3, #4
 800ae4a:	e04f      	b.n	800aeec <HAL_I2C_Init+0x1c4>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d111      	bne.n	800ae78 <HAL_I2C_Init+0x150>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	1e58      	subs	r0, r3, #1
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6859      	ldr	r1, [r3, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	440b      	add	r3, r1
 800ae62:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae66:	3301      	adds	r3, #1
 800ae68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	bf0c      	ite	eq
 800ae70:	2301      	moveq	r3, #1
 800ae72:	2300      	movne	r3, #0
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	e012      	b.n	800ae9e <HAL_I2C_Init+0x176>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	1e58      	subs	r0, r3, #1
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6859      	ldr	r1, [r3, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	440b      	add	r3, r1
 800ae86:	0099      	lsls	r1, r3, #2
 800ae88:	440b      	add	r3, r1
 800ae8a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae8e:	3301      	adds	r3, #1
 800ae90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bf0c      	ite	eq
 800ae98:	2301      	moveq	r3, #1
 800ae9a:	2300      	movne	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <HAL_I2C_Init+0x17e>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e022      	b.n	800aeec <HAL_I2C_Init+0x1c4>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10e      	bne.n	800aecc <HAL_I2C_Init+0x1a4>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	1e58      	subs	r0, r3, #1
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6859      	ldr	r1, [r3, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	440b      	add	r3, r1
 800aebc:	fbb0 f3f3 	udiv	r3, r0, r3
 800aec0:	3301      	adds	r3, #1
 800aec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeca:	e00f      	b.n	800aeec <HAL_I2C_Init+0x1c4>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	1e58      	subs	r0, r3, #1
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6859      	ldr	r1, [r3, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	440b      	add	r3, r1
 800aeda:	0099      	lsls	r1, r3, #2
 800aedc:	440b      	add	r3, r1
 800aede:	fbb0 f3f3 	udiv	r3, r0, r3
 800aee2:	3301      	adds	r3, #1
 800aee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aeec:	6879      	ldr	r1, [r7, #4]
 800aeee:	6809      	ldr	r1, [r1, #0]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	69da      	ldr	r2, [r3, #28]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	431a      	orrs	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	430a      	orrs	r2, r1
 800af0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800af1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6911      	ldr	r1, [r2, #16]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	68d2      	ldr	r2, [r2, #12]
 800af26:	4311      	orrs	r1, r2
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	6812      	ldr	r2, [r2, #0]
 800af2c:	430b      	orrs	r3, r1
 800af2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695a      	ldr	r2, [r3, #20]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	431a      	orrs	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	430a      	orrs	r2, r1
 800af4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f042 0201 	orr.w	r2, r2, #1
 800af5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2220      	movs	r2, #32
 800af66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	000186a0 	.word	0x000186a0
 800af88:	001e847f 	.word	0x001e847f
 800af8c:	003d08ff 	.word	0x003d08ff
 800af90:	431bde83 	.word	0x431bde83
 800af94:	10624dd3 	.word	0x10624dd3

0800af98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af02      	add	r7, sp, #8
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	461a      	mov	r2, r3
 800afa4:	460b      	mov	r3, r1
 800afa6:	817b      	strh	r3, [r7, #10]
 800afa8:	4613      	mov	r3, r2
 800afaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800afac:	f7fe fc00 	bl	80097b0 <HAL_GetTick>
 800afb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b20      	cmp	r3, #32
 800afbc:	f040 80e0 	bne.w	800b180 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	2319      	movs	r3, #25
 800afc6:	2201      	movs	r2, #1
 800afc8:	4970      	ldr	r1, [pc, #448]	; (800b18c <HAL_I2C_Master_Transmit+0x1f4>)
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 fc58 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800afd6:	2302      	movs	r3, #2
 800afd8:	e0d3      	b.n	800b182 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_I2C_Master_Transmit+0x50>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e0cc      	b.n	800b182 <HAL_I2C_Master_Transmit+0x1ea>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b01      	cmp	r3, #1
 800affc:	d007      	beq.n	800b00e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f042 0201 	orr.w	r2, r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b01c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2221      	movs	r2, #33	; 0x21
 800b022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2210      	movs	r2, #16
 800b02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	893a      	ldrh	r2, [r7, #8]
 800b03e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b044:	b29a      	uxth	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	4a50      	ldr	r2, [pc, #320]	; (800b190 <HAL_I2C_Master_Transmit+0x1f8>)
 800b04e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b050:	8979      	ldrh	r1, [r7, #10]
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	6a3a      	ldr	r2, [r7, #32]
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 fac2 	bl	800b5e0 <I2C_MasterRequestWrite>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e08d      	b.n	800b182 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b066:	2300      	movs	r3, #0
 800b068:	613b      	str	r3, [r7, #16]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	613b      	str	r3, [r7, #16]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	613b      	str	r3, [r7, #16]
 800b07a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b07c:	e066      	b.n	800b14c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	6a39      	ldr	r1, [r7, #32]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 fcd2 	bl	800ba2c <I2C_WaitOnTXEFlagUntilTimeout>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00d      	beq.n	800b0aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b092:	2b04      	cmp	r3, #4
 800b094:	d107      	bne.n	800b0a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e06b      	b.n	800b182 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ae:	781a      	ldrb	r2, [r3, #0]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	1c5a      	adds	r2, r3, #1
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b04      	cmp	r3, #4
 800b0e6:	d11b      	bne.n	800b120 <HAL_I2C_Master_Transmit+0x188>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d017      	beq.n	800b120 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f4:	781a      	ldrb	r2, [r3, #0]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b118:	3b01      	subs	r3, #1
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	6a39      	ldr	r1, [r7, #32]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 fcc2 	bl	800baae <I2C_WaitOnBTFFlagUntilTimeout>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00d      	beq.n	800b14c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b134:	2b04      	cmp	r3, #4
 800b136:	d107      	bne.n	800b148 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b146:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e01a      	b.n	800b182 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b150:	2b00      	cmp	r3, #0
 800b152:	d194      	bne.n	800b07e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2220      	movs	r2, #32
 800b168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	e000      	b.n	800b182 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b180:	2302      	movs	r3, #2
  }
}
 800b182:	4618      	mov	r0, r3
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	00100002 	.word	0x00100002
 800b190:	ffff0000 	.word	0xffff0000

0800b194 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08c      	sub	sp, #48	; 0x30
 800b198:	af02      	add	r7, sp, #8
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	817b      	strh	r3, [r7, #10]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b1a8:	f7fe fb02 	bl	80097b0 <HAL_GetTick>
 800b1ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	f040 820b 	bne.w	800b5d2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	2319      	movs	r3, #25
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	497c      	ldr	r1, [pc, #496]	; (800b3b8 <HAL_I2C_Master_Receive+0x224>)
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 fb5a 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	e1fe      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <HAL_I2C_Master_Receive+0x50>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e1f7      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d007      	beq.n	800b20a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f042 0201 	orr.w	r2, r2, #1
 800b208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2222      	movs	r2, #34	; 0x22
 800b21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2210      	movs	r2, #16
 800b226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	893a      	ldrh	r2, [r7, #8]
 800b23a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b240:	b29a      	uxth	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4a5c      	ldr	r2, [pc, #368]	; (800b3bc <HAL_I2C_Master_Receive+0x228>)
 800b24a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b24c:	8979      	ldrh	r1, [r7, #10]
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 fa46 	bl	800b6e4 <I2C_MasterRequestRead>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d001      	beq.n	800b262 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e1b8      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d113      	bne.n	800b292 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b26a:	2300      	movs	r3, #0
 800b26c:	623b      	str	r3, [r7, #32]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	623b      	str	r3, [r7, #32]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	623b      	str	r3, [r7, #32]
 800b27e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b28e:	601a      	str	r2, [r3, #0]
 800b290:	e18c      	b.n	800b5ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b296:	2b01      	cmp	r3, #1
 800b298:	d11b      	bne.n	800b2d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	61fb      	str	r3, [r7, #28]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	61fb      	str	r3, [r7, #28]
 800b2be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2ce:	601a      	str	r2, [r3, #0]
 800b2d0:	e16c      	b.n	800b5ac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d11b      	bne.n	800b312 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	61bb      	str	r3, [r7, #24]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	61bb      	str	r3, [r7, #24]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	61bb      	str	r3, [r7, #24]
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	e14c      	b.n	800b5ac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b322:	2300      	movs	r3, #0
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b338:	e138      	b.n	800b5ac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b33e:	2b03      	cmp	r3, #3
 800b340:	f200 80f1 	bhi.w	800b526 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d123      	bne.n	800b394 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 fbed 	bl	800bb30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e139      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	691a      	ldr	r2, [r3, #16]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	b2d2      	uxtb	r2, r2
 800b36c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b37c:	3b01      	subs	r3, #1
 800b37e:	b29a      	uxth	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b388:	b29b      	uxth	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b392:	e10b      	b.n	800b5ac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d14e      	bne.n	800b43a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	4906      	ldr	r1, [pc, #24]	; (800b3c0 <HAL_I2C_Master_Receive+0x22c>)
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 fa6a 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d008      	beq.n	800b3c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e10e      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
 800b3b6:	bf00      	nop
 800b3b8:	00100002 	.word	0x00100002
 800b3bc:	ffff0000 	.word	0xffff0000
 800b3c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	b2d2      	uxtb	r2, r2
 800b3e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	691a      	ldr	r2, [r3, #16]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	b2d2      	uxtb	r2, r2
 800b412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	1c5a      	adds	r2, r3, #1
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b422:	3b01      	subs	r3, #1
 800b424:	b29a      	uxth	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b42e:	b29b      	uxth	r3, r3
 800b430:	3b01      	subs	r3, #1
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b438:	e0b8      	b.n	800b5ac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	2200      	movs	r2, #0
 800b442:	4966      	ldr	r1, [pc, #408]	; (800b5dc <HAL_I2C_Master_Receive+0x448>)
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 fa1b 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	e0bf      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b480:	3b01      	subs	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	3b01      	subs	r3, #1
 800b490:	b29a      	uxth	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	2200      	movs	r2, #0
 800b49e:	494f      	ldr	r1, [pc, #316]	; (800b5dc <HAL_I2C_Master_Receive+0x448>)
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f000 f9ed 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e091      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	691a      	ldr	r2, [r3, #16]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	b2d2      	uxtb	r2, r2
 800b4cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	691a      	ldr	r2, [r3, #16]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	b2d2      	uxtb	r2, r2
 800b4fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50e:	3b01      	subs	r3, #1
 800b510:	b29a      	uxth	r2, r3
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	3b01      	subs	r3, #1
 800b51e:	b29a      	uxth	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b524:	e042      	b.n	800b5ac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 fb00 	bl	800bb30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e04c      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b556:	3b01      	subs	r3, #1
 800b558:	b29a      	uxth	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b562:	b29b      	uxth	r3, r3
 800b564:	3b01      	subs	r3, #1
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	f003 0304 	and.w	r3, r3, #4
 800b576:	2b04      	cmp	r3, #4
 800b578:	d118      	bne.n	800b5ac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	691a      	ldr	r2, [r3, #16]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	b2d2      	uxtb	r2, r2
 800b586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b596:	3b01      	subs	r3, #1
 800b598:	b29a      	uxth	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f47f aec2 	bne.w	800b33a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e000      	b.n	800b5d4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b5d2:	2302      	movs	r3, #2
  }
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3728      	adds	r7, #40	; 0x28
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	00010004 	.word	0x00010004

0800b5e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af02      	add	r7, sp, #8
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	607a      	str	r2, [r7, #4]
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d006      	beq.n	800b60a <I2C_MasterRequestWrite+0x2a>
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d003      	beq.n	800b60a <I2C_MasterRequestWrite+0x2a>
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b608:	d108      	bne.n	800b61c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	e00b      	b.n	800b634 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b620:	2b12      	cmp	r3, #18
 800b622:	d107      	bne.n	800b634 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b632:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 f91d 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00d      	beq.n	800b668 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b65a:	d103      	bne.n	800b664 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e035      	b.n	800b6d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b670:	d108      	bne.n	800b684 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b672:	897b      	ldrh	r3, [r7, #10]
 800b674:	b2db      	uxtb	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b680:	611a      	str	r2, [r3, #16]
 800b682:	e01b      	b.n	800b6bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b684:	897b      	ldrh	r3, [r7, #10]
 800b686:	11db      	asrs	r3, r3, #7
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	f003 0306 	and.w	r3, r3, #6
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f063 030f 	orn	r3, r3, #15
 800b694:	b2da      	uxtb	r2, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	490e      	ldr	r1, [pc, #56]	; (800b6dc <I2C_MasterRequestWrite+0xfc>)
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 f943 	bl	800b92e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d001      	beq.n	800b6b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e010      	b.n	800b6d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b6b2:	897b      	ldrh	r3, [r7, #10]
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	4907      	ldr	r1, [pc, #28]	; (800b6e0 <I2C_MasterRequestWrite+0x100>)
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f000 f933 	bl	800b92e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	00010008 	.word	0x00010008
 800b6e0:	00010002 	.word	0x00010002

0800b6e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af02      	add	r7, sp, #8
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	607a      	str	r2, [r7, #4]
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b708:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	2b08      	cmp	r3, #8
 800b70e:	d006      	beq.n	800b71e <I2C_MasterRequestRead+0x3a>
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d003      	beq.n	800b71e <I2C_MasterRequestRead+0x3a>
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b71c:	d108      	bne.n	800b730 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b72c:	601a      	str	r2, [r3, #0]
 800b72e:	e00b      	b.n	800b748 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b734:	2b11      	cmp	r3, #17
 800b736:	d107      	bne.n	800b748 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b746:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 f893 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00d      	beq.n	800b77c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b76e:	d103      	bne.n	800b778 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e079      	b.n	800b870 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b784:	d108      	bne.n	800b798 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b786:	897b      	ldrh	r3, [r7, #10]
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	f043 0301 	orr.w	r3, r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	611a      	str	r2, [r3, #16]
 800b796:	e05f      	b.n	800b858 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b798:	897b      	ldrh	r3, [r7, #10]
 800b79a:	11db      	asrs	r3, r3, #7
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	f003 0306 	and.w	r3, r3, #6
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	f063 030f 	orn	r3, r3, #15
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	4930      	ldr	r1, [pc, #192]	; (800b878 <I2C_MasterRequestRead+0x194>)
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f000 f8b9 	bl	800b92e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e054      	b.n	800b870 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b7c6:	897b      	ldrh	r3, [r7, #10]
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	4929      	ldr	r1, [pc, #164]	; (800b87c <I2C_MasterRequestRead+0x198>)
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f000 f8a9 	bl	800b92e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e044      	b.n	800b870 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	613b      	str	r3, [r7, #16]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	613b      	str	r3, [r7, #16]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	613b      	str	r3, [r7, #16]
 800b7fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b80a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 f831 	bl	800b880 <I2C_WaitOnFlagUntilTimeout>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00d      	beq.n	800b840 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b832:	d103      	bne.n	800b83c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b83a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e017      	b.n	800b870 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b840:	897b      	ldrh	r3, [r7, #10]
 800b842:	11db      	asrs	r3, r3, #7
 800b844:	b2db      	uxtb	r3, r3
 800b846:	f003 0306 	and.w	r3, r3, #6
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	f063 030e 	orn	r3, r3, #14
 800b850:	b2da      	uxtb	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	4907      	ldr	r1, [pc, #28]	; (800b87c <I2C_MasterRequestRead+0x198>)
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 f865 	bl	800b92e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d001      	beq.n	800b86e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e000      	b.n	800b870 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	00010008 	.word	0x00010008
 800b87c:	00010002 	.word	0x00010002

0800b880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	4613      	mov	r3, r2
 800b88e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b890:	e025      	b.n	800b8de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d021      	beq.n	800b8de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b89a:	f7fd ff89 	bl	80097b0 <HAL_GetTick>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d302      	bcc.n	800b8b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d116      	bne.n	800b8de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	f043 0220 	orr.w	r2, r3, #32
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e023      	b.n	800b926 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	0c1b      	lsrs	r3, r3, #16
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d10d      	bne.n	800b904 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	43da      	mvns	r2, r3
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	bf0c      	ite	eq
 800b8fa:	2301      	moveq	r3, #1
 800b8fc:	2300      	movne	r3, #0
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	461a      	mov	r2, r3
 800b902:	e00c      	b.n	800b91e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	43da      	mvns	r2, r3
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	4013      	ands	r3, r2
 800b910:	b29b      	uxth	r3, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	bf0c      	ite	eq
 800b916:	2301      	moveq	r3, #1
 800b918:	2300      	movne	r3, #0
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	461a      	mov	r2, r3
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	429a      	cmp	r2, r3
 800b922:	d0b6      	beq.n	800b892 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b93c:	e051      	b.n	800b9e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b94c:	d123      	bne.n	800b996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b95c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b966:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2220      	movs	r2, #32
 800b972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b982:	f043 0204 	orr.w	r2, r3, #4
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e046      	b.n	800ba24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99c:	d021      	beq.n	800b9e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b99e:	f7fd ff07 	bl	80097b0 <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d302      	bcc.n	800b9b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d116      	bne.n	800b9e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2220      	movs	r2, #32
 800b9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ce:	f043 0220 	orr.w	r2, r3, #32
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e020      	b.n	800ba24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	0c1b      	lsrs	r3, r3, #16
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d10c      	bne.n	800ba06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	695b      	ldr	r3, [r3, #20]
 800b9f2:	43da      	mvns	r2, r3
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	bf14      	ite	ne
 800b9fe:	2301      	movne	r3, #1
 800ba00:	2300      	moveq	r3, #0
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	e00b      	b.n	800ba1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	43da      	mvns	r2, r3
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	4013      	ands	r3, r2
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	bf14      	ite	ne
 800ba18:	2301      	movne	r3, #1
 800ba1a:	2300      	moveq	r3, #0
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d18d      	bne.n	800b93e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba38:	e02d      	b.n	800ba96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f000 f8ce 	bl	800bbdc <I2C_IsAcknowledgeFailed>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e02d      	b.n	800baa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba50:	d021      	beq.n	800ba96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba52:	f7fd fead 	bl	80097b0 <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d302      	bcc.n	800ba68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d116      	bne.n	800ba96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2220      	movs	r2, #32
 800ba72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	f043 0220 	orr.w	r2, r3, #32
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e007      	b.n	800baa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa0:	2b80      	cmp	r3, #128	; 0x80
 800baa2:	d1ca      	bne.n	800ba3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800baba:	e02d      	b.n	800bb18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f000 f88d 	bl	800bbdc <I2C_IsAcknowledgeFailed>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e02d      	b.n	800bb28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad2:	d021      	beq.n	800bb18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad4:	f7fd fe6c 	bl	80097b0 <HAL_GetTick>
 800bad8:	4602      	mov	r2, r0
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d302      	bcc.n	800baea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d116      	bne.n	800bb18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2220      	movs	r2, #32
 800baf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb04:	f043 0220 	orr.w	r2, r3, #32
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e007      	b.n	800bb28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d1ca      	bne.n	800babc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb3c:	e042      	b.n	800bbc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b10      	cmp	r3, #16
 800bb4a:	d119      	bne.n	800bb80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f06f 0210 	mvn.w	r2, #16
 800bb54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2220      	movs	r2, #32
 800bb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e029      	b.n	800bbd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb80:	f7fd fe16 	bl	80097b0 <HAL_GetTick>
 800bb84:	4602      	mov	r2, r0
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d302      	bcc.n	800bb96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d116      	bne.n	800bbc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb0:	f043 0220 	orr.w	r2, r3, #32
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e007      	b.n	800bbd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbce:	2b40      	cmp	r3, #64	; 0x40
 800bbd0:	d1b5      	bne.n	800bb3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbf2:	d11b      	bne.n	800bc2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2220      	movs	r2, #32
 800bc08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc18:	f043 0204 	orr.w	r2, r3, #4
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e000      	b.n	800bc2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
	...

0800bc3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bc42:	2300      	movs	r3, #0
 800bc44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bc46:	2300      	movs	r3, #0
 800bc48:	603b      	str	r3, [r7, #0]
 800bc4a:	4b20      	ldr	r3, [pc, #128]	; (800bccc <HAL_PWREx_EnableOverDrive+0x90>)
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	4a1f      	ldr	r2, [pc, #124]	; (800bccc <HAL_PWREx_EnableOverDrive+0x90>)
 800bc50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc54:	6413      	str	r3, [r2, #64]	; 0x40
 800bc56:	4b1d      	ldr	r3, [pc, #116]	; (800bccc <HAL_PWREx_EnableOverDrive+0x90>)
 800bc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bc62:	4b1b      	ldr	r3, [pc, #108]	; (800bcd0 <HAL_PWREx_EnableOverDrive+0x94>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc68:	f7fd fda2 	bl	80097b0 <HAL_GetTick>
 800bc6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bc6e:	e009      	b.n	800bc84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bc70:	f7fd fd9e 	bl	80097b0 <HAL_GetTick>
 800bc74:	4602      	mov	r2, r0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc7e:	d901      	bls.n	800bc84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bc80:	2303      	movs	r3, #3
 800bc82:	e01f      	b.n	800bcc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bc84:	4b13      	ldr	r3, [pc, #76]	; (800bcd4 <HAL_PWREx_EnableOverDrive+0x98>)
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc90:	d1ee      	bne.n	800bc70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bc92:	4b11      	ldr	r3, [pc, #68]	; (800bcd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc98:	f7fd fd8a 	bl	80097b0 <HAL_GetTick>
 800bc9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc9e:	e009      	b.n	800bcb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bca0:	f7fd fd86 	bl	80097b0 <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcae:	d901      	bls.n	800bcb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e007      	b.n	800bcc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bcb4:	4b07      	ldr	r3, [pc, #28]	; (800bcd4 <HAL_PWREx_EnableOverDrive+0x98>)
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcc0:	d1ee      	bne.n	800bca0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	40023800 	.word	0x40023800
 800bcd0:	420e0040 	.word	0x420e0040
 800bcd4:	40007000 	.word	0x40007000
 800bcd8:	420e0044 	.word	0x420e0044

0800bcdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d101      	bne.n	800bcf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e0cc      	b.n	800be8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bcf0:	4b68      	ldr	r3, [pc, #416]	; (800be94 <HAL_RCC_ClockConfig+0x1b8>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f003 030f 	and.w	r3, r3, #15
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d90c      	bls.n	800bd18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcfe:	4b65      	ldr	r3, [pc, #404]	; (800be94 <HAL_RCC_ClockConfig+0x1b8>)
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd06:	4b63      	ldr	r3, [pc, #396]	; (800be94 <HAL_RCC_ClockConfig+0x1b8>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 030f 	and.w	r3, r3, #15
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d001      	beq.n	800bd18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e0b8      	b.n	800be8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0302 	and.w	r3, r3, #2
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d020      	beq.n	800bd66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0304 	and.w	r3, r3, #4
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd30:	4b59      	ldr	r3, [pc, #356]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	4a58      	ldr	r2, [pc, #352]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bd3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0308 	and.w	r3, r3, #8
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d005      	beq.n	800bd54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd48:	4b53      	ldr	r3, [pc, #332]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	4a52      	ldr	r2, [pc, #328]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bd52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd54:	4b50      	ldr	r3, [pc, #320]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	494d      	ldr	r1, [pc, #308]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd62:	4313      	orrs	r3, r2
 800bd64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d044      	beq.n	800bdfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d107      	bne.n	800bd8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd7a:	4b47      	ldr	r3, [pc, #284]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d119      	bne.n	800bdba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e07f      	b.n	800be8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d003      	beq.n	800bd9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d107      	bne.n	800bdaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd9a:	4b3f      	ldr	r3, [pc, #252]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e06f      	b.n	800be8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdaa:	4b3b      	ldr	r3, [pc, #236]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0302 	and.w	r3, r3, #2
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e067      	b.n	800be8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bdba:	4b37      	ldr	r3, [pc, #220]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	f023 0203 	bic.w	r2, r3, #3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	4934      	ldr	r1, [pc, #208]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bdcc:	f7fd fcf0 	bl	80097b0 <HAL_GetTick>
 800bdd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdd2:	e00a      	b.n	800bdea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdd4:	f7fd fcec 	bl	80097b0 <HAL_GetTick>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	f241 3288 	movw	r2, #5000	; 0x1388
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d901      	bls.n	800bdea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e04f      	b.n	800be8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdea:	4b2b      	ldr	r3, [pc, #172]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f003 020c 	and.w	r2, r3, #12
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d1eb      	bne.n	800bdd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bdfc:	4b25      	ldr	r3, [pc, #148]	; (800be94 <HAL_RCC_ClockConfig+0x1b8>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 030f 	and.w	r3, r3, #15
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d20c      	bcs.n	800be24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be0a:	4b22      	ldr	r3, [pc, #136]	; (800be94 <HAL_RCC_ClockConfig+0x1b8>)
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	b2d2      	uxtb	r2, r2
 800be10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be12:	4b20      	ldr	r3, [pc, #128]	; (800be94 <HAL_RCC_ClockConfig+0x1b8>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 030f 	and.w	r3, r3, #15
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d001      	beq.n	800be24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e032      	b.n	800be8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d008      	beq.n	800be42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be30:	4b19      	ldr	r3, [pc, #100]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	4916      	ldr	r1, [pc, #88]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800be3e:	4313      	orrs	r3, r2
 800be40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0308 	and.w	r3, r3, #8
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d009      	beq.n	800be62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be4e:	4b12      	ldr	r3, [pc, #72]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	490e      	ldr	r1, [pc, #56]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800be62:	f000 f821 	bl	800bea8 <HAL_RCC_GetSysClockFreq>
 800be66:	4601      	mov	r1, r0
 800be68:	4b0b      	ldr	r3, [pc, #44]	; (800be98 <HAL_RCC_ClockConfig+0x1bc>)
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	091b      	lsrs	r3, r3, #4
 800be6e:	f003 030f 	and.w	r3, r3, #15
 800be72:	4a0a      	ldr	r2, [pc, #40]	; (800be9c <HAL_RCC_ClockConfig+0x1c0>)
 800be74:	5cd3      	ldrb	r3, [r2, r3]
 800be76:	fa21 f303 	lsr.w	r3, r1, r3
 800be7a:	4a09      	ldr	r2, [pc, #36]	; (800bea0 <HAL_RCC_ClockConfig+0x1c4>)
 800be7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800be7e:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <HAL_RCC_ClockConfig+0x1c8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4618      	mov	r0, r3
 800be84:	f7fd fc50 	bl	8009728 <HAL_InitTick>

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	40023c00 	.word	0x40023c00
 800be98:	40023800 	.word	0x40023800
 800be9c:	08019c90 	.word	0x08019c90
 800bea0:	20000000 	.word	0x20000000
 800bea4:	20000004 	.word	0x20000004

0800bea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	607b      	str	r3, [r7, #4]
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	2300      	movs	r3, #0
 800beb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bebe:	4b63      	ldr	r3, [pc, #396]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	f003 030c 	and.w	r3, r3, #12
 800bec6:	2b04      	cmp	r3, #4
 800bec8:	d007      	beq.n	800beda <HAL_RCC_GetSysClockFreq+0x32>
 800beca:	2b08      	cmp	r3, #8
 800becc:	d008      	beq.n	800bee0 <HAL_RCC_GetSysClockFreq+0x38>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f040 80b4 	bne.w	800c03c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bed4:	4b5e      	ldr	r3, [pc, #376]	; (800c050 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bed6:	60bb      	str	r3, [r7, #8]
       break;
 800bed8:	e0b3      	b.n	800c042 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800beda:	4b5d      	ldr	r3, [pc, #372]	; (800c050 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bedc:	60bb      	str	r3, [r7, #8]
      break;
 800bede:	e0b0      	b.n	800c042 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bee0:	4b5a      	ldr	r3, [pc, #360]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bee8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800beea:	4b58      	ldr	r3, [pc, #352]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d04a      	beq.n	800bf8c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bef6:	4b55      	ldr	r3, [pc, #340]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	099b      	lsrs	r3, r3, #6
 800befc:	f04f 0400 	mov.w	r4, #0
 800bf00:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bf04:	f04f 0200 	mov.w	r2, #0
 800bf08:	ea03 0501 	and.w	r5, r3, r1
 800bf0c:	ea04 0602 	and.w	r6, r4, r2
 800bf10:	4629      	mov	r1, r5
 800bf12:	4632      	mov	r2, r6
 800bf14:	f04f 0300 	mov.w	r3, #0
 800bf18:	f04f 0400 	mov.w	r4, #0
 800bf1c:	0154      	lsls	r4, r2, #5
 800bf1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf22:	014b      	lsls	r3, r1, #5
 800bf24:	4619      	mov	r1, r3
 800bf26:	4622      	mov	r2, r4
 800bf28:	1b49      	subs	r1, r1, r5
 800bf2a:	eb62 0206 	sbc.w	r2, r2, r6
 800bf2e:	f04f 0300 	mov.w	r3, #0
 800bf32:	f04f 0400 	mov.w	r4, #0
 800bf36:	0194      	lsls	r4, r2, #6
 800bf38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bf3c:	018b      	lsls	r3, r1, #6
 800bf3e:	1a5b      	subs	r3, r3, r1
 800bf40:	eb64 0402 	sbc.w	r4, r4, r2
 800bf44:	f04f 0100 	mov.w	r1, #0
 800bf48:	f04f 0200 	mov.w	r2, #0
 800bf4c:	00e2      	lsls	r2, r4, #3
 800bf4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bf52:	00d9      	lsls	r1, r3, #3
 800bf54:	460b      	mov	r3, r1
 800bf56:	4614      	mov	r4, r2
 800bf58:	195b      	adds	r3, r3, r5
 800bf5a:	eb44 0406 	adc.w	r4, r4, r6
 800bf5e:	f04f 0100 	mov.w	r1, #0
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	02a2      	lsls	r2, r4, #10
 800bf68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bf6c:	0299      	lsls	r1, r3, #10
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4614      	mov	r4, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	4621      	mov	r1, r4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f04f 0400 	mov.w	r4, #0
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	4623      	mov	r3, r4
 800bf80:	f7f4 fe9a 	bl	8000cb8 <__aeabi_uldivmod>
 800bf84:	4603      	mov	r3, r0
 800bf86:	460c      	mov	r4, r1
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	e049      	b.n	800c020 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf8c:	4b2f      	ldr	r3, [pc, #188]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	099b      	lsrs	r3, r3, #6
 800bf92:	f04f 0400 	mov.w	r4, #0
 800bf96:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bf9a:	f04f 0200 	mov.w	r2, #0
 800bf9e:	ea03 0501 	and.w	r5, r3, r1
 800bfa2:	ea04 0602 	and.w	r6, r4, r2
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4632      	mov	r2, r6
 800bfaa:	f04f 0300 	mov.w	r3, #0
 800bfae:	f04f 0400 	mov.w	r4, #0
 800bfb2:	0154      	lsls	r4, r2, #5
 800bfb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bfb8:	014b      	lsls	r3, r1, #5
 800bfba:	4619      	mov	r1, r3
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	1b49      	subs	r1, r1, r5
 800bfc0:	eb62 0206 	sbc.w	r2, r2, r6
 800bfc4:	f04f 0300 	mov.w	r3, #0
 800bfc8:	f04f 0400 	mov.w	r4, #0
 800bfcc:	0194      	lsls	r4, r2, #6
 800bfce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bfd2:	018b      	lsls	r3, r1, #6
 800bfd4:	1a5b      	subs	r3, r3, r1
 800bfd6:	eb64 0402 	sbc.w	r4, r4, r2
 800bfda:	f04f 0100 	mov.w	r1, #0
 800bfde:	f04f 0200 	mov.w	r2, #0
 800bfe2:	00e2      	lsls	r2, r4, #3
 800bfe4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bfe8:	00d9      	lsls	r1, r3, #3
 800bfea:	460b      	mov	r3, r1
 800bfec:	4614      	mov	r4, r2
 800bfee:	195b      	adds	r3, r3, r5
 800bff0:	eb44 0406 	adc.w	r4, r4, r6
 800bff4:	f04f 0100 	mov.w	r1, #0
 800bff8:	f04f 0200 	mov.w	r2, #0
 800bffc:	02a2      	lsls	r2, r4, #10
 800bffe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c002:	0299      	lsls	r1, r3, #10
 800c004:	460b      	mov	r3, r1
 800c006:	4614      	mov	r4, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	4621      	mov	r1, r4
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f04f 0400 	mov.w	r4, #0
 800c012:	461a      	mov	r2, r3
 800c014:	4623      	mov	r3, r4
 800c016:	f7f4 fe4f 	bl	8000cb8 <__aeabi_uldivmod>
 800c01a:	4603      	mov	r3, r0
 800c01c:	460c      	mov	r4, r1
 800c01e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c020:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	0c1b      	lsrs	r3, r3, #16
 800c026:	f003 0303 	and.w	r3, r3, #3
 800c02a:	3301      	adds	r3, #1
 800c02c:	005b      	lsls	r3, r3, #1
 800c02e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	fbb2 f3f3 	udiv	r3, r2, r3
 800c038:	60bb      	str	r3, [r7, #8]
      break;
 800c03a:	e002      	b.n	800c042 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c03c:	4b04      	ldr	r3, [pc, #16]	; (800c050 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c03e:	60bb      	str	r3, [r7, #8]
      break;
 800c040:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c042:	68bb      	ldr	r3, [r7, #8]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c04c:	40023800 	.word	0x40023800
 800c050:	00f42400 	.word	0x00f42400

0800c054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c054:	b480      	push	{r7}
 800c056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c058:	4b03      	ldr	r3, [pc, #12]	; (800c068 <HAL_RCC_GetHCLKFreq+0x14>)
 800c05a:	681b      	ldr	r3, [r3, #0]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	20000000 	.word	0x20000000

0800c06c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c070:	f7ff fff0 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800c074:	4601      	mov	r1, r0
 800c076:	4b05      	ldr	r3, [pc, #20]	; (800c08c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	0a9b      	lsrs	r3, r3, #10
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	4a03      	ldr	r2, [pc, #12]	; (800c090 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c082:	5cd3      	ldrb	r3, [r2, r3]
 800c084:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c088:	4618      	mov	r0, r3
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	40023800 	.word	0x40023800
 800c090:	08019ca0 	.word	0x08019ca0

0800c094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c098:	f7ff ffdc 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800c09c:	4601      	mov	r1, r0
 800c09e:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	0b5b      	lsrs	r3, r3, #13
 800c0a4:	f003 0307 	and.w	r3, r3, #7
 800c0a8:	4a03      	ldr	r2, [pc, #12]	; (800c0b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0aa:	5cd3      	ldrb	r3, [r2, r3]
 800c0ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	40023800 	.word	0x40023800
 800c0b8:	08019ca0 	.word	0x08019ca0

0800c0bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00a      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c0e4:	4b66      	ldr	r3, [pc, #408]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f2:	4963      	ldr	r1, [pc, #396]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00a      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c106:	4b5e      	ldr	r3, [pc, #376]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c10c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c114:	495a      	ldr	r1, [pc, #360]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c116:	4313      	orrs	r3, r2
 800c118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10b      	bne.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c130:	2b00      	cmp	r3, #0
 800c132:	d105      	bne.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d075      	beq.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c140:	4b50      	ldr	r3, [pc, #320]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c146:	f7fd fb33 	bl	80097b0 <HAL_GetTick>
 800c14a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c14c:	e008      	b.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c14e:	f7fd fb2f 	bl	80097b0 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d901      	bls.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e1dc      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c160:	4b47      	ldr	r3, [pc, #284]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f0      	bne.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b00      	cmp	r3, #0
 800c176:	d009      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	019a      	lsls	r2, r3, #6
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	071b      	lsls	r3, r3, #28
 800c184:	493e      	ldr	r1, [pc, #248]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c186:	4313      	orrs	r3, r2
 800c188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0302 	and.w	r3, r3, #2
 800c194:	2b00      	cmp	r3, #0
 800c196:	d01f      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c198:	4b39      	ldr	r3, [pc, #228]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c19e:	0f1b      	lsrs	r3, r3, #28
 800c1a0:	f003 0307 	and.w	r3, r3, #7
 800c1a4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	019a      	lsls	r2, r3, #6
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	061b      	lsls	r3, r3, #24
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	071b      	lsls	r3, r3, #28
 800c1b8:	4931      	ldr	r1, [pc, #196]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c1c0:	4b2f      	ldr	r3, [pc, #188]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1c6:	f023 021f 	bic.w	r2, r3, #31
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	492b      	ldr	r1, [pc, #172]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00d      	beq.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	019a      	lsls	r2, r3, #6
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	061b      	lsls	r3, r3, #24
 800c1f0:	431a      	orrs	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	071b      	lsls	r3, r3, #28
 800c1f8:	4921      	ldr	r1, [pc, #132]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c200:	4b20      	ldr	r3, [pc, #128]	; (800c284 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c202:	2201      	movs	r2, #1
 800c204:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c206:	f7fd fad3 	bl	80097b0 <HAL_GetTick>
 800c20a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c20c:	e008      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c20e:	f7fd facf 	bl	80097b0 <HAL_GetTick>
 800c212:	4602      	mov	r2, r0
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d901      	bls.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c21c:	2303      	movs	r3, #3
 800c21e:	e17c      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c220:	4b17      	ldr	r3, [pc, #92]	; (800c280 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d0f0      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0304 	and.w	r3, r3, #4
 800c234:	2b00      	cmp	r3, #0
 800c236:	d112      	bne.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10c      	bne.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 80ce 	beq.w	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c25a:	f040 80c8 	bne.w	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c25e:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c264:	f7fd faa4 	bl	80097b0 <HAL_GetTick>
 800c268:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c26a:	e00f      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c26c:	f7fd faa0 	bl	80097b0 <HAL_GetTick>
 800c270:	4602      	mov	r2, r0
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	2b02      	cmp	r3, #2
 800c278:	d908      	bls.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e14d      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c27e:	bf00      	nop
 800c280:	40023800 	.word	0x40023800
 800c284:	42470068 	.word	0x42470068
 800c288:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c28c:	4ba5      	ldr	r3, [pc, #660]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c298:	d0e8      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d02e      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c2a6:	4b9f      	ldr	r3, [pc, #636]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ac:	0c1b      	lsrs	r3, r3, #16
 800c2ae:	f003 0303 	and.w	r3, r3, #3
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c2b8:	4b9a      	ldr	r3, [pc, #616]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2be:	0f1b      	lsrs	r3, r3, #28
 800c2c0:	f003 0307 	and.w	r3, r3, #7
 800c2c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	019a      	lsls	r2, r3, #6
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	085b      	lsrs	r3, r3, #1
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	041b      	lsls	r3, r3, #16
 800c2d4:	431a      	orrs	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	061b      	lsls	r3, r3, #24
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	071b      	lsls	r3, r3, #28
 800c2e2:	4990      	ldr	r1, [pc, #576]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c2ea:	4b8e      	ldr	r3, [pc, #568]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	021b      	lsls	r3, r3, #8
 800c2fc:	4989      	ldr	r1, [pc, #548]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 0308 	and.w	r3, r3, #8
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d02c      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c310:	4b84      	ldr	r3, [pc, #528]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c316:	0c1b      	lsrs	r3, r3, #16
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	3301      	adds	r3, #1
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c322:	4b80      	ldr	r3, [pc, #512]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c328:	0e1b      	lsrs	r3, r3, #24
 800c32a:	f003 030f 	and.w	r3, r3, #15
 800c32e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	019a      	lsls	r2, r3, #6
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	085b      	lsrs	r3, r3, #1
 800c33a:	3b01      	subs	r3, #1
 800c33c:	041b      	lsls	r3, r3, #16
 800c33e:	431a      	orrs	r2, r3
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	061b      	lsls	r3, r3, #24
 800c344:	431a      	orrs	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	071b      	lsls	r3, r3, #28
 800c34c:	4975      	ldr	r1, [pc, #468]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c34e:	4313      	orrs	r3, r2
 800c350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c354:	4b73      	ldr	r3, [pc, #460]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c35a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	4970      	ldr	r1, [pc, #448]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c364:	4313      	orrs	r3, r2
 800c366:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c372:	2b00      	cmp	r3, #0
 800c374:	d024      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c37a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c37e:	d11f      	bne.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c380:	4b68      	ldr	r3, [pc, #416]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c386:	0e1b      	lsrs	r3, r3, #24
 800c388:	f003 030f 	and.w	r3, r3, #15
 800c38c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c38e:	4b65      	ldr	r3, [pc, #404]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c394:	0f1b      	lsrs	r3, r3, #28
 800c396:	f003 0307 	and.w	r3, r3, #7
 800c39a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	019a      	lsls	r2, r3, #6
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	085b      	lsrs	r3, r3, #1
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	041b      	lsls	r3, r3, #16
 800c3ac:	431a      	orrs	r2, r3
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	061b      	lsls	r3, r3, #24
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	071b      	lsls	r3, r3, #28
 800c3b8:	495a      	ldr	r1, [pc, #360]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c3c0:	4b59      	ldr	r3, [pc, #356]	; (800c528 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3c6:	f7fd f9f3 	bl	80097b0 <HAL_GetTick>
 800c3ca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c3cc:	e008      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c3ce:	f7fd f9ef 	bl	80097b0 <HAL_GetTick>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d901      	bls.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3dc:	2303      	movs	r3, #3
 800c3de:	e09c      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c3e0:	4b50      	ldr	r3, [pc, #320]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ec:	d1ef      	bne.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 8083 	beq.w	800c502 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	60bb      	str	r3, [r7, #8]
 800c400:	4b48      	ldr	r3, [pc, #288]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c404:	4a47      	ldr	r2, [pc, #284]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c40a:	6413      	str	r3, [r2, #64]	; 0x40
 800c40c:	4b45      	ldr	r3, [pc, #276]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c414:	60bb      	str	r3, [r7, #8]
 800c416:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c418:	4b44      	ldr	r3, [pc, #272]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a43      	ldr	r2, [pc, #268]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c41e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c422:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c424:	f7fd f9c4 	bl	80097b0 <HAL_GetTick>
 800c428:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c42a:	e008      	b.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c42c:	f7fd f9c0 	bl	80097b0 <HAL_GetTick>
 800c430:	4602      	mov	r2, r0
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	2b02      	cmp	r3, #2
 800c438:	d901      	bls.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c43a:	2303      	movs	r3, #3
 800c43c:	e06d      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c43e:	4b3b      	ldr	r3, [pc, #236]	; (800c52c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0f0      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c44a:	4b36      	ldr	r3, [pc, #216]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c452:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d02f      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c462:	69ba      	ldr	r2, [r7, #24]
 800c464:	429a      	cmp	r2, r3
 800c466:	d028      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c468:	4b2e      	ldr	r3, [pc, #184]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c46c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c470:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c472:	4b2f      	ldr	r3, [pc, #188]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c474:	2201      	movs	r2, #1
 800c476:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c478:	4b2d      	ldr	r3, [pc, #180]	; (800c530 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c47e:	4a29      	ldr	r2, [pc, #164]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c484:	4b27      	ldr	r3, [pc, #156]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c488:	f003 0301 	and.w	r3, r3, #1
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d114      	bne.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c490:	f7fd f98e 	bl	80097b0 <HAL_GetTick>
 800c494:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c496:	e00a      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c498:	f7fd f98a 	bl	80097b0 <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d901      	bls.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	e035      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4ae:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b2:	f003 0302 	and.w	r3, r3, #2
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0ee      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4c6:	d10d      	bne.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c4c8:	4b16      	ldr	r3, [pc, #88]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c4d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4dc:	4911      	ldr	r1, [pc, #68]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	608b      	str	r3, [r1, #8]
 800c4e2:	e005      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c4e4:	4b0f      	ldr	r3, [pc, #60]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	4a0e      	ldr	r2, [pc, #56]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c4ee:	6093      	str	r3, [r2, #8]
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4fc:	4909      	ldr	r1, [pc, #36]	; (800c524 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4fe:	4313      	orrs	r3, r2
 800c500:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 0310 	and.w	r3, r3, #16
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c514:	4b07      	ldr	r3, [pc, #28]	; (800c534 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c516:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3720      	adds	r7, #32
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	40023800 	.word	0x40023800
 800c528:	42470070 	.word	0x42470070
 800c52c:	40007000 	.word	0x40007000
 800c530:	42470e40 	.word	0x42470e40
 800c534:	424711e0 	.word	0x424711e0

0800c538 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c540:	2300      	movs	r3, #0
 800c542:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d075      	beq.n	800c63c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c550:	4ba2      	ldr	r3, [pc, #648]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	f003 030c 	and.w	r3, r3, #12
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d00c      	beq.n	800c576 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c55c:	4b9f      	ldr	r3, [pc, #636]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c564:	2b08      	cmp	r3, #8
 800c566:	d112      	bne.n	800c58e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c568:	4b9c      	ldr	r3, [pc, #624]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c574:	d10b      	bne.n	800c58e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c576:	4b99      	ldr	r3, [pc, #612]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d05b      	beq.n	800c63a <HAL_RCC_OscConfig+0x102>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d157      	bne.n	800c63a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e20b      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c596:	d106      	bne.n	800c5a6 <HAL_RCC_OscConfig+0x6e>
 800c598:	4b90      	ldr	r3, [pc, #576]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a8f      	ldr	r2, [pc, #572]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c59e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	e01d      	b.n	800c5e2 <HAL_RCC_OscConfig+0xaa>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5ae:	d10c      	bne.n	800c5ca <HAL_RCC_OscConfig+0x92>
 800c5b0:	4b8a      	ldr	r3, [pc, #552]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a89      	ldr	r2, [pc, #548]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	4b87      	ldr	r3, [pc, #540]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a86      	ldr	r2, [pc, #536]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	e00b      	b.n	800c5e2 <HAL_RCC_OscConfig+0xaa>
 800c5ca:	4b84      	ldr	r3, [pc, #528]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a83      	ldr	r2, [pc, #524]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	4b81      	ldr	r3, [pc, #516]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a80      	ldr	r2, [pc, #512]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c5dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d013      	beq.n	800c612 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5ea:	f7fd f8e1 	bl	80097b0 <HAL_GetTick>
 800c5ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5f0:	e008      	b.n	800c604 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c5f2:	f7fd f8dd 	bl	80097b0 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b64      	cmp	r3, #100	; 0x64
 800c5fe:	d901      	bls.n	800c604 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e1d0      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c604:	4b75      	ldr	r3, [pc, #468]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0f0      	beq.n	800c5f2 <HAL_RCC_OscConfig+0xba>
 800c610:	e014      	b.n	800c63c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c612:	f7fd f8cd 	bl	80097b0 <HAL_GetTick>
 800c616:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c618:	e008      	b.n	800c62c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c61a:	f7fd f8c9 	bl	80097b0 <HAL_GetTick>
 800c61e:	4602      	mov	r2, r0
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	2b64      	cmp	r3, #100	; 0x64
 800c626:	d901      	bls.n	800c62c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e1bc      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c62c:	4b6b      	ldr	r3, [pc, #428]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1f0      	bne.n	800c61a <HAL_RCC_OscConfig+0xe2>
 800c638:	e000      	b.n	800c63c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c63a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 0302 	and.w	r3, r3, #2
 800c644:	2b00      	cmp	r3, #0
 800c646:	d063      	beq.n	800c710 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c648:	4b64      	ldr	r3, [pc, #400]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	f003 030c 	and.w	r3, r3, #12
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c654:	4b61      	ldr	r3, [pc, #388]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c65c:	2b08      	cmp	r3, #8
 800c65e:	d11c      	bne.n	800c69a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c660:	4b5e      	ldr	r3, [pc, #376]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d116      	bne.n	800c69a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c66c:	4b5b      	ldr	r3, [pc, #364]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b00      	cmp	r3, #0
 800c676:	d005      	beq.n	800c684 <HAL_RCC_OscConfig+0x14c>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d001      	beq.n	800c684 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e190      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c684:	4b55      	ldr	r3, [pc, #340]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	00db      	lsls	r3, r3, #3
 800c692:	4952      	ldr	r1, [pc, #328]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c694:	4313      	orrs	r3, r2
 800c696:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c698:	e03a      	b.n	800c710 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d020      	beq.n	800c6e4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6a2:	4b4f      	ldr	r3, [pc, #316]	; (800c7e0 <HAL_RCC_OscConfig+0x2a8>)
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6a8:	f7fd f882 	bl	80097b0 <HAL_GetTick>
 800c6ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6ae:	e008      	b.n	800c6c2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c6b0:	f7fd f87e 	bl	80097b0 <HAL_GetTick>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d901      	bls.n	800c6c2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e171      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6c2:	4b46      	ldr	r3, [pc, #280]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 0302 	and.w	r3, r3, #2
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d0f0      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6ce:	4b43      	ldr	r3, [pc, #268]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	493f      	ldr	r1, [pc, #252]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	600b      	str	r3, [r1, #0]
 800c6e2:	e015      	b.n	800c710 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c6e4:	4b3e      	ldr	r3, [pc, #248]	; (800c7e0 <HAL_RCC_OscConfig+0x2a8>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6ea:	f7fd f861 	bl	80097b0 <HAL_GetTick>
 800c6ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6f0:	e008      	b.n	800c704 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c6f2:	f7fd f85d 	bl	80097b0 <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d901      	bls.n	800c704 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e150      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c704:	4b35      	ldr	r3, [pc, #212]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1f0      	bne.n	800c6f2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 0308 	and.w	r3, r3, #8
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d030      	beq.n	800c77e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	695b      	ldr	r3, [r3, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d016      	beq.n	800c752 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c724:	4b2f      	ldr	r3, [pc, #188]	; (800c7e4 <HAL_RCC_OscConfig+0x2ac>)
 800c726:	2201      	movs	r2, #1
 800c728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c72a:	f7fd f841 	bl	80097b0 <HAL_GetTick>
 800c72e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c730:	e008      	b.n	800c744 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c732:	f7fd f83d 	bl	80097b0 <HAL_GetTick>
 800c736:	4602      	mov	r2, r0
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d901      	bls.n	800c744 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c740:	2303      	movs	r3, #3
 800c742:	e130      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c744:	4b25      	ldr	r3, [pc, #148]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c748:	f003 0302 	and.w	r3, r3, #2
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0f0      	beq.n	800c732 <HAL_RCC_OscConfig+0x1fa>
 800c750:	e015      	b.n	800c77e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c752:	4b24      	ldr	r3, [pc, #144]	; (800c7e4 <HAL_RCC_OscConfig+0x2ac>)
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c758:	f7fd f82a 	bl	80097b0 <HAL_GetTick>
 800c75c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c75e:	e008      	b.n	800c772 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c760:	f7fd f826 	bl	80097b0 <HAL_GetTick>
 800c764:	4602      	mov	r2, r0
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d901      	bls.n	800c772 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	e119      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c772:	4b1a      	ldr	r3, [pc, #104]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c776:	f003 0302 	and.w	r3, r3, #2
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1f0      	bne.n	800c760 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 0304 	and.w	r3, r3, #4
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 809f 	beq.w	800c8ca <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c78c:	2300      	movs	r3, #0
 800c78e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c790:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10f      	bne.n	800c7bc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c79c:	2300      	movs	r3, #0
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	4b0e      	ldr	r3, [pc, #56]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a4:	4a0d      	ldr	r2, [pc, #52]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c7a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7aa:	6413      	str	r3, [r2, #64]	; 0x40
 800c7ac:	4b0b      	ldr	r3, [pc, #44]	; (800c7dc <HAL_RCC_OscConfig+0x2a4>)
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7b4:	60fb      	str	r3, [r7, #12]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7bc:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <HAL_RCC_OscConfig+0x2b0>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d120      	bne.n	800c80a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c7c8:	4b07      	ldr	r3, [pc, #28]	; (800c7e8 <HAL_RCC_OscConfig+0x2b0>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a06      	ldr	r2, [pc, #24]	; (800c7e8 <HAL_RCC_OscConfig+0x2b0>)
 800c7ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7d4:	f7fc ffec 	bl	80097b0 <HAL_GetTick>
 800c7d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7da:	e010      	b.n	800c7fe <HAL_RCC_OscConfig+0x2c6>
 800c7dc:	40023800 	.word	0x40023800
 800c7e0:	42470000 	.word	0x42470000
 800c7e4:	42470e80 	.word	0x42470e80
 800c7e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7ec:	f7fc ffe0 	bl	80097b0 <HAL_GetTick>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d901      	bls.n	800c7fe <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e0d3      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7fe:	4b6c      	ldr	r3, [pc, #432]	; (800c9b0 <HAL_RCC_OscConfig+0x478>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c806:	2b00      	cmp	r3, #0
 800c808:	d0f0      	beq.n	800c7ec <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d106      	bne.n	800c820 <HAL_RCC_OscConfig+0x2e8>
 800c812:	4b68      	ldr	r3, [pc, #416]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c816:	4a67      	ldr	r2, [pc, #412]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c818:	f043 0301 	orr.w	r3, r3, #1
 800c81c:	6713      	str	r3, [r2, #112]	; 0x70
 800c81e:	e01c      	b.n	800c85a <HAL_RCC_OscConfig+0x322>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	2b05      	cmp	r3, #5
 800c826:	d10c      	bne.n	800c842 <HAL_RCC_OscConfig+0x30a>
 800c828:	4b62      	ldr	r3, [pc, #392]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c82a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82c:	4a61      	ldr	r2, [pc, #388]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c82e:	f043 0304 	orr.w	r3, r3, #4
 800c832:	6713      	str	r3, [r2, #112]	; 0x70
 800c834:	4b5f      	ldr	r3, [pc, #380]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c838:	4a5e      	ldr	r2, [pc, #376]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c83a:	f043 0301 	orr.w	r3, r3, #1
 800c83e:	6713      	str	r3, [r2, #112]	; 0x70
 800c840:	e00b      	b.n	800c85a <HAL_RCC_OscConfig+0x322>
 800c842:	4b5c      	ldr	r3, [pc, #368]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c846:	4a5b      	ldr	r2, [pc, #364]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c848:	f023 0301 	bic.w	r3, r3, #1
 800c84c:	6713      	str	r3, [r2, #112]	; 0x70
 800c84e:	4b59      	ldr	r3, [pc, #356]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c852:	4a58      	ldr	r2, [pc, #352]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c854:	f023 0304 	bic.w	r3, r3, #4
 800c858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d015      	beq.n	800c88e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c862:	f7fc ffa5 	bl	80097b0 <HAL_GetTick>
 800c866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c868:	e00a      	b.n	800c880 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c86a:	f7fc ffa1 	bl	80097b0 <HAL_GetTick>
 800c86e:	4602      	mov	r2, r0
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	f241 3288 	movw	r2, #5000	; 0x1388
 800c878:	4293      	cmp	r3, r2
 800c87a:	d901      	bls.n	800c880 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e092      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c880:	4b4c      	ldr	r3, [pc, #304]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c884:	f003 0302 	and.w	r3, r3, #2
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d0ee      	beq.n	800c86a <HAL_RCC_OscConfig+0x332>
 800c88c:	e014      	b.n	800c8b8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c88e:	f7fc ff8f 	bl	80097b0 <HAL_GetTick>
 800c892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c894:	e00a      	b.n	800c8ac <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c896:	f7fc ff8b 	bl	80097b0 <HAL_GetTick>
 800c89a:	4602      	mov	r2, r0
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d901      	bls.n	800c8ac <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e07c      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8ac:	4b41      	ldr	r3, [pc, #260]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8b0:	f003 0302 	and.w	r3, r3, #2
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1ee      	bne.n	800c896 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c8b8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d105      	bne.n	800c8ca <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8be:	4b3d      	ldr	r3, [pc, #244]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	4a3c      	ldr	r2, [pc, #240]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c8c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d068      	beq.n	800c9a4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c8d2:	4b38      	ldr	r3, [pc, #224]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f003 030c 	and.w	r3, r3, #12
 800c8da:	2b08      	cmp	r3, #8
 800c8dc:	d060      	beq.n	800c9a0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d145      	bne.n	800c972 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8e6:	4b34      	ldr	r3, [pc, #208]	; (800c9b8 <HAL_RCC_OscConfig+0x480>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ec:	f7fc ff60 	bl	80097b0 <HAL_GetTick>
 800c8f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8f2:	e008      	b.n	800c906 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c8f4:	f7fc ff5c 	bl	80097b0 <HAL_GetTick>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d901      	bls.n	800c906 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e04f      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c906:	4b2b      	ldr	r3, [pc, #172]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1f0      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	69da      	ldr	r2, [r3, #28]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a1b      	ldr	r3, [r3, #32]
 800c91a:	431a      	orrs	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c920:	019b      	lsls	r3, r3, #6
 800c922:	431a      	orrs	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c928:	085b      	lsrs	r3, r3, #1
 800c92a:	3b01      	subs	r3, #1
 800c92c:	041b      	lsls	r3, r3, #16
 800c92e:	431a      	orrs	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c934:	061b      	lsls	r3, r3, #24
 800c936:	431a      	orrs	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c93c:	071b      	lsls	r3, r3, #28
 800c93e:	491d      	ldr	r1, [pc, #116]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c940:	4313      	orrs	r3, r2
 800c942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c944:	4b1c      	ldr	r3, [pc, #112]	; (800c9b8 <HAL_RCC_OscConfig+0x480>)
 800c946:	2201      	movs	r2, #1
 800c948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94a:	f7fc ff31 	bl	80097b0 <HAL_GetTick>
 800c94e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c950:	e008      	b.n	800c964 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c952:	f7fc ff2d 	bl	80097b0 <HAL_GetTick>
 800c956:	4602      	mov	r2, r0
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d901      	bls.n	800c964 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c960:	2303      	movs	r3, #3
 800c962:	e020      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c964:	4b13      	ldr	r3, [pc, #76]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d0f0      	beq.n	800c952 <HAL_RCC_OscConfig+0x41a>
 800c970:	e018      	b.n	800c9a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c972:	4b11      	ldr	r3, [pc, #68]	; (800c9b8 <HAL_RCC_OscConfig+0x480>)
 800c974:	2200      	movs	r2, #0
 800c976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c978:	f7fc ff1a 	bl	80097b0 <HAL_GetTick>
 800c97c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c97e:	e008      	b.n	800c992 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c980:	f7fc ff16 	bl	80097b0 <HAL_GetTick>
 800c984:	4602      	mov	r2, r0
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	1ad3      	subs	r3, r2, r3
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d901      	bls.n	800c992 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e009      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c992:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <HAL_RCC_OscConfig+0x47c>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1f0      	bne.n	800c980 <HAL_RCC_OscConfig+0x448>
 800c99e:	e001      	b.n	800c9a4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e000      	b.n	800c9a6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	40007000 	.word	0x40007000
 800c9b4:	40023800 	.word	0x40023800
 800c9b8:	42470060 	.word	0x42470060

0800c9bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e022      	b.n	800ca14 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d105      	bne.n	800c9e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7fa f90d 	bl	8006c00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2203      	movs	r2, #3
 800c9ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 f814 	bl	800ca1c <HAL_SD_InitCard>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e00a      	b.n	800ca14 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ca1c:	b5b0      	push	{r4, r5, r7, lr}
 800ca1e:	b08e      	sub	sp, #56	; 0x38
 800ca20:	af04      	add	r7, sp, #16
 800ca22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ca24:	2300      	movs	r3, #0
 800ca26:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ca30:	2300      	movs	r3, #0
 800ca32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ca34:	2300      	movs	r3, #0
 800ca36:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ca38:	2376      	movs	r3, #118	; 0x76
 800ca3a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681d      	ldr	r5, [r3, #0]
 800ca40:	466c      	mov	r4, sp
 800ca42:	f107 0314 	add.w	r3, r7, #20
 800ca46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ca4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ca4e:	f107 0308 	add.w	r3, r7, #8
 800ca52:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca54:	4628      	mov	r0, r5
 800ca56:	f003 fa87 	bl	800ff68 <SDIO_Init>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ca60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e031      	b.n	800cad0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ca6c:	4b1a      	ldr	r3, [pc, #104]	; (800cad8 <HAL_SD_InitCard+0xbc>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f003 fabf 	bl	800fffa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ca7c:	4b16      	ldr	r3, [pc, #88]	; (800cad8 <HAL_SD_InitCard+0xbc>)
 800ca7e:	2201      	movs	r2, #1
 800ca80:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 ffc6 	bl	800da14 <SD_PowerON>
 800ca88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca8a:	6a3b      	ldr	r3, [r7, #32]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d00b      	beq.n	800caa8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	431a      	orrs	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e013      	b.n	800cad0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fee5 	bl	800d878 <SD_InitCard>
 800caae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00b      	beq.n	800cace <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	431a      	orrs	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e000      	b.n	800cad0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3728      	adds	r7, #40	; 0x28
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bdb0      	pop	{r4, r5, r7, pc}
 800cad8:	422580a0 	.word	0x422580a0

0800cadc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08c      	sub	sp, #48	; 0x30
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d107      	bne.n	800cb04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e0c7      	b.n	800cc94 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	f040 80c0 	bne.w	800cc92 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	441a      	add	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d907      	bls.n	800cb36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e0ae      	b.n	800cc94 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2203      	movs	r2, #3
 800cb3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2200      	movs	r2, #0
 800cb44:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cb54:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5a:	4a50      	ldr	r2, [pc, #320]	; (800cc9c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cb5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb62:	4a4f      	ldr	r2, [pc, #316]	; (800cca0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cb64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	3380      	adds	r3, #128	; 0x80
 800cb78:	4619      	mov	r1, r3
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	025b      	lsls	r3, r3, #9
 800cb80:	089b      	lsrs	r3, r3, #2
 800cb82:	f7fd fc07 	bl	800a394 <HAL_DMA_Start_IT>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d017      	beq.n	800cbbc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cb9a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a40      	ldr	r2, [pc, #256]	; (800cca4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cba2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cbb8:	2301      	movs	r3, #1
 800cbba:	e06b      	b.n	800cc94 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cbbc:	4b3a      	ldr	r3, [pc, #232]	; (800cca8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d002      	beq.n	800cbd0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbcc:	025b      	lsls	r3, r3, #9
 800cbce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f003 faa1 	bl	8010120 <SDMMC_CmdBlockLength>
 800cbde:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00f      	beq.n	800cc06 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a2e      	ldr	r2, [pc, #184]	; (800cca4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cbec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	431a      	orrs	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e046      	b.n	800cc94 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc06:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	025b      	lsls	r3, r3, #9
 800cc10:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cc12:	2390      	movs	r3, #144	; 0x90
 800cc14:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cc16:	2302      	movs	r3, #2
 800cc18:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f107 0210 	add.w	r2, r7, #16
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f003 fa4b 	bl	80100c8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d90a      	bls.n	800cc4e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2282      	movs	r2, #130	; 0x82
 800cc3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc44:	4618      	mov	r0, r3
 800cc46:	f003 faaf 	bl	80101a8 <SDMMC_CmdReadMultiBlock>
 800cc4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cc4c:	e009      	b.n	800cc62 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2281      	movs	r2, #129	; 0x81
 800cc52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f003 fa82 	bl	8010164 <SDMMC_CmdReadSingleBlock>
 800cc60:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d012      	beq.n	800cc8e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a0d      	ldr	r2, [pc, #52]	; (800cca4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cc6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc76:	431a      	orrs	r2, r3
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e002      	b.n	800cc94 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e000      	b.n	800cc94 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800cc92:	2302      	movs	r3, #2
  }
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3730      	adds	r7, #48	; 0x30
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	0800d687 	.word	0x0800d687
 800cca0:	0800d6f9 	.word	0x0800d6f9
 800cca4:	004005ff 	.word	0x004005ff
 800cca8:	4225858c 	.word	0x4225858c

0800ccac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b08c      	sub	sp, #48	; 0x30
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d107      	bne.n	800ccd4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e0ca      	b.n	800ce6a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	f040 80c3 	bne.w	800ce68 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	441a      	add	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d907      	bls.n	800cd06 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e0b1      	b.n	800ce6a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2203      	movs	r2, #3
 800cd0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2200      	movs	r2, #0
 800cd14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f042 021a 	orr.w	r2, r2, #26
 800cd24:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2a:	4a52      	ldr	r2, [pc, #328]	; (800ce74 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cd2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd32:	4a51      	ldr	r2, [pc, #324]	; (800ce78 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cd34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d002      	beq.n	800cd4c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd48:	025b      	lsls	r3, r3, #9
 800cd4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd54:	4618      	mov	r0, r3
 800cd56:	f003 f9e3 	bl	8010120 <SDMMC_CmdBlockLength>
 800cd5a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00f      	beq.n	800cd82 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a45      	ldr	r2, [pc, #276]	; (800ce7c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	431a      	orrs	r2, r3
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e073      	b.n	800ce6a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d90a      	bls.n	800cd9e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	22a0      	movs	r2, #160	; 0xa0
 800cd8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd94:	4618      	mov	r0, r3
 800cd96:	f003 fa4b 	bl	8010230 <SDMMC_CmdWriteMultiBlock>
 800cd9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cd9c:	e009      	b.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2290      	movs	r2, #144	; 0x90
 800cda2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f003 fa1e 	bl	80101ec <SDMMC_CmdWriteSingleBlock>
 800cdb0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d012      	beq.n	800cdde <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a2f      	ldr	r2, [pc, #188]	; (800ce7c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cdbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e045      	b.n	800ce6a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cdde:	4b28      	ldr	r3, [pc, #160]	; (800ce80 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cde0:	2201      	movs	r2, #1
 800cde2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cde8:	68b9      	ldr	r1, [r7, #8]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3380      	adds	r3, #128	; 0x80
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	025b      	lsls	r3, r3, #9
 800cdf6:	089b      	lsrs	r3, r3, #2
 800cdf8:	f7fd facc 	bl	800a394 <HAL_DMA_Start_IT>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d01a      	beq.n	800ce38 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f022 021a 	bic.w	r2, r2, #26
 800ce10:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a19      	ldr	r2, [pc, #100]	; (800ce7c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ce18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ce34:	2301      	movs	r3, #1
 800ce36:	e018      	b.n	800ce6a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	025b      	lsls	r3, r3, #9
 800ce42:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ce44:	2390      	movs	r3, #144	; 0x90
 800ce46:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ce50:	2301      	movs	r3, #1
 800ce52:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f107 0210 	add.w	r2, r7, #16
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f003 f932 	bl	80100c8 <SDIO_ConfigData>

      return HAL_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	e000      	b.n	800ce6a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce68:	2302      	movs	r3, #2
  }
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3730      	adds	r7, #48	; 0x30
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	0800d65d 	.word	0x0800d65d
 800ce78:	0800d6f9 	.word	0x0800d6f9
 800ce7c:	004005ff 	.word	0x004005ff
 800ce80:	4225858c 	.word	0x4225858c

0800ce84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce90:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d008      	beq.n	800ceb2 <HAL_SD_IRQHandler+0x2e>
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f003 0308 	and.w	r3, r3, #8
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d003      	beq.n	800ceb2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 ffc8 	bl	800de40 <SD_Read_IT>
 800ceb0:	e155      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 808f 	beq.w	800cfe0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ceca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	6812      	ldr	r2, [r2, #0]
 800ced6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ceda:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cede:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f022 0201 	bic.w	r2, r2, #1
 800ceee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f003 0308 	and.w	r3, r3, #8
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d039      	beq.n	800cf6e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f003 0302 	and.w	r3, r3, #2
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d104      	bne.n	800cf0e <HAL_SD_IRQHandler+0x8a>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f003 0320 	and.w	r3, r3, #32
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d011      	beq.n	800cf32 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f003 f9ae 	bl	8010274 <SDMMC_CmdStopTransfer>
 800cf18:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d008      	beq.n	800cf32 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	431a      	orrs	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f91f 	bl	800d170 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf3a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d104      	bne.n	800cf5e <HAL_SD_IRQHandler+0xda>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f003 fe04 	bl	8010b6c <HAL_SD_RxCpltCallback>
 800cf64:	e0fb      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f003 fdf6 	bl	8010b58 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cf6c:	e0f7      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 80f2 	beq.w	800d15e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f003 0320 	and.w	r3, r3, #32
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d011      	beq.n	800cfa8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f003 f973 	bl	8010274 <SDMMC_CmdStopTransfer>
 800cf8e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d008      	beq.n	800cfa8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	431a      	orrs	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f8e4 	bl	800d170 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f003 0301 	and.w	r3, r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	f040 80d5 	bne.w	800d15e <HAL_SD_IRQHandler+0x2da>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f003 0302 	and.w	r3, r3, #2
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f040 80cf 	bne.w	800d15e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f022 0208 	bic.w	r2, r2, #8
 800cfce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f003 fdbd 	bl	8010b58 <HAL_SD_TxCpltCallback>
}
 800cfde:	e0be      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d008      	beq.n	800d000 <HAL_SD_IRQHandler+0x17c>
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f003 0308 	and.w	r3, r3, #8
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d003      	beq.n	800d000 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 ff72 	bl	800dee2 <SD_Write_IT>
 800cffe:	e0ae      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d006:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f000 80a7 	beq.w	800d15e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d016:	f003 0302 	and.w	r3, r3, #2
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d005      	beq.n	800d02a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	f043 0202 	orr.w	r2, r3, #2
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d030:	f003 0308 	and.w	r3, r3, #8
 800d034:	2b00      	cmp	r3, #0
 800d036:	d005      	beq.n	800d044 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03c:	f043 0208 	orr.w	r2, r3, #8
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d056:	f043 0220 	orr.w	r2, r3, #32
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d064:	f003 0310 	and.w	r3, r3, #16
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d005      	beq.n	800d078 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d070:	f043 0210 	orr.w	r2, r3, #16
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d080:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d090:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f003 f8ec 	bl	8010274 <SDMMC_CmdStopTransfer>
 800d09c:	4602      	mov	r2, r0
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a2:	431a      	orrs	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f003 0308 	and.w	r3, r3, #8
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00a      	beq.n	800d0c8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f855 	bl	800d170 <HAL_SD_ErrorCallback>
}
 800d0c6:	e04a      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d045      	beq.n	800d15e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f003 0310 	and.w	r3, r3, #16
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d104      	bne.n	800d0e6 <HAL_SD_IRQHandler+0x262>
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f003 0320 	and.w	r3, r3, #32
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d011      	beq.n	800d10a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ea:	4a1f      	ldr	r2, [pc, #124]	; (800d168 <HAL_SD_IRQHandler+0x2e4>)
 800d0ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fd f9a6 	bl	800a444 <HAL_DMA_Abort_IT>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d02f      	beq.n	800d15e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d102:	4618      	mov	r0, r3
 800d104:	f000 fb4a 	bl	800d79c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d108:	e029      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f003 0301 	and.w	r3, r3, #1
 800d110:	2b00      	cmp	r3, #0
 800d112:	d104      	bne.n	800d11e <HAL_SD_IRQHandler+0x29a>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f003 0302 	and.w	r3, r3, #2
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d011      	beq.n	800d142 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d122:	4a12      	ldr	r2, [pc, #72]	; (800d16c <HAL_SD_IRQHandler+0x2e8>)
 800d124:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fd f98a 	bl	800a444 <HAL_DMA_Abort_IT>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d013      	beq.n	800d15e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 fb65 	bl	800d80a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d140:	e00d      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f003 fcf4 	bl	8010b44 <HAL_SD_AbortCallback>
}
 800d15c:	e7ff      	b.n	800d15e <HAL_SD_IRQHandler+0x2da>
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	0800d79d 	.word	0x0800d79d
 800d16c:	0800d80b 	.word	0x0800d80b

0800d170 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d192:	0f9b      	lsrs	r3, r3, #30
 800d194:	b2da      	uxtb	r2, r3
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d19e:	0e9b      	lsrs	r3, r3, #26
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	f003 030f 	and.w	r3, r3, #15
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1b0:	0e1b      	lsrs	r3, r3, #24
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	f003 0303 	and.w	r3, r3, #3
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1c2:	0c1b      	lsrs	r3, r3, #16
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ce:	0a1b      	lsrs	r3, r3, #8
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e4:	0d1b      	lsrs	r3, r3, #20
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1f0:	0c1b      	lsrs	r3, r3, #16
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	f003 030f 	and.w	r3, r3, #15
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d202:	0bdb      	lsrs	r3, r3, #15
 800d204:	b2db      	uxtb	r3, r3
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d214:	0b9b      	lsrs	r3, r3, #14
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d226:	0b5b      	lsrs	r3, r3, #13
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d238:	0b1b      	lsrs	r3, r3, #12
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 0301 	and.w	r3, r3, #1
 800d240:	b2da      	uxtb	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2200      	movs	r2, #0
 800d24a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d250:	2b00      	cmp	r3, #0
 800d252:	d163      	bne.n	800d31c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d258:	009a      	lsls	r2, r3, #2
 800d25a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d25e:	4013      	ands	r3, r2
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d264:	0f92      	lsrs	r2, r2, #30
 800d266:	431a      	orrs	r2, r3
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d270:	0edb      	lsrs	r3, r3, #27
 800d272:	b2db      	uxtb	r3, r3
 800d274:	f003 0307 	and.w	r3, r3, #7
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d282:	0e1b      	lsrs	r3, r3, #24
 800d284:	b2db      	uxtb	r3, r3
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d294:	0d5b      	lsrs	r3, r3, #21
 800d296:	b2db      	uxtb	r3, r3
 800d298:	f003 0307 	and.w	r3, r3, #7
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a6:	0c9b      	lsrs	r3, r3, #18
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	f003 0307 	and.w	r3, r3, #7
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b8:	0bdb      	lsrs	r3, r3, #15
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	f003 0307 	and.w	r3, r3, #7
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	691b      	ldr	r3, [r3, #16]
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	7e1b      	ldrb	r3, [r3, #24]
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	f003 0307 	and.w	r3, r3, #7
 800d2da:	3302      	adds	r3, #2
 800d2dc:	2201      	movs	r2, #1
 800d2de:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d2e6:	fb02 f203 	mul.w	r2, r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	7a1b      	ldrb	r3, [r3, #8]
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 030f 	and.w	r3, r3, #15
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	409a      	lsls	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d308:	0a52      	lsrs	r2, r2, #9
 800d30a:	fb02 f203 	mul.w	r2, r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d318:	661a      	str	r2, [r3, #96]	; 0x60
 800d31a:	e031      	b.n	800d380 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d320:	2b01      	cmp	r3, #1
 800d322:	d11d      	bne.n	800d360 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d328:	041b      	lsls	r3, r3, #16
 800d32a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d332:	0c1b      	lsrs	r3, r3, #16
 800d334:	431a      	orrs	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	3301      	adds	r3, #1
 800d340:	029a      	lsls	r2, r3, #10
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d354:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	661a      	str	r2, [r3, #96]	; 0x60
 800d35e:	e00f      	b.n	800d380 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a58      	ldr	r2, [pc, #352]	; (800d4c8 <HAL_SD_GetCardCSD+0x344>)
 800d366:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	e09d      	b.n	800d4bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d384:	0b9b      	lsrs	r3, r3, #14
 800d386:	b2db      	uxtb	r3, r3
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d396:	09db      	lsrs	r3, r3, #7
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b8:	0fdb      	lsrs	r3, r3, #31
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c4:	0f5b      	lsrs	r3, r3, #29
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	f003 0303 	and.w	r3, r3, #3
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d6:	0e9b      	lsrs	r3, r3, #26
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	f003 0307 	and.w	r3, r3, #7
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3e8:	0d9b      	lsrs	r3, r3, #22
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	f003 030f 	and.w	r3, r3, #15
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3fa:	0d5b      	lsrs	r3, r3, #21
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	f003 0301 	and.w	r3, r3, #1
 800d402:	b2da      	uxtb	r2, r3
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d416:	0c1b      	lsrs	r3, r3, #16
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42a:	0bdb      	lsrs	r3, r3, #15
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	b2da      	uxtb	r2, r3
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43e:	0b9b      	lsrs	r3, r3, #14
 800d440:	b2db      	uxtb	r3, r3
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	b2da      	uxtb	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d452:	0b5b      	lsrs	r3, r3, #13
 800d454:	b2db      	uxtb	r3, r3
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d466:	0b1b      	lsrs	r3, r3, #12
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	f003 0301 	and.w	r3, r3, #1
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d47a:	0a9b      	lsrs	r3, r3, #10
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	f003 0303 	and.w	r3, r3, #3
 800d482:	b2da      	uxtb	r2, r3
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d48e:	0a1b      	lsrs	r3, r3, #8
 800d490:	b2db      	uxtb	r3, r3
 800d492:	f003 0303 	and.w	r3, r3, #3
 800d496:	b2da      	uxtb	r2, r3
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a2:	085b      	lsrs	r3, r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	004005ff 	.word	0x004005ff

0800d4cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d524:	b5b0      	push	{r4, r5, r7, lr}
 800d526:	b08e      	sub	sp, #56	; 0x38
 800d528:	af04      	add	r7, sp, #16
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2203      	movs	r2, #3
 800d532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d53a:	2b03      	cmp	r3, #3
 800d53c:	d02e      	beq.n	800d59c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d544:	d106      	bne.n	800d554 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
 800d552:	e029      	b.n	800d5a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d55a:	d10a      	bne.n	800d572 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fb0f 	bl	800db80 <SD_WideBus_Enable>
 800d562:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	431a      	orrs	r2, r3
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	639a      	str	r2, [r3, #56]	; 0x38
 800d570:	e01a      	b.n	800d5a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10a      	bne.n	800d58e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fb4c 	bl	800dc16 <SD_WideBus_Disable>
 800d57e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	431a      	orrs	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	639a      	str	r2, [r3, #56]	; 0x38
 800d58c:	e00c      	b.n	800d5a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d592:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	639a      	str	r2, [r3, #56]	; 0x38
 800d59a:	e005      	b.n	800d5a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d009      	beq.n	800d5c4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a18      	ldr	r2, [pc, #96]	; (800d618 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d5b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e024      	b.n	800d60e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681d      	ldr	r5, [r3, #0]
 800d5ea:	466c      	mov	r4, sp
 800d5ec:	f107 0318 	add.w	r3, r7, #24
 800d5f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d5f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d5f8:	f107 030c 	add.w	r3, r7, #12
 800d5fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5fe:	4628      	mov	r0, r5
 800d600:	f002 fcb2 	bl	800ff68 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3728      	adds	r7, #40	; 0x28
 800d612:	46bd      	mov	sp, r7
 800d614:	bdb0      	pop	{r4, r5, r7, pc}
 800d616:	bf00      	nop
 800d618:	004005ff 	.word	0x004005ff

0800d61c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d628:	f107 030c 	add.w	r3, r7, #12
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fa7e 	bl	800db30 <SD_SendStatus>
 800d634:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d005      	beq.n	800d648 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	431a      	orrs	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	0a5b      	lsrs	r3, r3, #9
 800d64c:	f003 030f 	and.w	r3, r3, #15
 800d650:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d652:	693b      	ldr	r3, [r7, #16]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3718      	adds	r7, #24
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b085      	sub	sp, #20
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d668:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d678:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d67a:	bf00      	nop
 800d67c:	3714      	adds	r7, #20
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d692:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d698:	2b82      	cmp	r3, #130	; 0x82
 800d69a:	d111      	bne.n	800d6c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f002 fde7 	bl	8010274 <SDMMC_CmdStopTransfer>
 800d6a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d008      	beq.n	800d6c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	431a      	orrs	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f7ff fd58 	bl	800d170 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f022 0208 	bic.w	r2, r2, #8
 800d6ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6d8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f003 fa3f 	bl	8010b6c <HAL_SD_RxCpltCallback>
#endif
}
 800d6ee:	bf00      	nop
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
	...

0800d6f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d704:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7fd f848 	bl	800a79c <HAL_DMA_GetError>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d03e      	beq.n	800d790 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d718:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d71e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d720:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d002      	beq.n	800d72e <SD_DMAError+0x36>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d12d      	bne.n	800d78a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a19      	ldr	r2, [pc, #100]	; (800d798 <SD_DMAError+0xa0>)
 800d734:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d744:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d74a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d752:	6978      	ldr	r0, [r7, #20]
 800d754:	f7ff ff62 	bl	800d61c <HAL_SD_GetCardState>
 800d758:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	2b06      	cmp	r3, #6
 800d75e:	d002      	beq.n	800d766 <SD_DMAError+0x6e>
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	2b05      	cmp	r3, #5
 800d764:	d10a      	bne.n	800d77c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f002 fd82 	bl	8010274 <SDMMC_CmdStopTransfer>
 800d770:	4602      	mov	r2, r0
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d776:	431a      	orrs	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2200      	movs	r2, #0
 800d788:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d78a:	6978      	ldr	r0, [r7, #20]
 800d78c:	f7ff fcf0 	bl	800d170 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d790:	bf00      	nop
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	004005ff 	.word	0x004005ff

0800d79c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7b2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f7ff ff31 	bl	800d61c <HAL_SD_GetCardState>
 800d7ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b06      	cmp	r3, #6
 800d7ce:	d002      	beq.n	800d7d6 <SD_DMATxAbort+0x3a>
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2b05      	cmp	r3, #5
 800d7d4:	d10a      	bne.n	800d7ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f002 fd4a 	bl	8010274 <SDMMC_CmdStopTransfer>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e6:	431a      	orrs	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d103      	bne.n	800d7fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f003 f9a5 	bl	8010b44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d7fa:	e002      	b.n	800d802 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7ff fcb7 	bl	800d170 <HAL_SD_ErrorCallback>
}
 800d802:	bf00      	nop
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b084      	sub	sp, #16
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d816:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d820:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f7ff fefa 	bl	800d61c <HAL_SD_GetCardState>
 800d828:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	2b06      	cmp	r3, #6
 800d83c:	d002      	beq.n	800d844 <SD_DMARxAbort+0x3a>
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2b05      	cmp	r3, #5
 800d842:	d10a      	bne.n	800d85a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4618      	mov	r0, r3
 800d84a:	f002 fd13 	bl	8010274 <SDMMC_CmdStopTransfer>
 800d84e:	4602      	mov	r2, r0
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d854:	431a      	orrs	r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d103      	bne.n	800d86a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f003 f96e 	bl	8010b44 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d868:	e002      	b.n	800d870 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f7ff fc80 	bl	800d170 <HAL_SD_ErrorCallback>
}
 800d870:	bf00      	nop
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d878:	b5b0      	push	{r4, r5, r7, lr}
 800d87a:	b094      	sub	sp, #80	; 0x50
 800d87c:	af04      	add	r7, sp, #16
 800d87e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d880:	2301      	movs	r3, #1
 800d882:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4618      	mov	r0, r3
 800d88a:	f002 fbc5 	bl	8010018 <SDIO_GetPowerState>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d894:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d898:	e0b7      	b.n	800da0a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d02f      	beq.n	800d902 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f002 fdee 	bl	8010488 <SDMMC_CmdSendCID>
 800d8ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d001      	beq.n	800d8b8 <SD_InitCard+0x40>
    {
      return errorstate;
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b6:	e0a8      	b.n	800da0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2100      	movs	r1, #0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f002 fbef 	bl	80100a2 <SDIO_GetResponse>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2104      	movs	r1, #4
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f002 fbe6 	bl	80100a2 <SDIO_GetResponse>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2108      	movs	r1, #8
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f002 fbdd 	bl	80100a2 <SDIO_GetResponse>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	210c      	movs	r1, #12
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f002 fbd4 	bl	80100a2 <SDIO_GetResponse>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d906:	2b03      	cmp	r3, #3
 800d908:	d00d      	beq.n	800d926 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f107 020e 	add.w	r2, r7, #14
 800d912:	4611      	mov	r1, r2
 800d914:	4618      	mov	r0, r3
 800d916:	f002 fdf4 	bl	8010502 <SDMMC_CmdSetRelAdd>
 800d91a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <SD_InitCard+0xae>
    {
      return errorstate;
 800d922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d924:	e071      	b.n	800da0a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d92a:	2b03      	cmp	r3, #3
 800d92c:	d036      	beq.n	800d99c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d92e:	89fb      	ldrh	r3, [r7, #14]
 800d930:	461a      	mov	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d93e:	041b      	lsls	r3, r3, #16
 800d940:	4619      	mov	r1, r3
 800d942:	4610      	mov	r0, r2
 800d944:	f002 fdbe 	bl	80104c4 <SDMMC_CmdSendCSD>
 800d948:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d952:	e05a      	b.n	800da0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2100      	movs	r1, #0
 800d95a:	4618      	mov	r0, r3
 800d95c:	f002 fba1 	bl	80100a2 <SDIO_GetResponse>
 800d960:	4602      	mov	r2, r0
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2104      	movs	r1, #4
 800d96c:	4618      	mov	r0, r3
 800d96e:	f002 fb98 	bl	80100a2 <SDIO_GetResponse>
 800d972:	4602      	mov	r2, r0
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2108      	movs	r1, #8
 800d97e:	4618      	mov	r0, r3
 800d980:	f002 fb8f 	bl	80100a2 <SDIO_GetResponse>
 800d984:	4602      	mov	r2, r0
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	210c      	movs	r1, #12
 800d990:	4618      	mov	r0, r3
 800d992:	f002 fb86 	bl	80100a2 <SDIO_GetResponse>
 800d996:	4602      	mov	r2, r0
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2104      	movs	r1, #4
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 fb7d 	bl	80100a2 <SDIO_GetResponse>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	0d1a      	lsrs	r2, r3, #20
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d9b0:	f107 0310 	add.w	r3, r7, #16
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7ff fbe4 	bl	800d184 <HAL_SD_GetCardCSD>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9c6:	e020      	b.n	800da0a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6819      	ldr	r1, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d0:	041b      	lsls	r3, r3, #16
 800d9d2:	f04f 0400 	mov.w	r4, #0
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	4623      	mov	r3, r4
 800d9da:	4608      	mov	r0, r1
 800d9dc:	f002 fc6c 	bl	80102b8 <SDMMC_CmdSelDesel>
 800d9e0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d001      	beq.n	800d9ec <SD_InitCard+0x174>
  {
    return errorstate;
 800d9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ea:	e00e      	b.n	800da0a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681d      	ldr	r5, [r3, #0]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	466c      	mov	r4, sp
 800d9f4:	f103 0210 	add.w	r2, r3, #16
 800d9f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d9fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9fe:	3304      	adds	r3, #4
 800da00:	cb0e      	ldmia	r3, {r1, r2, r3}
 800da02:	4628      	mov	r0, r5
 800da04:	f002 fab0 	bl	800ff68 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3740      	adds	r7, #64	; 0x40
 800da0e:	46bd      	mov	sp, r7
 800da10:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800da14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da1c:	2300      	movs	r3, #0
 800da1e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800da20:	2300      	movs	r3, #0
 800da22:	617b      	str	r3, [r7, #20]
 800da24:	2300      	movs	r3, #0
 800da26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f002 fc66 	bl	80102fe <SDMMC_CmdGoIdleState>
 800da32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <SD_PowerON+0x2a>
  {
    return errorstate;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	e072      	b.n	800db24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4618      	mov	r0, r3
 800da44:	f002 fc79 	bl	801033a <SDMMC_CmdOperCond>
 800da48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00d      	beq.n	800da6c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f002 fc4f 	bl	80102fe <SDMMC_CmdGoIdleState>
 800da60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d004      	beq.n	800da72 <SD_PowerON+0x5e>
    {
      return errorstate;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	e05b      	b.n	800db24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da76:	2b01      	cmp	r3, #1
 800da78:	d137      	bne.n	800daea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2100      	movs	r1, #0
 800da80:	4618      	mov	r0, r3
 800da82:	f002 fc79 	bl	8010378 <SDMMC_CmdAppCommand>
 800da86:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d02d      	beq.n	800daea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da92:	e047      	b.n	800db24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2100      	movs	r1, #0
 800da9a:	4618      	mov	r0, r3
 800da9c:	f002 fc6c 	bl	8010378 <SDMMC_CmdAppCommand>
 800daa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <SD_PowerON+0x98>
    {
      return errorstate;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	e03b      	b.n	800db24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	491e      	ldr	r1, [pc, #120]	; (800db2c <SD_PowerON+0x118>)
 800dab2:	4618      	mov	r0, r3
 800dab4:	f002 fc82 	bl	80103bc <SDMMC_CmdAppOperCommand>
 800dab8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dac4:	e02e      	b.n	800db24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f002 fae8 	bl	80100a2 <SDIO_GetResponse>
 800dad2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	0fdb      	lsrs	r3, r3, #31
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d101      	bne.n	800dae0 <SD_PowerON+0xcc>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <SD_PowerON+0xce>
 800dae0:	2300      	movs	r3, #0
 800dae2:	613b      	str	r3, [r7, #16]

    count++;
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	3301      	adds	r3, #1
 800dae8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d802      	bhi.n	800dafa <SD_PowerON+0xe6>
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0cc      	beq.n	800da94 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800db00:	4293      	cmp	r3, r2
 800db02:	d902      	bls.n	800db0a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800db04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db08:	e00c      	b.n	800db24 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2201      	movs	r2, #1
 800db18:	645a      	str	r2, [r3, #68]	; 0x44
 800db1a:	e002      	b.n	800db22 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2200      	movs	r2, #0
 800db20:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3718      	adds	r7, #24
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	c1100000 	.word	0xc1100000

0800db30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d102      	bne.n	800db46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800db40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800db44:	e018      	b.n	800db78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db4e:	041b      	lsls	r3, r3, #16
 800db50:	4619      	mov	r1, r3
 800db52:	4610      	mov	r0, r2
 800db54:	f002 fcf6 	bl	8010544 <SDMMC_CmdSendStatus>
 800db58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <SD_SendStatus+0x34>
  {
    return errorstate;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	e009      	b.n	800db78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2100      	movs	r1, #0
 800db6a:	4618      	mov	r0, r3
 800db6c:	f002 fa99 	bl	80100a2 <SDIO_GetResponse>
 800db70:	4602      	mov	r2, r0
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db88:	2300      	movs	r3, #0
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	2300      	movs	r3, #0
 800db8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2100      	movs	r1, #0
 800db96:	4618      	mov	r0, r3
 800db98:	f002 fa83 	bl	80100a2 <SDIO_GetResponse>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dba6:	d102      	bne.n	800dbae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbac:	e02f      	b.n	800dc0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbae:	f107 030c 	add.w	r3, r7, #12
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f879 	bl	800dcac <SD_FindSCR>
 800dbba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	e023      	b.n	800dc0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d01c      	beq.n	800dc0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbd8:	041b      	lsls	r3, r3, #16
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f002 fbcb 	bl	8010378 <SDMMC_CmdAppCommand>
 800dbe2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	e00f      	b.n	800dc0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2102      	movs	r1, #2
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f002 fc04 	bl	8010402 <SDMMC_CmdBusWidth>
 800dbfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d001      	beq.n	800dc06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	e003      	b.n	800dc0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc06:	2300      	movs	r3, #0
 800dc08:	e001      	b.n	800dc0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b086      	sub	sp, #24
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60fb      	str	r3, [r7, #12]
 800dc22:	2300      	movs	r3, #0
 800dc24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f002 fa38 	bl	80100a2 <SDIO_GetResponse>
 800dc32:	4603      	mov	r3, r0
 800dc34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc3c:	d102      	bne.n	800dc44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dc3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc42:	e02f      	b.n	800dca4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f82e 	bl	800dcac <SD_FindSCR>
 800dc50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	e023      	b.n	800dca4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d01c      	beq.n	800dca0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc6e:	041b      	lsls	r3, r3, #16
 800dc70:	4619      	mov	r1, r3
 800dc72:	4610      	mov	r0, r2
 800dc74:	f002 fb80 	bl	8010378 <SDMMC_CmdAppCommand>
 800dc78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d001      	beq.n	800dc84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	e00f      	b.n	800dca4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2100      	movs	r1, #0
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f002 fbb9 	bl	8010402 <SDMMC_CmdBusWidth>
 800dc90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	e003      	b.n	800dca4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	e001      	b.n	800dca4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dca0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dcac:	b590      	push	{r4, r7, lr}
 800dcae:	b08f      	sub	sp, #60	; 0x3c
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dcb6:	f7fb fd7b 	bl	80097b0 <HAL_GetTick>
 800dcba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60bb      	str	r3, [r7, #8]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2108      	movs	r1, #8
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f002 fa24 	bl	8010120 <SDMMC_CmdBlockLength>
 800dcd8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	e0a9      	b.n	800de38 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcec:	041b      	lsls	r3, r3, #16
 800dcee:	4619      	mov	r1, r3
 800dcf0:	4610      	mov	r0, r2
 800dcf2:	f002 fb41 	bl	8010378 <SDMMC_CmdAppCommand>
 800dcf6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd00:	e09a      	b.n	800de38 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd02:	f04f 33ff 	mov.w	r3, #4294967295
 800dd06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dd08:	2308      	movs	r3, #8
 800dd0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dd0c:	2330      	movs	r3, #48	; 0x30
 800dd0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dd10:	2302      	movs	r3, #2
 800dd12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dd14:	2300      	movs	r3, #0
 800dd16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f107 0210 	add.w	r2, r7, #16
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f002 f9ce 	bl	80100c8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f002 fb88 	bl	8010446 <SDMMC_CmdSendSCR>
 800dd36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d022      	beq.n	800dd84 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	e07a      	b.n	800de38 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00e      	beq.n	800dd6e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6819      	ldr	r1, [r3, #0]
 800dd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	f107 0208 	add.w	r2, r7, #8
 800dd5c:	18d4      	adds	r4, r2, r3
 800dd5e:	4608      	mov	r0, r1
 800dd60:	f002 f92d 	bl	800ffbe <SDIO_ReadFIFO>
 800dd64:	4603      	mov	r3, r0
 800dd66:	6023      	str	r3, [r4, #0]
      index++;
 800dd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd6e:	f7fb fd1f 	bl	80097b0 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7c:	d102      	bne.n	800dd84 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd82:	e059      	b.n	800de38 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd8a:	f240 432a 	movw	r3, #1066	; 0x42a
 800dd8e:	4013      	ands	r3, r2
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d0d6      	beq.n	800dd42 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd9a:	f003 0308 	and.w	r3, r3, #8
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d005      	beq.n	800ddae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2208      	movs	r2, #8
 800dda8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ddaa:	2308      	movs	r3, #8
 800ddac:	e044      	b.n	800de38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb4:	f003 0302 	and.w	r3, r3, #2
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d005      	beq.n	800ddc8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2202      	movs	r2, #2
 800ddc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e037      	b.n	800de38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	f003 0320 	and.w	r3, r3, #32
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d005      	beq.n	800dde2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2220      	movs	r2, #32
 800dddc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ddde:	2320      	movs	r3, #32
 800dde0:	e02a      	b.n	800de38 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f240 523a 	movw	r2, #1338	; 0x53a
 800ddea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	061a      	lsls	r2, r3, #24
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	021b      	lsls	r3, r3, #8
 800ddf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddf8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	0a1b      	lsrs	r3, r3, #8
 800ddfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800de02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	0e1b      	lsrs	r3, r3, #24
 800de08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	601a      	str	r2, [r3, #0]
    scr++;
 800de0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de10:	3304      	adds	r3, #4
 800de12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	061a      	lsls	r2, r3, #24
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	021b      	lsls	r3, r3, #8
 800de1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	0a1b      	lsrs	r3, r3, #8
 800de26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	0e1b      	lsrs	r3, r3, #24
 800de30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	373c      	adds	r7, #60	; 0x3c
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd90      	pop	{r4, r7, pc}

0800de40 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de4c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de52:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d03f      	beq.n	800deda <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800de5a:	2300      	movs	r3, #0
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	e033      	b.n	800dec8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4618      	mov	r0, r3
 800de66:	f002 f8aa 	bl	800ffbe <SDIO_ReadFIFO>
 800de6a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3301      	adds	r3, #1
 800de78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	0a1b      	lsrs	r3, r3, #8
 800de84:	b2da      	uxtb	r2, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3301      	adds	r3, #1
 800de8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	3b01      	subs	r3, #1
 800de94:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	0c1b      	lsrs	r3, r3, #16
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3301      	adds	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	0e1b      	lsrs	r3, r3, #24
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3301      	adds	r3, #1
 800deba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	3b01      	subs	r3, #1
 800dec0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	3301      	adds	r3, #1
 800dec6:	617b      	str	r3, [r7, #20]
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2b07      	cmp	r3, #7
 800decc:	d9c8      	bls.n	800de60 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	693a      	ldr	r2, [r7, #16]
 800ded8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800deda:	bf00      	nop
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b086      	sub	sp, #24
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d043      	beq.n	800df84 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800defc:	2300      	movs	r3, #0
 800defe:	617b      	str	r3, [r7, #20]
 800df00:	e037      	b.n	800df72 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	3301      	adds	r3, #1
 800df0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	3b01      	subs	r3, #1
 800df12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	021a      	lsls	r2, r3, #8
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3301      	adds	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	3b01      	subs	r3, #1
 800df2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	041a      	lsls	r2, r3, #16
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	4313      	orrs	r3, r2
 800df36:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	3b01      	subs	r3, #1
 800df42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	061a      	lsls	r2, r3, #24
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3301      	adds	r3, #1
 800df54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	3b01      	subs	r3, #1
 800df5a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f107 0208 	add.w	r2, r7, #8
 800df64:	4611      	mov	r1, r2
 800df66:	4618      	mov	r0, r3
 800df68:	f002 f836 	bl	800ffd8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	3301      	adds	r3, #1
 800df70:	617b      	str	r3, [r7, #20]
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2b07      	cmp	r3, #7
 800df76:	d9c4      	bls.n	800df02 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	693a      	ldr	r2, [r7, #16]
 800df82:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800df84:	bf00      	nop
 800df86:	3718      	adds	r7, #24
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d101      	bne.n	800df9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e056      	b.n	800e04c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d106      	bne.n	800dfbe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7f8 ff13 	bl	8006de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2202      	movs	r2, #2
 800dfc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dfd4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	431a      	orrs	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	431a      	orrs	r2, r3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	431a      	orrs	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	695b      	ldr	r3, [r3, #20]
 800dff0:	431a      	orrs	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	699b      	ldr	r3, [r3, #24]
 800dff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	69db      	ldr	r3, [r3, #28]
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	ea42 0103 	orr.w	r1, r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	430a      	orrs	r2, r1
 800e014:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	699b      	ldr	r3, [r3, #24]
 800e01a:	0c1b      	lsrs	r3, r3, #16
 800e01c:	f003 0104 	and.w	r1, r3, #4
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	430a      	orrs	r2, r1
 800e02a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	69da      	ldr	r2, [r3, #28]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e03a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2200      	movs	r2, #0
 800e040:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2201      	movs	r2, #1
 800e046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b088      	sub	sp, #32
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	603b      	str	r3, [r7, #0]
 800e060:	4613      	mov	r3, r2
 800e062:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <HAL_SPI_Transmit+0x22>
 800e072:	2302      	movs	r3, #2
 800e074:	e11e      	b.n	800e2b4 <HAL_SPI_Transmit+0x260>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e07e:	f7fb fb97 	bl	80097b0 <HAL_GetTick>
 800e082:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e084:	88fb      	ldrh	r3, [r7, #6]
 800e086:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b01      	cmp	r3, #1
 800e092:	d002      	beq.n	800e09a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e094:	2302      	movs	r3, #2
 800e096:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e098:	e103      	b.n	800e2a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <HAL_SPI_Transmit+0x52>
 800e0a0:	88fb      	ldrh	r3, [r7, #6]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d102      	bne.n	800e0ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e0aa:	e0fa      	b.n	800e2a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2203      	movs	r2, #3
 800e0b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68ba      	ldr	r2, [r7, #8]
 800e0be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	88fa      	ldrh	r2, [r7, #6]
 800e0c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	88fa      	ldrh	r2, [r7, #6]
 800e0ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0f2:	d107      	bne.n	800e104 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e102:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10e:	2b40      	cmp	r3, #64	; 0x40
 800e110:	d007      	beq.n	800e122 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e120:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e12a:	d14b      	bne.n	800e1c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <HAL_SPI_Transmit+0xe6>
 800e134:	8afb      	ldrh	r3, [r7, #22]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d13e      	bne.n	800e1b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e13e:	881a      	ldrh	r2, [r3, #0]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14a:	1c9a      	adds	r2, r3, #2
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e154:	b29b      	uxth	r3, r3
 800e156:	3b01      	subs	r3, #1
 800e158:	b29a      	uxth	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e15e:	e02b      	b.n	800e1b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	f003 0302 	and.w	r3, r3, #2
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d112      	bne.n	800e194 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e172:	881a      	ldrh	r2, [r3, #0]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e17e:	1c9a      	adds	r2, r3, #2
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e188:	b29b      	uxth	r3, r3
 800e18a:	3b01      	subs	r3, #1
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	86da      	strh	r2, [r3, #54]	; 0x36
 800e192:	e011      	b.n	800e1b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e194:	f7fb fb0c 	bl	80097b0 <HAL_GetTick>
 800e198:	4602      	mov	r2, r0
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	683a      	ldr	r2, [r7, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d803      	bhi.n	800e1ac <HAL_SPI_Transmit+0x158>
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1aa:	d102      	bne.n	800e1b2 <HAL_SPI_Transmit+0x15e>
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d102      	bne.n	800e1b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e1b2:	2303      	movs	r3, #3
 800e1b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e1b6:	e074      	b.n	800e2a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1ce      	bne.n	800e160 <HAL_SPI_Transmit+0x10c>
 800e1c2:	e04c      	b.n	800e25e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <HAL_SPI_Transmit+0x17e>
 800e1cc:	8afb      	ldrh	r3, [r7, #22]
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d140      	bne.n	800e254 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	330c      	adds	r3, #12
 800e1dc:	7812      	ldrb	r2, [r2, #0]
 800e1de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e1f8:	e02c      	b.n	800e254 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	f003 0302 	and.w	r3, r3, #2
 800e204:	2b02      	cmp	r3, #2
 800e206:	d113      	bne.n	800e230 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	330c      	adds	r3, #12
 800e212:	7812      	ldrb	r2, [r2, #0]
 800e214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21a:	1c5a      	adds	r2, r3, #1
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e224:	b29b      	uxth	r3, r3
 800e226:	3b01      	subs	r3, #1
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e22e:	e011      	b.n	800e254 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e230:	f7fb fabe 	bl	80097b0 <HAL_GetTick>
 800e234:	4602      	mov	r2, r0
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d803      	bhi.n	800e248 <HAL_SPI_Transmit+0x1f4>
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e246:	d102      	bne.n	800e24e <HAL_SPI_Transmit+0x1fa>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d102      	bne.n	800e254 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e24e:	2303      	movs	r3, #3
 800e250:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e252:	e026      	b.n	800e2a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e258:	b29b      	uxth	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1cd      	bne.n	800e1fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e25e:	69ba      	ldr	r2, [r7, #24]
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f000 fba4 	bl	800e9b0 <SPI_EndRxTxTransaction>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d002      	beq.n	800e274 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2220      	movs	r2, #32
 800e272:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e27c:	2300      	movs	r3, #0
 800e27e:	613b      	str	r3, [r7, #16]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	68db      	ldr	r3, [r3, #12]
 800e286:	613b      	str	r3, [r7, #16]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	613b      	str	r3, [r7, #16]
 800e290:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e29a:	2301      	movs	r3, #1
 800e29c:	77fb      	strb	r3, [r7, #31]
 800e29e:	e000      	b.n	800e2a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e2a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e2b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3720      	adds	r7, #32
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af02      	add	r7, sp, #8
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	603b      	str	r3, [r7, #0]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2d8:	d112      	bne.n	800e300 <HAL_SPI_Receive+0x44>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10e      	bne.n	800e300 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2204      	movs	r2, #4
 800e2e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e2ea:	88fa      	ldrh	r2, [r7, #6]
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	68b9      	ldr	r1, [r7, #8]
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	f000 f8e9 	bl	800e4ce <HAL_SPI_TransmitReceive>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	e0e2      	b.n	800e4c6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e306:	2b01      	cmp	r3, #1
 800e308:	d101      	bne.n	800e30e <HAL_SPI_Receive+0x52>
 800e30a:	2302      	movs	r3, #2
 800e30c:	e0db      	b.n	800e4c6 <HAL_SPI_Receive+0x20a>
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2201      	movs	r2, #1
 800e312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e316:	f7fb fa4b 	bl	80097b0 <HAL_GetTick>
 800e31a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e322:	b2db      	uxtb	r3, r3
 800e324:	2b01      	cmp	r3, #1
 800e326:	d002      	beq.n	800e32e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e328:	2302      	movs	r3, #2
 800e32a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e32c:	e0c2      	b.n	800e4b4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <HAL_SPI_Receive+0x7e>
 800e334:	88fb      	ldrh	r3, [r7, #6]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d102      	bne.n	800e340 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e33e:	e0b9      	b.n	800e4b4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2204      	movs	r2, #4
 800e344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	88fa      	ldrh	r2, [r7, #6]
 800e358:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	88fa      	ldrh	r2, [r7, #6]
 800e35e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2200      	movs	r2, #0
 800e364:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2200      	movs	r2, #0
 800e370:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2200      	movs	r2, #0
 800e376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2200      	movs	r2, #0
 800e37c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e386:	d107      	bne.n	800e398 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e396:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a2:	2b40      	cmp	r3, #64	; 0x40
 800e3a4:	d007      	beq.n	800e3b6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	68db      	ldr	r3, [r3, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d162      	bne.n	800e484 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e3be:	e02e      	b.n	800e41e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d115      	bne.n	800e3fa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f103 020c 	add.w	r2, r3, #12
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3da:	7812      	ldrb	r2, [r2, #0]
 800e3dc:	b2d2      	uxtb	r2, r2
 800e3de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e4:	1c5a      	adds	r2, r3, #1
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3f8:	e011      	b.n	800e41e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3fa:	f7fb f9d9 	bl	80097b0 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	429a      	cmp	r2, r3
 800e408:	d803      	bhi.n	800e412 <HAL_SPI_Receive+0x156>
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e410:	d102      	bne.n	800e418 <HAL_SPI_Receive+0x15c>
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d102      	bne.n	800e41e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e418:	2303      	movs	r3, #3
 800e41a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e41c:	e04a      	b.n	800e4b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e422:	b29b      	uxth	r3, r3
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1cb      	bne.n	800e3c0 <HAL_SPI_Receive+0x104>
 800e428:	e031      	b.n	800e48e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	f003 0301 	and.w	r3, r3, #1
 800e434:	2b01      	cmp	r3, #1
 800e436:	d113      	bne.n	800e460 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	68da      	ldr	r2, [r3, #12]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e442:	b292      	uxth	r2, r2
 800e444:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e44a:	1c9a      	adds	r2, r3, #2
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e454:	b29b      	uxth	r3, r3
 800e456:	3b01      	subs	r3, #1
 800e458:	b29a      	uxth	r2, r3
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e45e:	e011      	b.n	800e484 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e460:	f7fb f9a6 	bl	80097b0 <HAL_GetTick>
 800e464:	4602      	mov	r2, r0
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	683a      	ldr	r2, [r7, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d803      	bhi.n	800e478 <HAL_SPI_Receive+0x1bc>
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e476:	d102      	bne.n	800e47e <HAL_SPI_Receive+0x1c2>
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d102      	bne.n	800e484 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e47e:	2303      	movs	r3, #3
 800e480:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e482:	e017      	b.n	800e4b4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e488:	b29b      	uxth	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1cd      	bne.n	800e42a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	6839      	ldr	r1, [r7, #0]
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f000 fa27 	bl	800e8e6 <SPI_EndRxTransaction>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d002      	beq.n	800e4a4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2220      	movs	r2, #32
 800e4a2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	75fb      	strb	r3, [r7, #23]
 800e4b0:	e000      	b.n	800e4b4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e4b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3718      	adds	r7, #24
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b08c      	sub	sp, #48	; 0x30
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
 800e4da:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <HAL_SPI_TransmitReceive+0x26>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e18a      	b.n	800e80a <HAL_SPI_TransmitReceive+0x33c>
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4fc:	f7fb f958 	bl	80097b0 <HAL_GetTick>
 800e500:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e512:	887b      	ldrh	r3, [r7, #2]
 800e514:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d00f      	beq.n	800e53e <HAL_SPI_TransmitReceive+0x70>
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e524:	d107      	bne.n	800e536 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <HAL_SPI_TransmitReceive+0x68>
 800e52e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e532:	2b04      	cmp	r3, #4
 800e534:	d003      	beq.n	800e53e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e536:	2302      	movs	r3, #2
 800e538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e53c:	e15b      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d005      	beq.n	800e550 <HAL_SPI_TransmitReceive+0x82>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d002      	beq.n	800e550 <HAL_SPI_TransmitReceive+0x82>
 800e54a:	887b      	ldrh	r3, [r7, #2]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d103      	bne.n	800e558 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e556:	e14e      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	2b04      	cmp	r3, #4
 800e562:	d003      	beq.n	800e56c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2205      	movs	r2, #5
 800e568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	887a      	ldrh	r2, [r7, #2]
 800e57c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	887a      	ldrh	r2, [r7, #2]
 800e582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	68ba      	ldr	r2, [r7, #8]
 800e588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	887a      	ldrh	r2, [r7, #2]
 800e58e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	887a      	ldrh	r2, [r7, #2]
 800e594:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5ac:	2b40      	cmp	r3, #64	; 0x40
 800e5ae:	d007      	beq.n	800e5c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e5be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5c8:	d178      	bne.n	800e6bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d002      	beq.n	800e5d8 <HAL_SPI_TransmitReceive+0x10a>
 800e5d2:	8b7b      	ldrh	r3, [r7, #26]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d166      	bne.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5dc:	881a      	ldrh	r2, [r3, #0]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e8:	1c9a      	adds	r2, r3, #2
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	3b01      	subs	r3, #1
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5fc:	e053      	b.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	f003 0302 	and.w	r3, r3, #2
 800e608:	2b02      	cmp	r3, #2
 800e60a:	d11b      	bne.n	800e644 <HAL_SPI_TransmitReceive+0x176>
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e610:	b29b      	uxth	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d016      	beq.n	800e644 <HAL_SPI_TransmitReceive+0x176>
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d113      	bne.n	800e644 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e620:	881a      	ldrh	r2, [r3, #0]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e62c:	1c9a      	adds	r2, r3, #2
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e636:	b29b      	uxth	r3, r3
 800e638:	3b01      	subs	r3, #1
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e640:	2300      	movs	r3, #0
 800e642:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d119      	bne.n	800e686 <HAL_SPI_TransmitReceive+0x1b8>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e656:	b29b      	uxth	r3, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d014      	beq.n	800e686 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68da      	ldr	r2, [r3, #12]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e666:	b292      	uxth	r2, r2
 800e668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66e:	1c9a      	adds	r2, r3, #2
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e678:	b29b      	uxth	r3, r3
 800e67a:	3b01      	subs	r3, #1
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e682:	2301      	movs	r3, #1
 800e684:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e686:	f7fb f893 	bl	80097b0 <HAL_GetTick>
 800e68a:	4602      	mov	r2, r0
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e692:	429a      	cmp	r2, r3
 800e694:	d807      	bhi.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
 800e696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69c:	d003      	beq.n	800e6a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e6a4:	e0a7      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1a6      	bne.n	800e5fe <HAL_SPI_TransmitReceive+0x130>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1a1      	bne.n	800e5fe <HAL_SPI_TransmitReceive+0x130>
 800e6ba:	e07c      	b.n	800e7b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <HAL_SPI_TransmitReceive+0x1fc>
 800e6c4:	8b7b      	ldrh	r3, [r7, #26]
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d16b      	bne.n	800e7a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	330c      	adds	r3, #12
 800e6d4:	7812      	ldrb	r2, [r2, #0]
 800e6d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6f0:	e057      	b.n	800e7a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f003 0302 	and.w	r3, r3, #2
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d11c      	bne.n	800e73a <HAL_SPI_TransmitReceive+0x26c>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e704:	b29b      	uxth	r3, r3
 800e706:	2b00      	cmp	r3, #0
 800e708:	d017      	beq.n	800e73a <HAL_SPI_TransmitReceive+0x26c>
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d114      	bne.n	800e73a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	330c      	adds	r3, #12
 800e71a:	7812      	ldrb	r2, [r2, #0]
 800e71c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e722:	1c5a      	adds	r2, r3, #1
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	3b01      	subs	r3, #1
 800e730:	b29a      	uxth	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e736:	2300      	movs	r3, #0
 800e738:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	f003 0301 	and.w	r3, r3, #1
 800e744:	2b01      	cmp	r3, #1
 800e746:	d119      	bne.n	800e77c <HAL_SPI_TransmitReceive+0x2ae>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d014      	beq.n	800e77c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68da      	ldr	r2, [r3, #12]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75c:	b2d2      	uxtb	r2, r2
 800e75e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e76e:	b29b      	uxth	r3, r3
 800e770:	3b01      	subs	r3, #1
 800e772:	b29a      	uxth	r2, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e778:	2301      	movs	r3, #1
 800e77a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e77c:	f7fb f818 	bl	80097b0 <HAL_GetTick>
 800e780:	4602      	mov	r2, r0
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e788:	429a      	cmp	r2, r3
 800e78a:	d803      	bhi.n	800e794 <HAL_SPI_TransmitReceive+0x2c6>
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e792:	d102      	bne.n	800e79a <HAL_SPI_TransmitReceive+0x2cc>
 800e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e79a:	2303      	movs	r3, #3
 800e79c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e7a0:	e029      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1a2      	bne.n	800e6f2 <HAL_SPI_TransmitReceive+0x224>
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d19d      	bne.n	800e6f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f000 f8f8 	bl	800e9b0 <SPI_EndRxTxTransaction>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d006      	beq.n	800e7d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e7d2:	e010      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10b      	bne.n	800e7f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7dc:	2300      	movs	r3, #0
 800e7de:	617b      	str	r3, [r7, #20]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	617b      	str	r3, [r7, #20]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	617b      	str	r3, [r7, #20]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	e000      	b.n	800e7f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e7f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3730      	adds	r7, #48	; 0x30
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e812:	b580      	push	{r7, lr}
 800e814:	b084      	sub	sp, #16
 800e816:	af00      	add	r7, sp, #0
 800e818:	60f8      	str	r0, [r7, #12]
 800e81a:	60b9      	str	r1, [r7, #8]
 800e81c:	603b      	str	r3, [r7, #0]
 800e81e:	4613      	mov	r3, r2
 800e820:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e822:	e04c      	b.n	800e8be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82a:	d048      	beq.n	800e8be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e82c:	f7fa ffc0 	bl	80097b0 <HAL_GetTick>
 800e830:	4602      	mov	r2, r0
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d902      	bls.n	800e842 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d13d      	bne.n	800e8be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e85a:	d111      	bne.n	800e880 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e864:	d004      	beq.n	800e870 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e86e:	d107      	bne.n	800e880 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e87e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e888:	d10f      	bne.n	800e8aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e898:	601a      	str	r2, [r3, #0]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e8a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e00f      	b.n	800e8de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	689a      	ldr	r2, [r3, #8]
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	bf0c      	ite	eq
 800e8ce:	2301      	moveq	r3, #1
 800e8d0:	2300      	movne	r3, #0
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d1a3      	bne.n	800e824 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b086      	sub	sp, #24
 800e8ea:	af02      	add	r7, sp, #8
 800e8ec:	60f8      	str	r0, [r7, #12]
 800e8ee:	60b9      	str	r1, [r7, #8]
 800e8f0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8fa:	d111      	bne.n	800e920 <SPI_EndRxTransaction+0x3a>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	689b      	ldr	r3, [r3, #8]
 800e900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e904:	d004      	beq.n	800e910 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e90e:	d107      	bne.n	800e920 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e91e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e928:	d12a      	bne.n	800e980 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e932:	d012      	beq.n	800e95a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	2200      	movs	r2, #0
 800e93c:	2180      	movs	r1, #128	; 0x80
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f7ff ff67 	bl	800e812 <SPI_WaitFlagStateUntilTimeout>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d02d      	beq.n	800e9a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e94e:	f043 0220 	orr.w	r2, r3, #32
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e956:	2303      	movs	r3, #3
 800e958:	e026      	b.n	800e9a8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	2200      	movs	r2, #0
 800e962:	2101      	movs	r1, #1
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7ff ff54 	bl	800e812 <SPI_WaitFlagStateUntilTimeout>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01a      	beq.n	800e9a6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e974:	f043 0220 	orr.w	r2, r3, #32
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e013      	b.n	800e9a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	2200      	movs	r2, #0
 800e988:	2101      	movs	r1, #1
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f7ff ff41 	bl	800e812 <SPI_WaitFlagStateUntilTimeout>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d007      	beq.n	800e9a6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e99a:	f043 0220 	orr.w	r2, r3, #32
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	e000      	b.n	800e9a8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b088      	sub	sp, #32
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ea2c <SPI_EndRxTxTransaction+0x7c>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a1b      	ldr	r2, [pc, #108]	; (800ea30 <SPI_EndRxTxTransaction+0x80>)
 800e9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9c6:	0d5b      	lsrs	r3, r3, #21
 800e9c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e9cc:	fb02 f303 	mul.w	r3, r2, r3
 800e9d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9da:	d112      	bne.n	800ea02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	2180      	movs	r1, #128	; 0x80
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7ff ff13 	bl	800e812 <SPI_WaitFlagStateUntilTimeout>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d016      	beq.n	800ea20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f6:	f043 0220 	orr.w	r2, r3, #32
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e9fe:	2303      	movs	r3, #3
 800ea00:	e00f      	b.n	800ea22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00a      	beq.n	800ea1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea18:	2b80      	cmp	r3, #128	; 0x80
 800ea1a:	d0f2      	beq.n	800ea02 <SPI_EndRxTxTransaction+0x52>
 800ea1c:	e000      	b.n	800ea20 <SPI_EndRxTxTransaction+0x70>
        break;
 800ea1e:	bf00      	nop
  }

  return HAL_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3718      	adds	r7, #24
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20000000 	.word	0x20000000
 800ea30:	165e9f81 	.word	0x165e9f81

0800ea34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d101      	bne.n	800ea46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea42:	2301      	movs	r3, #1
 800ea44:	e01d      	b.n	800ea82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d106      	bne.n	800ea60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7f8 fa7e 	bl	8006f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2202      	movs	r2, #2
 800ea64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	3304      	adds	r3, #4
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f000 fb56 	bl	800f124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b085      	sub	sp, #20
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68da      	ldr	r2, [r3, #12]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f042 0201 	orr.w	r2, r2, #1
 800eaa0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f003 0307 	and.w	r3, r3, #7
 800eaac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b06      	cmp	r3, #6
 800eab2:	d007      	beq.n	800eac4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	f042 0201 	orr.w	r2, r2, #1
 800eac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3714      	adds	r7, #20
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eae0:	2301      	movs	r3, #1
 800eae2:	e01d      	b.n	800eb20 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d106      	bne.n	800eafe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7f8 f9bb 	bl	8006e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2202      	movs	r2, #2
 800eb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4610      	mov	r0, r2
 800eb12:	f000 fb07 	bl	800f124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2201      	movs	r2, #1
 800eb38:	6839      	ldr	r1, [r7, #0]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fd42 	bl	800f5c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a15      	ldr	r2, [pc, #84]	; (800eb9c <HAL_TIM_PWM_Start+0x74>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d004      	beq.n	800eb54 <HAL_TIM_PWM_Start+0x2c>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4a14      	ldr	r2, [pc, #80]	; (800eba0 <HAL_TIM_PWM_Start+0x78>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d101      	bne.n	800eb58 <HAL_TIM_PWM_Start+0x30>
 800eb54:	2301      	movs	r3, #1
 800eb56:	e000      	b.n	800eb5a <HAL_TIM_PWM_Start+0x32>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d007      	beq.n	800eb6e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eb6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	f003 0307 	and.w	r3, r3, #7
 800eb78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b06      	cmp	r3, #6
 800eb7e:	d007      	beq.n	800eb90 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f042 0201 	orr.w	r2, r2, #1
 800eb8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	40010000 	.word	0x40010000
 800eba0:	40010400 	.word	0x40010400

0800eba4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b086      	sub	sp, #24
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d101      	bne.n	800ebb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e083      	b.n	800ecc0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d106      	bne.n	800ebd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7f8 fa55 	bl	800707c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	689b      	ldr	r3, [r3, #8]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	6812      	ldr	r2, [r2, #0]
 800ebe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebe8:	f023 0307 	bic.w	r3, r3, #7
 800ebec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	3304      	adds	r3, #4
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	f000 fa93 	bl	800f124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	6a1b      	ldr	r3, [r3, #32]
 800ec14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	697a      	ldr	r2, [r7, #20]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec26:	f023 0303 	bic.w	r3, r3, #3
 800ec2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	689a      	ldr	r2, [r3, #8]
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	699b      	ldr	r3, [r3, #24]
 800ec34:	021b      	lsls	r3, r3, #8
 800ec36:	4313      	orrs	r3, r2
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ec44:	f023 030c 	bic.w	r3, r3, #12
 800ec48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ec50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ec54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	68da      	ldr	r2, [r3, #12]
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	69db      	ldr	r3, [r3, #28]
 800ec5e:	021b      	lsls	r3, r3, #8
 800ec60:	4313      	orrs	r3, r2
 800ec62:	693a      	ldr	r2, [r7, #16]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	691b      	ldr	r3, [r3, #16]
 800ec6c:	011a      	lsls	r2, r3, #4
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	6a1b      	ldr	r3, [r3, #32]
 800ec72:	031b      	lsls	r3, r3, #12
 800ec74:	4313      	orrs	r3, r2
 800ec76:	693a      	ldr	r2, [r7, #16]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ec82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ec8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	685a      	ldr	r2, [r3, #4]
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	011b      	lsls	r3, r3, #4
 800ec96:	4313      	orrs	r3, r2
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	693a      	ldr	r2, [r7, #16]
 800ecac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3718      	adds	r7, #24
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d002      	beq.n	800ecde <HAL_TIM_Encoder_Start+0x16>
 800ecd8:	2b04      	cmp	r3, #4
 800ecda:	d008      	beq.n	800ecee <HAL_TIM_Encoder_Start+0x26>
 800ecdc:	e00f      	b.n	800ecfe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2201      	movs	r2, #1
 800ece4:	2100      	movs	r1, #0
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 fc6c 	bl	800f5c4 <TIM_CCxChannelCmd>
      break;
 800ecec:	e016      	b.n	800ed1c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	2104      	movs	r1, #4
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f000 fc64 	bl	800f5c4 <TIM_CCxChannelCmd>
      break;
 800ecfc:	e00e      	b.n	800ed1c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2201      	movs	r2, #1
 800ed04:	2100      	movs	r1, #0
 800ed06:	4618      	mov	r0, r3
 800ed08:	f000 fc5c 	bl	800f5c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2201      	movs	r2, #1
 800ed12:	2104      	movs	r1, #4
 800ed14:	4618      	mov	r0, r3
 800ed16:	f000 fc55 	bl	800f5c4 <TIM_CCxChannelCmd>
      break;
 800ed1a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f042 0201 	orr.w	r2, r2, #1
 800ed2a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b082      	sub	sp, #8
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	691b      	ldr	r3, [r3, #16]
 800ed44:	f003 0302 	and.w	r3, r3, #2
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d122      	bne.n	800ed92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	f003 0302 	and.w	r3, r3, #2
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	d11b      	bne.n	800ed92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f06f 0202 	mvn.w	r2, #2
 800ed62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	699b      	ldr	r3, [r3, #24]
 800ed70:	f003 0303 	and.w	r3, r3, #3
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d003      	beq.n	800ed80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 f9b5 	bl	800f0e8 <HAL_TIM_IC_CaptureCallback>
 800ed7e:	e005      	b.n	800ed8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 f9a7 	bl	800f0d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 f9b8 	bl	800f0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	f003 0304 	and.w	r3, r3, #4
 800ed9c:	2b04      	cmp	r3, #4
 800ed9e:	d122      	bne.n	800ede6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	f003 0304 	and.w	r3, r3, #4
 800edaa:	2b04      	cmp	r3, #4
 800edac:	d11b      	bne.n	800ede6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f06f 0204 	mvn.w	r2, #4
 800edb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2202      	movs	r2, #2
 800edbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	699b      	ldr	r3, [r3, #24]
 800edc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f98b 	bl	800f0e8 <HAL_TIM_IC_CaptureCallback>
 800edd2:	e005      	b.n	800ede0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f000 f97d 	bl	800f0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 f98e 	bl	800f0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	f003 0308 	and.w	r3, r3, #8
 800edf0:	2b08      	cmp	r3, #8
 800edf2:	d122      	bne.n	800ee3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	f003 0308 	and.w	r3, r3, #8
 800edfe:	2b08      	cmp	r3, #8
 800ee00:	d11b      	bne.n	800ee3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f06f 0208 	mvn.w	r2, #8
 800ee0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2204      	movs	r2, #4
 800ee10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	69db      	ldr	r3, [r3, #28]
 800ee18:	f003 0303 	and.w	r3, r3, #3
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f000 f961 	bl	800f0e8 <HAL_TIM_IC_CaptureCallback>
 800ee26:	e005      	b.n	800ee34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 f953 	bl	800f0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 f964 	bl	800f0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	691b      	ldr	r3, [r3, #16]
 800ee40:	f003 0310 	and.w	r3, r3, #16
 800ee44:	2b10      	cmp	r3, #16
 800ee46:	d122      	bne.n	800ee8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	f003 0310 	and.w	r3, r3, #16
 800ee52:	2b10      	cmp	r3, #16
 800ee54:	d11b      	bne.n	800ee8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f06f 0210 	mvn.w	r2, #16
 800ee5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2208      	movs	r2, #8
 800ee64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	69db      	ldr	r3, [r3, #28]
 800ee6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d003      	beq.n	800ee7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 f937 	bl	800f0e8 <HAL_TIM_IC_CaptureCallback>
 800ee7a:	e005      	b.n	800ee88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f000 f929 	bl	800f0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f93a 	bl	800f0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	691b      	ldr	r3, [r3, #16]
 800ee94:	f003 0301 	and.w	r3, r3, #1
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d10e      	bne.n	800eeba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	f003 0301 	and.w	r3, r3, #1
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d107      	bne.n	800eeba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f06f 0201 	mvn.w	r2, #1
 800eeb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f7f6 fdcb 	bl	8005a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	691b      	ldr	r3, [r3, #16]
 800eec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eec4:	2b80      	cmp	r3, #128	; 0x80
 800eec6:	d10e      	bne.n	800eee6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eed2:	2b80      	cmp	r3, #128	; 0x80
 800eed4:	d107      	bne.n	800eee6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fc6d 	bl	800f7c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef0:	2b40      	cmp	r3, #64	; 0x40
 800eef2:	d10e      	bne.n	800ef12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eefe:	2b40      	cmp	r3, #64	; 0x40
 800ef00:	d107      	bne.n	800ef12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f8ff 	bl	800f110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	f003 0320 	and.w	r3, r3, #32
 800ef1c:	2b20      	cmp	r3, #32
 800ef1e:	d10e      	bne.n	800ef3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	f003 0320 	and.w	r3, r3, #32
 800ef2a:	2b20      	cmp	r3, #32
 800ef2c:	d107      	bne.n	800ef3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f06f 0220 	mvn.w	r2, #32
 800ef36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 fc37 	bl	800f7ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef3e:	bf00      	nop
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
	...

0800ef48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d101      	bne.n	800ef62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ef5e:	2302      	movs	r3, #2
 800ef60:	e0b4      	b.n	800f0cc <HAL_TIM_PWM_ConfigChannel+0x184>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2202      	movs	r2, #2
 800ef6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2b0c      	cmp	r3, #12
 800ef76:	f200 809f 	bhi.w	800f0b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ef7a:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800efb5 	.word	0x0800efb5
 800ef84:	0800f0b9 	.word	0x0800f0b9
 800ef88:	0800f0b9 	.word	0x0800f0b9
 800ef8c:	0800f0b9 	.word	0x0800f0b9
 800ef90:	0800eff5 	.word	0x0800eff5
 800ef94:	0800f0b9 	.word	0x0800f0b9
 800ef98:	0800f0b9 	.word	0x0800f0b9
 800ef9c:	0800f0b9 	.word	0x0800f0b9
 800efa0:	0800f037 	.word	0x0800f037
 800efa4:	0800f0b9 	.word	0x0800f0b9
 800efa8:	0800f0b9 	.word	0x0800f0b9
 800efac:	0800f0b9 	.word	0x0800f0b9
 800efb0:	0800f077 	.word	0x0800f077
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	68b9      	ldr	r1, [r7, #8]
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 f952 	bl	800f264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	699a      	ldr	r2, [r3, #24]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f042 0208 	orr.w	r2, r2, #8
 800efce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	699a      	ldr	r2, [r3, #24]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f022 0204 	bic.w	r2, r2, #4
 800efde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	6999      	ldr	r1, [r3, #24]
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	691a      	ldr	r2, [r3, #16]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	430a      	orrs	r2, r1
 800eff0:	619a      	str	r2, [r3, #24]
      break;
 800eff2:	e062      	b.n	800f0ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68b9      	ldr	r1, [r7, #8]
 800effa:	4618      	mov	r0, r3
 800effc:	f000 f9a2 	bl	800f344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	699a      	ldr	r2, [r3, #24]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f00e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	699a      	ldr	r2, [r3, #24]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f01e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6999      	ldr	r1, [r3, #24]
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	021a      	lsls	r2, r3, #8
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	430a      	orrs	r2, r1
 800f032:	619a      	str	r2, [r3, #24]
      break;
 800f034:	e041      	b.n	800f0ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68b9      	ldr	r1, [r7, #8]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f000 f9f7 	bl	800f430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	69da      	ldr	r2, [r3, #28]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f042 0208 	orr.w	r2, r2, #8
 800f050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	69da      	ldr	r2, [r3, #28]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f022 0204 	bic.w	r2, r2, #4
 800f060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	69d9      	ldr	r1, [r3, #28]
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	691a      	ldr	r2, [r3, #16]
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	430a      	orrs	r2, r1
 800f072:	61da      	str	r2, [r3, #28]
      break;
 800f074:	e021      	b.n	800f0ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68b9      	ldr	r1, [r7, #8]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f000 fa4b 	bl	800f518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	69da      	ldr	r2, [r3, #28]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	69da      	ldr	r2, [r3, #28]
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f0a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	69d9      	ldr	r1, [r3, #28]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	021a      	lsls	r2, r3, #8
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	61da      	str	r2, [r3, #28]
      break;
 800f0b6:	e000      	b.n	800f0ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f0b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0ca:	2300      	movs	r3, #0
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f0f0:	bf00      	nop
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f118:	bf00      	nop
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr

0800f124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a40      	ldr	r2, [pc, #256]	; (800f238 <TIM_Base_SetConfig+0x114>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d013      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f142:	d00f      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a3d      	ldr	r2, [pc, #244]	; (800f23c <TIM_Base_SetConfig+0x118>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d00b      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a3c      	ldr	r2, [pc, #240]	; (800f240 <TIM_Base_SetConfig+0x11c>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d007      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a3b      	ldr	r2, [pc, #236]	; (800f244 <TIM_Base_SetConfig+0x120>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d003      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a3a      	ldr	r2, [pc, #232]	; (800f248 <TIM_Base_SetConfig+0x124>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d108      	bne.n	800f176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a2f      	ldr	r2, [pc, #188]	; (800f238 <TIM_Base_SetConfig+0x114>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d02b      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f184:	d027      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a2c      	ldr	r2, [pc, #176]	; (800f23c <TIM_Base_SetConfig+0x118>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d023      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a2b      	ldr	r2, [pc, #172]	; (800f240 <TIM_Base_SetConfig+0x11c>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d01f      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a2a      	ldr	r2, [pc, #168]	; (800f244 <TIM_Base_SetConfig+0x120>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d01b      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a29      	ldr	r2, [pc, #164]	; (800f248 <TIM_Base_SetConfig+0x124>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d017      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a28      	ldr	r2, [pc, #160]	; (800f24c <TIM_Base_SetConfig+0x128>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d013      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a27      	ldr	r2, [pc, #156]	; (800f250 <TIM_Base_SetConfig+0x12c>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d00f      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a26      	ldr	r2, [pc, #152]	; (800f254 <TIM_Base_SetConfig+0x130>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d00b      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a25      	ldr	r2, [pc, #148]	; (800f258 <TIM_Base_SetConfig+0x134>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d007      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a24      	ldr	r2, [pc, #144]	; (800f25c <TIM_Base_SetConfig+0x138>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d003      	beq.n	800f1d6 <TIM_Base_SetConfig+0xb2>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a23      	ldr	r2, [pc, #140]	; (800f260 <TIM_Base_SetConfig+0x13c>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d108      	bne.n	800f1e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	68fa      	ldr	r2, [r7, #12]
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	695b      	ldr	r3, [r3, #20]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	689a      	ldr	r2, [r3, #8]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a0a      	ldr	r2, [pc, #40]	; (800f238 <TIM_Base_SetConfig+0x114>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d003      	beq.n	800f21c <TIM_Base_SetConfig+0xf8>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a0c      	ldr	r2, [pc, #48]	; (800f248 <TIM_Base_SetConfig+0x124>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d103      	bne.n	800f224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	691a      	ldr	r2, [r3, #16]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2201      	movs	r2, #1
 800f228:	615a      	str	r2, [r3, #20]
}
 800f22a:	bf00      	nop
 800f22c:	3714      	adds	r7, #20
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	40010000 	.word	0x40010000
 800f23c:	40000400 	.word	0x40000400
 800f240:	40000800 	.word	0x40000800
 800f244:	40000c00 	.word	0x40000c00
 800f248:	40010400 	.word	0x40010400
 800f24c:	40014000 	.word	0x40014000
 800f250:	40014400 	.word	0x40014400
 800f254:	40014800 	.word	0x40014800
 800f258:	40001800 	.word	0x40001800
 800f25c:	40001c00 	.word	0x40001c00
 800f260:	40002000 	.word	0x40002000

0800f264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f264:	b480      	push	{r7}
 800f266:	b087      	sub	sp, #28
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	f023 0201 	bic.w	r2, r3, #1
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a1b      	ldr	r3, [r3, #32]
 800f27e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f023 0303 	bic.w	r3, r3, #3
 800f29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f023 0302 	bic.w	r3, r3, #2
 800f2ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	697a      	ldr	r2, [r7, #20]
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	4a20      	ldr	r2, [pc, #128]	; (800f33c <TIM_OC1_SetConfig+0xd8>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d003      	beq.n	800f2c8 <TIM_OC1_SetConfig+0x64>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a1f      	ldr	r2, [pc, #124]	; (800f340 <TIM_OC1_SetConfig+0xdc>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d10c      	bne.n	800f2e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	f023 0308 	bic.w	r3, r3, #8
 800f2ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	f023 0304 	bic.w	r3, r3, #4
 800f2e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a15      	ldr	r2, [pc, #84]	; (800f33c <TIM_OC1_SetConfig+0xd8>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d003      	beq.n	800f2f2 <TIM_OC1_SetConfig+0x8e>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a14      	ldr	r2, [pc, #80]	; (800f340 <TIM_OC1_SetConfig+0xdc>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d111      	bne.n	800f316 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	695b      	ldr	r3, [r3, #20]
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	4313      	orrs	r3, r2
 800f30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	699b      	ldr	r3, [r3, #24]
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	4313      	orrs	r3, r2
 800f314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	685a      	ldr	r2, [r3, #4]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	697a      	ldr	r2, [r7, #20]
 800f32e:	621a      	str	r2, [r3, #32]
}
 800f330:	bf00      	nop
 800f332:	371c      	adds	r7, #28
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	40010000 	.word	0x40010000
 800f340:	40010400 	.word	0x40010400

0800f344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
 800f352:	f023 0210 	bic.w	r2, r3, #16
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	699b      	ldr	r3, [r3, #24]
 800f36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f37a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	021b      	lsls	r3, r3, #8
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	4313      	orrs	r3, r2
 800f386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	f023 0320 	bic.w	r3, r3, #32
 800f38e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	011b      	lsls	r3, r3, #4
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	4313      	orrs	r3, r2
 800f39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a22      	ldr	r2, [pc, #136]	; (800f428 <TIM_OC2_SetConfig+0xe4>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d003      	beq.n	800f3ac <TIM_OC2_SetConfig+0x68>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a21      	ldr	r2, [pc, #132]	; (800f42c <TIM_OC2_SetConfig+0xe8>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d10d      	bne.n	800f3c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	011b      	lsls	r3, r3, #4
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a17      	ldr	r2, [pc, #92]	; (800f428 <TIM_OC2_SetConfig+0xe4>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d003      	beq.n	800f3d8 <TIM_OC2_SetConfig+0x94>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a16      	ldr	r2, [pc, #88]	; (800f42c <TIM_OC2_SetConfig+0xe8>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d113      	bne.n	800f400 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	693a      	ldr	r2, [r7, #16]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	699b      	ldr	r3, [r3, #24]
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	693a      	ldr	r2, [r7, #16]
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	685a      	ldr	r2, [r3, #4]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	621a      	str	r2, [r3, #32]
}
 800f41a:	bf00      	nop
 800f41c:	371c      	adds	r7, #28
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	40010000 	.word	0x40010000
 800f42c:	40010400 	.word	0x40010400

0800f430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f430:	b480      	push	{r7}
 800f432:	b087      	sub	sp, #28
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6a1b      	ldr	r3, [r3, #32]
 800f43e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a1b      	ldr	r3, [r3, #32]
 800f44a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	69db      	ldr	r3, [r3, #28]
 800f456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f023 0303 	bic.w	r3, r3, #3
 800f466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	4313      	orrs	r3, r2
 800f470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	021b      	lsls	r3, r3, #8
 800f480:	697a      	ldr	r2, [r7, #20]
 800f482:	4313      	orrs	r3, r2
 800f484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a21      	ldr	r2, [pc, #132]	; (800f510 <TIM_OC3_SetConfig+0xe0>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d003      	beq.n	800f496 <TIM_OC3_SetConfig+0x66>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a20      	ldr	r2, [pc, #128]	; (800f514 <TIM_OC3_SetConfig+0xe4>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d10d      	bne.n	800f4b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f49c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	021b      	lsls	r3, r3, #8
 800f4a4:	697a      	ldr	r2, [r7, #20]
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f4b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a16      	ldr	r2, [pc, #88]	; (800f510 <TIM_OC3_SetConfig+0xe0>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d003      	beq.n	800f4c2 <TIM_OC3_SetConfig+0x92>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a15      	ldr	r2, [pc, #84]	; (800f514 <TIM_OC3_SetConfig+0xe4>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d113      	bne.n	800f4ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	695b      	ldr	r3, [r3, #20]
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	699b      	ldr	r3, [r3, #24]
 800f4e2:	011b      	lsls	r3, r3, #4
 800f4e4:	693a      	ldr	r2, [r7, #16]
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	693a      	ldr	r2, [r7, #16]
 800f4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	685a      	ldr	r2, [r3, #4]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	697a      	ldr	r2, [r7, #20]
 800f502:	621a      	str	r2, [r3, #32]
}
 800f504:	bf00      	nop
 800f506:	371c      	adds	r7, #28
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	40010000 	.word	0x40010000
 800f514:	40010400 	.word	0x40010400

0800f518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f518:	b480      	push	{r7}
 800f51a:	b087      	sub	sp, #28
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a1b      	ldr	r3, [r3, #32]
 800f526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	69db      	ldr	r3, [r3, #28]
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f54e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	021b      	lsls	r3, r3, #8
 800f556:	68fa      	ldr	r2, [r7, #12]
 800f558:	4313      	orrs	r3, r2
 800f55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	031b      	lsls	r3, r3, #12
 800f56a:	693a      	ldr	r2, [r7, #16]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a12      	ldr	r2, [pc, #72]	; (800f5bc <TIM_OC4_SetConfig+0xa4>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d003      	beq.n	800f580 <TIM_OC4_SetConfig+0x68>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a11      	ldr	r2, [pc, #68]	; (800f5c0 <TIM_OC4_SetConfig+0xa8>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d109      	bne.n	800f594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	019b      	lsls	r3, r3, #6
 800f58e:	697a      	ldr	r2, [r7, #20]
 800f590:	4313      	orrs	r3, r2
 800f592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	697a      	ldr	r2, [r7, #20]
 800f598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	693a      	ldr	r2, [r7, #16]
 800f5ac:	621a      	str	r2, [r3, #32]
}
 800f5ae:	bf00      	nop
 800f5b0:	371c      	adds	r7, #28
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	40010000 	.word	0x40010000
 800f5c0:	40010400 	.word	0x40010400

0800f5c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	f003 031f 	and.w	r3, r3, #31
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f5dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6a1a      	ldr	r2, [r3, #32]
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	43db      	mvns	r3, r3
 800f5e6:	401a      	ands	r2, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6a1a      	ldr	r2, [r3, #32]
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	f003 031f 	and.w	r3, r3, #31
 800f5f6:	6879      	ldr	r1, [r7, #4]
 800f5f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f5fc:	431a      	orrs	r2, r3
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	621a      	str	r2, [r3, #32]
}
 800f602:	bf00      	nop
 800f604:	371c      	adds	r7, #28
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr
	...

0800f610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f610:	b480      	push	{r7}
 800f612:	b085      	sub	sp, #20
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f620:	2b01      	cmp	r3, #1
 800f622:	d101      	bne.n	800f628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f624:	2302      	movs	r3, #2
 800f626:	e05a      	b.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2202      	movs	r2, #2
 800f634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	68fa      	ldr	r2, [r7, #12]
 800f656:	4313      	orrs	r3, r2
 800f658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a21      	ldr	r2, [pc, #132]	; (800f6ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d022      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f674:	d01d      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a1d      	ldr	r2, [pc, #116]	; (800f6f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d018      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a1b      	ldr	r2, [pc, #108]	; (800f6f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d013      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a1a      	ldr	r2, [pc, #104]	; (800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d00e      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a18      	ldr	r2, [pc, #96]	; (800f6fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d009      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a17      	ldr	r2, [pc, #92]	; (800f700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d004      	beq.n	800f6b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a15      	ldr	r2, [pc, #84]	; (800f704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d10c      	bne.n	800f6cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3714      	adds	r7, #20
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop
 800f6ec:	40010000 	.word	0x40010000
 800f6f0:	40000400 	.word	0x40000400
 800f6f4:	40000800 	.word	0x40000800
 800f6f8:	40000c00 	.word	0x40000c00
 800f6fc:	40010400 	.word	0x40010400
 800f700:	40014000 	.word	0x40014000
 800f704:	40001800 	.word	0x40001800

0800f708 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f712:	2300      	movs	r3, #0
 800f714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d101      	bne.n	800f724 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f720:	2302      	movs	r3, #2
 800f722:	e03d      	b.n	800f7a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2201      	movs	r2, #1
 800f728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	4313      	orrs	r3, r2
 800f738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	4313      	orrs	r3, r2
 800f746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	4313      	orrs	r3, r2
 800f754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4313      	orrs	r3, r2
 800f762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	691b      	ldr	r3, [r3, #16]
 800f76e:	4313      	orrs	r3, r2
 800f770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	695b      	ldr	r3, [r3, #20]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	69db      	ldr	r3, [r3, #28]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3714      	adds	r7, #20
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f7b4:	bf00      	nop
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f7c8:	bf00      	nop
 800f7ca:	370c      	adds	r7, #12
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e03f      	b.n	800f866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7f7 fd68 	bl	80072d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2224      	movs	r2, #36	; 0x24
 800f804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	68da      	ldr	r2, [r3, #12]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 f829 	bl	800f870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	691a      	ldr	r2, [r3, #16]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f82c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	695a      	ldr	r2, [r3, #20]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f83c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	68da      	ldr	r2, [r3, #12]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f84c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2220      	movs	r2, #32
 800f858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2220      	movs	r2, #32
 800f860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
	...

0800f870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f874:	b085      	sub	sp, #20
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	691b      	ldr	r3, [r3, #16]
 800f880:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	68da      	ldr	r2, [r3, #12]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	430a      	orrs	r2, r1
 800f88e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	689a      	ldr	r2, [r3, #8]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	691b      	ldr	r3, [r3, #16]
 800f898:	431a      	orrs	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	431a      	orrs	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	69db      	ldr	r3, [r3, #28]
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f8b2:	f023 030c 	bic.w	r3, r3, #12
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	6812      	ldr	r2, [r2, #0]
 800f8ba:	68f9      	ldr	r1, [r7, #12]
 800f8bc:	430b      	orrs	r3, r1
 800f8be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	695b      	ldr	r3, [r3, #20]
 800f8c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	699a      	ldr	r2, [r3, #24]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	430a      	orrs	r2, r1
 800f8d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	69db      	ldr	r3, [r3, #28]
 800f8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8de:	f040 818b 	bne.w	800fbf8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4ac1      	ldr	r2, [pc, #772]	; (800fbec <UART_SetConfig+0x37c>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d005      	beq.n	800f8f8 <UART_SetConfig+0x88>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	4abf      	ldr	r2, [pc, #764]	; (800fbf0 <UART_SetConfig+0x380>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	f040 80bd 	bne.w	800fa72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f8f8:	f7fc fbcc 	bl	800c094 <HAL_RCC_GetPCLK2Freq>
 800f8fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	461d      	mov	r5, r3
 800f902:	f04f 0600 	mov.w	r6, #0
 800f906:	46a8      	mov	r8, r5
 800f908:	46b1      	mov	r9, r6
 800f90a:	eb18 0308 	adds.w	r3, r8, r8
 800f90e:	eb49 0409 	adc.w	r4, r9, r9
 800f912:	4698      	mov	r8, r3
 800f914:	46a1      	mov	r9, r4
 800f916:	eb18 0805 	adds.w	r8, r8, r5
 800f91a:	eb49 0906 	adc.w	r9, r9, r6
 800f91e:	f04f 0100 	mov.w	r1, #0
 800f922:	f04f 0200 	mov.w	r2, #0
 800f926:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f92a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f92e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f932:	4688      	mov	r8, r1
 800f934:	4691      	mov	r9, r2
 800f936:	eb18 0005 	adds.w	r0, r8, r5
 800f93a:	eb49 0106 	adc.w	r1, r9, r6
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	461d      	mov	r5, r3
 800f944:	f04f 0600 	mov.w	r6, #0
 800f948:	196b      	adds	r3, r5, r5
 800f94a:	eb46 0406 	adc.w	r4, r6, r6
 800f94e:	461a      	mov	r2, r3
 800f950:	4623      	mov	r3, r4
 800f952:	f7f1 f9b1 	bl	8000cb8 <__aeabi_uldivmod>
 800f956:	4603      	mov	r3, r0
 800f958:	460c      	mov	r4, r1
 800f95a:	461a      	mov	r2, r3
 800f95c:	4ba5      	ldr	r3, [pc, #660]	; (800fbf4 <UART_SetConfig+0x384>)
 800f95e:	fba3 2302 	umull	r2, r3, r3, r2
 800f962:	095b      	lsrs	r3, r3, #5
 800f964:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	461d      	mov	r5, r3
 800f96c:	f04f 0600 	mov.w	r6, #0
 800f970:	46a9      	mov	r9, r5
 800f972:	46b2      	mov	sl, r6
 800f974:	eb19 0309 	adds.w	r3, r9, r9
 800f978:	eb4a 040a 	adc.w	r4, sl, sl
 800f97c:	4699      	mov	r9, r3
 800f97e:	46a2      	mov	sl, r4
 800f980:	eb19 0905 	adds.w	r9, r9, r5
 800f984:	eb4a 0a06 	adc.w	sl, sl, r6
 800f988:	f04f 0100 	mov.w	r1, #0
 800f98c:	f04f 0200 	mov.w	r2, #0
 800f990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f994:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f99c:	4689      	mov	r9, r1
 800f99e:	4692      	mov	sl, r2
 800f9a0:	eb19 0005 	adds.w	r0, r9, r5
 800f9a4:	eb4a 0106 	adc.w	r1, sl, r6
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	461d      	mov	r5, r3
 800f9ae:	f04f 0600 	mov.w	r6, #0
 800f9b2:	196b      	adds	r3, r5, r5
 800f9b4:	eb46 0406 	adc.w	r4, r6, r6
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	4623      	mov	r3, r4
 800f9bc:	f7f1 f97c 	bl	8000cb8 <__aeabi_uldivmod>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	4b8b      	ldr	r3, [pc, #556]	; (800fbf4 <UART_SetConfig+0x384>)
 800f9c8:	fba3 1302 	umull	r1, r3, r3, r2
 800f9cc:	095b      	lsrs	r3, r3, #5
 800f9ce:	2164      	movs	r1, #100	; 0x64
 800f9d0:	fb01 f303 	mul.w	r3, r1, r3
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	00db      	lsls	r3, r3, #3
 800f9d8:	3332      	adds	r3, #50	; 0x32
 800f9da:	4a86      	ldr	r2, [pc, #536]	; (800fbf4 <UART_SetConfig+0x384>)
 800f9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f9e0:	095b      	lsrs	r3, r3, #5
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f9e8:	4498      	add	r8, r3
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	461d      	mov	r5, r3
 800f9ee:	f04f 0600 	mov.w	r6, #0
 800f9f2:	46a9      	mov	r9, r5
 800f9f4:	46b2      	mov	sl, r6
 800f9f6:	eb19 0309 	adds.w	r3, r9, r9
 800f9fa:	eb4a 040a 	adc.w	r4, sl, sl
 800f9fe:	4699      	mov	r9, r3
 800fa00:	46a2      	mov	sl, r4
 800fa02:	eb19 0905 	adds.w	r9, r9, r5
 800fa06:	eb4a 0a06 	adc.w	sl, sl, r6
 800fa0a:	f04f 0100 	mov.w	r1, #0
 800fa0e:	f04f 0200 	mov.w	r2, #0
 800fa12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa1e:	4689      	mov	r9, r1
 800fa20:	4692      	mov	sl, r2
 800fa22:	eb19 0005 	adds.w	r0, r9, r5
 800fa26:	eb4a 0106 	adc.w	r1, sl, r6
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	461d      	mov	r5, r3
 800fa30:	f04f 0600 	mov.w	r6, #0
 800fa34:	196b      	adds	r3, r5, r5
 800fa36:	eb46 0406 	adc.w	r4, r6, r6
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	4623      	mov	r3, r4
 800fa3e:	f7f1 f93b 	bl	8000cb8 <__aeabi_uldivmod>
 800fa42:	4603      	mov	r3, r0
 800fa44:	460c      	mov	r4, r1
 800fa46:	461a      	mov	r2, r3
 800fa48:	4b6a      	ldr	r3, [pc, #424]	; (800fbf4 <UART_SetConfig+0x384>)
 800fa4a:	fba3 1302 	umull	r1, r3, r3, r2
 800fa4e:	095b      	lsrs	r3, r3, #5
 800fa50:	2164      	movs	r1, #100	; 0x64
 800fa52:	fb01 f303 	mul.w	r3, r1, r3
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	00db      	lsls	r3, r3, #3
 800fa5a:	3332      	adds	r3, #50	; 0x32
 800fa5c:	4a65      	ldr	r2, [pc, #404]	; (800fbf4 <UART_SetConfig+0x384>)
 800fa5e:	fba2 2303 	umull	r2, r3, r2, r3
 800fa62:	095b      	lsrs	r3, r3, #5
 800fa64:	f003 0207 	and.w	r2, r3, #7
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4442      	add	r2, r8
 800fa6e:	609a      	str	r2, [r3, #8]
 800fa70:	e26f      	b.n	800ff52 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fa72:	f7fc fafb 	bl	800c06c <HAL_RCC_GetPCLK1Freq>
 800fa76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	461d      	mov	r5, r3
 800fa7c:	f04f 0600 	mov.w	r6, #0
 800fa80:	46a8      	mov	r8, r5
 800fa82:	46b1      	mov	r9, r6
 800fa84:	eb18 0308 	adds.w	r3, r8, r8
 800fa88:	eb49 0409 	adc.w	r4, r9, r9
 800fa8c:	4698      	mov	r8, r3
 800fa8e:	46a1      	mov	r9, r4
 800fa90:	eb18 0805 	adds.w	r8, r8, r5
 800fa94:	eb49 0906 	adc.w	r9, r9, r6
 800fa98:	f04f 0100 	mov.w	r1, #0
 800fa9c:	f04f 0200 	mov.w	r2, #0
 800faa0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800faa4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800faa8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800faac:	4688      	mov	r8, r1
 800faae:	4691      	mov	r9, r2
 800fab0:	eb18 0005 	adds.w	r0, r8, r5
 800fab4:	eb49 0106 	adc.w	r1, r9, r6
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	461d      	mov	r5, r3
 800fabe:	f04f 0600 	mov.w	r6, #0
 800fac2:	196b      	adds	r3, r5, r5
 800fac4:	eb46 0406 	adc.w	r4, r6, r6
 800fac8:	461a      	mov	r2, r3
 800faca:	4623      	mov	r3, r4
 800facc:	f7f1 f8f4 	bl	8000cb8 <__aeabi_uldivmod>
 800fad0:	4603      	mov	r3, r0
 800fad2:	460c      	mov	r4, r1
 800fad4:	461a      	mov	r2, r3
 800fad6:	4b47      	ldr	r3, [pc, #284]	; (800fbf4 <UART_SetConfig+0x384>)
 800fad8:	fba3 2302 	umull	r2, r3, r3, r2
 800fadc:	095b      	lsrs	r3, r3, #5
 800fade:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	461d      	mov	r5, r3
 800fae6:	f04f 0600 	mov.w	r6, #0
 800faea:	46a9      	mov	r9, r5
 800faec:	46b2      	mov	sl, r6
 800faee:	eb19 0309 	adds.w	r3, r9, r9
 800faf2:	eb4a 040a 	adc.w	r4, sl, sl
 800faf6:	4699      	mov	r9, r3
 800faf8:	46a2      	mov	sl, r4
 800fafa:	eb19 0905 	adds.w	r9, r9, r5
 800fafe:	eb4a 0a06 	adc.w	sl, sl, r6
 800fb02:	f04f 0100 	mov.w	r1, #0
 800fb06:	f04f 0200 	mov.w	r2, #0
 800fb0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb16:	4689      	mov	r9, r1
 800fb18:	4692      	mov	sl, r2
 800fb1a:	eb19 0005 	adds.w	r0, r9, r5
 800fb1e:	eb4a 0106 	adc.w	r1, sl, r6
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	461d      	mov	r5, r3
 800fb28:	f04f 0600 	mov.w	r6, #0
 800fb2c:	196b      	adds	r3, r5, r5
 800fb2e:	eb46 0406 	adc.w	r4, r6, r6
 800fb32:	461a      	mov	r2, r3
 800fb34:	4623      	mov	r3, r4
 800fb36:	f7f1 f8bf 	bl	8000cb8 <__aeabi_uldivmod>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	460c      	mov	r4, r1
 800fb3e:	461a      	mov	r2, r3
 800fb40:	4b2c      	ldr	r3, [pc, #176]	; (800fbf4 <UART_SetConfig+0x384>)
 800fb42:	fba3 1302 	umull	r1, r3, r3, r2
 800fb46:	095b      	lsrs	r3, r3, #5
 800fb48:	2164      	movs	r1, #100	; 0x64
 800fb4a:	fb01 f303 	mul.w	r3, r1, r3
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	00db      	lsls	r3, r3, #3
 800fb52:	3332      	adds	r3, #50	; 0x32
 800fb54:	4a27      	ldr	r2, [pc, #156]	; (800fbf4 <UART_SetConfig+0x384>)
 800fb56:	fba2 2303 	umull	r2, r3, r2, r3
 800fb5a:	095b      	lsrs	r3, r3, #5
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fb62:	4498      	add	r8, r3
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	461d      	mov	r5, r3
 800fb68:	f04f 0600 	mov.w	r6, #0
 800fb6c:	46a9      	mov	r9, r5
 800fb6e:	46b2      	mov	sl, r6
 800fb70:	eb19 0309 	adds.w	r3, r9, r9
 800fb74:	eb4a 040a 	adc.w	r4, sl, sl
 800fb78:	4699      	mov	r9, r3
 800fb7a:	46a2      	mov	sl, r4
 800fb7c:	eb19 0905 	adds.w	r9, r9, r5
 800fb80:	eb4a 0a06 	adc.w	sl, sl, r6
 800fb84:	f04f 0100 	mov.w	r1, #0
 800fb88:	f04f 0200 	mov.w	r2, #0
 800fb8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb98:	4689      	mov	r9, r1
 800fb9a:	4692      	mov	sl, r2
 800fb9c:	eb19 0005 	adds.w	r0, r9, r5
 800fba0:	eb4a 0106 	adc.w	r1, sl, r6
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	461d      	mov	r5, r3
 800fbaa:	f04f 0600 	mov.w	r6, #0
 800fbae:	196b      	adds	r3, r5, r5
 800fbb0:	eb46 0406 	adc.w	r4, r6, r6
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	4623      	mov	r3, r4
 800fbb8:	f7f1 f87e 	bl	8000cb8 <__aeabi_uldivmod>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	460c      	mov	r4, r1
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	4b0c      	ldr	r3, [pc, #48]	; (800fbf4 <UART_SetConfig+0x384>)
 800fbc4:	fba3 1302 	umull	r1, r3, r3, r2
 800fbc8:	095b      	lsrs	r3, r3, #5
 800fbca:	2164      	movs	r1, #100	; 0x64
 800fbcc:	fb01 f303 	mul.w	r3, r1, r3
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	00db      	lsls	r3, r3, #3
 800fbd4:	3332      	adds	r3, #50	; 0x32
 800fbd6:	4a07      	ldr	r2, [pc, #28]	; (800fbf4 <UART_SetConfig+0x384>)
 800fbd8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbdc:	095b      	lsrs	r3, r3, #5
 800fbde:	f003 0207 	and.w	r2, r3, #7
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4442      	add	r2, r8
 800fbe8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fbea:	e1b2      	b.n	800ff52 <UART_SetConfig+0x6e2>
 800fbec:	40011000 	.word	0x40011000
 800fbf0:	40011400 	.word	0x40011400
 800fbf4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4ad7      	ldr	r2, [pc, #860]	; (800ff5c <UART_SetConfig+0x6ec>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d005      	beq.n	800fc0e <UART_SetConfig+0x39e>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4ad6      	ldr	r2, [pc, #856]	; (800ff60 <UART_SetConfig+0x6f0>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	f040 80d1 	bne.w	800fdb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fc0e:	f7fc fa41 	bl	800c094 <HAL_RCC_GetPCLK2Freq>
 800fc12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	469a      	mov	sl, r3
 800fc18:	f04f 0b00 	mov.w	fp, #0
 800fc1c:	46d0      	mov	r8, sl
 800fc1e:	46d9      	mov	r9, fp
 800fc20:	eb18 0308 	adds.w	r3, r8, r8
 800fc24:	eb49 0409 	adc.w	r4, r9, r9
 800fc28:	4698      	mov	r8, r3
 800fc2a:	46a1      	mov	r9, r4
 800fc2c:	eb18 080a 	adds.w	r8, r8, sl
 800fc30:	eb49 090b 	adc.w	r9, r9, fp
 800fc34:	f04f 0100 	mov.w	r1, #0
 800fc38:	f04f 0200 	mov.w	r2, #0
 800fc3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fc40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fc44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fc48:	4688      	mov	r8, r1
 800fc4a:	4691      	mov	r9, r2
 800fc4c:	eb1a 0508 	adds.w	r5, sl, r8
 800fc50:	eb4b 0609 	adc.w	r6, fp, r9
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	4619      	mov	r1, r3
 800fc5a:	f04f 0200 	mov.w	r2, #0
 800fc5e:	f04f 0300 	mov.w	r3, #0
 800fc62:	f04f 0400 	mov.w	r4, #0
 800fc66:	0094      	lsls	r4, r2, #2
 800fc68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc6c:	008b      	lsls	r3, r1, #2
 800fc6e:	461a      	mov	r2, r3
 800fc70:	4623      	mov	r3, r4
 800fc72:	4628      	mov	r0, r5
 800fc74:	4631      	mov	r1, r6
 800fc76:	f7f1 f81f 	bl	8000cb8 <__aeabi_uldivmod>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	460c      	mov	r4, r1
 800fc7e:	461a      	mov	r2, r3
 800fc80:	4bb8      	ldr	r3, [pc, #736]	; (800ff64 <UART_SetConfig+0x6f4>)
 800fc82:	fba3 2302 	umull	r2, r3, r3, r2
 800fc86:	095b      	lsrs	r3, r3, #5
 800fc88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	469b      	mov	fp, r3
 800fc90:	f04f 0c00 	mov.w	ip, #0
 800fc94:	46d9      	mov	r9, fp
 800fc96:	46e2      	mov	sl, ip
 800fc98:	eb19 0309 	adds.w	r3, r9, r9
 800fc9c:	eb4a 040a 	adc.w	r4, sl, sl
 800fca0:	4699      	mov	r9, r3
 800fca2:	46a2      	mov	sl, r4
 800fca4:	eb19 090b 	adds.w	r9, r9, fp
 800fca8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fcac:	f04f 0100 	mov.w	r1, #0
 800fcb0:	f04f 0200 	mov.w	r2, #0
 800fcb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fcb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fcbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fcc0:	4689      	mov	r9, r1
 800fcc2:	4692      	mov	sl, r2
 800fcc4:	eb1b 0509 	adds.w	r5, fp, r9
 800fcc8:	eb4c 060a 	adc.w	r6, ip, sl
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	f04f 0200 	mov.w	r2, #0
 800fcd6:	f04f 0300 	mov.w	r3, #0
 800fcda:	f04f 0400 	mov.w	r4, #0
 800fcde:	0094      	lsls	r4, r2, #2
 800fce0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fce4:	008b      	lsls	r3, r1, #2
 800fce6:	461a      	mov	r2, r3
 800fce8:	4623      	mov	r3, r4
 800fcea:	4628      	mov	r0, r5
 800fcec:	4631      	mov	r1, r6
 800fcee:	f7f0 ffe3 	bl	8000cb8 <__aeabi_uldivmod>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	4b9a      	ldr	r3, [pc, #616]	; (800ff64 <UART_SetConfig+0x6f4>)
 800fcfa:	fba3 1302 	umull	r1, r3, r3, r2
 800fcfe:	095b      	lsrs	r3, r3, #5
 800fd00:	2164      	movs	r1, #100	; 0x64
 800fd02:	fb01 f303 	mul.w	r3, r1, r3
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	011b      	lsls	r3, r3, #4
 800fd0a:	3332      	adds	r3, #50	; 0x32
 800fd0c:	4a95      	ldr	r2, [pc, #596]	; (800ff64 <UART_SetConfig+0x6f4>)
 800fd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd12:	095b      	lsrs	r3, r3, #5
 800fd14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd18:	4498      	add	r8, r3
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	469b      	mov	fp, r3
 800fd1e:	f04f 0c00 	mov.w	ip, #0
 800fd22:	46d9      	mov	r9, fp
 800fd24:	46e2      	mov	sl, ip
 800fd26:	eb19 0309 	adds.w	r3, r9, r9
 800fd2a:	eb4a 040a 	adc.w	r4, sl, sl
 800fd2e:	4699      	mov	r9, r3
 800fd30:	46a2      	mov	sl, r4
 800fd32:	eb19 090b 	adds.w	r9, r9, fp
 800fd36:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fd3a:	f04f 0100 	mov.w	r1, #0
 800fd3e:	f04f 0200 	mov.w	r2, #0
 800fd42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd4e:	4689      	mov	r9, r1
 800fd50:	4692      	mov	sl, r2
 800fd52:	eb1b 0509 	adds.w	r5, fp, r9
 800fd56:	eb4c 060a 	adc.w	r6, ip, sl
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	4619      	mov	r1, r3
 800fd60:	f04f 0200 	mov.w	r2, #0
 800fd64:	f04f 0300 	mov.w	r3, #0
 800fd68:	f04f 0400 	mov.w	r4, #0
 800fd6c:	0094      	lsls	r4, r2, #2
 800fd6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd72:	008b      	lsls	r3, r1, #2
 800fd74:	461a      	mov	r2, r3
 800fd76:	4623      	mov	r3, r4
 800fd78:	4628      	mov	r0, r5
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	f7f0 ff9c 	bl	8000cb8 <__aeabi_uldivmod>
 800fd80:	4603      	mov	r3, r0
 800fd82:	460c      	mov	r4, r1
 800fd84:	461a      	mov	r2, r3
 800fd86:	4b77      	ldr	r3, [pc, #476]	; (800ff64 <UART_SetConfig+0x6f4>)
 800fd88:	fba3 1302 	umull	r1, r3, r3, r2
 800fd8c:	095b      	lsrs	r3, r3, #5
 800fd8e:	2164      	movs	r1, #100	; 0x64
 800fd90:	fb01 f303 	mul.w	r3, r1, r3
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	011b      	lsls	r3, r3, #4
 800fd98:	3332      	adds	r3, #50	; 0x32
 800fd9a:	4a72      	ldr	r2, [pc, #456]	; (800ff64 <UART_SetConfig+0x6f4>)
 800fd9c:	fba2 2303 	umull	r2, r3, r2, r3
 800fda0:	095b      	lsrs	r3, r3, #5
 800fda2:	f003 020f 	and.w	r2, r3, #15
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4442      	add	r2, r8
 800fdac:	609a      	str	r2, [r3, #8]
 800fdae:	e0d0      	b.n	800ff52 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fdb0:	f7fc f95c 	bl	800c06c <HAL_RCC_GetPCLK1Freq>
 800fdb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	469a      	mov	sl, r3
 800fdba:	f04f 0b00 	mov.w	fp, #0
 800fdbe:	46d0      	mov	r8, sl
 800fdc0:	46d9      	mov	r9, fp
 800fdc2:	eb18 0308 	adds.w	r3, r8, r8
 800fdc6:	eb49 0409 	adc.w	r4, r9, r9
 800fdca:	4698      	mov	r8, r3
 800fdcc:	46a1      	mov	r9, r4
 800fdce:	eb18 080a 	adds.w	r8, r8, sl
 800fdd2:	eb49 090b 	adc.w	r9, r9, fp
 800fdd6:	f04f 0100 	mov.w	r1, #0
 800fdda:	f04f 0200 	mov.w	r2, #0
 800fdde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fde2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fde6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fdea:	4688      	mov	r8, r1
 800fdec:	4691      	mov	r9, r2
 800fdee:	eb1a 0508 	adds.w	r5, sl, r8
 800fdf2:	eb4b 0609 	adc.w	r6, fp, r9
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	f04f 0200 	mov.w	r2, #0
 800fe00:	f04f 0300 	mov.w	r3, #0
 800fe04:	f04f 0400 	mov.w	r4, #0
 800fe08:	0094      	lsls	r4, r2, #2
 800fe0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe0e:	008b      	lsls	r3, r1, #2
 800fe10:	461a      	mov	r2, r3
 800fe12:	4623      	mov	r3, r4
 800fe14:	4628      	mov	r0, r5
 800fe16:	4631      	mov	r1, r6
 800fe18:	f7f0 ff4e 	bl	8000cb8 <__aeabi_uldivmod>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	460c      	mov	r4, r1
 800fe20:	461a      	mov	r2, r3
 800fe22:	4b50      	ldr	r3, [pc, #320]	; (800ff64 <UART_SetConfig+0x6f4>)
 800fe24:	fba3 2302 	umull	r2, r3, r3, r2
 800fe28:	095b      	lsrs	r3, r3, #5
 800fe2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	469b      	mov	fp, r3
 800fe32:	f04f 0c00 	mov.w	ip, #0
 800fe36:	46d9      	mov	r9, fp
 800fe38:	46e2      	mov	sl, ip
 800fe3a:	eb19 0309 	adds.w	r3, r9, r9
 800fe3e:	eb4a 040a 	adc.w	r4, sl, sl
 800fe42:	4699      	mov	r9, r3
 800fe44:	46a2      	mov	sl, r4
 800fe46:	eb19 090b 	adds.w	r9, r9, fp
 800fe4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fe4e:	f04f 0100 	mov.w	r1, #0
 800fe52:	f04f 0200 	mov.w	r2, #0
 800fe56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe62:	4689      	mov	r9, r1
 800fe64:	4692      	mov	sl, r2
 800fe66:	eb1b 0509 	adds.w	r5, fp, r9
 800fe6a:	eb4c 060a 	adc.w	r6, ip, sl
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	4619      	mov	r1, r3
 800fe74:	f04f 0200 	mov.w	r2, #0
 800fe78:	f04f 0300 	mov.w	r3, #0
 800fe7c:	f04f 0400 	mov.w	r4, #0
 800fe80:	0094      	lsls	r4, r2, #2
 800fe82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe86:	008b      	lsls	r3, r1, #2
 800fe88:	461a      	mov	r2, r3
 800fe8a:	4623      	mov	r3, r4
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	4631      	mov	r1, r6
 800fe90:	f7f0 ff12 	bl	8000cb8 <__aeabi_uldivmod>
 800fe94:	4603      	mov	r3, r0
 800fe96:	460c      	mov	r4, r1
 800fe98:	461a      	mov	r2, r3
 800fe9a:	4b32      	ldr	r3, [pc, #200]	; (800ff64 <UART_SetConfig+0x6f4>)
 800fe9c:	fba3 1302 	umull	r1, r3, r3, r2
 800fea0:	095b      	lsrs	r3, r3, #5
 800fea2:	2164      	movs	r1, #100	; 0x64
 800fea4:	fb01 f303 	mul.w	r3, r1, r3
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	011b      	lsls	r3, r3, #4
 800feac:	3332      	adds	r3, #50	; 0x32
 800feae:	4a2d      	ldr	r2, [pc, #180]	; (800ff64 <UART_SetConfig+0x6f4>)
 800feb0:	fba2 2303 	umull	r2, r3, r2, r3
 800feb4:	095b      	lsrs	r3, r3, #5
 800feb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800feba:	4498      	add	r8, r3
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	469b      	mov	fp, r3
 800fec0:	f04f 0c00 	mov.w	ip, #0
 800fec4:	46d9      	mov	r9, fp
 800fec6:	46e2      	mov	sl, ip
 800fec8:	eb19 0309 	adds.w	r3, r9, r9
 800fecc:	eb4a 040a 	adc.w	r4, sl, sl
 800fed0:	4699      	mov	r9, r3
 800fed2:	46a2      	mov	sl, r4
 800fed4:	eb19 090b 	adds.w	r9, r9, fp
 800fed8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fedc:	f04f 0100 	mov.w	r1, #0
 800fee0:	f04f 0200 	mov.w	r2, #0
 800fee4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fee8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800feec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fef0:	4689      	mov	r9, r1
 800fef2:	4692      	mov	sl, r2
 800fef4:	eb1b 0509 	adds.w	r5, fp, r9
 800fef8:	eb4c 060a 	adc.w	r6, ip, sl
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	4619      	mov	r1, r3
 800ff02:	f04f 0200 	mov.w	r2, #0
 800ff06:	f04f 0300 	mov.w	r3, #0
 800ff0a:	f04f 0400 	mov.w	r4, #0
 800ff0e:	0094      	lsls	r4, r2, #2
 800ff10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ff14:	008b      	lsls	r3, r1, #2
 800ff16:	461a      	mov	r2, r3
 800ff18:	4623      	mov	r3, r4
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	4631      	mov	r1, r6
 800ff1e:	f7f0 fecb 	bl	8000cb8 <__aeabi_uldivmod>
 800ff22:	4603      	mov	r3, r0
 800ff24:	460c      	mov	r4, r1
 800ff26:	461a      	mov	r2, r3
 800ff28:	4b0e      	ldr	r3, [pc, #56]	; (800ff64 <UART_SetConfig+0x6f4>)
 800ff2a:	fba3 1302 	umull	r1, r3, r3, r2
 800ff2e:	095b      	lsrs	r3, r3, #5
 800ff30:	2164      	movs	r1, #100	; 0x64
 800ff32:	fb01 f303 	mul.w	r3, r1, r3
 800ff36:	1ad3      	subs	r3, r2, r3
 800ff38:	011b      	lsls	r3, r3, #4
 800ff3a:	3332      	adds	r3, #50	; 0x32
 800ff3c:	4a09      	ldr	r2, [pc, #36]	; (800ff64 <UART_SetConfig+0x6f4>)
 800ff3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff42:	095b      	lsrs	r3, r3, #5
 800ff44:	f003 020f 	and.w	r2, r3, #15
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4442      	add	r2, r8
 800ff4e:	609a      	str	r2, [r3, #8]
}
 800ff50:	e7ff      	b.n	800ff52 <UART_SetConfig+0x6e2>
 800ff52:	bf00      	nop
 800ff54:	3714      	adds	r7, #20
 800ff56:	46bd      	mov	sp, r7
 800ff58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff5c:	40011000 	.word	0x40011000
 800ff60:	40011400 	.word	0x40011400
 800ff64:	51eb851f 	.word	0x51eb851f

0800ff68 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ff68:	b084      	sub	sp, #16
 800ff6a:	b480      	push	{r7}
 800ff6c:	b085      	sub	sp, #20
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
 800ff72:	f107 001c 	add.w	r0, r7, #28
 800ff76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ff7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ff80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ff82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ff84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ff86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ff88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ff8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ff8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ff92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ff94:	68fa      	ldr	r2, [r7, #12]
 800ff96:	4313      	orrs	r3, r2
 800ff98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ffa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	431a      	orrs	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	b004      	add	sp, #16
 800ffbc:	4770      	bx	lr

0800ffbe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ffbe:	b480      	push	{r7}
 800ffc0:	b083      	sub	sp, #12
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	370c      	adds	r7, #12
 800fff2:	46bd      	mov	sp, r7
 800fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff8:	4770      	bx	lr

0800fffa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b082      	sub	sp, #8
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2203      	movs	r2, #3
 8010006:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010008:	2002      	movs	r0, #2
 801000a:	f7f9 fbdd 	bl	80097c8 <HAL_Delay>
  
  return HAL_OK;
 801000e:	2300      	movs	r3, #0
}
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f003 0303 	and.w	r3, r3, #3
}
 8010028:	4618      	mov	r0, r3
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010052:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010058:	431a      	orrs	r2, r3
                       Command->CPSM);
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801005e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	4313      	orrs	r3, r2
 8010064:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801006e:	f023 030f 	bic.w	r3, r3, #15
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	431a      	orrs	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	b2db      	uxtb	r3, r3
}
 8010096:	4618      	mov	r0, r3
 8010098:	370c      	adds	r7, #12
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr

080100a2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80100a2:	b480      	push	{r7}
 80100a4:	b085      	sub	sp, #20
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	3314      	adds	r3, #20
 80100b0:	461a      	mov	r2, r3
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	4413      	add	r3, r2
 80100b6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
}  
 80100bc:	4618      	mov	r0, r3
 80100be:	3714      	adds	r7, #20
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr

080100c8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80100ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80100f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80100fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	4313      	orrs	r3, r2
 8010100:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010106:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	431a      	orrs	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010112:	2300      	movs	r3, #0

}
 8010114:	4618      	mov	r0, r3
 8010116:	3714      	adds	r7, #20
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b088      	sub	sp, #32
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801012e:	2310      	movs	r3, #16
 8010130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010132:	2340      	movs	r3, #64	; 0x40
 8010134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010136:	2300      	movs	r3, #0
 8010138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801013a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801013e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010140:	f107 0308 	add.w	r3, r7, #8
 8010144:	4619      	mov	r1, r3
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7ff ff74 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801014c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010150:	2110      	movs	r1, #16
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 fa40 	bl	80105d8 <SDMMC_GetCmdResp1>
 8010158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801015a:	69fb      	ldr	r3, [r7, #28]
}
 801015c:	4618      	mov	r0, r3
 801015e:	3720      	adds	r7, #32
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b088      	sub	sp, #32
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010172:	2311      	movs	r3, #17
 8010174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010176:	2340      	movs	r3, #64	; 0x40
 8010178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801017a:	2300      	movs	r3, #0
 801017c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801017e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010184:	f107 0308 	add.w	r3, r7, #8
 8010188:	4619      	mov	r1, r3
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f7ff ff52 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010190:	f241 3288 	movw	r2, #5000	; 0x1388
 8010194:	2111      	movs	r1, #17
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 fa1e 	bl	80105d8 <SDMMC_GetCmdResp1>
 801019c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801019e:	69fb      	ldr	r3, [r7, #28]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3720      	adds	r7, #32
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b088      	sub	sp, #32
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80101b6:	2312      	movs	r3, #18
 80101b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101ba:	2340      	movs	r3, #64	; 0x40
 80101bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101be:	2300      	movs	r3, #0
 80101c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101c8:	f107 0308 	add.w	r3, r7, #8
 80101cc:	4619      	mov	r1, r3
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7ff ff30 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80101d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80101d8:	2112      	movs	r1, #18
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 f9fc 	bl	80105d8 <SDMMC_GetCmdResp1>
 80101e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101e2:	69fb      	ldr	r3, [r7, #28]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3720      	adds	r7, #32
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b088      	sub	sp, #32
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80101fa:	2318      	movs	r3, #24
 80101fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101fe:	2340      	movs	r3, #64	; 0x40
 8010200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010202:	2300      	movs	r3, #0
 8010204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801020a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801020c:	f107 0308 	add.w	r3, r7, #8
 8010210:	4619      	mov	r1, r3
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7ff ff0e 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010218:	f241 3288 	movw	r2, #5000	; 0x1388
 801021c:	2118      	movs	r1, #24
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f9da 	bl	80105d8 <SDMMC_GetCmdResp1>
 8010224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010226:	69fb      	ldr	r3, [r7, #28]
}
 8010228:	4618      	mov	r0, r3
 801022a:	3720      	adds	r7, #32
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b088      	sub	sp, #32
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801023e:	2319      	movs	r3, #25
 8010240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010242:	2340      	movs	r3, #64	; 0x40
 8010244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010246:	2300      	movs	r3, #0
 8010248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801024a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801024e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010250:	f107 0308 	add.w	r3, r7, #8
 8010254:	4619      	mov	r1, r3
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7ff feec 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801025c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010260:	2119      	movs	r1, #25
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f9b8 	bl	80105d8 <SDMMC_GetCmdResp1>
 8010268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801026a:	69fb      	ldr	r3, [r7, #28]
}
 801026c:	4618      	mov	r0, r3
 801026e:	3720      	adds	r7, #32
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b088      	sub	sp, #32
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801027c:	2300      	movs	r3, #0
 801027e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010280:	230c      	movs	r3, #12
 8010282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010284:	2340      	movs	r3, #64	; 0x40
 8010286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010288:	2300      	movs	r3, #0
 801028a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010292:	f107 0308 	add.w	r3, r7, #8
 8010296:	4619      	mov	r1, r3
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7ff fecb 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801029e:	4a05      	ldr	r2, [pc, #20]	; (80102b4 <SDMMC_CmdStopTransfer+0x40>)
 80102a0:	210c      	movs	r1, #12
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 f998 	bl	80105d8 <SDMMC_GetCmdResp1>
 80102a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102aa:	69fb      	ldr	r3, [r7, #28]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3720      	adds	r7, #32
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	05f5e100 	.word	0x05f5e100

080102b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b08a      	sub	sp, #40	; 0x28
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80102c8:	2307      	movs	r3, #7
 80102ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102cc:	2340      	movs	r3, #64	; 0x40
 80102ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102d0:	2300      	movs	r3, #0
 80102d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102da:	f107 0310 	add.w	r3, r7, #16
 80102de:	4619      	mov	r1, r3
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f7ff fea7 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80102e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80102ea:	2107      	movs	r1, #7
 80102ec:	68f8      	ldr	r0, [r7, #12]
 80102ee:	f000 f973 	bl	80105d8 <SDMMC_GetCmdResp1>
 80102f2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3728      	adds	r7, #40	; 0x28
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b088      	sub	sp, #32
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010306:	2300      	movs	r3, #0
 8010308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801030a:	2300      	movs	r3, #0
 801030c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801030e:	2300      	movs	r3, #0
 8010310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010312:	2300      	movs	r3, #0
 8010314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801031a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801031c:	f107 0308 	add.w	r3, r7, #8
 8010320:	4619      	mov	r1, r3
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7ff fe86 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 f92d 	bl	8010588 <SDMMC_GetCmdError>
 801032e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010330:	69fb      	ldr	r3, [r7, #28]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3720      	adds	r7, #32
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b088      	sub	sp, #32
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010342:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010348:	2308      	movs	r3, #8
 801034a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801034c:	2340      	movs	r3, #64	; 0x40
 801034e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010350:	2300      	movs	r3, #0
 8010352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010358:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801035a:	f107 0308 	add.w	r3, r7, #8
 801035e:	4619      	mov	r1, r3
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7ff fe67 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f000 fb16 	bl	8010998 <SDMMC_GetCmdResp7>
 801036c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801036e:	69fb      	ldr	r3, [r7, #28]
}
 8010370:	4618      	mov	r0, r3
 8010372:	3720      	adds	r7, #32
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b088      	sub	sp, #32
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010386:	2337      	movs	r3, #55	; 0x37
 8010388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801038a:	2340      	movs	r3, #64	; 0x40
 801038c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801038e:	2300      	movs	r3, #0
 8010390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010398:	f107 0308 	add.w	r3, r7, #8
 801039c:	4619      	mov	r1, r3
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7ff fe48 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80103a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80103a8:	2137      	movs	r1, #55	; 0x37
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f914 	bl	80105d8 <SDMMC_GetCmdResp1>
 80103b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b2:	69fb      	ldr	r3, [r7, #28]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3720      	adds	r7, #32
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b088      	sub	sp, #32
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80103cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80103d2:	2329      	movs	r3, #41	; 0x29
 80103d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103d6:	2340      	movs	r3, #64	; 0x40
 80103d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103da:	2300      	movs	r3, #0
 80103dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103e4:	f107 0308 	add.w	r3, r7, #8
 80103e8:	4619      	mov	r1, r3
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7ff fe22 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 fa23 	bl	801083c <SDMMC_GetCmdResp3>
 80103f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103f8:	69fb      	ldr	r3, [r7, #28]
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3720      	adds	r7, #32
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010402:	b580      	push	{r7, lr}
 8010404:	b088      	sub	sp, #32
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
 801040a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010410:	2306      	movs	r3, #6
 8010412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010414:	2340      	movs	r3, #64	; 0x40
 8010416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010418:	2300      	movs	r3, #0
 801041a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801041c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010420:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010422:	f107 0308 	add.w	r3, r7, #8
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7ff fe03 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801042e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010432:	2106      	movs	r1, #6
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f8cf 	bl	80105d8 <SDMMC_GetCmdResp1>
 801043a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043c:	69fb      	ldr	r3, [r7, #28]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3720      	adds	r7, #32
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b088      	sub	sp, #32
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801044e:	2300      	movs	r3, #0
 8010450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010452:	2333      	movs	r3, #51	; 0x33
 8010454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010456:	2340      	movs	r3, #64	; 0x40
 8010458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801045a:	2300      	movs	r3, #0
 801045c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801045e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010462:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010464:	f107 0308 	add.w	r3, r7, #8
 8010468:	4619      	mov	r1, r3
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7ff fde2 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010470:	f241 3288 	movw	r2, #5000	; 0x1388
 8010474:	2133      	movs	r1, #51	; 0x33
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 f8ae 	bl	80105d8 <SDMMC_GetCmdResp1>
 801047c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801047e:	69fb      	ldr	r3, [r7, #28]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3720      	adds	r7, #32
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b088      	sub	sp, #32
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010490:	2300      	movs	r3, #0
 8010492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010494:	2302      	movs	r3, #2
 8010496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010498:	23c0      	movs	r3, #192	; 0xc0
 801049a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801049c:	2300      	movs	r3, #0
 801049e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104a6:	f107 0308 	add.w	r3, r7, #8
 80104aa:	4619      	mov	r1, r3
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f7ff fdc1 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 f97c 	bl	80107b0 <SDMMC_GetCmdResp2>
 80104b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ba:	69fb      	ldr	r3, [r7, #28]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3720      	adds	r7, #32
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b088      	sub	sp, #32
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80104d2:	2309      	movs	r3, #9
 80104d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80104d6:	23c0      	movs	r3, #192	; 0xc0
 80104d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104da:	2300      	movs	r3, #0
 80104dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104e4:	f107 0308 	add.w	r3, r7, #8
 80104e8:	4619      	mov	r1, r3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f7ff fda2 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f000 f95d 	bl	80107b0 <SDMMC_GetCmdResp2>
 80104f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104f8:	69fb      	ldr	r3, [r7, #28]
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3720      	adds	r7, #32
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}

08010502 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010502:	b580      	push	{r7, lr}
 8010504:	b088      	sub	sp, #32
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801050c:	2300      	movs	r3, #0
 801050e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010510:	2303      	movs	r3, #3
 8010512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010514:	2340      	movs	r3, #64	; 0x40
 8010516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010518:	2300      	movs	r3, #0
 801051a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801051c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010522:	f107 0308 	add.w	r3, r7, #8
 8010526:	4619      	mov	r1, r3
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f7ff fd83 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	2103      	movs	r1, #3
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 f9bc 	bl	80108b0 <SDMMC_GetCmdResp6>
 8010538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801053a:	69fb      	ldr	r3, [r7, #28]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3720      	adds	r7, #32
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b088      	sub	sp, #32
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010552:	230d      	movs	r3, #13
 8010554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010556:	2340      	movs	r3, #64	; 0x40
 8010558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801055a:	2300      	movs	r3, #0
 801055c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010562:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010564:	f107 0308 	add.w	r3, r7, #8
 8010568:	4619      	mov	r1, r3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff fd62 	bl	8010034 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010570:	f241 3288 	movw	r2, #5000	; 0x1388
 8010574:	210d      	movs	r1, #13
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 f82e 	bl	80105d8 <SDMMC_GetCmdResp1>
 801057c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801057e:	69fb      	ldr	r3, [r7, #28]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3720      	adds	r7, #32
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010588:	b490      	push	{r4, r7}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010590:	4b0f      	ldr	r3, [pc, #60]	; (80105d0 <SDMMC_GetCmdError+0x48>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a0f      	ldr	r2, [pc, #60]	; (80105d4 <SDMMC_GetCmdError+0x4c>)
 8010596:	fba2 2303 	umull	r2, r3, r2, r3
 801059a:	0a5b      	lsrs	r3, r3, #9
 801059c:	f241 3288 	movw	r2, #5000	; 0x1388
 80105a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80105a4:	4623      	mov	r3, r4
 80105a6:	1e5c      	subs	r4, r3, #1
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d102      	bne.n	80105b2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105b0:	e009      	b.n	80105c6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d0f2      	beq.n	80105a4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	22c5      	movs	r2, #197	; 0xc5
 80105c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80105c4:	2300      	movs	r3, #0
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3708      	adds	r7, #8
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bc90      	pop	{r4, r7}
 80105ce:	4770      	bx	lr
 80105d0:	20000000 	.word	0x20000000
 80105d4:	10624dd3 	.word	0x10624dd3

080105d8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80105d8:	b590      	push	{r4, r7, lr}
 80105da:	b087      	sub	sp, #28
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	460b      	mov	r3, r1
 80105e2:	607a      	str	r2, [r7, #4]
 80105e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80105e6:	4b6f      	ldr	r3, [pc, #444]	; (80107a4 <SDMMC_GetCmdResp1+0x1cc>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4a6f      	ldr	r2, [pc, #444]	; (80107a8 <SDMMC_GetCmdResp1+0x1d0>)
 80105ec:	fba2 2303 	umull	r2, r3, r2, r3
 80105f0:	0a5b      	lsrs	r3, r3, #9
 80105f2:	687a      	ldr	r2, [r7, #4]
 80105f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80105f8:	4623      	mov	r3, r4
 80105fa:	1e5c      	subs	r4, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010604:	e0c9      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801060a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010612:	2b00      	cmp	r3, #0
 8010614:	d0f0      	beq.n	80105f8 <SDMMC_GetCmdResp1+0x20>
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1eb      	bne.n	80105f8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	2b00      	cmp	r3, #0
 801062a:	d004      	beq.n	8010636 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	2204      	movs	r2, #4
 8010630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010632:	2304      	movs	r3, #4
 8010634:	e0b1      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	2b00      	cmp	r3, #0
 8010640:	d004      	beq.n	801064c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2201      	movs	r2, #1
 8010646:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010648:	2301      	movs	r3, #1
 801064a:	e0a6      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	22c5      	movs	r2, #197	; 0xc5
 8010650:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010652:	68f8      	ldr	r0, [r7, #12]
 8010654:	f7ff fd18 	bl	8010088 <SDIO_GetCommandResponse>
 8010658:	4603      	mov	r3, r0
 801065a:	461a      	mov	r2, r3
 801065c:	7afb      	ldrb	r3, [r7, #11]
 801065e:	4293      	cmp	r3, r2
 8010660:	d001      	beq.n	8010666 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010662:	2301      	movs	r3, #1
 8010664:	e099      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010666:	2100      	movs	r1, #0
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f7ff fd1a 	bl	80100a2 <SDIO_GetResponse>
 801066e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010670:	693a      	ldr	r2, [r7, #16]
 8010672:	4b4e      	ldr	r3, [pc, #312]	; (80107ac <SDMMC_GetCmdResp1+0x1d4>)
 8010674:	4013      	ands	r3, r2
 8010676:	2b00      	cmp	r3, #0
 8010678:	d101      	bne.n	801067e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801067a:	2300      	movs	r3, #0
 801067c:	e08d      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	da02      	bge.n	801068a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010688:	e087      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010690:	2b00      	cmp	r3, #0
 8010692:	d001      	beq.n	8010698 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010694:	2340      	movs	r3, #64	; 0x40
 8010696:	e080      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d001      	beq.n	80106a6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106a2:	2380      	movs	r3, #128	; 0x80
 80106a4:	e079      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d002      	beq.n	80106b6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80106b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106b4:	e071      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d002      	beq.n	80106c6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80106c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106c4:	e069      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d002      	beq.n	80106d6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80106d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106d4:	e061      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d002      	beq.n	80106e6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80106e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80106e4:	e059      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d002      	beq.n	80106f6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80106f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106f4:	e051      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010704:	e049      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d002      	beq.n	8010716 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010710:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010714:	e041      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010724:	e039      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010734:	e031      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801073c:	2b00      	cmp	r3, #0
 801073e:	d002      	beq.n	8010746 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010744:	e029      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010750:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010754:	e021      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801075c:	2b00      	cmp	r3, #0
 801075e:	d002      	beq.n	8010766 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010760:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010764:	e019      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010770:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010774:	e011      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801077c:	2b00      	cmp	r3, #0
 801077e:	d002      	beq.n	8010786 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010780:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010784:	e009      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	f003 0308 	and.w	r3, r3, #8
 801078c:	2b00      	cmp	r3, #0
 801078e:	d002      	beq.n	8010796 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010790:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010794:	e001      	b.n	801079a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801079a:	4618      	mov	r0, r3
 801079c:	371c      	adds	r7, #28
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd90      	pop	{r4, r7, pc}
 80107a2:	bf00      	nop
 80107a4:	20000000 	.word	0x20000000
 80107a8:	10624dd3 	.word	0x10624dd3
 80107ac:	fdffe008 	.word	0xfdffe008

080107b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80107b0:	b490      	push	{r4, r7}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107b8:	4b1e      	ldr	r3, [pc, #120]	; (8010834 <SDMMC_GetCmdResp2+0x84>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	4a1e      	ldr	r2, [pc, #120]	; (8010838 <SDMMC_GetCmdResp2+0x88>)
 80107be:	fba2 2303 	umull	r2, r3, r2, r3
 80107c2:	0a5b      	lsrs	r3, r3, #9
 80107c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107cc:	4623      	mov	r3, r4
 80107ce:	1e5c      	subs	r4, r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d102      	bne.n	80107da <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107d8:	e026      	b.n	8010828 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d0f0      	beq.n	80107cc <SDMMC_GetCmdResp2+0x1c>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d1eb      	bne.n	80107cc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f8:	f003 0304 	and.w	r3, r3, #4
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d004      	beq.n	801080a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2204      	movs	r2, #4
 8010804:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010806:	2304      	movs	r3, #4
 8010808:	e00e      	b.n	8010828 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801080e:	f003 0301 	and.w	r3, r3, #1
 8010812:	2b00      	cmp	r3, #0
 8010814:	d004      	beq.n	8010820 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2201      	movs	r2, #1
 801081a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801081c:	2301      	movs	r3, #1
 801081e:	e003      	b.n	8010828 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	22c5      	movs	r2, #197	; 0xc5
 8010824:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010826:	2300      	movs	r3, #0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3710      	adds	r7, #16
 801082c:	46bd      	mov	sp, r7
 801082e:	bc90      	pop	{r4, r7}
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	20000000 	.word	0x20000000
 8010838:	10624dd3 	.word	0x10624dd3

0801083c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801083c:	b490      	push	{r4, r7}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010844:	4b18      	ldr	r3, [pc, #96]	; (80108a8 <SDMMC_GetCmdResp3+0x6c>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	4a18      	ldr	r2, [pc, #96]	; (80108ac <SDMMC_GetCmdResp3+0x70>)
 801084a:	fba2 2303 	umull	r2, r3, r2, r3
 801084e:	0a5b      	lsrs	r3, r3, #9
 8010850:	f241 3288 	movw	r2, #5000	; 0x1388
 8010854:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010858:	4623      	mov	r3, r4
 801085a:	1e5c      	subs	r4, r3, #1
 801085c:	2b00      	cmp	r3, #0
 801085e:	d102      	bne.n	8010866 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010864:	e01b      	b.n	801089e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801086a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010872:	2b00      	cmp	r3, #0
 8010874:	d0f0      	beq.n	8010858 <SDMMC_GetCmdResp3+0x1c>
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1eb      	bne.n	8010858 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010884:	f003 0304 	and.w	r3, r3, #4
 8010888:	2b00      	cmp	r3, #0
 801088a:	d004      	beq.n	8010896 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2204      	movs	r2, #4
 8010890:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010892:	2304      	movs	r3, #4
 8010894:	e003      	b.n	801089e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	22c5      	movs	r2, #197	; 0xc5
 801089a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bc90      	pop	{r4, r7}
 80108a6:	4770      	bx	lr
 80108a8:	20000000 	.word	0x20000000
 80108ac:	10624dd3 	.word	0x10624dd3

080108b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80108b0:	b590      	push	{r4, r7, lr}
 80108b2:	b087      	sub	sp, #28
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	460b      	mov	r3, r1
 80108ba:	607a      	str	r2, [r7, #4]
 80108bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108be:	4b34      	ldr	r3, [pc, #208]	; (8010990 <SDMMC_GetCmdResp6+0xe0>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4a34      	ldr	r2, [pc, #208]	; (8010994 <SDMMC_GetCmdResp6+0xe4>)
 80108c4:	fba2 2303 	umull	r2, r3, r2, r3
 80108c8:	0a5b      	lsrs	r3, r3, #9
 80108ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80108ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80108d2:	4623      	mov	r3, r4
 80108d4:	1e5c      	subs	r4, r3, #1
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d102      	bne.n	80108e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108de:	e052      	b.n	8010986 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108e4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d0f0      	beq.n	80108d2 <SDMMC_GetCmdResp6+0x22>
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1eb      	bne.n	80108d2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108fe:	f003 0304 	and.w	r3, r3, #4
 8010902:	2b00      	cmp	r3, #0
 8010904:	d004      	beq.n	8010910 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2204      	movs	r2, #4
 801090a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801090c:	2304      	movs	r3, #4
 801090e:	e03a      	b.n	8010986 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010914:	f003 0301 	and.w	r3, r3, #1
 8010918:	2b00      	cmp	r3, #0
 801091a:	d004      	beq.n	8010926 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2201      	movs	r2, #1
 8010920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010922:	2301      	movs	r3, #1
 8010924:	e02f      	b.n	8010986 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010926:	68f8      	ldr	r0, [r7, #12]
 8010928:	f7ff fbae 	bl	8010088 <SDIO_GetCommandResponse>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	7afb      	ldrb	r3, [r7, #11]
 8010932:	4293      	cmp	r3, r2
 8010934:	d001      	beq.n	801093a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010936:	2301      	movs	r3, #1
 8010938:	e025      	b.n	8010986 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	22c5      	movs	r2, #197	; 0xc5
 801093e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010940:	2100      	movs	r1, #0
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	f7ff fbad 	bl	80100a2 <SDIO_GetResponse>
 8010948:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010950:	2b00      	cmp	r3, #0
 8010952:	d106      	bne.n	8010962 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	0c1b      	lsrs	r3, r3, #16
 8010958:	b29a      	uxth	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801095e:	2300      	movs	r3, #0
 8010960:	e011      	b.n	8010986 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010968:	2b00      	cmp	r3, #0
 801096a:	d002      	beq.n	8010972 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010970:	e009      	b.n	8010986 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801097c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010980:	e001      	b.n	8010986 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010986:	4618      	mov	r0, r3
 8010988:	371c      	adds	r7, #28
 801098a:	46bd      	mov	sp, r7
 801098c:	bd90      	pop	{r4, r7, pc}
 801098e:	bf00      	nop
 8010990:	20000000 	.word	0x20000000
 8010994:	10624dd3 	.word	0x10624dd3

08010998 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010998:	b490      	push	{r4, r7}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109a0:	4b21      	ldr	r3, [pc, #132]	; (8010a28 <SDMMC_GetCmdResp7+0x90>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a21      	ldr	r2, [pc, #132]	; (8010a2c <SDMMC_GetCmdResp7+0x94>)
 80109a6:	fba2 2303 	umull	r2, r3, r2, r3
 80109aa:	0a5b      	lsrs	r3, r3, #9
 80109ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80109b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80109b4:	4623      	mov	r3, r4
 80109b6:	1e5c      	subs	r4, r3, #1
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d102      	bne.n	80109c2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109c0:	e02c      	b.n	8010a1c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109c6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0f0      	beq.n	80109b4 <SDMMC_GetCmdResp7+0x1c>
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1eb      	bne.n	80109b4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109e0:	f003 0304 	and.w	r3, r3, #4
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d004      	beq.n	80109f2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2204      	movs	r2, #4
 80109ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109ee:	2304      	movs	r3, #4
 80109f0:	e014      	b.n	8010a1c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f6:	f003 0301 	and.w	r3, r3, #1
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d004      	beq.n	8010a08 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2201      	movs	r2, #1
 8010a02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a04:	2301      	movs	r3, #1
 8010a06:	e009      	b.n	8010a1c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d002      	beq.n	8010a1a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2240      	movs	r2, #64	; 0x40
 8010a18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010a1a:	2300      	movs	r3, #0
  
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bc90      	pop	{r4, r7}
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	20000000 	.word	0x20000000
 8010a2c:	10624dd3 	.word	0x10624dd3

08010a30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010a34:	4904      	ldr	r1, [pc, #16]	; (8010a48 <MX_FATFS_Init+0x18>)
 8010a36:	4805      	ldr	r0, [pc, #20]	; (8010a4c <MX_FATFS_Init+0x1c>)
 8010a38:	f003 fb9c 	bl	8014174 <FATFS_LinkDriver>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	461a      	mov	r2, r3
 8010a40:	4b03      	ldr	r3, [pc, #12]	; (8010a50 <MX_FATFS_Init+0x20>)
 8010a42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010a44:	bf00      	nop
 8010a46:	bd80      	pop	{r7, pc}
 8010a48:	2003fde8 	.word	0x2003fde8
 8010a4c:	08019cb0 	.word	0x08019cb0
 8010a50:	2003fde4 	.word	0x2003fde4

08010a54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010a5e:	f000 f896 	bl	8010b8e <BSP_SD_IsDetected>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d001      	beq.n	8010a6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e012      	b.n	8010a92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010a6c:	480b      	ldr	r0, [pc, #44]	; (8010a9c <BSP_SD_Init+0x48>)
 8010a6e:	f7fb ffa5 	bl	800c9bc <HAL_SD_Init>
 8010a72:	4603      	mov	r3, r0
 8010a74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010a76:	79fb      	ldrb	r3, [r7, #7]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d109      	bne.n	8010a90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010a80:	4806      	ldr	r0, [pc, #24]	; (8010a9c <BSP_SD_Init+0x48>)
 8010a82:	f7fc fd4f 	bl	800d524 <HAL_SD_ConfigWideBusOperation>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d001      	beq.n	8010a90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010a90:	79fb      	ldrb	r3, [r7, #7]
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3708      	adds	r7, #8
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	2003fbe0 	.word	0x2003fbe0

08010aa0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b086      	sub	sp, #24
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	68f9      	ldr	r1, [r7, #12]
 8010ab6:	4806      	ldr	r0, [pc, #24]	; (8010ad0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010ab8:	f7fc f810 	bl	800cadc <HAL_SD_ReadBlocks_DMA>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3718      	adds	r7, #24
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	2003fbe0 	.word	0x2003fbe0

08010ad4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b086      	sub	sp, #24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	60b9      	str	r1, [r7, #8]
 8010ade:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	68f9      	ldr	r1, [r7, #12]
 8010aea:	4806      	ldr	r0, [pc, #24]	; (8010b04 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010aec:	f7fc f8de 	bl	800ccac <HAL_SD_WriteBlocks_DMA>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d001      	beq.n	8010afa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3718      	adds	r7, #24
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	2003fbe0 	.word	0x2003fbe0

08010b08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010b0c:	4805      	ldr	r0, [pc, #20]	; (8010b24 <BSP_SD_GetCardState+0x1c>)
 8010b0e:	f7fc fd85 	bl	800d61c <HAL_SD_GetCardState>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b04      	cmp	r3, #4
 8010b16:	bf14      	ite	ne
 8010b18:	2301      	movne	r3, #1
 8010b1a:	2300      	moveq	r3, #0
 8010b1c:	b2db      	uxtb	r3, r3
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	2003fbe0 	.word	0x2003fbe0

08010b28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010b30:	6879      	ldr	r1, [r7, #4]
 8010b32:	4803      	ldr	r0, [pc, #12]	; (8010b40 <BSP_SD_GetCardInfo+0x18>)
 8010b34:	f7fc fcca 	bl	800d4cc <HAL_SD_GetCardInfo>
}
 8010b38:	bf00      	nop
 8010b3a:	3708      	adds	r7, #8
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	2003fbe0 	.word	0x2003fbe0

08010b44 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010b4c:	f000 f818 	bl	8010b80 <BSP_SD_AbortCallback>
}
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010b60:	f000 f9a8 	bl	8010eb4 <BSP_SD_WriteCpltCallback>
}
 8010b64:	bf00      	nop
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010b74:	f000 f9aa 	bl	8010ecc <BSP_SD_ReadCpltCallback>
}
 8010b78:	bf00      	nop
 8010b7a:	3708      	adds	r7, #8
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}

08010b80 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010b80:	b480      	push	{r7}
 8010b82:	af00      	add	r7, sp, #0

}
 8010b84:	bf00      	nop
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b082      	sub	sp, #8
 8010b92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010b94:	2301      	movs	r3, #1
 8010b96:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010b98:	f000 f80c 	bl	8010bb4 <BSP_PlatformIsDetected>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d101      	bne.n	8010ba6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010ba6:	79fb      	ldrb	r3, [r7, #7]
 8010ba8:	b2db      	uxtb	r3, r3
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
	...

08010bb4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010bc2:	4806      	ldr	r0, [pc, #24]	; (8010bdc <BSP_PlatformIsDetected+0x28>)
 8010bc4:	f7fa f87e 	bl	800acc4 <HAL_GPIO_ReadPin>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d001      	beq.n	8010bd2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	40020000 	.word	0x40020000

08010be0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010be8:	f7f8 fde2 	bl	80097b0 <HAL_GetTick>
 8010bec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010bee:	e006      	b.n	8010bfe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010bf0:	f7ff ff8a 	bl	8010b08 <BSP_SD_GetCardState>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d101      	bne.n	8010bfe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	e009      	b.n	8010c12 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010bfe:	f7f8 fdd7 	bl	80097b0 <HAL_GetTick>
 8010c02:	4602      	mov	r2, r0
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	1ad3      	subs	r3, r2, r3
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d8f0      	bhi.n	8010bf0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
	...

08010c1c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	4603      	mov	r3, r0
 8010c24:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010c26:	4b0b      	ldr	r3, [pc, #44]	; (8010c54 <SD_CheckStatus+0x38>)
 8010c28:	2201      	movs	r2, #1
 8010c2a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010c2c:	f7ff ff6c 	bl	8010b08 <BSP_SD_GetCardState>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d107      	bne.n	8010c46 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010c36:	4b07      	ldr	r3, [pc, #28]	; (8010c54 <SD_CheckStatus+0x38>)
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	f023 0301 	bic.w	r3, r3, #1
 8010c40:	b2da      	uxtb	r2, r3
 8010c42:	4b04      	ldr	r3, [pc, #16]	; (8010c54 <SD_CheckStatus+0x38>)
 8010c44:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010c46:	4b03      	ldr	r3, [pc, #12]	; (8010c54 <SD_CheckStatus+0x38>)
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	b2db      	uxtb	r3, r3
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	20000009 	.word	0x20000009

08010c58 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010c62:	f7ff fef7 	bl	8010a54 <BSP_SD_Init>
 8010c66:	4603      	mov	r3, r0
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d107      	bne.n	8010c7c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010c6c:	79fb      	ldrb	r3, [r7, #7]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7ff ffd4 	bl	8010c1c <SD_CheckStatus>
 8010c74:	4603      	mov	r3, r0
 8010c76:	461a      	mov	r2, r3
 8010c78:	4b04      	ldr	r3, [pc, #16]	; (8010c8c <SD_initialize+0x34>)
 8010c7a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010c7c:	4b03      	ldr	r3, [pc, #12]	; (8010c8c <SD_initialize+0x34>)
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	b2db      	uxtb	r3, r3
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	20000009 	.word	0x20000009

08010c90 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	4603      	mov	r3, r0
 8010c98:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010c9a:	79fb      	ldrb	r3, [r7, #7]
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7ff ffbd 	bl	8010c1c <SD_CheckStatus>
 8010ca2:	4603      	mov	r3, r0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b086      	sub	sp, #24
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	607a      	str	r2, [r7, #4]
 8010cb6:	603b      	str	r3, [r7, #0]
 8010cb8:	4603      	mov	r3, r0
 8010cba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010cc0:	f247 5030 	movw	r0, #30000	; 0x7530
 8010cc4:	f7ff ff8c 	bl	8010be0 <SD_CheckStatusWithTimeout>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	da01      	bge.n	8010cd2 <SD_read+0x26>
  {
    return res;
 8010cce:	7dfb      	ldrb	r3, [r7, #23]
 8010cd0:	e03b      	b.n	8010d4a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	6879      	ldr	r1, [r7, #4]
 8010cd6:	68b8      	ldr	r0, [r7, #8]
 8010cd8:	f7ff fee2 	bl	8010aa0 <BSP_SD_ReadBlocks_DMA>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d132      	bne.n	8010d48 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010ce2:	4b1c      	ldr	r3, [pc, #112]	; (8010d54 <SD_read+0xa8>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010ce8:	f7f8 fd62 	bl	80097b0 <HAL_GetTick>
 8010cec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010cee:	bf00      	nop
 8010cf0:	4b18      	ldr	r3, [pc, #96]	; (8010d54 <SD_read+0xa8>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d108      	bne.n	8010d0a <SD_read+0x5e>
 8010cf8:	f7f8 fd5a 	bl	80097b0 <HAL_GetTick>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	1ad3      	subs	r3, r2, r3
 8010d02:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d9f2      	bls.n	8010cf0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010d0a:	4b12      	ldr	r3, [pc, #72]	; (8010d54 <SD_read+0xa8>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d102      	bne.n	8010d18 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010d12:	2301      	movs	r3, #1
 8010d14:	75fb      	strb	r3, [r7, #23]
 8010d16:	e017      	b.n	8010d48 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010d18:	4b0e      	ldr	r3, [pc, #56]	; (8010d54 <SD_read+0xa8>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010d1e:	f7f8 fd47 	bl	80097b0 <HAL_GetTick>
 8010d22:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d24:	e007      	b.n	8010d36 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d26:	f7ff feef 	bl	8010b08 <BSP_SD_GetCardState>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d102      	bne.n	8010d36 <SD_read+0x8a>
          {
            res = RES_OK;
 8010d30:	2300      	movs	r3, #0
 8010d32:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010d34:	e008      	b.n	8010d48 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d36:	f7f8 fd3b 	bl	80097b0 <HAL_GetTick>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d9ee      	bls.n	8010d26 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3718      	adds	r7, #24
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	2003d47c 	.word	0x2003d47c

08010d58 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b086      	sub	sp, #24
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60b9      	str	r1, [r7, #8]
 8010d60:	607a      	str	r2, [r7, #4]
 8010d62:	603b      	str	r3, [r7, #0]
 8010d64:	4603      	mov	r3, r0
 8010d66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010d6c:	4b24      	ldr	r3, [pc, #144]	; (8010e00 <SD_write+0xa8>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d72:	f247 5030 	movw	r0, #30000	; 0x7530
 8010d76:	f7ff ff33 	bl	8010be0 <SD_CheckStatusWithTimeout>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	da01      	bge.n	8010d84 <SD_write+0x2c>
  {
    return res;
 8010d80:	7dfb      	ldrb	r3, [r7, #23]
 8010d82:	e038      	b.n	8010df6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010d84:	683a      	ldr	r2, [r7, #0]
 8010d86:	6879      	ldr	r1, [r7, #4]
 8010d88:	68b8      	ldr	r0, [r7, #8]
 8010d8a:	f7ff fea3 	bl	8010ad4 <BSP_SD_WriteBlocks_DMA>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d12f      	bne.n	8010df4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010d94:	f7f8 fd0c 	bl	80097b0 <HAL_GetTick>
 8010d98:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d9a:	bf00      	nop
 8010d9c:	4b18      	ldr	r3, [pc, #96]	; (8010e00 <SD_write+0xa8>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d108      	bne.n	8010db6 <SD_write+0x5e>
 8010da4:	f7f8 fd04 	bl	80097b0 <HAL_GetTick>
 8010da8:	4602      	mov	r2, r0
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	f247 522f 	movw	r2, #29999	; 0x752f
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d9f2      	bls.n	8010d9c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010db6:	4b12      	ldr	r3, [pc, #72]	; (8010e00 <SD_write+0xa8>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d102      	bne.n	8010dc4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	75fb      	strb	r3, [r7, #23]
 8010dc2:	e017      	b.n	8010df4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <SD_write+0xa8>)
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010dca:	f7f8 fcf1 	bl	80097b0 <HAL_GetTick>
 8010dce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010dd0:	e007      	b.n	8010de2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010dd2:	f7ff fe99 	bl	8010b08 <BSP_SD_GetCardState>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d102      	bne.n	8010de2 <SD_write+0x8a>
          {
            res = RES_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	75fb      	strb	r3, [r7, #23]
            break;
 8010de0:	e008      	b.n	8010df4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010de2:	f7f8 fce5 	bl	80097b0 <HAL_GetTick>
 8010de6:	4602      	mov	r2, r0
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	1ad3      	subs	r3, r2, r3
 8010dec:	f247 522f 	movw	r2, #29999	; 0x752f
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d9ee      	bls.n	8010dd2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	2003d478 	.word	0x2003d478

08010e04 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08c      	sub	sp, #48	; 0x30
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	603a      	str	r2, [r7, #0]
 8010e0e:	71fb      	strb	r3, [r7, #7]
 8010e10:	460b      	mov	r3, r1
 8010e12:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010e14:	2301      	movs	r3, #1
 8010e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010e1a:	4b25      	ldr	r3, [pc, #148]	; (8010eb0 <SD_ioctl+0xac>)
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	b2db      	uxtb	r3, r3
 8010e20:	f003 0301 	and.w	r3, r3, #1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <SD_ioctl+0x28>
 8010e28:	2303      	movs	r3, #3
 8010e2a:	e03c      	b.n	8010ea6 <SD_ioctl+0xa2>

  switch (cmd)
 8010e2c:	79bb      	ldrb	r3, [r7, #6]
 8010e2e:	2b03      	cmp	r3, #3
 8010e30:	d834      	bhi.n	8010e9c <SD_ioctl+0x98>
 8010e32:	a201      	add	r2, pc, #4	; (adr r2, 8010e38 <SD_ioctl+0x34>)
 8010e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e38:	08010e49 	.word	0x08010e49
 8010e3c:	08010e51 	.word	0x08010e51
 8010e40:	08010e69 	.word	0x08010e69
 8010e44:	08010e83 	.word	0x08010e83
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e4e:	e028      	b.n	8010ea2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e50:	f107 030c 	add.w	r3, r7, #12
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7ff fe67 	bl	8010b28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e66:	e01c      	b.n	8010ea2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e68:	f107 030c 	add.w	r3, r7, #12
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7ff fe5b 	bl	8010b28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e80:	e00f      	b.n	8010ea2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e82:	f107 030c 	add.w	r3, r7, #12
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7ff fe4e 	bl	8010b28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8e:	0a5a      	lsrs	r2, r3, #9
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010e94:	2300      	movs	r3, #0
 8010e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e9a:	e002      	b.n	8010ea2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010e9c:	2304      	movs	r3, #4
 8010e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3730      	adds	r7, #48	; 0x30
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	20000009 	.word	0x20000009

08010eb4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010eb8:	4b03      	ldr	r3, [pc, #12]	; (8010ec8 <BSP_SD_WriteCpltCallback+0x14>)
 8010eba:	2201      	movs	r2, #1
 8010ebc:	601a      	str	r2, [r3, #0]
}
 8010ebe:	bf00      	nop
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr
 8010ec8:	2003d478 	.word	0x2003d478

08010ecc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010ed0:	4b03      	ldr	r3, [pc, #12]	; (8010ee0 <BSP_SD_ReadCpltCallback+0x14>)
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	601a      	str	r2, [r3, #0]
}
 8010ed6:	bf00      	nop
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	2003d47c 	.word	0x2003d47c

08010ee4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b084      	sub	sp, #16
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	4603      	mov	r3, r0
 8010eec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010eee:	79fb      	ldrb	r3, [r7, #7]
 8010ef0:	4a08      	ldr	r2, [pc, #32]	; (8010f14 <disk_status+0x30>)
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4413      	add	r3, r2
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	79fa      	ldrb	r2, [r7, #7]
 8010efc:	4905      	ldr	r1, [pc, #20]	; (8010f14 <disk_status+0x30>)
 8010efe:	440a      	add	r2, r1
 8010f00:	7a12      	ldrb	r2, [r2, #8]
 8010f02:	4610      	mov	r0, r2
 8010f04:	4798      	blx	r3
 8010f06:	4603      	mov	r3, r0
 8010f08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3710      	adds	r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	2003d4a8 	.word	0x2003d4a8

08010f18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	4603      	mov	r3, r0
 8010f20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010f22:	2300      	movs	r3, #0
 8010f24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010f26:	79fb      	ldrb	r3, [r7, #7]
 8010f28:	4a0d      	ldr	r2, [pc, #52]	; (8010f60 <disk_initialize+0x48>)
 8010f2a:	5cd3      	ldrb	r3, [r2, r3]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d111      	bne.n	8010f54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010f30:	79fb      	ldrb	r3, [r7, #7]
 8010f32:	4a0b      	ldr	r2, [pc, #44]	; (8010f60 <disk_initialize+0x48>)
 8010f34:	2101      	movs	r1, #1
 8010f36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010f38:	79fb      	ldrb	r3, [r7, #7]
 8010f3a:	4a09      	ldr	r2, [pc, #36]	; (8010f60 <disk_initialize+0x48>)
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	4413      	add	r3, r2
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	79fa      	ldrb	r2, [r7, #7]
 8010f46:	4906      	ldr	r1, [pc, #24]	; (8010f60 <disk_initialize+0x48>)
 8010f48:	440a      	add	r2, r1
 8010f4a:	7a12      	ldrb	r2, [r2, #8]
 8010f4c:	4610      	mov	r0, r2
 8010f4e:	4798      	blx	r3
 8010f50:	4603      	mov	r3, r0
 8010f52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	2003d4a8 	.word	0x2003d4a8

08010f64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010f64:	b590      	push	{r4, r7, lr}
 8010f66:	b087      	sub	sp, #28
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	60b9      	str	r1, [r7, #8]
 8010f6c:	607a      	str	r2, [r7, #4]
 8010f6e:	603b      	str	r3, [r7, #0]
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
 8010f76:	4a0a      	ldr	r2, [pc, #40]	; (8010fa0 <disk_read+0x3c>)
 8010f78:	009b      	lsls	r3, r3, #2
 8010f7a:	4413      	add	r3, r2
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	689c      	ldr	r4, [r3, #8]
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
 8010f82:	4a07      	ldr	r2, [pc, #28]	; (8010fa0 <disk_read+0x3c>)
 8010f84:	4413      	add	r3, r2
 8010f86:	7a18      	ldrb	r0, [r3, #8]
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	47a0      	blx	r4
 8010f90:	4603      	mov	r3, r0
 8010f92:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	371c      	adds	r7, #28
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd90      	pop	{r4, r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	2003d4a8 	.word	0x2003d4a8

08010fa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010fa4:	b590      	push	{r4, r7, lr}
 8010fa6:	b087      	sub	sp, #28
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60b9      	str	r1, [r7, #8]
 8010fac:	607a      	str	r2, [r7, #4]
 8010fae:	603b      	str	r3, [r7, #0]
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	4a0a      	ldr	r2, [pc, #40]	; (8010fe0 <disk_write+0x3c>)
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	4413      	add	r3, r2
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	68dc      	ldr	r4, [r3, #12]
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
 8010fc2:	4a07      	ldr	r2, [pc, #28]	; (8010fe0 <disk_write+0x3c>)
 8010fc4:	4413      	add	r3, r2
 8010fc6:	7a18      	ldrb	r0, [r3, #8]
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	68b9      	ldr	r1, [r7, #8]
 8010fce:	47a0      	blx	r4
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	371c      	adds	r7, #28
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd90      	pop	{r4, r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	2003d4a8 	.word	0x2003d4a8

08010fe4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	4603      	mov	r3, r0
 8010fec:	603a      	str	r2, [r7, #0]
 8010fee:	71fb      	strb	r3, [r7, #7]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010ff4:	79fb      	ldrb	r3, [r7, #7]
 8010ff6:	4a09      	ldr	r2, [pc, #36]	; (801101c <disk_ioctl+0x38>)
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	4413      	add	r3, r2
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	691b      	ldr	r3, [r3, #16]
 8011000:	79fa      	ldrb	r2, [r7, #7]
 8011002:	4906      	ldr	r1, [pc, #24]	; (801101c <disk_ioctl+0x38>)
 8011004:	440a      	add	r2, r1
 8011006:	7a10      	ldrb	r0, [r2, #8]
 8011008:	79b9      	ldrb	r1, [r7, #6]
 801100a:	683a      	ldr	r2, [r7, #0]
 801100c:	4798      	blx	r3
 801100e:	4603      	mov	r3, r0
 8011010:	73fb      	strb	r3, [r7, #15]
  return res;
 8011012:	7bfb      	ldrb	r3, [r7, #15]
}
 8011014:	4618      	mov	r0, r3
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	2003d4a8 	.word	0x2003d4a8

08011020 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	3301      	adds	r3, #1
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011030:	89fb      	ldrh	r3, [r7, #14]
 8011032:	021b      	lsls	r3, r3, #8
 8011034:	b21a      	sxth	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	b21b      	sxth	r3, r3
 801103c:	4313      	orrs	r3, r2
 801103e:	b21b      	sxth	r3, r3
 8011040:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011042:	89fb      	ldrh	r3, [r7, #14]
}
 8011044:	4618      	mov	r0, r3
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011050:	b480      	push	{r7}
 8011052:	b085      	sub	sp, #20
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	3303      	adds	r3, #3
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	021b      	lsls	r3, r3, #8
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	3202      	adds	r2, #2
 8011068:	7812      	ldrb	r2, [r2, #0]
 801106a:	4313      	orrs	r3, r2
 801106c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	021b      	lsls	r3, r3, #8
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	3201      	adds	r2, #1
 8011076:	7812      	ldrb	r2, [r2, #0]
 8011078:	4313      	orrs	r3, r2
 801107a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	021b      	lsls	r3, r3, #8
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	7812      	ldrb	r2, [r2, #0]
 8011084:	4313      	orrs	r3, r2
 8011086:	60fb      	str	r3, [r7, #12]
	return rv;
 8011088:	68fb      	ldr	r3, [r7, #12]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3714      	adds	r7, #20
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011096:	b480      	push	{r7}
 8011098:	b083      	sub	sp, #12
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	460b      	mov	r3, r1
 80110a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	887a      	ldrh	r2, [r7, #2]
 80110aa:	b2d2      	uxtb	r2, r2
 80110ac:	701a      	strb	r2, [r3, #0]
 80110ae:	887b      	ldrh	r3, [r7, #2]
 80110b0:	0a1b      	lsrs	r3, r3, #8
 80110b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	1c5a      	adds	r2, r3, #1
 80110b8:	607a      	str	r2, [r7, #4]
 80110ba:	887a      	ldrh	r2, [r7, #2]
 80110bc:	b2d2      	uxtb	r2, r2
 80110be:	701a      	strb	r2, [r3, #0]
}
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	1c5a      	adds	r2, r3, #1
 80110da:	607a      	str	r2, [r7, #4]
 80110dc:	683a      	ldr	r2, [r7, #0]
 80110de:	b2d2      	uxtb	r2, r2
 80110e0:	701a      	strb	r2, [r3, #0]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	0a1b      	lsrs	r3, r3, #8
 80110e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	1c5a      	adds	r2, r3, #1
 80110ec:	607a      	str	r2, [r7, #4]
 80110ee:	683a      	ldr	r2, [r7, #0]
 80110f0:	b2d2      	uxtb	r2, r2
 80110f2:	701a      	strb	r2, [r3, #0]
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	0a1b      	lsrs	r3, r3, #8
 80110f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	1c5a      	adds	r2, r3, #1
 80110fe:	607a      	str	r2, [r7, #4]
 8011100:	683a      	ldr	r2, [r7, #0]
 8011102:	b2d2      	uxtb	r2, r2
 8011104:	701a      	strb	r2, [r3, #0]
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	0a1b      	lsrs	r3, r3, #8
 801110a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	1c5a      	adds	r2, r3, #1
 8011110:	607a      	str	r2, [r7, #4]
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	b2d2      	uxtb	r2, r2
 8011116:	701a      	strb	r2, [r3, #0]
}
 8011118:	bf00      	nop
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr

08011124 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011124:	b480      	push	{r7}
 8011126:	b087      	sub	sp, #28
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00d      	beq.n	801115a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801113e:	693a      	ldr	r2, [r7, #16]
 8011140:	1c53      	adds	r3, r2, #1
 8011142:	613b      	str	r3, [r7, #16]
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	1c59      	adds	r1, r3, #1
 8011148:	6179      	str	r1, [r7, #20]
 801114a:	7812      	ldrb	r2, [r2, #0]
 801114c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	3b01      	subs	r3, #1
 8011152:	607b      	str	r3, [r7, #4]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d1f1      	bne.n	801113e <mem_cpy+0x1a>
	}
}
 801115a:	bf00      	nop
 801115c:	371c      	adds	r7, #28
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr

08011166 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011166:	b480      	push	{r7}
 8011168:	b087      	sub	sp, #28
 801116a:	af00      	add	r7, sp, #0
 801116c:	60f8      	str	r0, [r7, #12]
 801116e:	60b9      	str	r1, [r7, #8]
 8011170:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	1c5a      	adds	r2, r3, #1
 801117a:	617a      	str	r2, [r7, #20]
 801117c:	68ba      	ldr	r2, [r7, #8]
 801117e:	b2d2      	uxtb	r2, r2
 8011180:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	3b01      	subs	r3, #1
 8011186:	607b      	str	r3, [r7, #4]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d1f3      	bne.n	8011176 <mem_set+0x10>
}
 801118e:	bf00      	nop
 8011190:	371c      	adds	r7, #28
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr

0801119a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801119a:	b480      	push	{r7}
 801119c:	b089      	sub	sp, #36	; 0x24
 801119e:	af00      	add	r7, sp, #0
 80111a0:	60f8      	str	r0, [r7, #12]
 80111a2:	60b9      	str	r1, [r7, #8]
 80111a4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	61fb      	str	r3, [r7, #28]
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	1c5a      	adds	r2, r3, #1
 80111b6:	61fa      	str	r2, [r7, #28]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	4619      	mov	r1, r3
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	1c5a      	adds	r2, r3, #1
 80111c0:	61ba      	str	r2, [r7, #24]
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	1acb      	subs	r3, r1, r3
 80111c6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	3b01      	subs	r3, #1
 80111cc:	607b      	str	r3, [r7, #4]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <mem_cmp+0x40>
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d0eb      	beq.n	80111b2 <mem_cmp+0x18>

	return r;
 80111da:	697b      	ldr	r3, [r7, #20]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3724      	adds	r7, #36	; 0x24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80111f2:	e002      	b.n	80111fa <chk_chr+0x12>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	3301      	adds	r3, #1
 80111f8:	607b      	str	r3, [r7, #4]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d005      	beq.n	801120e <chk_chr+0x26>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	461a      	mov	r2, r3
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	4293      	cmp	r3, r2
 801120c:	d1f2      	bne.n	80111f4 <chk_chr+0xc>
	return *str;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	781b      	ldrb	r3, [r3, #0]
}
 8011212:	4618      	mov	r0, r3
 8011214:	370c      	adds	r7, #12
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
	...

08011220 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011220:	b480      	push	{r7}
 8011222:	b085      	sub	sp, #20
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801122a:	2300      	movs	r3, #0
 801122c:	60bb      	str	r3, [r7, #8]
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	60fb      	str	r3, [r7, #12]
 8011232:	e029      	b.n	8011288 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011234:	4a27      	ldr	r2, [pc, #156]	; (80112d4 <chk_lock+0xb4>)
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	011b      	lsls	r3, r3, #4
 801123a:	4413      	add	r3, r2
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d01d      	beq.n	801127e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011242:	4a24      	ldr	r2, [pc, #144]	; (80112d4 <chk_lock+0xb4>)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	011b      	lsls	r3, r3, #4
 8011248:	4413      	add	r3, r2
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	429a      	cmp	r2, r3
 8011252:	d116      	bne.n	8011282 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011254:	4a1f      	ldr	r2, [pc, #124]	; (80112d4 <chk_lock+0xb4>)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	011b      	lsls	r3, r3, #4
 801125a:	4413      	add	r3, r2
 801125c:	3304      	adds	r3, #4
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011264:	429a      	cmp	r2, r3
 8011266:	d10c      	bne.n	8011282 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011268:	4a1a      	ldr	r2, [pc, #104]	; (80112d4 <chk_lock+0xb4>)
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	011b      	lsls	r3, r3, #4
 801126e:	4413      	add	r3, r2
 8011270:	3308      	adds	r3, #8
 8011272:	681a      	ldr	r2, [r3, #0]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011278:	429a      	cmp	r2, r3
 801127a:	d102      	bne.n	8011282 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801127c:	e007      	b.n	801128e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801127e:	2301      	movs	r3, #1
 8011280:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	3301      	adds	r3, #1
 8011286:	60fb      	str	r3, [r7, #12]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2b01      	cmp	r3, #1
 801128c:	d9d2      	bls.n	8011234 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2b02      	cmp	r3, #2
 8011292:	d109      	bne.n	80112a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <chk_lock+0x80>
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	2b02      	cmp	r3, #2
 801129e:	d101      	bne.n	80112a4 <chk_lock+0x84>
 80112a0:	2300      	movs	r3, #0
 80112a2:	e010      	b.n	80112c6 <chk_lock+0xa6>
 80112a4:	2312      	movs	r3, #18
 80112a6:	e00e      	b.n	80112c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d108      	bne.n	80112c0 <chk_lock+0xa0>
 80112ae:	4a09      	ldr	r2, [pc, #36]	; (80112d4 <chk_lock+0xb4>)
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	011b      	lsls	r3, r3, #4
 80112b4:	4413      	add	r3, r2
 80112b6:	330c      	adds	r3, #12
 80112b8:	881b      	ldrh	r3, [r3, #0]
 80112ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112be:	d101      	bne.n	80112c4 <chk_lock+0xa4>
 80112c0:	2310      	movs	r3, #16
 80112c2:	e000      	b.n	80112c6 <chk_lock+0xa6>
 80112c4:	2300      	movs	r3, #0
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3714      	adds	r7, #20
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	2003d488 	.word	0x2003d488

080112d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80112de:	2300      	movs	r3, #0
 80112e0:	607b      	str	r3, [r7, #4]
 80112e2:	e002      	b.n	80112ea <enq_lock+0x12>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	3301      	adds	r3, #1
 80112e8:	607b      	str	r3, [r7, #4]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	d806      	bhi.n	80112fe <enq_lock+0x26>
 80112f0:	4a09      	ldr	r2, [pc, #36]	; (8011318 <enq_lock+0x40>)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	011b      	lsls	r3, r3, #4
 80112f6:	4413      	add	r3, r2
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d1f2      	bne.n	80112e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2b02      	cmp	r3, #2
 8011302:	bf14      	ite	ne
 8011304:	2301      	movne	r3, #1
 8011306:	2300      	moveq	r3, #0
 8011308:	b2db      	uxtb	r3, r3
}
 801130a:	4618      	mov	r0, r3
 801130c:	370c      	adds	r7, #12
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop
 8011318:	2003d488 	.word	0x2003d488

0801131c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801131c:	b480      	push	{r7}
 801131e:	b085      	sub	sp, #20
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011326:	2300      	movs	r3, #0
 8011328:	60fb      	str	r3, [r7, #12]
 801132a:	e01f      	b.n	801136c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801132c:	4a41      	ldr	r2, [pc, #260]	; (8011434 <inc_lock+0x118>)
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	011b      	lsls	r3, r3, #4
 8011332:	4413      	add	r3, r2
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d113      	bne.n	8011366 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801133e:	4a3d      	ldr	r2, [pc, #244]	; (8011434 <inc_lock+0x118>)
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	011b      	lsls	r3, r3, #4
 8011344:	4413      	add	r3, r2
 8011346:	3304      	adds	r3, #4
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801134e:	429a      	cmp	r2, r3
 8011350:	d109      	bne.n	8011366 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011352:	4a38      	ldr	r2, [pc, #224]	; (8011434 <inc_lock+0x118>)
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	011b      	lsls	r3, r3, #4
 8011358:	4413      	add	r3, r2
 801135a:	3308      	adds	r3, #8
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011362:	429a      	cmp	r2, r3
 8011364:	d006      	beq.n	8011374 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	3301      	adds	r3, #1
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	2b01      	cmp	r3, #1
 8011370:	d9dc      	bls.n	801132c <inc_lock+0x10>
 8011372:	e000      	b.n	8011376 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011374:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b02      	cmp	r3, #2
 801137a:	d132      	bne.n	80113e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801137c:	2300      	movs	r3, #0
 801137e:	60fb      	str	r3, [r7, #12]
 8011380:	e002      	b.n	8011388 <inc_lock+0x6c>
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	3301      	adds	r3, #1
 8011386:	60fb      	str	r3, [r7, #12]
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2b01      	cmp	r3, #1
 801138c:	d806      	bhi.n	801139c <inc_lock+0x80>
 801138e:	4a29      	ldr	r2, [pc, #164]	; (8011434 <inc_lock+0x118>)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	011b      	lsls	r3, r3, #4
 8011394:	4413      	add	r3, r2
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d1f2      	bne.n	8011382 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2b02      	cmp	r3, #2
 80113a0:	d101      	bne.n	80113a6 <inc_lock+0x8a>
 80113a2:	2300      	movs	r3, #0
 80113a4:	e040      	b.n	8011428 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	4922      	ldr	r1, [pc, #136]	; (8011434 <inc_lock+0x118>)
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	011b      	lsls	r3, r3, #4
 80113b0:	440b      	add	r3, r1
 80113b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	689a      	ldr	r2, [r3, #8]
 80113b8:	491e      	ldr	r1, [pc, #120]	; (8011434 <inc_lock+0x118>)
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	011b      	lsls	r3, r3, #4
 80113be:	440b      	add	r3, r1
 80113c0:	3304      	adds	r3, #4
 80113c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	695a      	ldr	r2, [r3, #20]
 80113c8:	491a      	ldr	r1, [pc, #104]	; (8011434 <inc_lock+0x118>)
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	011b      	lsls	r3, r3, #4
 80113ce:	440b      	add	r3, r1
 80113d0:	3308      	adds	r3, #8
 80113d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80113d4:	4a17      	ldr	r2, [pc, #92]	; (8011434 <inc_lock+0x118>)
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	011b      	lsls	r3, r3, #4
 80113da:	4413      	add	r3, r2
 80113dc:	330c      	adds	r3, #12
 80113de:	2200      	movs	r2, #0
 80113e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d009      	beq.n	80113fc <inc_lock+0xe0>
 80113e8:	4a12      	ldr	r2, [pc, #72]	; (8011434 <inc_lock+0x118>)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	011b      	lsls	r3, r3, #4
 80113ee:	4413      	add	r3, r2
 80113f0:	330c      	adds	r3, #12
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d001      	beq.n	80113fc <inc_lock+0xe0>
 80113f8:	2300      	movs	r3, #0
 80113fa:	e015      	b.n	8011428 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d108      	bne.n	8011414 <inc_lock+0xf8>
 8011402:	4a0c      	ldr	r2, [pc, #48]	; (8011434 <inc_lock+0x118>)
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	4413      	add	r3, r2
 801140a:	330c      	adds	r3, #12
 801140c:	881b      	ldrh	r3, [r3, #0]
 801140e:	3301      	adds	r3, #1
 8011410:	b29a      	uxth	r2, r3
 8011412:	e001      	b.n	8011418 <inc_lock+0xfc>
 8011414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011418:	4906      	ldr	r1, [pc, #24]	; (8011434 <inc_lock+0x118>)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	011b      	lsls	r3, r3, #4
 801141e:	440b      	add	r3, r1
 8011420:	330c      	adds	r3, #12
 8011422:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	3301      	adds	r3, #1
}
 8011428:	4618      	mov	r0, r3
 801142a:	3714      	adds	r7, #20
 801142c:	46bd      	mov	sp, r7
 801142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011432:	4770      	bx	lr
 8011434:	2003d488 	.word	0x2003d488

08011438 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011438:	b480      	push	{r7}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	3b01      	subs	r3, #1
 8011444:	607b      	str	r3, [r7, #4]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b01      	cmp	r3, #1
 801144a:	d825      	bhi.n	8011498 <dec_lock+0x60>
		n = Files[i].ctr;
 801144c:	4a17      	ldr	r2, [pc, #92]	; (80114ac <dec_lock+0x74>)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	011b      	lsls	r3, r3, #4
 8011452:	4413      	add	r3, r2
 8011454:	330c      	adds	r3, #12
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801145a:	89fb      	ldrh	r3, [r7, #14]
 801145c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011460:	d101      	bne.n	8011466 <dec_lock+0x2e>
 8011462:	2300      	movs	r3, #0
 8011464:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011466:	89fb      	ldrh	r3, [r7, #14]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d002      	beq.n	8011472 <dec_lock+0x3a>
 801146c:	89fb      	ldrh	r3, [r7, #14]
 801146e:	3b01      	subs	r3, #1
 8011470:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011472:	4a0e      	ldr	r2, [pc, #56]	; (80114ac <dec_lock+0x74>)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	011b      	lsls	r3, r3, #4
 8011478:	4413      	add	r3, r2
 801147a:	330c      	adds	r3, #12
 801147c:	89fa      	ldrh	r2, [r7, #14]
 801147e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011480:	89fb      	ldrh	r3, [r7, #14]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d105      	bne.n	8011492 <dec_lock+0x5a>
 8011486:	4a09      	ldr	r2, [pc, #36]	; (80114ac <dec_lock+0x74>)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	011b      	lsls	r3, r3, #4
 801148c:	4413      	add	r3, r2
 801148e:	2200      	movs	r2, #0
 8011490:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011492:	2300      	movs	r3, #0
 8011494:	737b      	strb	r3, [r7, #13]
 8011496:	e001      	b.n	801149c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011498:	2302      	movs	r3, #2
 801149a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801149c:	7b7b      	ldrb	r3, [r7, #13]
}
 801149e:	4618      	mov	r0, r3
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	2003d488 	.word	0x2003d488

080114b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b085      	sub	sp, #20
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80114b8:	2300      	movs	r3, #0
 80114ba:	60fb      	str	r3, [r7, #12]
 80114bc:	e010      	b.n	80114e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80114be:	4a0d      	ldr	r2, [pc, #52]	; (80114f4 <clear_lock+0x44>)
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	011b      	lsls	r3, r3, #4
 80114c4:	4413      	add	r3, r2
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d105      	bne.n	80114da <clear_lock+0x2a>
 80114ce:	4a09      	ldr	r2, [pc, #36]	; (80114f4 <clear_lock+0x44>)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	011b      	lsls	r3, r3, #4
 80114d4:	4413      	add	r3, r2
 80114d6:	2200      	movs	r2, #0
 80114d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	3301      	adds	r3, #1
 80114de:	60fb      	str	r3, [r7, #12]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d9eb      	bls.n	80114be <clear_lock+0xe>
	}
}
 80114e6:	bf00      	nop
 80114e8:	3714      	adds	r7, #20
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	2003d488 	.word	0x2003d488

080114f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	78db      	ldrb	r3, [r3, #3]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d034      	beq.n	8011576 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011510:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	7858      	ldrb	r0, [r3, #1]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801151c:	2301      	movs	r3, #1
 801151e:	697a      	ldr	r2, [r7, #20]
 8011520:	f7ff fd40 	bl	8010fa4 <disk_write>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d002      	beq.n	8011530 <sync_window+0x38>
			res = FR_DISK_ERR;
 801152a:	2301      	movs	r3, #1
 801152c:	73fb      	strb	r3, [r7, #15]
 801152e:	e022      	b.n	8011576 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801153a:	697a      	ldr	r2, [r7, #20]
 801153c:	1ad2      	subs	r2, r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a1b      	ldr	r3, [r3, #32]
 8011542:	429a      	cmp	r2, r3
 8011544:	d217      	bcs.n	8011576 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	789b      	ldrb	r3, [r3, #2]
 801154a:	613b      	str	r3, [r7, #16]
 801154c:	e010      	b.n	8011570 <sync_window+0x78>
					wsect += fs->fsize;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6a1b      	ldr	r3, [r3, #32]
 8011552:	697a      	ldr	r2, [r7, #20]
 8011554:	4413      	add	r3, r2
 8011556:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7858      	ldrb	r0, [r3, #1]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011562:	2301      	movs	r3, #1
 8011564:	697a      	ldr	r2, [r7, #20]
 8011566:	f7ff fd1d 	bl	8010fa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	3b01      	subs	r3, #1
 801156e:	613b      	str	r3, [r7, #16]
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	2b01      	cmp	r3, #1
 8011574:	d8eb      	bhi.n	801154e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011576:	7bfb      	ldrb	r3, [r7, #15]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3718      	adds	r7, #24
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801158a:	2300      	movs	r3, #0
 801158c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	429a      	cmp	r2, r3
 8011596:	d01b      	beq.n	80115d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff ffad 	bl	80114f8 <sync_window>
 801159e:	4603      	mov	r3, r0
 80115a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80115a2:	7bfb      	ldrb	r3, [r7, #15]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d113      	bne.n	80115d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	7858      	ldrb	r0, [r3, #1]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115b2:	2301      	movs	r3, #1
 80115b4:	683a      	ldr	r2, [r7, #0]
 80115b6:	f7ff fcd5 	bl	8010f64 <disk_read>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d004      	beq.n	80115ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295
 80115c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80115c6:	2301      	movs	r3, #1
 80115c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	683a      	ldr	r2, [r7, #0]
 80115ce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80115d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
	...

080115dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b084      	sub	sp, #16
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7ff ff87 	bl	80114f8 <sync_window>
 80115ea:	4603      	mov	r3, r0
 80115ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80115ee:	7bfb      	ldrb	r3, [r7, #15]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d159      	bne.n	80116a8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	2b03      	cmp	r3, #3
 80115fa:	d149      	bne.n	8011690 <sync_fs+0xb4>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	791b      	ldrb	r3, [r3, #4]
 8011600:	2b01      	cmp	r3, #1
 8011602:	d145      	bne.n	8011690 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	899b      	ldrh	r3, [r3, #12]
 801160e:	461a      	mov	r2, r3
 8011610:	2100      	movs	r1, #0
 8011612:	f7ff fda8 	bl	8011166 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	3338      	adds	r3, #56	; 0x38
 801161a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801161e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff fd37 	bl	8011096 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	3338      	adds	r3, #56	; 0x38
 801162c:	4921      	ldr	r1, [pc, #132]	; (80116b4 <sync_fs+0xd8>)
 801162e:	4618      	mov	r0, r3
 8011630:	f7ff fd4c 	bl	80110cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	3338      	adds	r3, #56	; 0x38
 8011638:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801163c:	491e      	ldr	r1, [pc, #120]	; (80116b8 <sync_fs+0xdc>)
 801163e:	4618      	mov	r0, r3
 8011640:	f7ff fd44 	bl	80110cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	3338      	adds	r3, #56	; 0x38
 8011648:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	695b      	ldr	r3, [r3, #20]
 8011650:	4619      	mov	r1, r3
 8011652:	4610      	mov	r0, r2
 8011654:	f7ff fd3a 	bl	80110cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	3338      	adds	r3, #56	; 0x38
 801165c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	691b      	ldr	r3, [r3, #16]
 8011664:	4619      	mov	r1, r3
 8011666:	4610      	mov	r0, r2
 8011668:	f7ff fd30 	bl	80110cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	7858      	ldrb	r0, [r3, #1]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011684:	2301      	movs	r3, #1
 8011686:	f7ff fc8d 	bl	8010fa4 <disk_write>
			fs->fsi_flag = 0;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2200      	movs	r2, #0
 801168e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	785b      	ldrb	r3, [r3, #1]
 8011694:	2200      	movs	r2, #0
 8011696:	2100      	movs	r1, #0
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff fca3 	bl	8010fe4 <disk_ioctl>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d001      	beq.n	80116a8 <sync_fs+0xcc>
 80116a4:	2301      	movs	r3, #1
 80116a6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80116a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	41615252 	.word	0x41615252
 80116b8:	61417272 	.word	0x61417272

080116bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80116bc:	b480      	push	{r7}
 80116be:	b083      	sub	sp, #12
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	3b02      	subs	r3, #2
 80116ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	69db      	ldr	r3, [r3, #28]
 80116d0:	3b02      	subs	r3, #2
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d301      	bcc.n	80116dc <clust2sect+0x20>
 80116d8:	2300      	movs	r3, #0
 80116da:	e008      	b.n	80116ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	895b      	ldrh	r3, [r3, #10]
 80116e0:	461a      	mov	r2, r3
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	fb03 f202 	mul.w	r2, r3, r2
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ec:	4413      	add	r3, r2
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	370c      	adds	r7, #12
 80116f2:	46bd      	mov	sp, r7
 80116f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f8:	4770      	bx	lr

080116fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80116fa:	b580      	push	{r7, lr}
 80116fc:	b086      	sub	sp, #24
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
 8011702:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	2b01      	cmp	r3, #1
 801170e:	d904      	bls.n	801171a <get_fat+0x20>
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	69db      	ldr	r3, [r3, #28]
 8011714:	683a      	ldr	r2, [r7, #0]
 8011716:	429a      	cmp	r2, r3
 8011718:	d302      	bcc.n	8011720 <get_fat+0x26>
		val = 1;	/* Internal error */
 801171a:	2301      	movs	r3, #1
 801171c:	617b      	str	r3, [r7, #20]
 801171e:	e0b7      	b.n	8011890 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011720:	f04f 33ff 	mov.w	r3, #4294967295
 8011724:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	2b02      	cmp	r3, #2
 801172c:	d05a      	beq.n	80117e4 <get_fat+0xea>
 801172e:	2b03      	cmp	r3, #3
 8011730:	d07d      	beq.n	801182e <get_fat+0x134>
 8011732:	2b01      	cmp	r3, #1
 8011734:	f040 80a2 	bne.w	801187c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	60fb      	str	r3, [r7, #12]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	085b      	lsrs	r3, r3, #1
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	4413      	add	r3, r2
 8011744:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	899b      	ldrh	r3, [r3, #12]
 801174e:	4619      	mov	r1, r3
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	fbb3 f3f1 	udiv	r3, r3, r1
 8011756:	4413      	add	r3, r2
 8011758:	4619      	mov	r1, r3
 801175a:	6938      	ldr	r0, [r7, #16]
 801175c:	f7ff ff10 	bl	8011580 <move_window>
 8011760:	4603      	mov	r3, r0
 8011762:	2b00      	cmp	r3, #0
 8011764:	f040 808d 	bne.w	8011882 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	60fa      	str	r2, [r7, #12]
 801176e:	693a      	ldr	r2, [r7, #16]
 8011770:	8992      	ldrh	r2, [r2, #12]
 8011772:	fbb3 f1f2 	udiv	r1, r3, r2
 8011776:	fb02 f201 	mul.w	r2, r2, r1
 801177a:	1a9b      	subs	r3, r3, r2
 801177c:	693a      	ldr	r2, [r7, #16]
 801177e:	4413      	add	r3, r2
 8011780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011784:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	899b      	ldrh	r3, [r3, #12]
 801178e:	4619      	mov	r1, r3
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	fbb3 f3f1 	udiv	r3, r3, r1
 8011796:	4413      	add	r3, r2
 8011798:	4619      	mov	r1, r3
 801179a:	6938      	ldr	r0, [r7, #16]
 801179c:	f7ff fef0 	bl	8011580 <move_window>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d16f      	bne.n	8011886 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	899b      	ldrh	r3, [r3, #12]
 80117aa:	461a      	mov	r2, r3
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80117b2:	fb02 f201 	mul.w	r2, r2, r1
 80117b6:	1a9b      	subs	r3, r3, r2
 80117b8:	693a      	ldr	r2, [r7, #16]
 80117ba:	4413      	add	r3, r2
 80117bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80117c0:	021b      	lsls	r3, r3, #8
 80117c2:	461a      	mov	r2, r3
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	4313      	orrs	r3, r2
 80117c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	f003 0301 	and.w	r3, r3, #1
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <get_fat+0xe0>
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	091b      	lsrs	r3, r3, #4
 80117d8:	e002      	b.n	80117e0 <get_fat+0xe6>
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80117e0:	617b      	str	r3, [r7, #20]
			break;
 80117e2:	e055      	b.n	8011890 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	899b      	ldrh	r3, [r3, #12]
 80117ec:	085b      	lsrs	r3, r3, #1
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	4619      	mov	r1, r3
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80117f8:	4413      	add	r3, r2
 80117fa:	4619      	mov	r1, r3
 80117fc:	6938      	ldr	r0, [r7, #16]
 80117fe:	f7ff febf 	bl	8011580 <move_window>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d140      	bne.n	801188a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	693a      	ldr	r2, [r7, #16]
 8011814:	8992      	ldrh	r2, [r2, #12]
 8011816:	fbb3 f0f2 	udiv	r0, r3, r2
 801181a:	fb02 f200 	mul.w	r2, r2, r0
 801181e:	1a9b      	subs	r3, r3, r2
 8011820:	440b      	add	r3, r1
 8011822:	4618      	mov	r0, r3
 8011824:	f7ff fbfc 	bl	8011020 <ld_word>
 8011828:	4603      	mov	r3, r0
 801182a:	617b      	str	r3, [r7, #20]
			break;
 801182c:	e030      	b.n	8011890 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	899b      	ldrh	r3, [r3, #12]
 8011836:	089b      	lsrs	r3, r3, #2
 8011838:	b29b      	uxth	r3, r3
 801183a:	4619      	mov	r1, r3
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011842:	4413      	add	r3, r2
 8011844:	4619      	mov	r1, r3
 8011846:	6938      	ldr	r0, [r7, #16]
 8011848:	f7ff fe9a 	bl	8011580 <move_window>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	d11d      	bne.n	801188e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	693a      	ldr	r2, [r7, #16]
 801185e:	8992      	ldrh	r2, [r2, #12]
 8011860:	fbb3 f0f2 	udiv	r0, r3, r2
 8011864:	fb02 f200 	mul.w	r2, r2, r0
 8011868:	1a9b      	subs	r3, r3, r2
 801186a:	440b      	add	r3, r1
 801186c:	4618      	mov	r0, r3
 801186e:	f7ff fbef 	bl	8011050 <ld_dword>
 8011872:	4603      	mov	r3, r0
 8011874:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011878:	617b      	str	r3, [r7, #20]
			break;
 801187a:	e009      	b.n	8011890 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801187c:	2301      	movs	r3, #1
 801187e:	617b      	str	r3, [r7, #20]
 8011880:	e006      	b.n	8011890 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011882:	bf00      	nop
 8011884:	e004      	b.n	8011890 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011886:	bf00      	nop
 8011888:	e002      	b.n	8011890 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801188a:	bf00      	nop
 801188c:	e000      	b.n	8011890 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801188e:	bf00      	nop
		}
	}

	return val;
 8011890:	697b      	ldr	r3, [r7, #20]
}
 8011892:	4618      	mov	r0, r3
 8011894:	3718      	adds	r7, #24
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}

0801189a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801189a:	b590      	push	{r4, r7, lr}
 801189c:	b089      	sub	sp, #36	; 0x24
 801189e:	af00      	add	r7, sp, #0
 80118a0:	60f8      	str	r0, [r7, #12]
 80118a2:	60b9      	str	r1, [r7, #8]
 80118a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80118a6:	2302      	movs	r3, #2
 80118a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	f240 8106 	bls.w	8011abe <put_fat+0x224>
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	69db      	ldr	r3, [r3, #28]
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	429a      	cmp	r2, r3
 80118ba:	f080 8100 	bcs.w	8011abe <put_fat+0x224>
		switch (fs->fs_type) {
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	2b02      	cmp	r3, #2
 80118c4:	f000 8088 	beq.w	80119d8 <put_fat+0x13e>
 80118c8:	2b03      	cmp	r3, #3
 80118ca:	f000 80b0 	beq.w	8011a2e <put_fat+0x194>
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	f040 80f5 	bne.w	8011abe <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	61bb      	str	r3, [r7, #24]
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	085b      	lsrs	r3, r3, #1
 80118dc:	69ba      	ldr	r2, [r7, #24]
 80118de:	4413      	add	r3, r2
 80118e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	899b      	ldrh	r3, [r3, #12]
 80118ea:	4619      	mov	r1, r3
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80118f2:	4413      	add	r3, r2
 80118f4:	4619      	mov	r1, r3
 80118f6:	68f8      	ldr	r0, [r7, #12]
 80118f8:	f7ff fe42 	bl	8011580 <move_window>
 80118fc:	4603      	mov	r3, r0
 80118fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011900:	7ffb      	ldrb	r3, [r7, #31]
 8011902:	2b00      	cmp	r3, #0
 8011904:	f040 80d4 	bne.w	8011ab0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	1c5a      	adds	r2, r3, #1
 8011912:	61ba      	str	r2, [r7, #24]
 8011914:	68fa      	ldr	r2, [r7, #12]
 8011916:	8992      	ldrh	r2, [r2, #12]
 8011918:	fbb3 f0f2 	udiv	r0, r3, r2
 801191c:	fb02 f200 	mul.w	r2, r2, r0
 8011920:	1a9b      	subs	r3, r3, r2
 8011922:	440b      	add	r3, r1
 8011924:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	f003 0301 	and.w	r3, r3, #1
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00d      	beq.n	801194c <put_fat+0xb2>
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	b25b      	sxtb	r3, r3
 8011936:	f003 030f 	and.w	r3, r3, #15
 801193a:	b25a      	sxtb	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	b2db      	uxtb	r3, r3
 8011940:	011b      	lsls	r3, r3, #4
 8011942:	b25b      	sxtb	r3, r3
 8011944:	4313      	orrs	r3, r2
 8011946:	b25b      	sxtb	r3, r3
 8011948:	b2db      	uxtb	r3, r3
 801194a:	e001      	b.n	8011950 <put_fat+0xb6>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	b2db      	uxtb	r3, r3
 8011950:	697a      	ldr	r2, [r7, #20]
 8011952:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	2201      	movs	r2, #1
 8011958:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	899b      	ldrh	r3, [r3, #12]
 8011962:	4619      	mov	r1, r3
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	fbb3 f3f1 	udiv	r3, r3, r1
 801196a:	4413      	add	r3, r2
 801196c:	4619      	mov	r1, r3
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	f7ff fe06 	bl	8011580 <move_window>
 8011974:	4603      	mov	r3, r0
 8011976:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011978:	7ffb      	ldrb	r3, [r7, #31]
 801197a:	2b00      	cmp	r3, #0
 801197c:	f040 809a 	bne.w	8011ab4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	899b      	ldrh	r3, [r3, #12]
 801198a:	461a      	mov	r2, r3
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011992:	fb02 f200 	mul.w	r2, r2, r0
 8011996:	1a9b      	subs	r3, r3, r2
 8011998:	440b      	add	r3, r1
 801199a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	f003 0301 	and.w	r3, r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d003      	beq.n	80119ae <put_fat+0x114>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	091b      	lsrs	r3, r3, #4
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	e00e      	b.n	80119cc <put_fat+0x132>
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	781b      	ldrb	r3, [r3, #0]
 80119b2:	b25b      	sxtb	r3, r3
 80119b4:	f023 030f 	bic.w	r3, r3, #15
 80119b8:	b25a      	sxtb	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	0a1b      	lsrs	r3, r3, #8
 80119be:	b25b      	sxtb	r3, r3
 80119c0:	f003 030f 	and.w	r3, r3, #15
 80119c4:	b25b      	sxtb	r3, r3
 80119c6:	4313      	orrs	r3, r2
 80119c8:	b25b      	sxtb	r3, r3
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	697a      	ldr	r2, [r7, #20]
 80119ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2201      	movs	r2, #1
 80119d4:	70da      	strb	r2, [r3, #3]
			break;
 80119d6:	e072      	b.n	8011abe <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	899b      	ldrh	r3, [r3, #12]
 80119e0:	085b      	lsrs	r3, r3, #1
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	4619      	mov	r1, r3
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80119ec:	4413      	add	r3, r2
 80119ee:	4619      	mov	r1, r3
 80119f0:	68f8      	ldr	r0, [r7, #12]
 80119f2:	f7ff fdc5 	bl	8011580 <move_window>
 80119f6:	4603      	mov	r3, r0
 80119f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119fa:	7ffb      	ldrb	r3, [r7, #31]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d15b      	bne.n	8011ab8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	8992      	ldrh	r2, [r2, #12]
 8011a0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a12:	fb02 f200 	mul.w	r2, r2, r0
 8011a16:	1a9b      	subs	r3, r3, r2
 8011a18:	440b      	add	r3, r1
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	b292      	uxth	r2, r2
 8011a1e:	4611      	mov	r1, r2
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7ff fb38 	bl	8011096 <st_word>
			fs->wflag = 1;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2201      	movs	r2, #1
 8011a2a:	70da      	strb	r2, [r3, #3]
			break;
 8011a2c:	e047      	b.n	8011abe <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	899b      	ldrh	r3, [r3, #12]
 8011a36:	089b      	lsrs	r3, r3, #2
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	4619      	mov	r1, r3
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a42:	4413      	add	r3, r2
 8011a44:	4619      	mov	r1, r3
 8011a46:	68f8      	ldr	r0, [r7, #12]
 8011a48:	f7ff fd9a 	bl	8011580 <move_window>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a50:	7ffb      	ldrb	r3, [r7, #31]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d132      	bne.n	8011abc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	8992      	ldrh	r2, [r2, #12]
 8011a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a6e:	fb02 f200 	mul.w	r2, r2, r0
 8011a72:	1a9b      	subs	r3, r3, r2
 8011a74:	440b      	add	r3, r1
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7ff faea 	bl	8011050 <ld_dword>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011a82:	4323      	orrs	r3, r4
 8011a84:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	68fa      	ldr	r2, [r7, #12]
 8011a92:	8992      	ldrh	r2, [r2, #12]
 8011a94:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a98:	fb02 f200 	mul.w	r2, r2, r0
 8011a9c:	1a9b      	subs	r3, r3, r2
 8011a9e:	440b      	add	r3, r1
 8011aa0:	6879      	ldr	r1, [r7, #4]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7ff fb12 	bl	80110cc <st_dword>
			fs->wflag = 1;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2201      	movs	r2, #1
 8011aac:	70da      	strb	r2, [r3, #3]
			break;
 8011aae:	e006      	b.n	8011abe <put_fat+0x224>
			if (res != FR_OK) break;
 8011ab0:	bf00      	nop
 8011ab2:	e004      	b.n	8011abe <put_fat+0x224>
			if (res != FR_OK) break;
 8011ab4:	bf00      	nop
 8011ab6:	e002      	b.n	8011abe <put_fat+0x224>
			if (res != FR_OK) break;
 8011ab8:	bf00      	nop
 8011aba:	e000      	b.n	8011abe <put_fat+0x224>
			if (res != FR_OK) break;
 8011abc:	bf00      	nop
		}
	}
	return res;
 8011abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3724      	adds	r7, #36	; 0x24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd90      	pop	{r4, r7, pc}

08011ac8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b088      	sub	sp, #32
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	60f8      	str	r0, [r7, #12]
 8011ad0:	60b9      	str	r1, [r7, #8]
 8011ad2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d904      	bls.n	8011aee <remove_chain+0x26>
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	68ba      	ldr	r2, [r7, #8]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d301      	bcc.n	8011af2 <remove_chain+0x2a>
 8011aee:	2302      	movs	r3, #2
 8011af0:	e04b      	b.n	8011b8a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00c      	beq.n	8011b12 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011af8:	f04f 32ff 	mov.w	r2, #4294967295
 8011afc:	6879      	ldr	r1, [r7, #4]
 8011afe:	69b8      	ldr	r0, [r7, #24]
 8011b00:	f7ff fecb 	bl	801189a <put_fat>
 8011b04:	4603      	mov	r3, r0
 8011b06:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011b08:	7ffb      	ldrb	r3, [r7, #31]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d001      	beq.n	8011b12 <remove_chain+0x4a>
 8011b0e:	7ffb      	ldrb	r3, [r7, #31]
 8011b10:	e03b      	b.n	8011b8a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011b12:	68b9      	ldr	r1, [r7, #8]
 8011b14:	68f8      	ldr	r0, [r7, #12]
 8011b16:	f7ff fdf0 	bl	80116fa <get_fat>
 8011b1a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d031      	beq.n	8011b86 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	2b01      	cmp	r3, #1
 8011b26:	d101      	bne.n	8011b2c <remove_chain+0x64>
 8011b28:	2302      	movs	r3, #2
 8011b2a:	e02e      	b.n	8011b8a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b32:	d101      	bne.n	8011b38 <remove_chain+0x70>
 8011b34:	2301      	movs	r3, #1
 8011b36:	e028      	b.n	8011b8a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011b38:	2200      	movs	r2, #0
 8011b3a:	68b9      	ldr	r1, [r7, #8]
 8011b3c:	69b8      	ldr	r0, [r7, #24]
 8011b3e:	f7ff feac 	bl	801189a <put_fat>
 8011b42:	4603      	mov	r3, r0
 8011b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011b46:	7ffb      	ldrb	r3, [r7, #31]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d001      	beq.n	8011b50 <remove_chain+0x88>
 8011b4c:	7ffb      	ldrb	r3, [r7, #31]
 8011b4e:	e01c      	b.n	8011b8a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	695a      	ldr	r2, [r3, #20]
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	69db      	ldr	r3, [r3, #28]
 8011b58:	3b02      	subs	r3, #2
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d20b      	bcs.n	8011b76 <remove_chain+0xae>
			fs->free_clst++;
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	695b      	ldr	r3, [r3, #20]
 8011b62:	1c5a      	adds	r2, r3, #1
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	791b      	ldrb	r3, [r3, #4]
 8011b6c:	f043 0301 	orr.w	r3, r3, #1
 8011b70:	b2da      	uxtb	r2, r3
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	69db      	ldr	r3, [r3, #28]
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d3c6      	bcc.n	8011b12 <remove_chain+0x4a>
 8011b84:	e000      	b.n	8011b88 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011b86:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011b88:	2300      	movs	r3, #0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3720      	adds	r7, #32
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}

08011b92 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011b92:	b580      	push	{r7, lr}
 8011b94:	b088      	sub	sp, #32
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
 8011b9a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d10d      	bne.n	8011bc4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	691b      	ldr	r3, [r3, #16]
 8011bac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011bae:	69bb      	ldr	r3, [r7, #24]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d004      	beq.n	8011bbe <create_chain+0x2c>
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	69db      	ldr	r3, [r3, #28]
 8011bb8:	69ba      	ldr	r2, [r7, #24]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d31b      	bcc.n	8011bf6 <create_chain+0x64>
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	61bb      	str	r3, [r7, #24]
 8011bc2:	e018      	b.n	8011bf6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011bc4:	6839      	ldr	r1, [r7, #0]
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7ff fd97 	bl	80116fa <get_fat>
 8011bcc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d801      	bhi.n	8011bd8 <create_chain+0x46>
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	e070      	b.n	8011cba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bde:	d101      	bne.n	8011be4 <create_chain+0x52>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	e06a      	b.n	8011cba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	69db      	ldr	r3, [r3, #28]
 8011be8:	68fa      	ldr	r2, [r7, #12]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d201      	bcs.n	8011bf2 <create_chain+0x60>
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	e063      	b.n	8011cba <create_chain+0x128>
		scl = clst;
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	69db      	ldr	r3, [r3, #28]
 8011c04:	69fa      	ldr	r2, [r7, #28]
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d307      	bcc.n	8011c1a <create_chain+0x88>
				ncl = 2;
 8011c0a:	2302      	movs	r3, #2
 8011c0c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011c0e:	69fa      	ldr	r2, [r7, #28]
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d901      	bls.n	8011c1a <create_chain+0x88>
 8011c16:	2300      	movs	r3, #0
 8011c18:	e04f      	b.n	8011cba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011c1a:	69f9      	ldr	r1, [r7, #28]
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7ff fd6c 	bl	80116fa <get_fat>
 8011c22:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00e      	beq.n	8011c48 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d003      	beq.n	8011c38 <create_chain+0xa6>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c36:	d101      	bne.n	8011c3c <create_chain+0xaa>
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	e03e      	b.n	8011cba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011c3c:	69fa      	ldr	r2, [r7, #28]
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d1da      	bne.n	8011bfa <create_chain+0x68>
 8011c44:	2300      	movs	r3, #0
 8011c46:	e038      	b.n	8011cba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011c48:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4e:	69f9      	ldr	r1, [r7, #28]
 8011c50:	6938      	ldr	r0, [r7, #16]
 8011c52:	f7ff fe22 	bl	801189a <put_fat>
 8011c56:	4603      	mov	r3, r0
 8011c58:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011c5a:	7dfb      	ldrb	r3, [r7, #23]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d109      	bne.n	8011c74 <create_chain+0xe2>
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d006      	beq.n	8011c74 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011c66:	69fa      	ldr	r2, [r7, #28]
 8011c68:	6839      	ldr	r1, [r7, #0]
 8011c6a:	6938      	ldr	r0, [r7, #16]
 8011c6c:	f7ff fe15 	bl	801189a <put_fat>
 8011c70:	4603      	mov	r3, r0
 8011c72:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011c74:	7dfb      	ldrb	r3, [r7, #23]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d116      	bne.n	8011ca8 <create_chain+0x116>
		fs->last_clst = ncl;
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	69fa      	ldr	r2, [r7, #28]
 8011c7e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	695a      	ldr	r2, [r3, #20]
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	69db      	ldr	r3, [r3, #28]
 8011c88:	3b02      	subs	r3, #2
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d804      	bhi.n	8011c98 <create_chain+0x106>
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	695b      	ldr	r3, [r3, #20]
 8011c92:	1e5a      	subs	r2, r3, #1
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	791b      	ldrb	r3, [r3, #4]
 8011c9c:	f043 0301 	orr.w	r3, r3, #1
 8011ca0:	b2da      	uxtb	r2, r3
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	711a      	strb	r2, [r3, #4]
 8011ca6:	e007      	b.n	8011cb8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011ca8:	7dfb      	ldrb	r3, [r7, #23]
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	d102      	bne.n	8011cb4 <create_chain+0x122>
 8011cae:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb2:	e000      	b.n	8011cb6 <create_chain+0x124>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011cb8:	69fb      	ldr	r3, [r7, #28]
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3720      	adds	r7, #32
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011cc2:	b480      	push	{r7}
 8011cc4:	b087      	sub	sp, #28
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
 8011cca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd6:	3304      	adds	r3, #4
 8011cd8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	899b      	ldrh	r3, [r3, #12]
 8011cde:	461a      	mov	r2, r3
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ce6:	68fa      	ldr	r2, [r7, #12]
 8011ce8:	8952      	ldrh	r2, [r2, #10]
 8011cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	1d1a      	adds	r2, r3, #4
 8011cf4:	613a      	str	r2, [r7, #16]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d101      	bne.n	8011d04 <clmt_clust+0x42>
 8011d00:	2300      	movs	r3, #0
 8011d02:	e010      	b.n	8011d26 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011d04:	697a      	ldr	r2, [r7, #20]
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d307      	bcc.n	8011d1c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011d0c:	697a      	ldr	r2, [r7, #20]
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	617b      	str	r3, [r7, #20]
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	3304      	adds	r3, #4
 8011d18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011d1a:	e7e9      	b.n	8011cf0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011d1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	4413      	add	r3, r2
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	371c      	adds	r7, #28
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr

08011d32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b086      	sub	sp, #24
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011d48:	d204      	bcs.n	8011d54 <dir_sdi+0x22>
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	f003 031f 	and.w	r3, r3, #31
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d001      	beq.n	8011d58 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011d54:	2302      	movs	r3, #2
 8011d56:	e071      	b.n	8011e3c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	683a      	ldr	r2, [r7, #0]
 8011d5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	689b      	ldr	r3, [r3, #8]
 8011d62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d106      	bne.n	8011d78 <dir_sdi+0x46>
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b02      	cmp	r3, #2
 8011d70:	d902      	bls.n	8011d78 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10c      	bne.n	8011d98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	095b      	lsrs	r3, r3, #5
 8011d82:	693a      	ldr	r2, [r7, #16]
 8011d84:	8912      	ldrh	r2, [r2, #8]
 8011d86:	4293      	cmp	r3, r2
 8011d88:	d301      	bcc.n	8011d8e <dir_sdi+0x5c>
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	e056      	b.n	8011e3c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	61da      	str	r2, [r3, #28]
 8011d96:	e02d      	b.n	8011df4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	895b      	ldrh	r3, [r3, #10]
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	899b      	ldrh	r3, [r3, #12]
 8011da2:	fb03 f302 	mul.w	r3, r3, r2
 8011da6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011da8:	e019      	b.n	8011dde <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6979      	ldr	r1, [r7, #20]
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7ff fca3 	bl	80116fa <get_fat>
 8011db4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dbc:	d101      	bne.n	8011dc2 <dir_sdi+0x90>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e03c      	b.n	8011e3c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d904      	bls.n	8011dd2 <dir_sdi+0xa0>
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	69db      	ldr	r3, [r3, #28]
 8011dcc:	697a      	ldr	r2, [r7, #20]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d301      	bcc.n	8011dd6 <dir_sdi+0xa4>
 8011dd2:	2302      	movs	r3, #2
 8011dd4:	e032      	b.n	8011e3c <dir_sdi+0x10a>
			ofs -= csz;
 8011dd6:	683a      	ldr	r2, [r7, #0]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011dde:	683a      	ldr	r2, [r7, #0]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d2e1      	bcs.n	8011daa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011de6:	6979      	ldr	r1, [r7, #20]
 8011de8:	6938      	ldr	r0, [r7, #16]
 8011dea:	f7ff fc67 	bl	80116bc <clust2sect>
 8011dee:	4602      	mov	r2, r0
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	69db      	ldr	r3, [r3, #28]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d101      	bne.n	8011e06 <dir_sdi+0xd4>
 8011e02:	2302      	movs	r3, #2
 8011e04:	e01a      	b.n	8011e3c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	69da      	ldr	r2, [r3, #28]
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	899b      	ldrh	r3, [r3, #12]
 8011e0e:	4619      	mov	r1, r3
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e16:	441a      	add	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	899b      	ldrh	r3, [r3, #12]
 8011e26:	461a      	mov	r2, r3
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e2e:	fb02 f200 	mul.w	r2, r2, r0
 8011e32:	1a9b      	subs	r3, r3, r2
 8011e34:	18ca      	adds	r2, r1, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011e3a:	2300      	movs	r3, #0
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b086      	sub	sp, #24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	695b      	ldr	r3, [r3, #20]
 8011e58:	3320      	adds	r3, #32
 8011e5a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	69db      	ldr	r3, [r3, #28]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d003      	beq.n	8011e6c <dir_next+0x28>
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011e6a:	d301      	bcc.n	8011e70 <dir_next+0x2c>
 8011e6c:	2304      	movs	r3, #4
 8011e6e:	e0bb      	b.n	8011fe8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	899b      	ldrh	r3, [r3, #12]
 8011e74:	461a      	mov	r2, r3
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e7c:	fb02 f201 	mul.w	r2, r2, r1
 8011e80:	1a9b      	subs	r3, r3, r2
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	f040 809d 	bne.w	8011fc2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	69db      	ldr	r3, [r3, #28]
 8011e8c:	1c5a      	adds	r2, r3, #1
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	699b      	ldr	r3, [r3, #24]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d10b      	bne.n	8011eb2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	095b      	lsrs	r3, r3, #5
 8011e9e:	68fa      	ldr	r2, [r7, #12]
 8011ea0:	8912      	ldrh	r2, [r2, #8]
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	f0c0 808d 	bcc.w	8011fc2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	61da      	str	r2, [r3, #28]
 8011eae:	2304      	movs	r3, #4
 8011eb0:	e09a      	b.n	8011fe8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	899b      	ldrh	r3, [r3, #12]
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ebe:	68fa      	ldr	r2, [r7, #12]
 8011ec0:	8952      	ldrh	r2, [r2, #10]
 8011ec2:	3a01      	subs	r2, #1
 8011ec4:	4013      	ands	r3, r2
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d17b      	bne.n	8011fc2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	699b      	ldr	r3, [r3, #24]
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	4610      	mov	r0, r2
 8011ed4:	f7ff fc11 	bl	80116fa <get_fat>
 8011ed8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d801      	bhi.n	8011ee4 <dir_next+0xa0>
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	e081      	b.n	8011fe8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eea:	d101      	bne.n	8011ef0 <dir_next+0xac>
 8011eec:	2301      	movs	r3, #1
 8011eee:	e07b      	b.n	8011fe8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	69db      	ldr	r3, [r3, #28]
 8011ef4:	697a      	ldr	r2, [r7, #20]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d359      	bcc.n	8011fae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d104      	bne.n	8011f0a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	61da      	str	r2, [r3, #28]
 8011f06:	2304      	movs	r3, #4
 8011f08:	e06e      	b.n	8011fe8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	699b      	ldr	r3, [r3, #24]
 8011f10:	4619      	mov	r1, r3
 8011f12:	4610      	mov	r0, r2
 8011f14:	f7ff fe3d 	bl	8011b92 <create_chain>
 8011f18:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d101      	bne.n	8011f24 <dir_next+0xe0>
 8011f20:	2307      	movs	r3, #7
 8011f22:	e061      	b.n	8011fe8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d101      	bne.n	8011f2e <dir_next+0xea>
 8011f2a:	2302      	movs	r3, #2
 8011f2c:	e05c      	b.n	8011fe8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f34:	d101      	bne.n	8011f3a <dir_next+0xf6>
 8011f36:	2301      	movs	r3, #1
 8011f38:	e056      	b.n	8011fe8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7ff fadc 	bl	80114f8 <sync_window>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d001      	beq.n	8011f4a <dir_next+0x106>
 8011f46:	2301      	movs	r3, #1
 8011f48:	e04e      	b.n	8011fe8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	899b      	ldrh	r3, [r3, #12]
 8011f54:	461a      	mov	r2, r3
 8011f56:	2100      	movs	r1, #0
 8011f58:	f7ff f905 	bl	8011166 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	613b      	str	r3, [r7, #16]
 8011f60:	6979      	ldr	r1, [r7, #20]
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f7ff fbaa 	bl	80116bc <clust2sect>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8011f6e:	e012      	b.n	8011f96 <dir_next+0x152>
						fs->wflag = 1;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2201      	movs	r2, #1
 8011f74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011f76:	68f8      	ldr	r0, [r7, #12]
 8011f78:	f7ff fabe 	bl	80114f8 <sync_window>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d001      	beq.n	8011f86 <dir_next+0x142>
 8011f82:	2301      	movs	r3, #1
 8011f84:	e030      	b.n	8011fe8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	3301      	adds	r3, #1
 8011f8a:	613b      	str	r3, [r7, #16]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f90:	1c5a      	adds	r2, r3, #1
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	635a      	str	r2, [r3, #52]	; 0x34
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	895b      	ldrh	r3, [r3, #10]
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d3e6      	bcc.n	8011f70 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	1ad2      	subs	r2, r2, r3
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	697a      	ldr	r2, [r7, #20]
 8011fb2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011fb4:	6979      	ldr	r1, [r7, #20]
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f7ff fb80 	bl	80116bc <clust2sect>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	68ba      	ldr	r2, [r7, #8]
 8011fc6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	899b      	ldrh	r3, [r3, #12]
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fda:	fb02 f200 	mul.w	r2, r2, r0
 8011fde:	1a9b      	subs	r3, r3, r2
 8011fe0:	18ca      	adds	r2, r1, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011fe6:	2300      	movs	r3, #0
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3718      	adds	r7, #24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012000:	2100      	movs	r1, #0
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7ff fe95 	bl	8011d32 <dir_sdi>
 8012008:	4603      	mov	r3, r0
 801200a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801200c:	7dfb      	ldrb	r3, [r7, #23]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d12b      	bne.n	801206a <dir_alloc+0x7a>
		n = 0;
 8012012:	2300      	movs	r3, #0
 8012014:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	69db      	ldr	r3, [r3, #28]
 801201a:	4619      	mov	r1, r3
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f7ff faaf 	bl	8011580 <move_window>
 8012022:	4603      	mov	r3, r0
 8012024:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012026:	7dfb      	ldrb	r3, [r7, #23]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d11d      	bne.n	8012068 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6a1b      	ldr	r3, [r3, #32]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	2be5      	cmp	r3, #229	; 0xe5
 8012034:	d004      	beq.n	8012040 <dir_alloc+0x50>
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a1b      	ldr	r3, [r3, #32]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d107      	bne.n	8012050 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	3301      	adds	r3, #1
 8012044:	613b      	str	r3, [r7, #16]
 8012046:	693a      	ldr	r2, [r7, #16]
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	429a      	cmp	r2, r3
 801204c:	d102      	bne.n	8012054 <dir_alloc+0x64>
 801204e:	e00c      	b.n	801206a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012050:	2300      	movs	r3, #0
 8012052:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012054:	2101      	movs	r1, #1
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7ff fef4 	bl	8011e44 <dir_next>
 801205c:	4603      	mov	r3, r0
 801205e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012060:	7dfb      	ldrb	r3, [r7, #23]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d0d7      	beq.n	8012016 <dir_alloc+0x26>
 8012066:	e000      	b.n	801206a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012068:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801206a:	7dfb      	ldrb	r3, [r7, #23]
 801206c:	2b04      	cmp	r3, #4
 801206e:	d101      	bne.n	8012074 <dir_alloc+0x84>
 8012070:	2307      	movs	r3, #7
 8012072:	75fb      	strb	r3, [r7, #23]
	return res;
 8012074:	7dfb      	ldrb	r3, [r7, #23]
}
 8012076:	4618      	mov	r0, r3
 8012078:	3718      	adds	r7, #24
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}

0801207e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801207e:	b580      	push	{r7, lr}
 8012080:	b084      	sub	sp, #16
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
 8012086:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	331a      	adds	r3, #26
 801208c:	4618      	mov	r0, r3
 801208e:	f7fe ffc7 	bl	8011020 <ld_word>
 8012092:	4603      	mov	r3, r0
 8012094:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	2b03      	cmp	r3, #3
 801209c:	d109      	bne.n	80120b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	3314      	adds	r3, #20
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7fe ffbc 	bl	8011020 <ld_word>
 80120a8:	4603      	mov	r3, r0
 80120aa:	041b      	lsls	r3, r3, #16
 80120ac:	68fa      	ldr	r2, [r7, #12]
 80120ae:	4313      	orrs	r3, r2
 80120b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80120b2:	68fb      	ldr	r3, [r7, #12]
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3710      	adds	r7, #16
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	331a      	adds	r3, #26
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	b292      	uxth	r2, r2
 80120d0:	4611      	mov	r1, r2
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe ffdf 	bl	8011096 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	2b03      	cmp	r3, #3
 80120de:	d109      	bne.n	80120f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	f103 0214 	add.w	r2, r3, #20
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	0c1b      	lsrs	r3, r3, #16
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	4619      	mov	r1, r3
 80120ee:	4610      	mov	r0, r2
 80120f0:	f7fe ffd1 	bl	8011096 <st_word>
	}
}
 80120f4:	bf00      	nop
 80120f6:	3710      	adds	r7, #16
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b086      	sub	sp, #24
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012106:	2304      	movs	r3, #4
 8012108:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012110:	e03c      	b.n	801218c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	69db      	ldr	r3, [r3, #28]
 8012116:	4619      	mov	r1, r3
 8012118:	6938      	ldr	r0, [r7, #16]
 801211a:	f7ff fa31 	bl	8011580 <move_window>
 801211e:	4603      	mov	r3, r0
 8012120:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d136      	bne.n	8012196 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6a1b      	ldr	r3, [r3, #32]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012130:	7bfb      	ldrb	r3, [r7, #15]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d102      	bne.n	801213c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012136:	2304      	movs	r3, #4
 8012138:	75fb      	strb	r3, [r7, #23]
 801213a:	e031      	b.n	80121a0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6a1b      	ldr	r3, [r3, #32]
 8012140:	330b      	adds	r3, #11
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012148:	73bb      	strb	r3, [r7, #14]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	7bba      	ldrb	r2, [r7, #14]
 801214e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012150:	7bfb      	ldrb	r3, [r7, #15]
 8012152:	2be5      	cmp	r3, #229	; 0xe5
 8012154:	d011      	beq.n	801217a <dir_read+0x7e>
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	2b2e      	cmp	r3, #46	; 0x2e
 801215a:	d00e      	beq.n	801217a <dir_read+0x7e>
 801215c:	7bbb      	ldrb	r3, [r7, #14]
 801215e:	2b0f      	cmp	r3, #15
 8012160:	d00b      	beq.n	801217a <dir_read+0x7e>
 8012162:	7bbb      	ldrb	r3, [r7, #14]
 8012164:	f023 0320 	bic.w	r3, r3, #32
 8012168:	2b08      	cmp	r3, #8
 801216a:	bf0c      	ite	eq
 801216c:	2301      	moveq	r3, #1
 801216e:	2300      	movne	r3, #0
 8012170:	b2db      	uxtb	r3, r3
 8012172:	461a      	mov	r2, r3
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	4293      	cmp	r3, r2
 8012178:	d00f      	beq.n	801219a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801217a:	2100      	movs	r1, #0
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f7ff fe61 	bl	8011e44 <dir_next>
 8012182:	4603      	mov	r3, r0
 8012184:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012186:	7dfb      	ldrb	r3, [r7, #23]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d108      	bne.n	801219e <dir_read+0xa2>
	while (dp->sect) {
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	69db      	ldr	r3, [r3, #28]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1be      	bne.n	8012112 <dir_read+0x16>
 8012194:	e004      	b.n	80121a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012196:	bf00      	nop
 8012198:	e002      	b.n	80121a0 <dir_read+0xa4>
				break;
 801219a:	bf00      	nop
 801219c:	e000      	b.n	80121a0 <dir_read+0xa4>
		if (res != FR_OK) break;
 801219e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80121a0:	7dfb      	ldrb	r3, [r7, #23]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d002      	beq.n	80121ac <dir_read+0xb0>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2200      	movs	r2, #0
 80121aa:	61da      	str	r2, [r3, #28]
	return res;
 80121ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3718      	adds	r7, #24
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}

080121b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80121b6:	b580      	push	{r7, lr}
 80121b8:	b086      	sub	sp, #24
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80121c4:	2100      	movs	r1, #0
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f7ff fdb3 	bl	8011d32 <dir_sdi>
 80121cc:	4603      	mov	r3, r0
 80121ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80121d0:	7dfb      	ldrb	r3, [r7, #23]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d001      	beq.n	80121da <dir_find+0x24>
 80121d6:	7dfb      	ldrb	r3, [r7, #23]
 80121d8:	e03e      	b.n	8012258 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	69db      	ldr	r3, [r3, #28]
 80121de:	4619      	mov	r1, r3
 80121e0:	6938      	ldr	r0, [r7, #16]
 80121e2:	f7ff f9cd 	bl	8011580 <move_window>
 80121e6:	4603      	mov	r3, r0
 80121e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80121ea:	7dfb      	ldrb	r3, [r7, #23]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d12f      	bne.n	8012250 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6a1b      	ldr	r3, [r3, #32]
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80121f8:	7bfb      	ldrb	r3, [r7, #15]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d102      	bne.n	8012204 <dir_find+0x4e>
 80121fe:	2304      	movs	r3, #4
 8012200:	75fb      	strb	r3, [r7, #23]
 8012202:	e028      	b.n	8012256 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6a1b      	ldr	r3, [r3, #32]
 8012208:	330b      	adds	r3, #11
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012210:	b2da      	uxtb	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a1b      	ldr	r3, [r3, #32]
 801221a:	330b      	adds	r3, #11
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	f003 0308 	and.w	r3, r3, #8
 8012222:	2b00      	cmp	r3, #0
 8012224:	d10a      	bne.n	801223c <dir_find+0x86>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a18      	ldr	r0, [r3, #32]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	3324      	adds	r3, #36	; 0x24
 801222e:	220b      	movs	r2, #11
 8012230:	4619      	mov	r1, r3
 8012232:	f7fe ffb2 	bl	801119a <mem_cmp>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00b      	beq.n	8012254 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801223c:	2100      	movs	r1, #0
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f7ff fe00 	bl	8011e44 <dir_next>
 8012244:	4603      	mov	r3, r0
 8012246:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012248:	7dfb      	ldrb	r3, [r7, #23]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d0c5      	beq.n	80121da <dir_find+0x24>
 801224e:	e002      	b.n	8012256 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012250:	bf00      	nop
 8012252:	e000      	b.n	8012256 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012254:	bf00      	nop

	return res;
 8012256:	7dfb      	ldrb	r3, [r7, #23]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801226e:	2101      	movs	r1, #1
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f7ff febd 	bl	8011ff0 <dir_alloc>
 8012276:	4603      	mov	r3, r0
 8012278:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801227a:	7bfb      	ldrb	r3, [r7, #15]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d11c      	bne.n	80122ba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	69db      	ldr	r3, [r3, #28]
 8012284:	4619      	mov	r1, r3
 8012286:	68b8      	ldr	r0, [r7, #8]
 8012288:	f7ff f97a 	bl	8011580 <move_window>
 801228c:	4603      	mov	r3, r0
 801228e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012290:	7bfb      	ldrb	r3, [r7, #15]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d111      	bne.n	80122ba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6a1b      	ldr	r3, [r3, #32]
 801229a:	2220      	movs	r2, #32
 801229c:	2100      	movs	r1, #0
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fe ff61 	bl	8011166 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6a18      	ldr	r0, [r3, #32]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	3324      	adds	r3, #36	; 0x24
 80122ac:	220b      	movs	r2, #11
 80122ae:	4619      	mov	r1, r3
 80122b0:	f7fe ff38 	bl	8011124 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	2201      	movs	r2, #1
 80122b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80122ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	69db      	ldr	r3, [r3, #28]
 80122d6:	4619      	mov	r1, r3
 80122d8:	68f8      	ldr	r0, [r7, #12]
 80122da:	f7ff f951 	bl	8011580 <move_window>
 80122de:	4603      	mov	r3, r0
 80122e0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80122e2:	7afb      	ldrb	r3, [r7, #11]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d106      	bne.n	80122f6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6a1b      	ldr	r3, [r3, #32]
 80122ec:	22e5      	movs	r2, #229	; 0xe5
 80122ee:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2201      	movs	r2, #1
 80122f4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80122f6:	7afb      	ldrb	r3, [r7, #11]
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b088      	sub	sp, #32
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	60fb      	str	r3, [r7, #12]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	3324      	adds	r3, #36	; 0x24
 8012314:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012316:	220b      	movs	r2, #11
 8012318:	2120      	movs	r1, #32
 801231a:	68b8      	ldr	r0, [r7, #8]
 801231c:	f7fe ff23 	bl	8011166 <mem_set>
	si = i = 0; ni = 8;
 8012320:	2300      	movs	r3, #0
 8012322:	613b      	str	r3, [r7, #16]
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	617b      	str	r3, [r7, #20]
 8012328:	2308      	movs	r3, #8
 801232a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801232c:	68fa      	ldr	r2, [r7, #12]
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	4413      	add	r3, r2
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	2b2e      	cmp	r3, #46	; 0x2e
 8012336:	d12f      	bne.n	8012398 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	1c5a      	adds	r2, r3, #1
 801233c:	617a      	str	r2, [r7, #20]
 801233e:	68fa      	ldr	r2, [r7, #12]
 8012340:	4413      	add	r3, r2
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012346:	7ffb      	ldrb	r3, [r7, #31]
 8012348:	2b2e      	cmp	r3, #46	; 0x2e
 801234a:	d10a      	bne.n	8012362 <create_name+0x62>
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	2b02      	cmp	r3, #2
 8012350:	d807      	bhi.n	8012362 <create_name+0x62>
			sfn[i++] = c;
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	1c5a      	adds	r2, r3, #1
 8012356:	613a      	str	r2, [r7, #16]
 8012358:	68ba      	ldr	r2, [r7, #8]
 801235a:	4413      	add	r3, r2
 801235c:	7ffa      	ldrb	r2, [r7, #31]
 801235e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012360:	e7ea      	b.n	8012338 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012362:	7ffb      	ldrb	r3, [r7, #31]
 8012364:	2b2f      	cmp	r3, #47	; 0x2f
 8012366:	d007      	beq.n	8012378 <create_name+0x78>
 8012368:	7ffb      	ldrb	r3, [r7, #31]
 801236a:	2b5c      	cmp	r3, #92	; 0x5c
 801236c:	d004      	beq.n	8012378 <create_name+0x78>
 801236e:	7ffb      	ldrb	r3, [r7, #31]
 8012370:	2b20      	cmp	r3, #32
 8012372:	d901      	bls.n	8012378 <create_name+0x78>
 8012374:	2306      	movs	r3, #6
 8012376:	e084      	b.n	8012482 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	441a      	add	r2, r3
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012382:	7ffb      	ldrb	r3, [r7, #31]
 8012384:	2b20      	cmp	r3, #32
 8012386:	d801      	bhi.n	801238c <create_name+0x8c>
 8012388:	2224      	movs	r2, #36	; 0x24
 801238a:	e000      	b.n	801238e <create_name+0x8e>
 801238c:	2220      	movs	r2, #32
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	330b      	adds	r3, #11
 8012392:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	e074      	b.n	8012482 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	1c5a      	adds	r2, r3, #1
 801239c:	617a      	str	r2, [r7, #20]
 801239e:	68fa      	ldr	r2, [r7, #12]
 80123a0:	4413      	add	r3, r2
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80123a6:	7ffb      	ldrb	r3, [r7, #31]
 80123a8:	2b20      	cmp	r3, #32
 80123aa:	d94e      	bls.n	801244a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80123ac:	7ffb      	ldrb	r3, [r7, #31]
 80123ae:	2b2f      	cmp	r3, #47	; 0x2f
 80123b0:	d006      	beq.n	80123c0 <create_name+0xc0>
 80123b2:	7ffb      	ldrb	r3, [r7, #31]
 80123b4:	2b5c      	cmp	r3, #92	; 0x5c
 80123b6:	d110      	bne.n	80123da <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80123b8:	e002      	b.n	80123c0 <create_name+0xc0>
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	3301      	adds	r3, #1
 80123be:	617b      	str	r3, [r7, #20]
 80123c0:	68fa      	ldr	r2, [r7, #12]
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	4413      	add	r3, r2
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	2b2f      	cmp	r3, #47	; 0x2f
 80123ca:	d0f6      	beq.n	80123ba <create_name+0xba>
 80123cc:	68fa      	ldr	r2, [r7, #12]
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	4413      	add	r3, r2
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	2b5c      	cmp	r3, #92	; 0x5c
 80123d6:	d0f0      	beq.n	80123ba <create_name+0xba>
			break;
 80123d8:	e038      	b.n	801244c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80123da:	7ffb      	ldrb	r3, [r7, #31]
 80123dc:	2b2e      	cmp	r3, #46	; 0x2e
 80123de:	d003      	beq.n	80123e8 <create_name+0xe8>
 80123e0:	693a      	ldr	r2, [r7, #16]
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d30c      	bcc.n	8012402 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80123e8:	69bb      	ldr	r3, [r7, #24]
 80123ea:	2b0b      	cmp	r3, #11
 80123ec:	d002      	beq.n	80123f4 <create_name+0xf4>
 80123ee:	7ffb      	ldrb	r3, [r7, #31]
 80123f0:	2b2e      	cmp	r3, #46	; 0x2e
 80123f2:	d001      	beq.n	80123f8 <create_name+0xf8>
 80123f4:	2306      	movs	r3, #6
 80123f6:	e044      	b.n	8012482 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80123f8:	2308      	movs	r3, #8
 80123fa:	613b      	str	r3, [r7, #16]
 80123fc:	230b      	movs	r3, #11
 80123fe:	61bb      	str	r3, [r7, #24]
			continue;
 8012400:	e022      	b.n	8012448 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012402:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012406:	2b00      	cmp	r3, #0
 8012408:	da04      	bge.n	8012414 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801240a:	7ffb      	ldrb	r3, [r7, #31]
 801240c:	3b80      	subs	r3, #128	; 0x80
 801240e:	4a1f      	ldr	r2, [pc, #124]	; (801248c <create_name+0x18c>)
 8012410:	5cd3      	ldrb	r3, [r2, r3]
 8012412:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012414:	7ffb      	ldrb	r3, [r7, #31]
 8012416:	4619      	mov	r1, r3
 8012418:	481d      	ldr	r0, [pc, #116]	; (8012490 <create_name+0x190>)
 801241a:	f7fe fee5 	bl	80111e8 <chk_chr>
 801241e:	4603      	mov	r3, r0
 8012420:	2b00      	cmp	r3, #0
 8012422:	d001      	beq.n	8012428 <create_name+0x128>
 8012424:	2306      	movs	r3, #6
 8012426:	e02c      	b.n	8012482 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012428:	7ffb      	ldrb	r3, [r7, #31]
 801242a:	2b60      	cmp	r3, #96	; 0x60
 801242c:	d905      	bls.n	801243a <create_name+0x13a>
 801242e:	7ffb      	ldrb	r3, [r7, #31]
 8012430:	2b7a      	cmp	r3, #122	; 0x7a
 8012432:	d802      	bhi.n	801243a <create_name+0x13a>
 8012434:	7ffb      	ldrb	r3, [r7, #31]
 8012436:	3b20      	subs	r3, #32
 8012438:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	613a      	str	r2, [r7, #16]
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	4413      	add	r3, r2
 8012444:	7ffa      	ldrb	r2, [r7, #31]
 8012446:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012448:	e7a6      	b.n	8012398 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801244a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801244c:	68fa      	ldr	r2, [r7, #12]
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	441a      	add	r2, r3
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d101      	bne.n	8012460 <create_name+0x160>
 801245c:	2306      	movs	r3, #6
 801245e:	e010      	b.n	8012482 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	2be5      	cmp	r3, #229	; 0xe5
 8012466:	d102      	bne.n	801246e <create_name+0x16e>
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	2205      	movs	r2, #5
 801246c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801246e:	7ffb      	ldrb	r3, [r7, #31]
 8012470:	2b20      	cmp	r3, #32
 8012472:	d801      	bhi.n	8012478 <create_name+0x178>
 8012474:	2204      	movs	r2, #4
 8012476:	e000      	b.n	801247a <create_name+0x17a>
 8012478:	2200      	movs	r2, #0
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	330b      	adds	r3, #11
 801247e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012480:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012482:	4618      	mov	r0, r3
 8012484:	3720      	adds	r7, #32
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	08019cc4 	.word	0x08019cc4
 8012490:	08019c74 	.word	0x08019c74

08012494 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b086      	sub	sp, #24
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	2b2f      	cmp	r3, #47	; 0x2f
 80124ae:	d00b      	beq.n	80124c8 <follow_path+0x34>
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	2b5c      	cmp	r3, #92	; 0x5c
 80124b6:	d007      	beq.n	80124c8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	699a      	ldr	r2, [r3, #24]
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	609a      	str	r2, [r3, #8]
 80124c0:	e00d      	b.n	80124de <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	3301      	adds	r3, #1
 80124c6:	603b      	str	r3, [r7, #0]
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	2b2f      	cmp	r3, #47	; 0x2f
 80124ce:	d0f8      	beq.n	80124c2 <follow_path+0x2e>
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	2b5c      	cmp	r3, #92	; 0x5c
 80124d6:	d0f4      	beq.n	80124c2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	2200      	movs	r2, #0
 80124dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	2b1f      	cmp	r3, #31
 80124e4:	d80a      	bhi.n	80124fc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2280      	movs	r2, #128	; 0x80
 80124ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80124ee:	2100      	movs	r1, #0
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f7ff fc1e 	bl	8011d32 <dir_sdi>
 80124f6:	4603      	mov	r3, r0
 80124f8:	75fb      	strb	r3, [r7, #23]
 80124fa:	e05b      	b.n	80125b4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124fc:	463b      	mov	r3, r7
 80124fe:	4619      	mov	r1, r3
 8012500:	6878      	ldr	r0, [r7, #4]
 8012502:	f7ff fefd 	bl	8012300 <create_name>
 8012506:	4603      	mov	r3, r0
 8012508:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801250a:	7dfb      	ldrb	r3, [r7, #23]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d14c      	bne.n	80125aa <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7ff fe50 	bl	80121b6 <dir_find>
 8012516:	4603      	mov	r3, r0
 8012518:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012520:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012522:	7dfb      	ldrb	r3, [r7, #23]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d01b      	beq.n	8012560 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012528:	7dfb      	ldrb	r3, [r7, #23]
 801252a:	2b04      	cmp	r3, #4
 801252c:	d13f      	bne.n	80125ae <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801252e:	7afb      	ldrb	r3, [r7, #11]
 8012530:	f003 0320 	and.w	r3, r3, #32
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00b      	beq.n	8012550 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012538:	7afb      	ldrb	r3, [r7, #11]
 801253a:	f003 0304 	and.w	r3, r3, #4
 801253e:	2b00      	cmp	r3, #0
 8012540:	d031      	beq.n	80125a6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2280      	movs	r2, #128	; 0x80
 8012546:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801254a:	2300      	movs	r3, #0
 801254c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801254e:	e02e      	b.n	80125ae <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012550:	7afb      	ldrb	r3, [r7, #11]
 8012552:	f003 0304 	and.w	r3, r3, #4
 8012556:	2b00      	cmp	r3, #0
 8012558:	d129      	bne.n	80125ae <follow_path+0x11a>
 801255a:	2305      	movs	r3, #5
 801255c:	75fb      	strb	r3, [r7, #23]
				break;
 801255e:	e026      	b.n	80125ae <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012560:	7afb      	ldrb	r3, [r7, #11]
 8012562:	f003 0304 	and.w	r3, r3, #4
 8012566:	2b00      	cmp	r3, #0
 8012568:	d123      	bne.n	80125b2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	799b      	ldrb	r3, [r3, #6]
 801256e:	f003 0310 	and.w	r3, r3, #16
 8012572:	2b00      	cmp	r3, #0
 8012574:	d102      	bne.n	801257c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012576:	2305      	movs	r3, #5
 8012578:	75fb      	strb	r3, [r7, #23]
 801257a:	e01b      	b.n	80125b4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	695b      	ldr	r3, [r3, #20]
 8012586:	68fa      	ldr	r2, [r7, #12]
 8012588:	8992      	ldrh	r2, [r2, #12]
 801258a:	fbb3 f0f2 	udiv	r0, r3, r2
 801258e:	fb02 f200 	mul.w	r2, r2, r0
 8012592:	1a9b      	subs	r3, r3, r2
 8012594:	440b      	add	r3, r1
 8012596:	4619      	mov	r1, r3
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f7ff fd70 	bl	801207e <ld_clust>
 801259e:	4602      	mov	r2, r0
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	609a      	str	r2, [r3, #8]
 80125a4:	e7aa      	b.n	80124fc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80125a6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80125a8:	e7a8      	b.n	80124fc <follow_path+0x68>
			if (res != FR_OK) break;
 80125aa:	bf00      	nop
 80125ac:	e002      	b.n	80125b4 <follow_path+0x120>
				break;
 80125ae:	bf00      	nop
 80125b0:	e000      	b.n	80125b4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80125b2:	bf00      	nop
			}
		}
	}

	return res;
 80125b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3718      	adds	r7, #24
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}

080125be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80125be:	b480      	push	{r7}
 80125c0:	b087      	sub	sp, #28
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80125c6:	f04f 33ff 	mov.w	r3, #4294967295
 80125ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d031      	beq.n	8012638 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	617b      	str	r3, [r7, #20]
 80125da:	e002      	b.n	80125e2 <get_ldnumber+0x24>
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	3301      	adds	r3, #1
 80125e0:	617b      	str	r3, [r7, #20]
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	2b20      	cmp	r3, #32
 80125e8:	d903      	bls.n	80125f2 <get_ldnumber+0x34>
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	2b3a      	cmp	r3, #58	; 0x3a
 80125f0:	d1f4      	bne.n	80125dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b3a      	cmp	r3, #58	; 0x3a
 80125f8:	d11c      	bne.n	8012634 <get_ldnumber+0x76>
			tp = *path;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	60fa      	str	r2, [r7, #12]
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	3b30      	subs	r3, #48	; 0x30
 801260a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	2b09      	cmp	r3, #9
 8012610:	d80e      	bhi.n	8012630 <get_ldnumber+0x72>
 8012612:	68fa      	ldr	r2, [r7, #12]
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	429a      	cmp	r2, r3
 8012618:	d10a      	bne.n	8012630 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d107      	bne.n	8012630 <get_ldnumber+0x72>
					vol = (int)i;
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	3301      	adds	r3, #1
 8012628:	617b      	str	r3, [r7, #20]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	697a      	ldr	r2, [r7, #20]
 801262e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	e002      	b.n	801263a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012634:	2300      	movs	r3, #0
 8012636:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012638:	693b      	ldr	r3, [r7, #16]
}
 801263a:	4618      	mov	r0, r3
 801263c:	371c      	adds	r7, #28
 801263e:	46bd      	mov	sp, r7
 8012640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012644:	4770      	bx	lr
	...

08012648 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2200      	movs	r2, #0
 8012656:	70da      	strb	r2, [r3, #3]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f04f 32ff 	mov.w	r2, #4294967295
 801265e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012660:	6839      	ldr	r1, [r7, #0]
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7fe ff8c 	bl	8011580 <move_window>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <check_fs+0x2a>
 801266e:	2304      	movs	r3, #4
 8012670:	e038      	b.n	80126e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	3338      	adds	r3, #56	; 0x38
 8012676:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801267a:	4618      	mov	r0, r3
 801267c:	f7fe fcd0 	bl	8011020 <ld_word>
 8012680:	4603      	mov	r3, r0
 8012682:	461a      	mov	r2, r3
 8012684:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012688:	429a      	cmp	r2, r3
 801268a:	d001      	beq.n	8012690 <check_fs+0x48>
 801268c:	2303      	movs	r3, #3
 801268e:	e029      	b.n	80126e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012696:	2be9      	cmp	r3, #233	; 0xe9
 8012698:	d009      	beq.n	80126ae <check_fs+0x66>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80126a0:	2beb      	cmp	r3, #235	; 0xeb
 80126a2:	d11e      	bne.n	80126e2 <check_fs+0x9a>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80126aa:	2b90      	cmp	r3, #144	; 0x90
 80126ac:	d119      	bne.n	80126e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	3338      	adds	r3, #56	; 0x38
 80126b2:	3336      	adds	r3, #54	; 0x36
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fe fccb 	bl	8011050 <ld_dword>
 80126ba:	4603      	mov	r3, r0
 80126bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80126c0:	4a0a      	ldr	r2, [pc, #40]	; (80126ec <check_fs+0xa4>)
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d101      	bne.n	80126ca <check_fs+0x82>
 80126c6:	2300      	movs	r3, #0
 80126c8:	e00c      	b.n	80126e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	3338      	adds	r3, #56	; 0x38
 80126ce:	3352      	adds	r3, #82	; 0x52
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fe fcbd 	bl	8011050 <ld_dword>
 80126d6:	4602      	mov	r2, r0
 80126d8:	4b05      	ldr	r3, [pc, #20]	; (80126f0 <check_fs+0xa8>)
 80126da:	429a      	cmp	r2, r3
 80126dc:	d101      	bne.n	80126e2 <check_fs+0x9a>
 80126de:	2300      	movs	r3, #0
 80126e0:	e000      	b.n	80126e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80126e2:	2302      	movs	r3, #2
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3708      	adds	r7, #8
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	00544146 	.word	0x00544146
 80126f0:	33544146 	.word	0x33544146

080126f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b096      	sub	sp, #88	; 0x58
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	4613      	mov	r3, r2
 8012700:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	2200      	movs	r2, #0
 8012706:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012708:	68f8      	ldr	r0, [r7, #12]
 801270a:	f7ff ff58 	bl	80125be <get_ldnumber>
 801270e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012712:	2b00      	cmp	r3, #0
 8012714:	da01      	bge.n	801271a <find_volume+0x26>
 8012716:	230b      	movs	r3, #11
 8012718:	e268      	b.n	8012bec <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801271a:	4ab0      	ldr	r2, [pc, #704]	; (80129dc <find_volume+0x2e8>)
 801271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012722:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012726:	2b00      	cmp	r3, #0
 8012728:	d101      	bne.n	801272e <find_volume+0x3a>
 801272a:	230c      	movs	r3, #12
 801272c:	e25e      	b.n	8012bec <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012732:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012734:	79fb      	ldrb	r3, [r7, #7]
 8012736:	f023 0301 	bic.w	r3, r3, #1
 801273a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d01a      	beq.n	801277a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012746:	785b      	ldrb	r3, [r3, #1]
 8012748:	4618      	mov	r0, r3
 801274a:	f7fe fbcb 	bl	8010ee4 <disk_status>
 801274e:	4603      	mov	r3, r0
 8012750:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012758:	f003 0301 	and.w	r3, r3, #1
 801275c:	2b00      	cmp	r3, #0
 801275e:	d10c      	bne.n	801277a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012760:	79fb      	ldrb	r3, [r7, #7]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d007      	beq.n	8012776 <find_volume+0x82>
 8012766:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801276a:	f003 0304 	and.w	r3, r3, #4
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012772:	230a      	movs	r3, #10
 8012774:	e23a      	b.n	8012bec <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012776:	2300      	movs	r3, #0
 8012778:	e238      	b.n	8012bec <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801277c:	2200      	movs	r2, #0
 801277e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012782:	b2da      	uxtb	r2, r3
 8012784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012786:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	785b      	ldrb	r3, [r3, #1]
 801278c:	4618      	mov	r0, r3
 801278e:	f7fe fbc3 	bl	8010f18 <disk_initialize>
 8012792:	4603      	mov	r3, r0
 8012794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801279c:	f003 0301 	and.w	r3, r3, #1
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d001      	beq.n	80127a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80127a4:	2303      	movs	r3, #3
 80127a6:	e221      	b.n	8012bec <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80127a8:	79fb      	ldrb	r3, [r7, #7]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d007      	beq.n	80127be <find_volume+0xca>
 80127ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127b2:	f003 0304 	and.w	r3, r3, #4
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d001      	beq.n	80127be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80127ba:	230a      	movs	r3, #10
 80127bc:	e216      	b.n	8012bec <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80127be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c0:	7858      	ldrb	r0, [r3, #1]
 80127c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c4:	330c      	adds	r3, #12
 80127c6:	461a      	mov	r2, r3
 80127c8:	2102      	movs	r1, #2
 80127ca:	f7fe fc0b 	bl	8010fe4 <disk_ioctl>
 80127ce:	4603      	mov	r3, r0
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d001      	beq.n	80127d8 <find_volume+0xe4>
 80127d4:	2301      	movs	r3, #1
 80127d6:	e209      	b.n	8012bec <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80127d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127da:	899b      	ldrh	r3, [r3, #12]
 80127dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80127e0:	d80d      	bhi.n	80127fe <find_volume+0x10a>
 80127e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e4:	899b      	ldrh	r3, [r3, #12]
 80127e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127ea:	d308      	bcc.n	80127fe <find_volume+0x10a>
 80127ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ee:	899b      	ldrh	r3, [r3, #12]
 80127f0:	461a      	mov	r2, r3
 80127f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f4:	899b      	ldrh	r3, [r3, #12]
 80127f6:	3b01      	subs	r3, #1
 80127f8:	4013      	ands	r3, r2
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d001      	beq.n	8012802 <find_volume+0x10e>
 80127fe:	2301      	movs	r3, #1
 8012800:	e1f4      	b.n	8012bec <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012806:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012808:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801280a:	f7ff ff1d 	bl	8012648 <check_fs>
 801280e:	4603      	mov	r3, r0
 8012810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012818:	2b02      	cmp	r3, #2
 801281a:	d14b      	bne.n	80128b4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801281c:	2300      	movs	r3, #0
 801281e:	643b      	str	r3, [r7, #64]	; 0x40
 8012820:	e01f      	b.n	8012862 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012824:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801282a:	011b      	lsls	r3, r3, #4
 801282c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012830:	4413      	add	r3, r2
 8012832:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012836:	3304      	adds	r3, #4
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d006      	beq.n	801284c <find_volume+0x158>
 801283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012840:	3308      	adds	r3, #8
 8012842:	4618      	mov	r0, r3
 8012844:	f7fe fc04 	bl	8011050 <ld_dword>
 8012848:	4602      	mov	r2, r0
 801284a:	e000      	b.n	801284e <find_volume+0x15a>
 801284c:	2200      	movs	r2, #0
 801284e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012850:	009b      	lsls	r3, r3, #2
 8012852:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012856:	440b      	add	r3, r1
 8012858:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801285c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801285e:	3301      	adds	r3, #1
 8012860:	643b      	str	r3, [r7, #64]	; 0x40
 8012862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012864:	2b03      	cmp	r3, #3
 8012866:	d9dc      	bls.n	8012822 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012868:	2300      	movs	r3, #0
 801286a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801286c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801286e:	2b00      	cmp	r3, #0
 8012870:	d002      	beq.n	8012878 <find_volume+0x184>
 8012872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012874:	3b01      	subs	r3, #1
 8012876:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801287a:	009b      	lsls	r3, r3, #2
 801287c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012880:	4413      	add	r3, r2
 8012882:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012886:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801288a:	2b00      	cmp	r3, #0
 801288c:	d005      	beq.n	801289a <find_volume+0x1a6>
 801288e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012892:	f7ff fed9 	bl	8012648 <check_fs>
 8012896:	4603      	mov	r3, r0
 8012898:	e000      	b.n	801289c <find_volume+0x1a8>
 801289a:	2303      	movs	r3, #3
 801289c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80128a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d905      	bls.n	80128b4 <find_volume+0x1c0>
 80128a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128aa:	3301      	adds	r3, #1
 80128ac:	643b      	str	r3, [r7, #64]	; 0x40
 80128ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128b0:	2b03      	cmp	r3, #3
 80128b2:	d9e1      	bls.n	8012878 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80128b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128b8:	2b04      	cmp	r3, #4
 80128ba:	d101      	bne.n	80128c0 <find_volume+0x1cc>
 80128bc:	2301      	movs	r3, #1
 80128be:	e195      	b.n	8012bec <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80128c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d901      	bls.n	80128cc <find_volume+0x1d8>
 80128c8:	230d      	movs	r3, #13
 80128ca:	e18f      	b.n	8012bec <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80128cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ce:	3338      	adds	r3, #56	; 0x38
 80128d0:	330b      	adds	r3, #11
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fe fba4 	bl	8011020 <ld_word>
 80128d8:	4603      	mov	r3, r0
 80128da:	461a      	mov	r2, r3
 80128dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128de:	899b      	ldrh	r3, [r3, #12]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d001      	beq.n	80128e8 <find_volume+0x1f4>
 80128e4:	230d      	movs	r3, #13
 80128e6:	e181      	b.n	8012bec <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80128e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ea:	3338      	adds	r3, #56	; 0x38
 80128ec:	3316      	adds	r3, #22
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7fe fb96 	bl	8011020 <ld_word>
 80128f4:	4603      	mov	r3, r0
 80128f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80128f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d106      	bne.n	801290c <find_volume+0x218>
 80128fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012900:	3338      	adds	r3, #56	; 0x38
 8012902:	3324      	adds	r3, #36	; 0x24
 8012904:	4618      	mov	r0, r3
 8012906:	f7fe fba3 	bl	8011050 <ld_dword>
 801290a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012910:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012914:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291e:	789b      	ldrb	r3, [r3, #2]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d005      	beq.n	8012930 <find_volume+0x23c>
 8012924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012926:	789b      	ldrb	r3, [r3, #2]
 8012928:	2b02      	cmp	r3, #2
 801292a:	d001      	beq.n	8012930 <find_volume+0x23c>
 801292c:	230d      	movs	r3, #13
 801292e:	e15d      	b.n	8012bec <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012932:	789b      	ldrb	r3, [r3, #2]
 8012934:	461a      	mov	r2, r3
 8012936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012938:	fb02 f303 	mul.w	r3, r2, r3
 801293c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012944:	b29a      	uxth	r2, r3
 8012946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012948:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294c:	895b      	ldrh	r3, [r3, #10]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d008      	beq.n	8012964 <find_volume+0x270>
 8012952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012954:	895b      	ldrh	r3, [r3, #10]
 8012956:	461a      	mov	r2, r3
 8012958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295a:	895b      	ldrh	r3, [r3, #10]
 801295c:	3b01      	subs	r3, #1
 801295e:	4013      	ands	r3, r2
 8012960:	2b00      	cmp	r3, #0
 8012962:	d001      	beq.n	8012968 <find_volume+0x274>
 8012964:	230d      	movs	r3, #13
 8012966:	e141      	b.n	8012bec <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296a:	3338      	adds	r3, #56	; 0x38
 801296c:	3311      	adds	r3, #17
 801296e:	4618      	mov	r0, r3
 8012970:	f7fe fb56 	bl	8011020 <ld_word>
 8012974:	4603      	mov	r3, r0
 8012976:	461a      	mov	r2, r3
 8012978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801297a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801297e:	891b      	ldrh	r3, [r3, #8]
 8012980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012982:	8992      	ldrh	r2, [r2, #12]
 8012984:	0952      	lsrs	r2, r2, #5
 8012986:	b292      	uxth	r2, r2
 8012988:	fbb3 f1f2 	udiv	r1, r3, r2
 801298c:	fb02 f201 	mul.w	r2, r2, r1
 8012990:	1a9b      	subs	r3, r3, r2
 8012992:	b29b      	uxth	r3, r3
 8012994:	2b00      	cmp	r3, #0
 8012996:	d001      	beq.n	801299c <find_volume+0x2a8>
 8012998:	230d      	movs	r3, #13
 801299a:	e127      	b.n	8012bec <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299e:	3338      	adds	r3, #56	; 0x38
 80129a0:	3313      	adds	r3, #19
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7fe fb3c 	bl	8011020 <ld_word>
 80129a8:	4603      	mov	r3, r0
 80129aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80129ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d106      	bne.n	80129c0 <find_volume+0x2cc>
 80129b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b4:	3338      	adds	r3, #56	; 0x38
 80129b6:	3320      	adds	r3, #32
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7fe fb49 	bl	8011050 <ld_dword>
 80129be:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80129c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c2:	3338      	adds	r3, #56	; 0x38
 80129c4:	330e      	adds	r3, #14
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7fe fb2a 	bl	8011020 <ld_word>
 80129cc:	4603      	mov	r3, r0
 80129ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80129d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d104      	bne.n	80129e0 <find_volume+0x2ec>
 80129d6:	230d      	movs	r3, #13
 80129d8:	e108      	b.n	8012bec <find_volume+0x4f8>
 80129da:	bf00      	nop
 80129dc:	2003d480 	.word	0x2003d480

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80129e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80129e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129e4:	4413      	add	r3, r2
 80129e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129e8:	8911      	ldrh	r1, [r2, #8]
 80129ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129ec:	8992      	ldrh	r2, [r2, #12]
 80129ee:	0952      	lsrs	r2, r2, #5
 80129f0:	b292      	uxth	r2, r2
 80129f2:	fbb1 f2f2 	udiv	r2, r1, r2
 80129f6:	b292      	uxth	r2, r2
 80129f8:	4413      	add	r3, r2
 80129fa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80129fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d201      	bcs.n	8012a08 <find_volume+0x314>
 8012a04:	230d      	movs	r3, #13
 8012a06:	e0f1      	b.n	8012bec <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0c:	1ad3      	subs	r3, r2, r3
 8012a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a10:	8952      	ldrh	r2, [r2, #10]
 8012a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a16:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <find_volume+0x32e>
 8012a1e:	230d      	movs	r3, #13
 8012a20:	e0e4      	b.n	8012bec <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012a22:	2303      	movs	r3, #3
 8012a24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	d802      	bhi.n	8012a38 <find_volume+0x344>
 8012a32:	2302      	movs	r3, #2
 8012a34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d802      	bhi.n	8012a48 <find_volume+0x354>
 8012a42:	2301      	movs	r3, #1
 8012a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4a:	1c9a      	adds	r2, r3, #2
 8012a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a54:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012a56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a5a:	441a      	add	r2, r3
 8012a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	441a      	add	r2, r3
 8012a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a68:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a6e:	2b03      	cmp	r3, #3
 8012a70:	d11e      	bne.n	8012ab0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a74:	3338      	adds	r3, #56	; 0x38
 8012a76:	332a      	adds	r3, #42	; 0x2a
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7fe fad1 	bl	8011020 <ld_word>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d001      	beq.n	8012a88 <find_volume+0x394>
 8012a84:	230d      	movs	r3, #13
 8012a86:	e0b1      	b.n	8012bec <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8a:	891b      	ldrh	r3, [r3, #8]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d001      	beq.n	8012a94 <find_volume+0x3a0>
 8012a90:	230d      	movs	r3, #13
 8012a92:	e0ab      	b.n	8012bec <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a96:	3338      	adds	r3, #56	; 0x38
 8012a98:	332c      	adds	r3, #44	; 0x2c
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fe fad8 	bl	8011050 <ld_dword>
 8012aa0:	4602      	mov	r2, r0
 8012aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa8:	69db      	ldr	r3, [r3, #28]
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	647b      	str	r3, [r7, #68]	; 0x44
 8012aae:	e01f      	b.n	8012af0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab2:	891b      	ldrh	r3, [r3, #8]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d101      	bne.n	8012abc <find_volume+0x3c8>
 8012ab8:	230d      	movs	r3, #13
 8012aba:	e097      	b.n	8012bec <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ac2:	441a      	add	r2, r3
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	d103      	bne.n	8012ad8 <find_volume+0x3e4>
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	69db      	ldr	r3, [r3, #28]
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	e00a      	b.n	8012aee <find_volume+0x3fa>
 8012ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ada:	69da      	ldr	r2, [r3, #28]
 8012adc:	4613      	mov	r3, r2
 8012ade:	005b      	lsls	r3, r3, #1
 8012ae0:	4413      	add	r3, r2
 8012ae2:	085a      	lsrs	r2, r3, #1
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	69db      	ldr	r3, [r3, #28]
 8012ae8:	f003 0301 	and.w	r3, r3, #1
 8012aec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012aee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af2:	6a1a      	ldr	r2, [r3, #32]
 8012af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af6:	899b      	ldrh	r3, [r3, #12]
 8012af8:	4619      	mov	r1, r3
 8012afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012afc:	440b      	add	r3, r1
 8012afe:	3b01      	subs	r3, #1
 8012b00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b02:	8989      	ldrh	r1, [r1, #12]
 8012b04:	fbb3 f3f1 	udiv	r3, r3, r1
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d201      	bcs.n	8012b10 <find_volume+0x41c>
 8012b0c:	230d      	movs	r3, #13
 8012b0e:	e06d      	b.n	8012bec <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b12:	f04f 32ff 	mov.w	r2, #4294967295
 8012b16:	615a      	str	r2, [r3, #20]
 8012b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1a:	695a      	ldr	r2, [r3, #20]
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b22:	2280      	movs	r2, #128	; 0x80
 8012b24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b2a:	2b03      	cmp	r3, #3
 8012b2c:	d149      	bne.n	8012bc2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b30:	3338      	adds	r3, #56	; 0x38
 8012b32:	3330      	adds	r3, #48	; 0x30
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7fe fa73 	bl	8011020 <ld_word>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d140      	bne.n	8012bc2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b42:	3301      	adds	r3, #1
 8012b44:	4619      	mov	r1, r3
 8012b46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b48:	f7fe fd1a 	bl	8011580 <move_window>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d137      	bne.n	8012bc2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b54:	2200      	movs	r2, #0
 8012b56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5a:	3338      	adds	r3, #56	; 0x38
 8012b5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fe fa5d 	bl	8011020 <ld_word>
 8012b66:	4603      	mov	r3, r0
 8012b68:	461a      	mov	r2, r3
 8012b6a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d127      	bne.n	8012bc2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	3338      	adds	r3, #56	; 0x38
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fe fa6a 	bl	8011050 <ld_dword>
 8012b7c:	4602      	mov	r2, r0
 8012b7e:	4b1d      	ldr	r3, [pc, #116]	; (8012bf4 <find_volume+0x500>)
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d11e      	bne.n	8012bc2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b86:	3338      	adds	r3, #56	; 0x38
 8012b88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fe fa5f 	bl	8011050 <ld_dword>
 8012b92:	4602      	mov	r2, r0
 8012b94:	4b18      	ldr	r3, [pc, #96]	; (8012bf8 <find_volume+0x504>)
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d113      	bne.n	8012bc2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9c:	3338      	adds	r3, #56	; 0x38
 8012b9e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fe fa54 	bl	8011050 <ld_dword>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb0:	3338      	adds	r3, #56	; 0x38
 8012bb2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fe fa4a 	bl	8011050 <ld_dword>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012bc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012bca:	4b0c      	ldr	r3, [pc, #48]	; (8012bfc <find_volume+0x508>)
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	3301      	adds	r3, #1
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	4b0a      	ldr	r3, [pc, #40]	; (8012bfc <find_volume+0x508>)
 8012bd4:	801a      	strh	r2, [r3, #0]
 8012bd6:	4b09      	ldr	r3, [pc, #36]	; (8012bfc <find_volume+0x508>)
 8012bd8:	881a      	ldrh	r2, [r3, #0]
 8012bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bdc:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be0:	2200      	movs	r2, #0
 8012be2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012be4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012be6:	f7fe fc63 	bl	80114b0 <clear_lock>
#endif
	return FR_OK;
 8012bea:	2300      	movs	r3, #0
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3758      	adds	r7, #88	; 0x58
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	41615252 	.word	0x41615252
 8012bf8:	61417272 	.word	0x61417272
 8012bfc:	2003d484 	.word	0x2003d484

08012c00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012c0a:	2309      	movs	r3, #9
 8012c0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d01c      	beq.n	8012c4e <validate+0x4e>
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d018      	beq.n	8012c4e <validate+0x4e>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d013      	beq.n	8012c4e <validate+0x4e>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	889a      	ldrh	r2, [r3, #4]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	88db      	ldrh	r3, [r3, #6]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d10c      	bne.n	8012c4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	785b      	ldrb	r3, [r3, #1]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fe f952 	bl	8010ee4 <disk_status>
 8012c40:	4603      	mov	r3, r0
 8012c42:	f003 0301 	and.w	r3, r3, #1
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d101      	bne.n	8012c4e <validate+0x4e>
			res = FR_OK;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012c4e:	7bfb      	ldrb	r3, [r7, #15]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d102      	bne.n	8012c5a <validate+0x5a>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	e000      	b.n	8012c5c <validate+0x5c>
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	683a      	ldr	r2, [r7, #0]
 8012c5e:	6013      	str	r3, [r2, #0]
	return res;
 8012c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3710      	adds	r7, #16
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
	...

08012c6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b088      	sub	sp, #32
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	4613      	mov	r3, r2
 8012c78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012c7e:	f107 0310 	add.w	r3, r7, #16
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7ff fc9b 	bl	80125be <get_ldnumber>
 8012c88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	da01      	bge.n	8012c94 <f_mount+0x28>
 8012c90:	230b      	movs	r3, #11
 8012c92:	e02b      	b.n	8012cec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012c94:	4a17      	ldr	r2, [pc, #92]	; (8012cf4 <f_mount+0x88>)
 8012c96:	69fb      	ldr	r3, [r7, #28]
 8012c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d005      	beq.n	8012cb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012ca4:	69b8      	ldr	r0, [r7, #24]
 8012ca6:	f7fe fc03 	bl	80114b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	2200      	movs	r2, #0
 8012cae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d002      	beq.n	8012cbc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	490d      	ldr	r1, [pc, #52]	; (8012cf4 <f_mount+0x88>)
 8012cc0:	69fb      	ldr	r3, [r7, #28]
 8012cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d002      	beq.n	8012cd2 <f_mount+0x66>
 8012ccc:	79fb      	ldrb	r3, [r7, #7]
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	d001      	beq.n	8012cd6 <f_mount+0x6a>
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	e00a      	b.n	8012cec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012cd6:	f107 010c 	add.w	r1, r7, #12
 8012cda:	f107 0308 	add.w	r3, r7, #8
 8012cde:	2200      	movs	r2, #0
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7ff fd07 	bl	80126f4 <find_volume>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3720      	adds	r7, #32
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	2003d480 	.word	0x2003d480

08012cf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b098      	sub	sp, #96	; 0x60
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	60f8      	str	r0, [r7, #12]
 8012d00:	60b9      	str	r1, [r7, #8]
 8012d02:	4613      	mov	r3, r2
 8012d04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d101      	bne.n	8012d10 <f_open+0x18>
 8012d0c:	2309      	movs	r3, #9
 8012d0e:	e1ba      	b.n	8013086 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012d10:	79fb      	ldrb	r3, [r7, #7]
 8012d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012d18:	79fa      	ldrb	r2, [r7, #7]
 8012d1a:	f107 0110 	add.w	r1, r7, #16
 8012d1e:	f107 0308 	add.w	r3, r7, #8
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff fce6 	bl	80126f4 <find_volume>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	f040 819e 	bne.w	8013074 <f_open+0x37c>
		dj.obj.fs = fs;
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012d3c:	68ba      	ldr	r2, [r7, #8]
 8012d3e:	f107 0314 	add.w	r3, r7, #20
 8012d42:	4611      	mov	r1, r2
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff fba5 	bl	8012494 <follow_path>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d11a      	bne.n	8012d8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012d58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012d5c:	b25b      	sxtb	r3, r3
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	da03      	bge.n	8012d6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012d62:	2306      	movs	r3, #6
 8012d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d68:	e011      	b.n	8012d8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012d6a:	79fb      	ldrb	r3, [r7, #7]
 8012d6c:	f023 0301 	bic.w	r3, r3, #1
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	bf14      	ite	ne
 8012d74:	2301      	movne	r3, #1
 8012d76:	2300      	moveq	r3, #0
 8012d78:	b2db      	uxtb	r3, r3
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	f107 0314 	add.w	r3, r7, #20
 8012d80:	4611      	mov	r1, r2
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7fe fa4c 	bl	8011220 <chk_lock>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012d8e:	79fb      	ldrb	r3, [r7, #7]
 8012d90:	f003 031c 	and.w	r3, r3, #28
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d07e      	beq.n	8012e96 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d017      	beq.n	8012dd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012da4:	2b04      	cmp	r3, #4
 8012da6:	d10e      	bne.n	8012dc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012da8:	f7fe fa96 	bl	80112d8 <enq_lock>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d006      	beq.n	8012dc0 <f_open+0xc8>
 8012db2:	f107 0314 	add.w	r3, r7, #20
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7ff fa52 	bl	8012260 <dir_register>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	e000      	b.n	8012dc2 <f_open+0xca>
 8012dc0:	2312      	movs	r3, #18
 8012dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012dc6:	79fb      	ldrb	r3, [r7, #7]
 8012dc8:	f043 0308 	orr.w	r3, r3, #8
 8012dcc:	71fb      	strb	r3, [r7, #7]
 8012dce:	e010      	b.n	8012df2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012dd0:	7ebb      	ldrb	r3, [r7, #26]
 8012dd2:	f003 0311 	and.w	r3, r3, #17
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d003      	beq.n	8012de2 <f_open+0xea>
					res = FR_DENIED;
 8012dda:	2307      	movs	r3, #7
 8012ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012de0:	e007      	b.n	8012df2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012de2:	79fb      	ldrb	r3, [r7, #7]
 8012de4:	f003 0304 	and.w	r3, r3, #4
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <f_open+0xfa>
 8012dec:	2308      	movs	r3, #8
 8012dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d167      	bne.n	8012eca <f_open+0x1d2>
 8012dfa:	79fb      	ldrb	r3, [r7, #7]
 8012dfc:	f003 0308 	and.w	r3, r3, #8
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d062      	beq.n	8012eca <f_open+0x1d2>
				dw = GET_FATTIME();
 8012e04:	4ba2      	ldr	r3, [pc, #648]	; (8013090 <f_open+0x398>)
 8012e06:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e0a:	330e      	adds	r3, #14
 8012e0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7fe f95c 	bl	80110cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e16:	3316      	adds	r3, #22
 8012e18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fe f956 	bl	80110cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e22:	330b      	adds	r3, #11
 8012e24:	2220      	movs	r2, #32
 8012e26:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e2c:	4611      	mov	r1, r2
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff f925 	bl	801207e <ld_clust>
 8012e34:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7ff f93d 	bl	80120bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e44:	331c      	adds	r3, #28
 8012e46:	2100      	movs	r1, #0
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fe f93f 	bl	80110cc <st_dword>
					fs->wflag = 1;
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	2201      	movs	r2, #1
 8012e52:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d037      	beq.n	8012eca <f_open+0x1d2>
						dw = fs->winsect;
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e5e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012e60:	f107 0314 	add.w	r3, r7, #20
 8012e64:	2200      	movs	r2, #0
 8012e66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7fe fe2d 	bl	8011ac8 <remove_chain>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d126      	bne.n	8012eca <f_open+0x1d2>
							res = move_window(fs, dw);
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7fe fb7d 	bl	8011580 <move_window>
 8012e86:	4603      	mov	r3, r0
 8012e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e90:	3a01      	subs	r2, #1
 8012e92:	611a      	str	r2, [r3, #16]
 8012e94:	e019      	b.n	8012eca <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012e96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d115      	bne.n	8012eca <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012e9e:	7ebb      	ldrb	r3, [r7, #26]
 8012ea0:	f003 0310 	and.w	r3, r3, #16
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d003      	beq.n	8012eb0 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012ea8:	2304      	movs	r3, #4
 8012eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012eae:	e00c      	b.n	8012eca <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012eb0:	79fb      	ldrb	r3, [r7, #7]
 8012eb2:	f003 0302 	and.w	r3, r3, #2
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d007      	beq.n	8012eca <f_open+0x1d2>
 8012eba:	7ebb      	ldrb	r3, [r7, #26]
 8012ebc:	f003 0301 	and.w	r3, r3, #1
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d002      	beq.n	8012eca <f_open+0x1d2>
						res = FR_DENIED;
 8012ec4:	2307      	movs	r3, #7
 8012ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012eca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d128      	bne.n	8012f24 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012ed2:	79fb      	ldrb	r3, [r7, #7]
 8012ed4:	f003 0308 	and.w	r3, r3, #8
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d003      	beq.n	8012ee4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012edc:	79fb      	ldrb	r3, [r7, #7]
 8012ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ee2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012ef2:	79fb      	ldrb	r3, [r7, #7]
 8012ef4:	f023 0301 	bic.w	r3, r3, #1
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	bf14      	ite	ne
 8012efc:	2301      	movne	r3, #1
 8012efe:	2300      	moveq	r3, #0
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	461a      	mov	r2, r3
 8012f04:	f107 0314 	add.w	r3, r7, #20
 8012f08:	4611      	mov	r1, r2
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fe fa06 	bl	801131c <inc_lock>
 8012f10:	4602      	mov	r2, r0
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	691b      	ldr	r3, [r3, #16]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d102      	bne.n	8012f24 <f_open+0x22c>
 8012f1e:	2302      	movs	r3, #2
 8012f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	f040 80a3 	bne.w	8013074 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f32:	4611      	mov	r1, r2
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7ff f8a2 	bl	801207e <ld_clust>
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f42:	331c      	adds	r3, #28
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fe f883 	bl	8011050 <ld_dword>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2200      	movs	r2, #0
 8012f54:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012f56:	693a      	ldr	r2, [r7, #16]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	88da      	ldrh	r2, [r3, #6]
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	79fa      	ldrb	r2, [r7, #7]
 8012f68:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2200      	movs	r2, #0
 8012f74:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	3330      	adds	r3, #48	; 0x30
 8012f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012f84:	2100      	movs	r1, #0
 8012f86:	4618      	mov	r0, r3
 8012f88:	f7fe f8ed 	bl	8011166 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012f8c:	79fb      	ldrb	r3, [r7, #7]
 8012f8e:	f003 0320 	and.w	r3, r3, #32
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d06e      	beq.n	8013074 <f_open+0x37c>
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d06a      	beq.n	8013074 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	68da      	ldr	r2, [r3, #12]
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	895b      	ldrh	r3, [r3, #10]
 8012faa:	461a      	mov	r2, r3
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	899b      	ldrh	r3, [r3, #12]
 8012fb0:	fb03 f302 	mul.w	r3, r3, r2
 8012fb4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	68db      	ldr	r3, [r3, #12]
 8012fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8012fc2:	e016      	b.n	8012ff2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fe fb96 	bl	80116fa <get_fat>
 8012fce:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d802      	bhi.n	8012fdc <f_open+0x2e4>
 8012fd6:	2302      	movs	r3, #2
 8012fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fe2:	d102      	bne.n	8012fea <f_open+0x2f2>
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012fea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fee:	1ad3      	subs	r3, r2, r3
 8012ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8012ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d103      	bne.n	8013002 <f_open+0x30a>
 8012ffa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d8e0      	bhi.n	8012fc4 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013006:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801300c:	2b00      	cmp	r3, #0
 801300e:	d131      	bne.n	8013074 <f_open+0x37c>
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	899b      	ldrh	r3, [r3, #12]
 8013014:	461a      	mov	r2, r3
 8013016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013018:	fbb3 f1f2 	udiv	r1, r3, r2
 801301c:	fb02 f201 	mul.w	r2, r2, r1
 8013020:	1a9b      	subs	r3, r3, r2
 8013022:	2b00      	cmp	r3, #0
 8013024:	d026      	beq.n	8013074 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801302a:	4618      	mov	r0, r3
 801302c:	f7fe fb46 	bl	80116bc <clust2sect>
 8013030:	6478      	str	r0, [r7, #68]	; 0x44
 8013032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013034:	2b00      	cmp	r3, #0
 8013036:	d103      	bne.n	8013040 <f_open+0x348>
						res = FR_INT_ERR;
 8013038:	2302      	movs	r3, #2
 801303a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801303e:	e019      	b.n	8013074 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	899b      	ldrh	r3, [r3, #12]
 8013044:	461a      	mov	r2, r3
 8013046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013048:	fbb3 f2f2 	udiv	r2, r3, r2
 801304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801304e:	441a      	add	r2, r3
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	7858      	ldrb	r0, [r3, #1]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	6a1a      	ldr	r2, [r3, #32]
 8013062:	2301      	movs	r3, #1
 8013064:	f7fd ff7e 	bl	8010f64 <disk_read>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d002      	beq.n	8013074 <f_open+0x37c>
 801306e:	2301      	movs	r3, #1
 8013070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <f_open+0x38a>
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2200      	movs	r2, #0
 8013080:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013086:	4618      	mov	r0, r3
 8013088:	3760      	adds	r7, #96	; 0x60
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	274a0000 	.word	0x274a0000

08013094 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b08e      	sub	sp, #56	; 0x38
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	607a      	str	r2, [r7, #4]
 80130a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	2200      	movs	r2, #0
 80130aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f107 0214 	add.w	r2, r7, #20
 80130b2:	4611      	mov	r1, r2
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7ff fda3 	bl	8012c00 <validate>
 80130ba:	4603      	mov	r3, r0
 80130bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80130c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d107      	bne.n	80130d8 <f_read+0x44>
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	7d5b      	ldrb	r3, [r3, #21]
 80130cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80130d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d002      	beq.n	80130de <f_read+0x4a>
 80130d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130dc:	e135      	b.n	801334a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	7d1b      	ldrb	r3, [r3, #20]
 80130e2:	f003 0301 	and.w	r3, r3, #1
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d101      	bne.n	80130ee <f_read+0x5a>
 80130ea:	2307      	movs	r3, #7
 80130ec:	e12d      	b.n	801334a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	68da      	ldr	r2, [r3, #12]
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	699b      	ldr	r3, [r3, #24]
 80130f6:	1ad3      	subs	r3, r2, r3
 80130f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	6a3b      	ldr	r3, [r7, #32]
 80130fe:	429a      	cmp	r2, r3
 8013100:	f240 811e 	bls.w	8013340 <f_read+0x2ac>
 8013104:	6a3b      	ldr	r3, [r7, #32]
 8013106:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013108:	e11a      	b.n	8013340 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	699b      	ldr	r3, [r3, #24]
 801310e:	697a      	ldr	r2, [r7, #20]
 8013110:	8992      	ldrh	r2, [r2, #12]
 8013112:	fbb3 f1f2 	udiv	r1, r3, r2
 8013116:	fb02 f201 	mul.w	r2, r2, r1
 801311a:	1a9b      	subs	r3, r3, r2
 801311c:	2b00      	cmp	r3, #0
 801311e:	f040 80d5 	bne.w	80132cc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	699b      	ldr	r3, [r3, #24]
 8013126:	697a      	ldr	r2, [r7, #20]
 8013128:	8992      	ldrh	r2, [r2, #12]
 801312a:	fbb3 f3f2 	udiv	r3, r3, r2
 801312e:	697a      	ldr	r2, [r7, #20]
 8013130:	8952      	ldrh	r2, [r2, #10]
 8013132:	3a01      	subs	r2, #1
 8013134:	4013      	ands	r3, r2
 8013136:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013138:	69fb      	ldr	r3, [r7, #28]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d12f      	bne.n	801319e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	699b      	ldr	r3, [r3, #24]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d103      	bne.n	801314e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	633b      	str	r3, [r7, #48]	; 0x30
 801314c:	e013      	b.n	8013176 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013152:	2b00      	cmp	r3, #0
 8013154:	d007      	beq.n	8013166 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	699b      	ldr	r3, [r3, #24]
 801315a:	4619      	mov	r1, r3
 801315c:	68f8      	ldr	r0, [r7, #12]
 801315e:	f7fe fdb0 	bl	8011cc2 <clmt_clust>
 8013162:	6338      	str	r0, [r7, #48]	; 0x30
 8013164:	e007      	b.n	8013176 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013166:	68fa      	ldr	r2, [r7, #12]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	69db      	ldr	r3, [r3, #28]
 801316c:	4619      	mov	r1, r3
 801316e:	4610      	mov	r0, r2
 8013170:	f7fe fac3 	bl	80116fa <get_fat>
 8013174:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013178:	2b01      	cmp	r3, #1
 801317a:	d804      	bhi.n	8013186 <f_read+0xf2>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2202      	movs	r2, #2
 8013180:	755a      	strb	r2, [r3, #21]
 8013182:	2302      	movs	r3, #2
 8013184:	e0e1      	b.n	801334a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318c:	d104      	bne.n	8013198 <f_read+0x104>
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2201      	movs	r2, #1
 8013192:	755a      	strb	r2, [r3, #21]
 8013194:	2301      	movs	r3, #1
 8013196:	e0d8      	b.n	801334a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801319c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801319e:	697a      	ldr	r2, [r7, #20]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	69db      	ldr	r3, [r3, #28]
 80131a4:	4619      	mov	r1, r3
 80131a6:	4610      	mov	r0, r2
 80131a8:	f7fe fa88 	bl	80116bc <clust2sect>
 80131ac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d104      	bne.n	80131be <f_read+0x12a>
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2202      	movs	r2, #2
 80131b8:	755a      	strb	r2, [r3, #21]
 80131ba:	2302      	movs	r3, #2
 80131bc:	e0c5      	b.n	801334a <f_read+0x2b6>
			sect += csect;
 80131be:	69ba      	ldr	r2, [r7, #24]
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	4413      	add	r3, r2
 80131c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	899b      	ldrh	r3, [r3, #12]
 80131ca:	461a      	mov	r2, r3
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80131d2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80131d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d041      	beq.n	801325e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80131da:	69fa      	ldr	r2, [r7, #28]
 80131dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131de:	4413      	add	r3, r2
 80131e0:	697a      	ldr	r2, [r7, #20]
 80131e2:	8952      	ldrh	r2, [r2, #10]
 80131e4:	4293      	cmp	r3, r2
 80131e6:	d905      	bls.n	80131f4 <f_read+0x160>
					cc = fs->csize - csect;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	895b      	ldrh	r3, [r3, #10]
 80131ec:	461a      	mov	r2, r3
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	7858      	ldrb	r0, [r3, #1]
 80131f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fa:	69ba      	ldr	r2, [r7, #24]
 80131fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131fe:	f7fd feb1 	bl	8010f64 <disk_read>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d004      	beq.n	8013212 <f_read+0x17e>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2201      	movs	r2, #1
 801320c:	755a      	strb	r2, [r3, #21]
 801320e:	2301      	movs	r3, #1
 8013210:	e09b      	b.n	801334a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	7d1b      	ldrb	r3, [r3, #20]
 8013216:	b25b      	sxtb	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	da18      	bge.n	801324e <f_read+0x1ba>
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	6a1a      	ldr	r2, [r3, #32]
 8013220:	69bb      	ldr	r3, [r7, #24]
 8013222:	1ad3      	subs	r3, r2, r3
 8013224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013226:	429a      	cmp	r2, r3
 8013228:	d911      	bls.n	801324e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	6a1a      	ldr	r2, [r3, #32]
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	697a      	ldr	r2, [r7, #20]
 8013234:	8992      	ldrh	r2, [r2, #12]
 8013236:	fb02 f303 	mul.w	r3, r2, r3
 801323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801323c:	18d0      	adds	r0, r2, r3
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	899b      	ldrh	r3, [r3, #12]
 8013248:	461a      	mov	r2, r3
 801324a:	f7fd ff6b 	bl	8011124 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	899b      	ldrh	r3, [r3, #12]
 8013252:	461a      	mov	r2, r3
 8013254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013256:	fb02 f303 	mul.w	r3, r2, r3
 801325a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801325c:	e05c      	b.n	8013318 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6a1b      	ldr	r3, [r3, #32]
 8013262:	69ba      	ldr	r2, [r7, #24]
 8013264:	429a      	cmp	r2, r3
 8013266:	d02e      	beq.n	80132c6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	7d1b      	ldrb	r3, [r3, #20]
 801326c:	b25b      	sxtb	r3, r3
 801326e:	2b00      	cmp	r3, #0
 8013270:	da18      	bge.n	80132a4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	7858      	ldrb	r0, [r3, #1]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6a1a      	ldr	r2, [r3, #32]
 8013280:	2301      	movs	r3, #1
 8013282:	f7fd fe8f 	bl	8010fa4 <disk_write>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	d004      	beq.n	8013296 <f_read+0x202>
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2201      	movs	r2, #1
 8013290:	755a      	strb	r2, [r3, #21]
 8013292:	2301      	movs	r3, #1
 8013294:	e059      	b.n	801334a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	7d1b      	ldrb	r3, [r3, #20]
 801329a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801329e:	b2da      	uxtb	r2, r3
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	7858      	ldrb	r0, [r3, #1]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132ae:	2301      	movs	r3, #1
 80132b0:	69ba      	ldr	r2, [r7, #24]
 80132b2:	f7fd fe57 	bl	8010f64 <disk_read>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d004      	beq.n	80132c6 <f_read+0x232>
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2201      	movs	r2, #1
 80132c0:	755a      	strb	r2, [r3, #21]
 80132c2:	2301      	movs	r3, #1
 80132c4:	e041      	b.n	801334a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	69ba      	ldr	r2, [r7, #24]
 80132ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	899b      	ldrh	r3, [r3, #12]
 80132d0:	4618      	mov	r0, r3
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	699b      	ldr	r3, [r3, #24]
 80132d6:	697a      	ldr	r2, [r7, #20]
 80132d8:	8992      	ldrh	r2, [r2, #12]
 80132da:	fbb3 f1f2 	udiv	r1, r3, r2
 80132de:	fb02 f201 	mul.w	r2, r2, r1
 80132e2:	1a9b      	subs	r3, r3, r2
 80132e4:	1ac3      	subs	r3, r0, r3
 80132e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80132e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d901      	bls.n	80132f4 <f_read+0x260>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	699b      	ldr	r3, [r3, #24]
 80132fe:	697a      	ldr	r2, [r7, #20]
 8013300:	8992      	ldrh	r2, [r2, #12]
 8013302:	fbb3 f0f2 	udiv	r0, r3, r2
 8013306:	fb02 f200 	mul.w	r2, r2, r0
 801330a:	1a9b      	subs	r3, r3, r2
 801330c:	440b      	add	r3, r1
 801330e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013310:	4619      	mov	r1, r3
 8013312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013314:	f7fd ff06 	bl	8011124 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331c:	4413      	add	r3, r2
 801331e:	627b      	str	r3, [r7, #36]	; 0x24
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	699a      	ldr	r2, [r3, #24]
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	441a      	add	r2, r3
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	619a      	str	r2, [r3, #24]
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	681a      	ldr	r2, [r3, #0]
 8013330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013332:	441a      	add	r2, r3
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	601a      	str	r2, [r3, #0]
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333c:	1ad3      	subs	r3, r2, r3
 801333e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	f47f aee1 	bne.w	801310a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013348:	2300      	movs	r3, #0
}
 801334a:	4618      	mov	r0, r3
 801334c:	3738      	adds	r7, #56	; 0x38
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013352:	b580      	push	{r7, lr}
 8013354:	b08c      	sub	sp, #48	; 0x30
 8013356:	af00      	add	r7, sp, #0
 8013358:	60f8      	str	r0, [r7, #12]
 801335a:	60b9      	str	r1, [r7, #8]
 801335c:	607a      	str	r2, [r7, #4]
 801335e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	2200      	movs	r2, #0
 8013368:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f107 0210 	add.w	r2, r7, #16
 8013370:	4611      	mov	r1, r2
 8013372:	4618      	mov	r0, r3
 8013374:	f7ff fc44 	bl	8012c00 <validate>
 8013378:	4603      	mov	r3, r0
 801337a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801337e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013382:	2b00      	cmp	r3, #0
 8013384:	d107      	bne.n	8013396 <f_write+0x44>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	7d5b      	ldrb	r3, [r3, #21]
 801338a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801338e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013392:	2b00      	cmp	r3, #0
 8013394:	d002      	beq.n	801339c <f_write+0x4a>
 8013396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801339a:	e16a      	b.n	8013672 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	7d1b      	ldrb	r3, [r3, #20]
 80133a0:	f003 0302 	and.w	r3, r3, #2
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d101      	bne.n	80133ac <f_write+0x5a>
 80133a8:	2307      	movs	r3, #7
 80133aa:	e162      	b.n	8013672 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	699a      	ldr	r2, [r3, #24]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	441a      	add	r2, r3
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	699b      	ldr	r3, [r3, #24]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	f080 814c 	bcs.w	8013656 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	699b      	ldr	r3, [r3, #24]
 80133c2:	43db      	mvns	r3, r3
 80133c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80133c6:	e146      	b.n	8013656 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	699b      	ldr	r3, [r3, #24]
 80133cc:	693a      	ldr	r2, [r7, #16]
 80133ce:	8992      	ldrh	r2, [r2, #12]
 80133d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80133d4:	fb02 f201 	mul.w	r2, r2, r1
 80133d8:	1a9b      	subs	r3, r3, r2
 80133da:	2b00      	cmp	r3, #0
 80133dc:	f040 80f1 	bne.w	80135c2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	699b      	ldr	r3, [r3, #24]
 80133e4:	693a      	ldr	r2, [r7, #16]
 80133e6:	8992      	ldrh	r2, [r2, #12]
 80133e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80133ec:	693a      	ldr	r2, [r7, #16]
 80133ee:	8952      	ldrh	r2, [r2, #10]
 80133f0:	3a01      	subs	r2, #1
 80133f2:	4013      	ands	r3, r2
 80133f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d143      	bne.n	8013484 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d10c      	bne.n	801341e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	689b      	ldr	r3, [r3, #8]
 8013408:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340c:	2b00      	cmp	r3, #0
 801340e:	d11a      	bne.n	8013446 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2100      	movs	r1, #0
 8013414:	4618      	mov	r0, r3
 8013416:	f7fe fbbc 	bl	8011b92 <create_chain>
 801341a:	62b8      	str	r0, [r7, #40]	; 0x28
 801341c:	e013      	b.n	8013446 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013422:	2b00      	cmp	r3, #0
 8013424:	d007      	beq.n	8013436 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	699b      	ldr	r3, [r3, #24]
 801342a:	4619      	mov	r1, r3
 801342c:	68f8      	ldr	r0, [r7, #12]
 801342e:	f7fe fc48 	bl	8011cc2 <clmt_clust>
 8013432:	62b8      	str	r0, [r7, #40]	; 0x28
 8013434:	e007      	b.n	8013446 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013436:	68fa      	ldr	r2, [r7, #12]
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	69db      	ldr	r3, [r3, #28]
 801343c:	4619      	mov	r1, r3
 801343e:	4610      	mov	r0, r2
 8013440:	f7fe fba7 	bl	8011b92 <create_chain>
 8013444:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013448:	2b00      	cmp	r3, #0
 801344a:	f000 8109 	beq.w	8013660 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013450:	2b01      	cmp	r3, #1
 8013452:	d104      	bne.n	801345e <f_write+0x10c>
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2202      	movs	r2, #2
 8013458:	755a      	strb	r2, [r3, #21]
 801345a:	2302      	movs	r3, #2
 801345c:	e109      	b.n	8013672 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013464:	d104      	bne.n	8013470 <f_write+0x11e>
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2201      	movs	r2, #1
 801346a:	755a      	strb	r2, [r3, #21]
 801346c:	2301      	movs	r3, #1
 801346e:	e100      	b.n	8013672 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013474:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	689b      	ldr	r3, [r3, #8]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d102      	bne.n	8013484 <f_write+0x132>
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013482:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	7d1b      	ldrb	r3, [r3, #20]
 8013488:	b25b      	sxtb	r3, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	da18      	bge.n	80134c0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	7858      	ldrb	r0, [r3, #1]
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	6a1a      	ldr	r2, [r3, #32]
 801349c:	2301      	movs	r3, #1
 801349e:	f7fd fd81 	bl	8010fa4 <disk_write>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d004      	beq.n	80134b2 <f_write+0x160>
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2201      	movs	r2, #1
 80134ac:	755a      	strb	r2, [r3, #21]
 80134ae:	2301      	movs	r3, #1
 80134b0:	e0df      	b.n	8013672 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	7d1b      	ldrb	r3, [r3, #20]
 80134b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134ba:	b2da      	uxtb	r2, r3
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80134c0:	693a      	ldr	r2, [r7, #16]
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	69db      	ldr	r3, [r3, #28]
 80134c6:	4619      	mov	r1, r3
 80134c8:	4610      	mov	r0, r2
 80134ca:	f7fe f8f7 	bl	80116bc <clust2sect>
 80134ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d104      	bne.n	80134e0 <f_write+0x18e>
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2202      	movs	r2, #2
 80134da:	755a      	strb	r2, [r3, #21]
 80134dc:	2302      	movs	r3, #2
 80134de:	e0c8      	b.n	8013672 <f_write+0x320>
			sect += csect;
 80134e0:	697a      	ldr	r2, [r7, #20]
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	4413      	add	r3, r2
 80134e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	899b      	ldrh	r3, [r3, #12]
 80134ec:	461a      	mov	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80134f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80134f6:	6a3b      	ldr	r3, [r7, #32]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d043      	beq.n	8013584 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80134fc:	69ba      	ldr	r2, [r7, #24]
 80134fe:	6a3b      	ldr	r3, [r7, #32]
 8013500:	4413      	add	r3, r2
 8013502:	693a      	ldr	r2, [r7, #16]
 8013504:	8952      	ldrh	r2, [r2, #10]
 8013506:	4293      	cmp	r3, r2
 8013508:	d905      	bls.n	8013516 <f_write+0x1c4>
					cc = fs->csize - csect;
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	895b      	ldrh	r3, [r3, #10]
 801350e:	461a      	mov	r2, r3
 8013510:	69bb      	ldr	r3, [r7, #24]
 8013512:	1ad3      	subs	r3, r2, r3
 8013514:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	7858      	ldrb	r0, [r3, #1]
 801351a:	6a3b      	ldr	r3, [r7, #32]
 801351c:	697a      	ldr	r2, [r7, #20]
 801351e:	69f9      	ldr	r1, [r7, #28]
 8013520:	f7fd fd40 	bl	8010fa4 <disk_write>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d004      	beq.n	8013534 <f_write+0x1e2>
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2201      	movs	r2, #1
 801352e:	755a      	strb	r2, [r3, #21]
 8013530:	2301      	movs	r3, #1
 8013532:	e09e      	b.n	8013672 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6a1a      	ldr	r2, [r3, #32]
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	1ad3      	subs	r3, r2, r3
 801353c:	6a3a      	ldr	r2, [r7, #32]
 801353e:	429a      	cmp	r2, r3
 8013540:	d918      	bls.n	8013574 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	6a1a      	ldr	r2, [r3, #32]
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	1ad3      	subs	r3, r2, r3
 8013550:	693a      	ldr	r2, [r7, #16]
 8013552:	8992      	ldrh	r2, [r2, #12]
 8013554:	fb02 f303 	mul.w	r3, r2, r3
 8013558:	69fa      	ldr	r2, [r7, #28]
 801355a:	18d1      	adds	r1, r2, r3
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	461a      	mov	r2, r3
 8013562:	f7fd fddf 	bl	8011124 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	7d1b      	ldrb	r3, [r3, #20]
 801356a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801356e:	b2da      	uxtb	r2, r3
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	899b      	ldrh	r3, [r3, #12]
 8013578:	461a      	mov	r2, r3
 801357a:	6a3b      	ldr	r3, [r7, #32]
 801357c:	fb02 f303 	mul.w	r3, r2, r3
 8013580:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013582:	e04b      	b.n	801361c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	6a1b      	ldr	r3, [r3, #32]
 8013588:	697a      	ldr	r2, [r7, #20]
 801358a:	429a      	cmp	r2, r3
 801358c:	d016      	beq.n	80135bc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	699a      	ldr	r2, [r3, #24]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013596:	429a      	cmp	r2, r3
 8013598:	d210      	bcs.n	80135bc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	7858      	ldrb	r0, [r3, #1]
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135a4:	2301      	movs	r3, #1
 80135a6:	697a      	ldr	r2, [r7, #20]
 80135a8:	f7fd fcdc 	bl	8010f64 <disk_read>
 80135ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d004      	beq.n	80135bc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2201      	movs	r2, #1
 80135b6:	755a      	strb	r2, [r3, #21]
 80135b8:	2301      	movs	r3, #1
 80135ba:	e05a      	b.n	8013672 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	697a      	ldr	r2, [r7, #20]
 80135c0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	899b      	ldrh	r3, [r3, #12]
 80135c6:	4618      	mov	r0, r3
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	699b      	ldr	r3, [r3, #24]
 80135cc:	693a      	ldr	r2, [r7, #16]
 80135ce:	8992      	ldrh	r2, [r2, #12]
 80135d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80135d4:	fb02 f201 	mul.w	r2, r2, r1
 80135d8:	1a9b      	subs	r3, r3, r2
 80135da:	1ac3      	subs	r3, r0, r3
 80135dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80135de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d901      	bls.n	80135ea <f_write+0x298>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	699b      	ldr	r3, [r3, #24]
 80135f4:	693a      	ldr	r2, [r7, #16]
 80135f6:	8992      	ldrh	r2, [r2, #12]
 80135f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80135fc:	fb02 f200 	mul.w	r2, r2, r0
 8013600:	1a9b      	subs	r3, r3, r2
 8013602:	440b      	add	r3, r1
 8013604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013606:	69f9      	ldr	r1, [r7, #28]
 8013608:	4618      	mov	r0, r3
 801360a:	f7fd fd8b 	bl	8011124 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	7d1b      	ldrb	r3, [r3, #20]
 8013612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013616:	b2da      	uxtb	r2, r3
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801361c:	69fa      	ldr	r2, [r7, #28]
 801361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013620:	4413      	add	r3, r2
 8013622:	61fb      	str	r3, [r7, #28]
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	699a      	ldr	r2, [r3, #24]
 8013628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362a:	441a      	add	r2, r3
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	619a      	str	r2, [r3, #24]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	68da      	ldr	r2, [r3, #12]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	699b      	ldr	r3, [r3, #24]
 8013638:	429a      	cmp	r2, r3
 801363a:	bf38      	it	cc
 801363c:	461a      	movcc	r2, r3
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	60da      	str	r2, [r3, #12]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	681a      	ldr	r2, [r3, #0]
 8013646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013648:	441a      	add	r2, r3
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	601a      	str	r2, [r3, #0]
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013652:	1ad3      	subs	r3, r2, r3
 8013654:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2b00      	cmp	r3, #0
 801365a:	f47f aeb5 	bne.w	80133c8 <f_write+0x76>
 801365e:	e000      	b.n	8013662 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013660:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	7d1b      	ldrb	r3, [r3, #20]
 8013666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801366a:	b2da      	uxtb	r2, r3
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013670:	2300      	movs	r3, #0
}
 8013672:	4618      	mov	r0, r3
 8013674:	3730      	adds	r7, #48	; 0x30
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
	...

0801367c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f107 0208 	add.w	r2, r7, #8
 801368a:	4611      	mov	r1, r2
 801368c:	4618      	mov	r0, r3
 801368e:	f7ff fab7 	bl	8012c00 <validate>
 8013692:	4603      	mov	r3, r0
 8013694:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013696:	7dfb      	ldrb	r3, [r7, #23]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d167      	bne.n	801376c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7d1b      	ldrb	r3, [r3, #20]
 80136a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d061      	beq.n	801376c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	7d1b      	ldrb	r3, [r3, #20]
 80136ac:	b25b      	sxtb	r3, r3
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	da15      	bge.n	80136de <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	7858      	ldrb	r0, [r3, #1]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6a1a      	ldr	r2, [r3, #32]
 80136c0:	2301      	movs	r3, #1
 80136c2:	f7fd fc6f 	bl	8010fa4 <disk_write>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d001      	beq.n	80136d0 <f_sync+0x54>
 80136cc:	2301      	movs	r3, #1
 80136ce:	e04e      	b.n	801376e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	7d1b      	ldrb	r3, [r3, #20]
 80136d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136d8:	b2da      	uxtb	r2, r3
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80136de:	4b26      	ldr	r3, [pc, #152]	; (8013778 <f_sync+0xfc>)
 80136e0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80136e2:	68ba      	ldr	r2, [r7, #8]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136e8:	4619      	mov	r1, r3
 80136ea:	4610      	mov	r0, r2
 80136ec:	f7fd ff48 	bl	8011580 <move_window>
 80136f0:	4603      	mov	r3, r0
 80136f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80136f4:	7dfb      	ldrb	r3, [r7, #23]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d138      	bne.n	801376c <f_sync+0xf0>
					dir = fp->dir_ptr;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	330b      	adds	r3, #11
 8013704:	781a      	ldrb	r2, [r3, #0]
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	330b      	adds	r3, #11
 801370a:	f042 0220 	orr.w	r2, r2, #32
 801370e:	b2d2      	uxtb	r2, r2
 8013710:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6818      	ldr	r0, [r3, #0]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	461a      	mov	r2, r3
 801371c:	68f9      	ldr	r1, [r7, #12]
 801371e:	f7fe fccd 	bl	80120bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f103 021c 	add.w	r2, r3, #28
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	4619      	mov	r1, r3
 801372e:	4610      	mov	r0, r2
 8013730:	f7fd fccc 	bl	80110cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	3316      	adds	r3, #22
 8013738:	6939      	ldr	r1, [r7, #16]
 801373a:	4618      	mov	r0, r3
 801373c:	f7fd fcc6 	bl	80110cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	3312      	adds	r3, #18
 8013744:	2100      	movs	r1, #0
 8013746:	4618      	mov	r0, r3
 8013748:	f7fd fca5 	bl	8011096 <st_word>
					fs->wflag = 1;
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	2201      	movs	r2, #1
 8013750:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	4618      	mov	r0, r3
 8013756:	f7fd ff41 	bl	80115dc <sync_fs>
 801375a:	4603      	mov	r3, r0
 801375c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	7d1b      	ldrb	r3, [r3, #20]
 8013762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013766:	b2da      	uxtb	r2, r3
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801376c:	7dfb      	ldrb	r3, [r7, #23]
}
 801376e:	4618      	mov	r0, r3
 8013770:	3718      	adds	r7, #24
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}
 8013776:	bf00      	nop
 8013778:	274a0000 	.word	0x274a0000

0801377c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f7ff ff79 	bl	801367c <f_sync>
 801378a:	4603      	mov	r3, r0
 801378c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801378e:	7bfb      	ldrb	r3, [r7, #15]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d118      	bne.n	80137c6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f107 0208 	add.w	r2, r7, #8
 801379a:	4611      	mov	r1, r2
 801379c:	4618      	mov	r0, r3
 801379e:	f7ff fa2f 	bl	8012c00 <validate>
 80137a2:	4603      	mov	r3, r0
 80137a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80137a6:	7bfb      	ldrb	r3, [r7, #15]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d10c      	bne.n	80137c6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	691b      	ldr	r3, [r3, #16]
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fd fe41 	bl	8011438 <dec_lock>
 80137b6:	4603      	mov	r3, r0
 80137b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80137ba:	7bfb      	ldrb	r3, [r7, #15]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d102      	bne.n	80137c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2200      	movs	r2, #0
 80137c4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80137c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	3710      	adds	r7, #16
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80137d0:	b590      	push	{r4, r7, lr}
 80137d2:	b091      	sub	sp, #68	; 0x44
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80137d8:	f107 0108 	add.w	r1, r7, #8
 80137dc:	1d3b      	adds	r3, r7, #4
 80137de:	2200      	movs	r2, #0
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7fe ff87 	bl	80126f4 <find_volume>
 80137e6:	4603      	mov	r3, r0
 80137e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80137ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d131      	bne.n	8013858 <f_chdir+0x88>
		dj.obj.fs = fs;
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	f107 030c 	add.w	r3, r7, #12
 80137fe:	4611      	mov	r1, r2
 8013800:	4618      	mov	r0, r3
 8013802:	f7fe fe47 	bl	8012494 <follow_path>
 8013806:	4603      	mov	r3, r0
 8013808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801380c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013810:	2b00      	cmp	r3, #0
 8013812:	d11a      	bne.n	801384a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013814:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013818:	b25b      	sxtb	r3, r3
 801381a:	2b00      	cmp	r3, #0
 801381c:	da03      	bge.n	8013826 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	697a      	ldr	r2, [r7, #20]
 8013822:	619a      	str	r2, [r3, #24]
 8013824:	e011      	b.n	801384a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013826:	7cbb      	ldrb	r3, [r7, #18]
 8013828:	f003 0310 	and.w	r3, r3, #16
 801382c:	2b00      	cmp	r3, #0
 801382e:	d009      	beq.n	8013844 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013834:	68bc      	ldr	r4, [r7, #8]
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f7fe fc20 	bl	801207e <ld_clust>
 801383e:	4603      	mov	r3, r0
 8013840:	61a3      	str	r3, [r4, #24]
 8013842:	e002      	b.n	801384a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013844:	2305      	movs	r3, #5
 8013846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801384a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801384e:	2b04      	cmp	r3, #4
 8013850:	d102      	bne.n	8013858 <f_chdir+0x88>
 8013852:	2305      	movs	r3, #5
 8013854:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801385c:	4618      	mov	r0, r3
 801385e:	3744      	adds	r7, #68	; 0x44
 8013860:	46bd      	mov	sp, r7
 8013862:	bd90      	pop	{r4, r7, pc}

08013864 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b090      	sub	sp, #64	; 0x40
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f107 0208 	add.w	r2, r7, #8
 8013874:	4611      	mov	r1, r2
 8013876:	4618      	mov	r0, r3
 8013878:	f7ff f9c2 	bl	8012c00 <validate>
 801387c:	4603      	mov	r3, r0
 801387e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013882:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013886:	2b00      	cmp	r3, #0
 8013888:	d103      	bne.n	8013892 <f_lseek+0x2e>
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	7d5b      	ldrb	r3, [r3, #21]
 801388e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013896:	2b00      	cmp	r3, #0
 8013898:	d002      	beq.n	80138a0 <f_lseek+0x3c>
 801389a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801389e:	e201      	b.n	8013ca4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	f000 80d9 	beq.w	8013a5c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138b0:	d15a      	bne.n	8013968 <f_lseek+0x104>
			tbl = fp->cltbl;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80138b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ba:	1d1a      	adds	r2, r3, #4
 80138bc:	627a      	str	r2, [r7, #36]	; 0x24
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	617b      	str	r3, [r7, #20]
 80138c2:	2302      	movs	r3, #2
 80138c4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	689b      	ldr	r3, [r3, #8]
 80138ca:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80138cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d03a      	beq.n	8013948 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80138d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d4:	613b      	str	r3, [r7, #16]
 80138d6:	2300      	movs	r3, #0
 80138d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138dc:	3302      	adds	r3, #2
 80138de:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80138e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e2:	60fb      	str	r3, [r7, #12]
 80138e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e6:	3301      	adds	r3, #1
 80138e8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fd ff03 	bl	80116fa <get_fat>
 80138f4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80138f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d804      	bhi.n	8013906 <f_lseek+0xa2>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2202      	movs	r2, #2
 8013900:	755a      	strb	r2, [r3, #21]
 8013902:	2302      	movs	r3, #2
 8013904:	e1ce      	b.n	8013ca4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801390c:	d104      	bne.n	8013918 <f_lseek+0xb4>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2201      	movs	r2, #1
 8013912:	755a      	strb	r2, [r3, #21]
 8013914:	2301      	movs	r3, #1
 8013916:	e1c5      	b.n	8013ca4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	3301      	adds	r3, #1
 801391c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801391e:	429a      	cmp	r2, r3
 8013920:	d0de      	beq.n	80138e0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	429a      	cmp	r2, r3
 8013928:	d809      	bhi.n	801393e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392c:	1d1a      	adds	r2, r3, #4
 801392e:	627a      	str	r2, [r7, #36]	; 0x24
 8013930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013932:	601a      	str	r2, [r3, #0]
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	1d1a      	adds	r2, r3, #4
 8013938:	627a      	str	r2, [r7, #36]	; 0x24
 801393a:	693a      	ldr	r2, [r7, #16]
 801393c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	69db      	ldr	r3, [r3, #28]
 8013942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013944:	429a      	cmp	r2, r3
 8013946:	d3c4      	bcc.n	80138d2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801394c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801394e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	429a      	cmp	r2, r3
 8013956:	d803      	bhi.n	8013960 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801395a:	2200      	movs	r2, #0
 801395c:	601a      	str	r2, [r3, #0]
 801395e:	e19f      	b.n	8013ca0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013960:	2311      	movs	r3, #17
 8013962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013966:	e19b      	b.n	8013ca0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	683a      	ldr	r2, [r7, #0]
 801396e:	429a      	cmp	r2, r3
 8013970:	d902      	bls.n	8013978 <f_lseek+0x114>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	68db      	ldr	r3, [r3, #12]
 8013976:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	683a      	ldr	r2, [r7, #0]
 801397c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	f000 818d 	beq.w	8013ca0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	3b01      	subs	r3, #1
 801398a:	4619      	mov	r1, r3
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7fe f998 	bl	8011cc2 <clmt_clust>
 8013992:	4602      	mov	r2, r0
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	69db      	ldr	r3, [r3, #28]
 801399e:	4619      	mov	r1, r3
 80139a0:	4610      	mov	r0, r2
 80139a2:	f7fd fe8b 	bl	80116bc <clust2sect>
 80139a6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d104      	bne.n	80139b8 <f_lseek+0x154>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2202      	movs	r2, #2
 80139b2:	755a      	strb	r2, [r3, #21]
 80139b4:	2302      	movs	r3, #2
 80139b6:	e175      	b.n	8013ca4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	3b01      	subs	r3, #1
 80139bc:	68ba      	ldr	r2, [r7, #8]
 80139be:	8992      	ldrh	r2, [r2, #12]
 80139c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80139c4:	68ba      	ldr	r2, [r7, #8]
 80139c6:	8952      	ldrh	r2, [r2, #10]
 80139c8:	3a01      	subs	r2, #1
 80139ca:	4013      	ands	r3, r2
 80139cc:	69ba      	ldr	r2, [r7, #24]
 80139ce:	4413      	add	r3, r2
 80139d0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	699b      	ldr	r3, [r3, #24]
 80139d6:	68ba      	ldr	r2, [r7, #8]
 80139d8:	8992      	ldrh	r2, [r2, #12]
 80139da:	fbb3 f1f2 	udiv	r1, r3, r2
 80139de:	fb02 f201 	mul.w	r2, r2, r1
 80139e2:	1a9b      	subs	r3, r3, r2
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	f000 815b 	beq.w	8013ca0 <f_lseek+0x43c>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6a1b      	ldr	r3, [r3, #32]
 80139ee:	69ba      	ldr	r2, [r7, #24]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	f000 8155 	beq.w	8013ca0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	7d1b      	ldrb	r3, [r3, #20]
 80139fa:	b25b      	sxtb	r3, r3
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	da18      	bge.n	8013a32 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	7858      	ldrb	r0, [r3, #1]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6a1a      	ldr	r2, [r3, #32]
 8013a0e:	2301      	movs	r3, #1
 8013a10:	f7fd fac8 	bl	8010fa4 <disk_write>
 8013a14:	4603      	mov	r3, r0
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d004      	beq.n	8013a24 <f_lseek+0x1c0>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	755a      	strb	r2, [r3, #21]
 8013a20:	2301      	movs	r3, #1
 8013a22:	e13f      	b.n	8013ca4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	7d1b      	ldrb	r3, [r3, #20]
 8013a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a2c:	b2da      	uxtb	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	7858      	ldrb	r0, [r3, #1]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	69ba      	ldr	r2, [r7, #24]
 8013a40:	f7fd fa90 	bl	8010f64 <disk_read>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d004      	beq.n	8013a54 <f_lseek+0x1f0>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	755a      	strb	r2, [r3, #21]
 8013a50:	2301      	movs	r3, #1
 8013a52:	e127      	b.n	8013ca4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	69ba      	ldr	r2, [r7, #24]
 8013a58:	621a      	str	r2, [r3, #32]
 8013a5a:	e121      	b.n	8013ca0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	683a      	ldr	r2, [r7, #0]
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d908      	bls.n	8013a78 <f_lseek+0x214>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	7d1b      	ldrb	r3, [r3, #20]
 8013a6a:	f003 0302 	and.w	r3, r3, #2
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d102      	bne.n	8013a78 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	699b      	ldr	r3, [r3, #24]
 8013a7c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	637b      	str	r3, [r7, #52]	; 0x34
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a86:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	f000 80b5 	beq.w	8013bfa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	895b      	ldrh	r3, [r3, #10]
 8013a94:	461a      	mov	r2, r3
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	899b      	ldrh	r3, [r3, #12]
 8013a9a:	fb03 f302 	mul.w	r3, r3, r2
 8013a9e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013aa0:	6a3b      	ldr	r3, [r7, #32]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d01b      	beq.n	8013ade <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	1e5a      	subs	r2, r3, #1
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8013ab0:	6a3b      	ldr	r3, [r7, #32]
 8013ab2:	1e59      	subs	r1, r3, #1
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d30f      	bcc.n	8013ade <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013abe:	6a3b      	ldr	r3, [r7, #32]
 8013ac0:	1e5a      	subs	r2, r3, #1
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	425b      	negs	r3, r3
 8013ac6:	401a      	ands	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	699b      	ldr	r3, [r3, #24]
 8013ad0:	683a      	ldr	r2, [r7, #0]
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	69db      	ldr	r3, [r3, #28]
 8013ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8013adc:	e022      	b.n	8013b24 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	689b      	ldr	r3, [r3, #8]
 8013ae2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d119      	bne.n	8013b1e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2100      	movs	r1, #0
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7fe f84f 	bl	8011b92 <create_chain>
 8013af4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	d104      	bne.n	8013b06 <f_lseek+0x2a2>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2202      	movs	r2, #2
 8013b00:	755a      	strb	r2, [r3, #21]
 8013b02:	2302      	movs	r3, #2
 8013b04:	e0ce      	b.n	8013ca4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b0c:	d104      	bne.n	8013b18 <f_lseek+0x2b4>
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2201      	movs	r2, #1
 8013b12:	755a      	strb	r2, [r3, #21]
 8013b14:	2301      	movs	r3, #1
 8013b16:	e0c5      	b.n	8013ca4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b1c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b22:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d067      	beq.n	8013bfa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013b2a:	e03a      	b.n	8013ba2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013b2c:	683a      	ldr	r2, [r7, #0]
 8013b2e:	69fb      	ldr	r3, [r7, #28]
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	603b      	str	r3, [r7, #0]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	699a      	ldr	r2, [r3, #24]
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	441a      	add	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	7d1b      	ldrb	r3, [r3, #20]
 8013b44:	f003 0302 	and.w	r3, r3, #2
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00b      	beq.n	8013b64 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe f81e 	bl	8011b92 <create_chain>
 8013b56:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d108      	bne.n	8013b70 <f_lseek+0x30c>
							ofs = 0; break;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	603b      	str	r3, [r7, #0]
 8013b62:	e022      	b.n	8013baa <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fd fdc6 	bl	80116fa <get_fat>
 8013b6e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b76:	d104      	bne.n	8013b82 <f_lseek+0x31e>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	755a      	strb	r2, [r3, #21]
 8013b7e:	2301      	movs	r3, #1
 8013b80:	e090      	b.n	8013ca4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d904      	bls.n	8013b92 <f_lseek+0x32e>
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	69db      	ldr	r3, [r3, #28]
 8013b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d304      	bcc.n	8013b9c <f_lseek+0x338>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2202      	movs	r2, #2
 8013b96:	755a      	strb	r2, [r3, #21]
 8013b98:	2302      	movs	r3, #2
 8013b9a:	e083      	b.n	8013ca4 <f_lseek+0x440>
					fp->clust = clst;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ba0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013ba2:	683a      	ldr	r2, [r7, #0]
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d8c0      	bhi.n	8013b2c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	699a      	ldr	r2, [r3, #24]
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	441a      	add	r2, r3
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	899b      	ldrh	r3, [r3, #12]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bc2:	fb02 f201 	mul.w	r2, r2, r1
 8013bc6:	1a9b      	subs	r3, r3, r2
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d016      	beq.n	8013bfa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fd fd73 	bl	80116bc <clust2sect>
 8013bd6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d104      	bne.n	8013be8 <f_lseek+0x384>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2202      	movs	r2, #2
 8013be2:	755a      	strb	r2, [r3, #21]
 8013be4:	2302      	movs	r3, #2
 8013be6:	e05d      	b.n	8013ca4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	899b      	ldrh	r3, [r3, #12]
 8013bec:	461a      	mov	r2, r3
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013bf6:	4413      	add	r3, r2
 8013bf8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	699a      	ldr	r2, [r3, #24]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	68db      	ldr	r3, [r3, #12]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d90a      	bls.n	8013c1c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	699a      	ldr	r2, [r3, #24]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	7d1b      	ldrb	r3, [r3, #20]
 8013c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c16:	b2da      	uxtb	r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	699b      	ldr	r3, [r3, #24]
 8013c20:	68ba      	ldr	r2, [r7, #8]
 8013c22:	8992      	ldrh	r2, [r2, #12]
 8013c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c28:	fb02 f201 	mul.w	r2, r2, r1
 8013c2c:	1a9b      	subs	r3, r3, r2
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d036      	beq.n	8013ca0 <f_lseek+0x43c>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6a1b      	ldr	r3, [r3, #32]
 8013c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d031      	beq.n	8013ca0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	7d1b      	ldrb	r3, [r3, #20]
 8013c40:	b25b      	sxtb	r3, r3
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	da18      	bge.n	8013c78 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	7858      	ldrb	r0, [r3, #1]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a1a      	ldr	r2, [r3, #32]
 8013c54:	2301      	movs	r3, #1
 8013c56:	f7fd f9a5 	bl	8010fa4 <disk_write>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d004      	beq.n	8013c6a <f_lseek+0x406>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2201      	movs	r2, #1
 8013c64:	755a      	strb	r2, [r3, #21]
 8013c66:	2301      	movs	r3, #1
 8013c68:	e01c      	b.n	8013ca4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	7d1b      	ldrb	r3, [r3, #20]
 8013c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c72:	b2da      	uxtb	r2, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	7858      	ldrb	r0, [r3, #1]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c82:	2301      	movs	r3, #1
 8013c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c86:	f7fd f96d 	bl	8010f64 <disk_read>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d004      	beq.n	8013c9a <f_lseek+0x436>
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2201      	movs	r2, #1
 8013c94:	755a      	strb	r2, [r3, #21]
 8013c96:	2301      	movs	r3, #1
 8013c98:	e004      	b.n	8013ca4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c9e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013ca0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3740      	adds	r7, #64	; 0x40
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}

08013cac <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b09e      	sub	sp, #120	; 0x78
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013cb8:	f107 010c 	add.w	r1, r7, #12
 8013cbc:	1d3b      	adds	r3, r7, #4
 8013cbe:	2202      	movs	r2, #2
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7fe fd17 	bl	80126f4 <find_volume>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013cd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	f040 80a4 	bne.w	8013e22 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ce0:	4611      	mov	r1, r2
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7fe fbd6 	bl	8012494 <follow_path>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013cee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d108      	bne.n	8013d08 <f_unlink+0x5c>
 8013cf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013cfa:	f003 0320 	and.w	r3, r3, #32
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d002      	beq.n	8013d08 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013d02:	2306      	movs	r3, #6
 8013d04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013d08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d108      	bne.n	8013d22 <f_unlink+0x76>
 8013d10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d14:	2102      	movs	r1, #2
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7fd fa82 	bl	8011220 <chk_lock>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013d22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d17b      	bne.n	8013e22 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013d2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013d2e:	b25b      	sxtb	r3, r3
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	da03      	bge.n	8013d3c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013d34:	2306      	movs	r3, #6
 8013d36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013d3a:	e008      	b.n	8013d4e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013d3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013d40:	f003 0301 	and.w	r3, r3, #1
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d002      	beq.n	8013d4e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013d48:	2307      	movs	r3, #7
 8013d4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013d4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d13d      	bne.n	8013dd2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013d5a:	4611      	mov	r1, r2
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7fe f98e 	bl	801207e <ld_clust>
 8013d62:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013d64:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013d68:	f003 0310 	and.w	r3, r3, #16
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d030      	beq.n	8013dd2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	699b      	ldr	r3, [r3, #24]
 8013d74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d103      	bne.n	8013d82 <f_unlink+0xd6>
						res = FR_DENIED;
 8013d7a:	2307      	movs	r3, #7
 8013d7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013d80:	e027      	b.n	8013dd2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d88:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013d8a:	f107 0310 	add.w	r3, r7, #16
 8013d8e:	2100      	movs	r1, #0
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fd ffce 	bl	8011d32 <dir_sdi>
 8013d96:	4603      	mov	r3, r0
 8013d98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013d9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d116      	bne.n	8013dd2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013da4:	f107 0310 	add.w	r3, r7, #16
 8013da8:	2100      	movs	r1, #0
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe f9a6 	bl	80120fc <dir_read>
 8013db0:	4603      	mov	r3, r0
 8013db2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013db6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d102      	bne.n	8013dc4 <f_unlink+0x118>
 8013dbe:	2307      	movs	r3, #7
 8013dc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013dc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dc8:	2b04      	cmp	r3, #4
 8013dca:	d102      	bne.n	8013dd2 <f_unlink+0x126>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013dd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d123      	bne.n	8013e22 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013dda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fe fa70 	bl	80122c4 <dir_remove>
 8013de4:	4603      	mov	r3, r0
 8013de6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013dea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d10c      	bne.n	8013e0c <f_unlink+0x160>
 8013df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d009      	beq.n	8013e0c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013df8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7fd fe61 	bl	8011ac8 <remove_chain>
 8013e06:	4603      	mov	r3, r0
 8013e08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013e0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d106      	bne.n	8013e22 <f_unlink+0x176>
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7fd fbe0 	bl	80115dc <sync_fs>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013e22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3778      	adds	r7, #120	; 0x78
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
	...

08013e30 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b096      	sub	sp, #88	; 0x58
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013e38:	f107 0108 	add.w	r1, r7, #8
 8013e3c:	1d3b      	adds	r3, r7, #4
 8013e3e:	2202      	movs	r2, #2
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7fe fc57 	bl	80126f4 <find_volume>
 8013e46:	4603      	mov	r3, r0
 8013e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f040 80fe 	bne.w	8014056 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	f107 030c 	add.w	r3, r7, #12
 8013e60:	4611      	mov	r1, r2
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fe fb16 	bl	8012494 <follow_path>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013e6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d102      	bne.n	8013e7c <f_mkdir+0x4c>
 8013e76:	2308      	movs	r3, #8
 8013e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e80:	2b04      	cmp	r3, #4
 8013e82:	d108      	bne.n	8013e96 <f_mkdir+0x66>
 8013e84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013e88:	f003 0320 	and.w	r3, r3, #32
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d002      	beq.n	8013e96 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013e90:	2306      	movs	r3, #6
 8013e92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013e96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e9a:	2b04      	cmp	r3, #4
 8013e9c:	f040 80db 	bne.w	8014056 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013ea0:	f107 030c 	add.w	r3, r7, #12
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fd fe73 	bl	8011b92 <create_chain>
 8013eac:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	895b      	ldrh	r3, [r3, #10]
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	899b      	ldrh	r3, [r3, #12]
 8013eb8:	fb03 f302 	mul.w	r3, r3, r2
 8013ebc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d102      	bne.n	8013ed0 <f_mkdir+0xa0>
 8013eca:	2307      	movs	r3, #7
 8013ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ed2:	2b01      	cmp	r3, #1
 8013ed4:	d102      	bne.n	8013edc <f_mkdir+0xac>
 8013ed6:	2302      	movs	r3, #2
 8013ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ee2:	d102      	bne.n	8013eea <f_mkdir+0xba>
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013eea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d106      	bne.n	8013f00 <f_mkdir+0xd0>
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fd faff 	bl	80114f8 <sync_window>
 8013efa:	4603      	mov	r3, r0
 8013efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013f00:	4b58      	ldr	r3, [pc, #352]	; (8014064 <f_mkdir+0x234>)
 8013f02:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d16c      	bne.n	8013fe6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fd fbd3 	bl	80116bc <clust2sect>
 8013f16:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	3338      	adds	r3, #56	; 0x38
 8013f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	899b      	ldrh	r3, [r3, #12]
 8013f22:	461a      	mov	r2, r3
 8013f24:	2100      	movs	r1, #0
 8013f26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f28:	f7fd f91d 	bl	8011166 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013f2c:	220b      	movs	r2, #11
 8013f2e:	2120      	movs	r1, #32
 8013f30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f32:	f7fd f918 	bl	8011166 <mem_set>
					dir[DIR_Name] = '.';
 8013f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f38:	222e      	movs	r2, #46	; 0x2e
 8013f3a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f3e:	330b      	adds	r3, #11
 8013f40:	2210      	movs	r2, #16
 8013f42:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f46:	3316      	adds	r3, #22
 8013f48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fd f8be 	bl	80110cc <st_dword>
					st_clust(fs, dir, dcl);
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7fe f8b0 	bl	80120bc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f5e:	3320      	adds	r3, #32
 8013f60:	2220      	movs	r2, #32
 8013f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fd f8dd 	bl	8011124 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f6c:	3321      	adds	r3, #33	; 0x21
 8013f6e:	222e      	movs	r2, #46	; 0x2e
 8013f70:	701a      	strb	r2, [r3, #0]
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	2b03      	cmp	r3, #3
 8013f7c:	d106      	bne.n	8013f8c <f_mkdir+0x15c>
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d101      	bne.n	8013f8c <f_mkdir+0x15c>
 8013f88:	2300      	movs	r3, #0
 8013f8a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013f8c:	68b8      	ldr	r0, [r7, #8]
 8013f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f90:	3320      	adds	r3, #32
 8013f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f94:	4619      	mov	r1, r3
 8013f96:	f7fe f891 	bl	80120bc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	895b      	ldrh	r3, [r3, #10]
 8013f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8013fa0:	e01c      	b.n	8013fdc <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fa4:	1c5a      	adds	r2, r3, #1
 8013fa6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013fa8:	68ba      	ldr	r2, [r7, #8]
 8013faa:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	2201      	movs	r2, #1
 8013fb0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7fd fa9f 	bl	80114f8 <sync_window>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d10d      	bne.n	8013fe4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	899b      	ldrh	r3, [r3, #12]
 8013fcc:	461a      	mov	r2, r3
 8013fce:	2100      	movs	r1, #0
 8013fd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013fd2:	f7fd f8c8 	bl	8011166 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	653b      	str	r3, [r7, #80]	; 0x50
 8013fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d1df      	bne.n	8013fa2 <f_mkdir+0x172>
 8013fe2:	e000      	b.n	8013fe6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013fe4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013fe6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d107      	bne.n	8013ffe <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013fee:	f107 030c 	add.w	r3, r7, #12
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fe f934 	bl	8012260 <dir_register>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013ffe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014002:	2b00      	cmp	r3, #0
 8014004:	d120      	bne.n	8014048 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014008:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801400c:	3316      	adds	r3, #22
 801400e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014010:	4618      	mov	r0, r3
 8014012:	f7fd f85b 	bl	80110cc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801401a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801401c:	4618      	mov	r0, r3
 801401e:	f7fe f84d 	bl	80120bc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014024:	330b      	adds	r3, #11
 8014026:	2210      	movs	r2, #16
 8014028:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	2201      	movs	r2, #1
 801402e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014034:	2b00      	cmp	r3, #0
 8014036:	d10e      	bne.n	8014056 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	4618      	mov	r0, r3
 801403c:	f7fd face 	bl	80115dc <sync_fs>
 8014040:	4603      	mov	r3, r0
 8014042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014046:	e006      	b.n	8014056 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014048:	f107 030c 	add.w	r3, r7, #12
 801404c:	2200      	movs	r2, #0
 801404e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014050:	4618      	mov	r0, r3
 8014052:	f7fd fd39 	bl	8011ac8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801405a:	4618      	mov	r0, r3
 801405c:	3758      	adds	r7, #88	; 0x58
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	274a0000 	.word	0x274a0000

08014068 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b088      	sub	sp, #32
 801406c:	af00      	add	r7, sp, #0
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	60b9      	str	r1, [r7, #8]
 8014072:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014074:	2300      	movs	r3, #0
 8014076:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801407c:	e017      	b.n	80140ae <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801407e:	f107 0310 	add.w	r3, r7, #16
 8014082:	f107 0114 	add.w	r1, r7, #20
 8014086:	2201      	movs	r2, #1
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f7ff f803 	bl	8013094 <f_read>
		if (rc != 1) break;
 801408e:	693b      	ldr	r3, [r7, #16]
 8014090:	2b01      	cmp	r3, #1
 8014092:	d112      	bne.n	80140ba <f_gets+0x52>
		c = s[0];
 8014094:	7d3b      	ldrb	r3, [r7, #20]
 8014096:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	1c5a      	adds	r2, r3, #1
 801409c:	61ba      	str	r2, [r7, #24]
 801409e:	7dfa      	ldrb	r2, [r7, #23]
 80140a0:	701a      	strb	r2, [r3, #0]
		n++;
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	3301      	adds	r3, #1
 80140a6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80140a8:	7dfb      	ldrb	r3, [r7, #23]
 80140aa:	2b0a      	cmp	r3, #10
 80140ac:	d007      	beq.n	80140be <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	3b01      	subs	r3, #1
 80140b2:	69fa      	ldr	r2, [r7, #28]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	dbe2      	blt.n	801407e <f_gets+0x16>
 80140b8:	e002      	b.n	80140c0 <f_gets+0x58>
		if (rc != 1) break;
 80140ba:	bf00      	nop
 80140bc:	e000      	b.n	80140c0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80140be:	bf00      	nop
	}
	*p = 0;
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	2200      	movs	r2, #0
 80140c4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d001      	beq.n	80140d0 <f_gets+0x68>
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	e000      	b.n	80140d2 <f_gets+0x6a>
 80140d0:	2300      	movs	r3, #0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3720      	adds	r7, #32
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
	...

080140dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80140dc:	b480      	push	{r7}
 80140de:	b087      	sub	sp, #28
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	4613      	mov	r3, r2
 80140e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80140ea:	2301      	movs	r3, #1
 80140ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80140ee:	2300      	movs	r3, #0
 80140f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80140f2:	4b1f      	ldr	r3, [pc, #124]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 80140f4:	7a5b      	ldrb	r3, [r3, #9]
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d131      	bne.n	8014160 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80140fc:	4b1c      	ldr	r3, [pc, #112]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 80140fe:	7a5b      	ldrb	r3, [r3, #9]
 8014100:	b2db      	uxtb	r3, r3
 8014102:	461a      	mov	r2, r3
 8014104:	4b1a      	ldr	r3, [pc, #104]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 8014106:	2100      	movs	r1, #0
 8014108:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801410a:	4b19      	ldr	r3, [pc, #100]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 801410c:	7a5b      	ldrb	r3, [r3, #9]
 801410e:	b2db      	uxtb	r3, r3
 8014110:	4a17      	ldr	r2, [pc, #92]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 8014112:	009b      	lsls	r3, r3, #2
 8014114:	4413      	add	r3, r2
 8014116:	68fa      	ldr	r2, [r7, #12]
 8014118:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801411a:	4b15      	ldr	r3, [pc, #84]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 801411c:	7a5b      	ldrb	r3, [r3, #9]
 801411e:	b2db      	uxtb	r3, r3
 8014120:	461a      	mov	r2, r3
 8014122:	4b13      	ldr	r3, [pc, #76]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 8014124:	4413      	add	r3, r2
 8014126:	79fa      	ldrb	r2, [r7, #7]
 8014128:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801412a:	4b11      	ldr	r3, [pc, #68]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 801412c:	7a5b      	ldrb	r3, [r3, #9]
 801412e:	b2db      	uxtb	r3, r3
 8014130:	1c5a      	adds	r2, r3, #1
 8014132:	b2d1      	uxtb	r1, r2
 8014134:	4a0e      	ldr	r2, [pc, #56]	; (8014170 <FATFS_LinkDriverEx+0x94>)
 8014136:	7251      	strb	r1, [r2, #9]
 8014138:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801413a:	7dbb      	ldrb	r3, [r7, #22]
 801413c:	3330      	adds	r3, #48	; 0x30
 801413e:	b2da      	uxtb	r2, r3
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	3301      	adds	r3, #1
 8014148:	223a      	movs	r2, #58	; 0x3a
 801414a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	3302      	adds	r3, #2
 8014150:	222f      	movs	r2, #47	; 0x2f
 8014152:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	3303      	adds	r3, #3
 8014158:	2200      	movs	r2, #0
 801415a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801415c:	2300      	movs	r3, #0
 801415e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014160:	7dfb      	ldrb	r3, [r7, #23]
}
 8014162:	4618      	mov	r0, r3
 8014164:	371c      	adds	r7, #28
 8014166:	46bd      	mov	sp, r7
 8014168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416c:	4770      	bx	lr
 801416e:	bf00      	nop
 8014170:	2003d4a8 	.word	0x2003d4a8

08014174 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
 801417c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801417e:	2200      	movs	r2, #0
 8014180:	6839      	ldr	r1, [r7, #0]
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f7ff ffaa 	bl	80140dc <FATFS_LinkDriverEx>
 8014188:	4603      	mov	r3, r0
}
 801418a:	4618      	mov	r0, r3
 801418c:	3708      	adds	r7, #8
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}

08014192 <__cxa_guard_acquire>:
 8014192:	6803      	ldr	r3, [r0, #0]
 8014194:	07db      	lsls	r3, r3, #31
 8014196:	d406      	bmi.n	80141a6 <__cxa_guard_acquire+0x14>
 8014198:	7843      	ldrb	r3, [r0, #1]
 801419a:	b103      	cbz	r3, 801419e <__cxa_guard_acquire+0xc>
 801419c:	deff      	udf	#255	; 0xff
 801419e:	2301      	movs	r3, #1
 80141a0:	7043      	strb	r3, [r0, #1]
 80141a2:	4618      	mov	r0, r3
 80141a4:	4770      	bx	lr
 80141a6:	2000      	movs	r0, #0
 80141a8:	4770      	bx	lr

080141aa <__cxa_guard_release>:
 80141aa:	2301      	movs	r3, #1
 80141ac:	6003      	str	r3, [r0, #0]
 80141ae:	4770      	bx	lr

080141b0 <cos>:
 80141b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141b2:	ec51 0b10 	vmov	r0, r1, d0
 80141b6:	4a1e      	ldr	r2, [pc, #120]	; (8014230 <cos+0x80>)
 80141b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141bc:	4293      	cmp	r3, r2
 80141be:	dc06      	bgt.n	80141ce <cos+0x1e>
 80141c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014228 <cos+0x78>
 80141c4:	f000 fa74 	bl	80146b0 <__kernel_cos>
 80141c8:	ec51 0b10 	vmov	r0, r1, d0
 80141cc:	e007      	b.n	80141de <cos+0x2e>
 80141ce:	4a19      	ldr	r2, [pc, #100]	; (8014234 <cos+0x84>)
 80141d0:	4293      	cmp	r3, r2
 80141d2:	dd09      	ble.n	80141e8 <cos+0x38>
 80141d4:	ee10 2a10 	vmov	r2, s0
 80141d8:	460b      	mov	r3, r1
 80141da:	f7ec f86d 	bl	80002b8 <__aeabi_dsub>
 80141de:	ec41 0b10 	vmov	d0, r0, r1
 80141e2:	b005      	add	sp, #20
 80141e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80141e8:	4668      	mov	r0, sp
 80141ea:	f000 f86d 	bl	80142c8 <__ieee754_rem_pio2>
 80141ee:	f000 0003 	and.w	r0, r0, #3
 80141f2:	2801      	cmp	r0, #1
 80141f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141f8:	ed9d 0b00 	vldr	d0, [sp]
 80141fc:	d007      	beq.n	801420e <cos+0x5e>
 80141fe:	2802      	cmp	r0, #2
 8014200:	d00e      	beq.n	8014220 <cos+0x70>
 8014202:	2800      	cmp	r0, #0
 8014204:	d0de      	beq.n	80141c4 <cos+0x14>
 8014206:	2001      	movs	r0, #1
 8014208:	f000 fe5a 	bl	8014ec0 <__kernel_sin>
 801420c:	e7dc      	b.n	80141c8 <cos+0x18>
 801420e:	f000 fe57 	bl	8014ec0 <__kernel_sin>
 8014212:	ec53 2b10 	vmov	r2, r3, d0
 8014216:	ee10 0a10 	vmov	r0, s0
 801421a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801421e:	e7de      	b.n	80141de <cos+0x2e>
 8014220:	f000 fa46 	bl	80146b0 <__kernel_cos>
 8014224:	e7f5      	b.n	8014212 <cos+0x62>
 8014226:	bf00      	nop
	...
 8014230:	3fe921fb 	.word	0x3fe921fb
 8014234:	7fefffff 	.word	0x7fefffff

08014238 <sin>:
 8014238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801423a:	ec51 0b10 	vmov	r0, r1, d0
 801423e:	4a20      	ldr	r2, [pc, #128]	; (80142c0 <sin+0x88>)
 8014240:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014244:	4293      	cmp	r3, r2
 8014246:	dc07      	bgt.n	8014258 <sin+0x20>
 8014248:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80142b8 <sin+0x80>
 801424c:	2000      	movs	r0, #0
 801424e:	f000 fe37 	bl	8014ec0 <__kernel_sin>
 8014252:	ec51 0b10 	vmov	r0, r1, d0
 8014256:	e007      	b.n	8014268 <sin+0x30>
 8014258:	4a1a      	ldr	r2, [pc, #104]	; (80142c4 <sin+0x8c>)
 801425a:	4293      	cmp	r3, r2
 801425c:	dd09      	ble.n	8014272 <sin+0x3a>
 801425e:	ee10 2a10 	vmov	r2, s0
 8014262:	460b      	mov	r3, r1
 8014264:	f7ec f828 	bl	80002b8 <__aeabi_dsub>
 8014268:	ec41 0b10 	vmov	d0, r0, r1
 801426c:	b005      	add	sp, #20
 801426e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014272:	4668      	mov	r0, sp
 8014274:	f000 f828 	bl	80142c8 <__ieee754_rem_pio2>
 8014278:	f000 0003 	and.w	r0, r0, #3
 801427c:	2801      	cmp	r0, #1
 801427e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014282:	ed9d 0b00 	vldr	d0, [sp]
 8014286:	d004      	beq.n	8014292 <sin+0x5a>
 8014288:	2802      	cmp	r0, #2
 801428a:	d005      	beq.n	8014298 <sin+0x60>
 801428c:	b970      	cbnz	r0, 80142ac <sin+0x74>
 801428e:	2001      	movs	r0, #1
 8014290:	e7dd      	b.n	801424e <sin+0x16>
 8014292:	f000 fa0d 	bl	80146b0 <__kernel_cos>
 8014296:	e7dc      	b.n	8014252 <sin+0x1a>
 8014298:	2001      	movs	r0, #1
 801429a:	f000 fe11 	bl	8014ec0 <__kernel_sin>
 801429e:	ec53 2b10 	vmov	r2, r3, d0
 80142a2:	ee10 0a10 	vmov	r0, s0
 80142a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80142aa:	e7dd      	b.n	8014268 <sin+0x30>
 80142ac:	f000 fa00 	bl	80146b0 <__kernel_cos>
 80142b0:	e7f5      	b.n	801429e <sin+0x66>
 80142b2:	bf00      	nop
 80142b4:	f3af 8000 	nop.w
	...
 80142c0:	3fe921fb 	.word	0x3fe921fb
 80142c4:	7fefffff 	.word	0x7fefffff

080142c8 <__ieee754_rem_pio2>:
 80142c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142cc:	ec57 6b10 	vmov	r6, r7, d0
 80142d0:	4bc3      	ldr	r3, [pc, #780]	; (80145e0 <__ieee754_rem_pio2+0x318>)
 80142d2:	b08d      	sub	sp, #52	; 0x34
 80142d4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80142d8:	4598      	cmp	r8, r3
 80142da:	4604      	mov	r4, r0
 80142dc:	9704      	str	r7, [sp, #16]
 80142de:	dc07      	bgt.n	80142f0 <__ieee754_rem_pio2+0x28>
 80142e0:	2200      	movs	r2, #0
 80142e2:	2300      	movs	r3, #0
 80142e4:	ed84 0b00 	vstr	d0, [r4]
 80142e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80142ec:	2500      	movs	r5, #0
 80142ee:	e027      	b.n	8014340 <__ieee754_rem_pio2+0x78>
 80142f0:	4bbc      	ldr	r3, [pc, #752]	; (80145e4 <__ieee754_rem_pio2+0x31c>)
 80142f2:	4598      	cmp	r8, r3
 80142f4:	dc75      	bgt.n	80143e2 <__ieee754_rem_pio2+0x11a>
 80142f6:	9b04      	ldr	r3, [sp, #16]
 80142f8:	4dbb      	ldr	r5, [pc, #748]	; (80145e8 <__ieee754_rem_pio2+0x320>)
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	ee10 0a10 	vmov	r0, s0
 8014300:	a3a9      	add	r3, pc, #676	; (adr r3, 80145a8 <__ieee754_rem_pio2+0x2e0>)
 8014302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014306:	4639      	mov	r1, r7
 8014308:	dd36      	ble.n	8014378 <__ieee754_rem_pio2+0xb0>
 801430a:	f7eb ffd5 	bl	80002b8 <__aeabi_dsub>
 801430e:	45a8      	cmp	r8, r5
 8014310:	4606      	mov	r6, r0
 8014312:	460f      	mov	r7, r1
 8014314:	d018      	beq.n	8014348 <__ieee754_rem_pio2+0x80>
 8014316:	a3a6      	add	r3, pc, #664	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431c:	f7eb ffcc 	bl	80002b8 <__aeabi_dsub>
 8014320:	4602      	mov	r2, r0
 8014322:	460b      	mov	r3, r1
 8014324:	e9c4 2300 	strd	r2, r3, [r4]
 8014328:	4630      	mov	r0, r6
 801432a:	4639      	mov	r1, r7
 801432c:	f7eb ffc4 	bl	80002b8 <__aeabi_dsub>
 8014330:	a39f      	add	r3, pc, #636	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014336:	f7eb ffbf 	bl	80002b8 <__aeabi_dsub>
 801433a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801433e:	2501      	movs	r5, #1
 8014340:	4628      	mov	r0, r5
 8014342:	b00d      	add	sp, #52	; 0x34
 8014344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014348:	a39b      	add	r3, pc, #620	; (adr r3, 80145b8 <__ieee754_rem_pio2+0x2f0>)
 801434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434e:	f7eb ffb3 	bl	80002b8 <__aeabi_dsub>
 8014352:	a39b      	add	r3, pc, #620	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 8014354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014358:	4606      	mov	r6, r0
 801435a:	460f      	mov	r7, r1
 801435c:	f7eb ffac 	bl	80002b8 <__aeabi_dsub>
 8014360:	4602      	mov	r2, r0
 8014362:	460b      	mov	r3, r1
 8014364:	e9c4 2300 	strd	r2, r3, [r4]
 8014368:	4630      	mov	r0, r6
 801436a:	4639      	mov	r1, r7
 801436c:	f7eb ffa4 	bl	80002b8 <__aeabi_dsub>
 8014370:	a393      	add	r3, pc, #588	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 8014372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014376:	e7de      	b.n	8014336 <__ieee754_rem_pio2+0x6e>
 8014378:	f7eb ffa0 	bl	80002bc <__adddf3>
 801437c:	45a8      	cmp	r8, r5
 801437e:	4606      	mov	r6, r0
 8014380:	460f      	mov	r7, r1
 8014382:	d016      	beq.n	80143b2 <__ieee754_rem_pio2+0xea>
 8014384:	a38a      	add	r3, pc, #552	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801438a:	f7eb ff97 	bl	80002bc <__adddf3>
 801438e:	4602      	mov	r2, r0
 8014390:	460b      	mov	r3, r1
 8014392:	e9c4 2300 	strd	r2, r3, [r4]
 8014396:	4630      	mov	r0, r6
 8014398:	4639      	mov	r1, r7
 801439a:	f7eb ff8d 	bl	80002b8 <__aeabi_dsub>
 801439e:	a384      	add	r3, pc, #528	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 80143a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a4:	f7eb ff8a 	bl	80002bc <__adddf3>
 80143a8:	f04f 35ff 	mov.w	r5, #4294967295
 80143ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80143b0:	e7c6      	b.n	8014340 <__ieee754_rem_pio2+0x78>
 80143b2:	a381      	add	r3, pc, #516	; (adr r3, 80145b8 <__ieee754_rem_pio2+0x2f0>)
 80143b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b8:	f7eb ff80 	bl	80002bc <__adddf3>
 80143bc:	a380      	add	r3, pc, #512	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 80143be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c2:	4606      	mov	r6, r0
 80143c4:	460f      	mov	r7, r1
 80143c6:	f7eb ff79 	bl	80002bc <__adddf3>
 80143ca:	4602      	mov	r2, r0
 80143cc:	460b      	mov	r3, r1
 80143ce:	e9c4 2300 	strd	r2, r3, [r4]
 80143d2:	4630      	mov	r0, r6
 80143d4:	4639      	mov	r1, r7
 80143d6:	f7eb ff6f 	bl	80002b8 <__aeabi_dsub>
 80143da:	a379      	add	r3, pc, #484	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 80143dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e0:	e7e0      	b.n	80143a4 <__ieee754_rem_pio2+0xdc>
 80143e2:	4b82      	ldr	r3, [pc, #520]	; (80145ec <__ieee754_rem_pio2+0x324>)
 80143e4:	4598      	cmp	r8, r3
 80143e6:	f300 80d0 	bgt.w	801458a <__ieee754_rem_pio2+0x2c2>
 80143ea:	f000 fe23 	bl	8015034 <fabs>
 80143ee:	ec57 6b10 	vmov	r6, r7, d0
 80143f2:	ee10 0a10 	vmov	r0, s0
 80143f6:	a374      	add	r3, pc, #464	; (adr r3, 80145c8 <__ieee754_rem_pio2+0x300>)
 80143f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fc:	4639      	mov	r1, r7
 80143fe:	f7ec f913 	bl	8000628 <__aeabi_dmul>
 8014402:	2200      	movs	r2, #0
 8014404:	4b7a      	ldr	r3, [pc, #488]	; (80145f0 <__ieee754_rem_pio2+0x328>)
 8014406:	f7eb ff59 	bl	80002bc <__adddf3>
 801440a:	f7ec fbbd 	bl	8000b88 <__aeabi_d2iz>
 801440e:	4605      	mov	r5, r0
 8014410:	f7ec f8a0 	bl	8000554 <__aeabi_i2d>
 8014414:	a364      	add	r3, pc, #400	; (adr r3, 80145a8 <__ieee754_rem_pio2+0x2e0>)
 8014416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801441e:	f7ec f903 	bl	8000628 <__aeabi_dmul>
 8014422:	4602      	mov	r2, r0
 8014424:	460b      	mov	r3, r1
 8014426:	4630      	mov	r0, r6
 8014428:	4639      	mov	r1, r7
 801442a:	f7eb ff45 	bl	80002b8 <__aeabi_dsub>
 801442e:	a360      	add	r3, pc, #384	; (adr r3, 80145b0 <__ieee754_rem_pio2+0x2e8>)
 8014430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014434:	4682      	mov	sl, r0
 8014436:	468b      	mov	fp, r1
 8014438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801443c:	f7ec f8f4 	bl	8000628 <__aeabi_dmul>
 8014440:	2d1f      	cmp	r5, #31
 8014442:	4606      	mov	r6, r0
 8014444:	460f      	mov	r7, r1
 8014446:	dc0c      	bgt.n	8014462 <__ieee754_rem_pio2+0x19a>
 8014448:	1e6a      	subs	r2, r5, #1
 801444a:	4b6a      	ldr	r3, [pc, #424]	; (80145f4 <__ieee754_rem_pio2+0x32c>)
 801444c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014450:	4543      	cmp	r3, r8
 8014452:	d006      	beq.n	8014462 <__ieee754_rem_pio2+0x19a>
 8014454:	4632      	mov	r2, r6
 8014456:	463b      	mov	r3, r7
 8014458:	4650      	mov	r0, sl
 801445a:	4659      	mov	r1, fp
 801445c:	f7eb ff2c 	bl	80002b8 <__aeabi_dsub>
 8014460:	e00e      	b.n	8014480 <__ieee754_rem_pio2+0x1b8>
 8014462:	4632      	mov	r2, r6
 8014464:	463b      	mov	r3, r7
 8014466:	4650      	mov	r0, sl
 8014468:	4659      	mov	r1, fp
 801446a:	f7eb ff25 	bl	80002b8 <__aeabi_dsub>
 801446e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014472:	9305      	str	r3, [sp, #20]
 8014474:	9a05      	ldr	r2, [sp, #20]
 8014476:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801447a:	1ad3      	subs	r3, r2, r3
 801447c:	2b10      	cmp	r3, #16
 801447e:	dc02      	bgt.n	8014486 <__ieee754_rem_pio2+0x1be>
 8014480:	e9c4 0100 	strd	r0, r1, [r4]
 8014484:	e039      	b.n	80144fa <__ieee754_rem_pio2+0x232>
 8014486:	a34c      	add	r3, pc, #304	; (adr r3, 80145b8 <__ieee754_rem_pio2+0x2f0>)
 8014488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014490:	f7ec f8ca 	bl	8000628 <__aeabi_dmul>
 8014494:	4606      	mov	r6, r0
 8014496:	460f      	mov	r7, r1
 8014498:	4602      	mov	r2, r0
 801449a:	460b      	mov	r3, r1
 801449c:	4650      	mov	r0, sl
 801449e:	4659      	mov	r1, fp
 80144a0:	f7eb ff0a 	bl	80002b8 <__aeabi_dsub>
 80144a4:	4602      	mov	r2, r0
 80144a6:	460b      	mov	r3, r1
 80144a8:	4680      	mov	r8, r0
 80144aa:	4689      	mov	r9, r1
 80144ac:	4650      	mov	r0, sl
 80144ae:	4659      	mov	r1, fp
 80144b0:	f7eb ff02 	bl	80002b8 <__aeabi_dsub>
 80144b4:	4632      	mov	r2, r6
 80144b6:	463b      	mov	r3, r7
 80144b8:	f7eb fefe 	bl	80002b8 <__aeabi_dsub>
 80144bc:	a340      	add	r3, pc, #256	; (adr r3, 80145c0 <__ieee754_rem_pio2+0x2f8>)
 80144be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c2:	4606      	mov	r6, r0
 80144c4:	460f      	mov	r7, r1
 80144c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144ca:	f7ec f8ad 	bl	8000628 <__aeabi_dmul>
 80144ce:	4632      	mov	r2, r6
 80144d0:	463b      	mov	r3, r7
 80144d2:	f7eb fef1 	bl	80002b8 <__aeabi_dsub>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	4606      	mov	r6, r0
 80144dc:	460f      	mov	r7, r1
 80144de:	4640      	mov	r0, r8
 80144e0:	4649      	mov	r1, r9
 80144e2:	f7eb fee9 	bl	80002b8 <__aeabi_dsub>
 80144e6:	9a05      	ldr	r2, [sp, #20]
 80144e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80144ec:	1ad3      	subs	r3, r2, r3
 80144ee:	2b31      	cmp	r3, #49	; 0x31
 80144f0:	dc20      	bgt.n	8014534 <__ieee754_rem_pio2+0x26c>
 80144f2:	e9c4 0100 	strd	r0, r1, [r4]
 80144f6:	46c2      	mov	sl, r8
 80144f8:	46cb      	mov	fp, r9
 80144fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80144fe:	4650      	mov	r0, sl
 8014500:	4642      	mov	r2, r8
 8014502:	464b      	mov	r3, r9
 8014504:	4659      	mov	r1, fp
 8014506:	f7eb fed7 	bl	80002b8 <__aeabi_dsub>
 801450a:	463b      	mov	r3, r7
 801450c:	4632      	mov	r2, r6
 801450e:	f7eb fed3 	bl	80002b8 <__aeabi_dsub>
 8014512:	9b04      	ldr	r3, [sp, #16]
 8014514:	2b00      	cmp	r3, #0
 8014516:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801451a:	f6bf af11 	bge.w	8014340 <__ieee754_rem_pio2+0x78>
 801451e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014522:	6063      	str	r3, [r4, #4]
 8014524:	f8c4 8000 	str.w	r8, [r4]
 8014528:	60a0      	str	r0, [r4, #8]
 801452a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801452e:	60e3      	str	r3, [r4, #12]
 8014530:	426d      	negs	r5, r5
 8014532:	e705      	b.n	8014340 <__ieee754_rem_pio2+0x78>
 8014534:	a326      	add	r3, pc, #152	; (adr r3, 80145d0 <__ieee754_rem_pio2+0x308>)
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801453e:	f7ec f873 	bl	8000628 <__aeabi_dmul>
 8014542:	4606      	mov	r6, r0
 8014544:	460f      	mov	r7, r1
 8014546:	4602      	mov	r2, r0
 8014548:	460b      	mov	r3, r1
 801454a:	4640      	mov	r0, r8
 801454c:	4649      	mov	r1, r9
 801454e:	f7eb feb3 	bl	80002b8 <__aeabi_dsub>
 8014552:	4602      	mov	r2, r0
 8014554:	460b      	mov	r3, r1
 8014556:	4682      	mov	sl, r0
 8014558:	468b      	mov	fp, r1
 801455a:	4640      	mov	r0, r8
 801455c:	4649      	mov	r1, r9
 801455e:	f7eb feab 	bl	80002b8 <__aeabi_dsub>
 8014562:	4632      	mov	r2, r6
 8014564:	463b      	mov	r3, r7
 8014566:	f7eb fea7 	bl	80002b8 <__aeabi_dsub>
 801456a:	a31b      	add	r3, pc, #108	; (adr r3, 80145d8 <__ieee754_rem_pio2+0x310>)
 801456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014570:	4606      	mov	r6, r0
 8014572:	460f      	mov	r7, r1
 8014574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014578:	f7ec f856 	bl	8000628 <__aeabi_dmul>
 801457c:	4632      	mov	r2, r6
 801457e:	463b      	mov	r3, r7
 8014580:	f7eb fe9a 	bl	80002b8 <__aeabi_dsub>
 8014584:	4606      	mov	r6, r0
 8014586:	460f      	mov	r7, r1
 8014588:	e764      	b.n	8014454 <__ieee754_rem_pio2+0x18c>
 801458a:	4b1b      	ldr	r3, [pc, #108]	; (80145f8 <__ieee754_rem_pio2+0x330>)
 801458c:	4598      	cmp	r8, r3
 801458e:	dd35      	ble.n	80145fc <__ieee754_rem_pio2+0x334>
 8014590:	ee10 2a10 	vmov	r2, s0
 8014594:	463b      	mov	r3, r7
 8014596:	4630      	mov	r0, r6
 8014598:	4639      	mov	r1, r7
 801459a:	f7eb fe8d 	bl	80002b8 <__aeabi_dsub>
 801459e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145a2:	e9c4 0100 	strd	r0, r1, [r4]
 80145a6:	e6a1      	b.n	80142ec <__ieee754_rem_pio2+0x24>
 80145a8:	54400000 	.word	0x54400000
 80145ac:	3ff921fb 	.word	0x3ff921fb
 80145b0:	1a626331 	.word	0x1a626331
 80145b4:	3dd0b461 	.word	0x3dd0b461
 80145b8:	1a600000 	.word	0x1a600000
 80145bc:	3dd0b461 	.word	0x3dd0b461
 80145c0:	2e037073 	.word	0x2e037073
 80145c4:	3ba3198a 	.word	0x3ba3198a
 80145c8:	6dc9c883 	.word	0x6dc9c883
 80145cc:	3fe45f30 	.word	0x3fe45f30
 80145d0:	2e000000 	.word	0x2e000000
 80145d4:	3ba3198a 	.word	0x3ba3198a
 80145d8:	252049c1 	.word	0x252049c1
 80145dc:	397b839a 	.word	0x397b839a
 80145e0:	3fe921fb 	.word	0x3fe921fb
 80145e4:	4002d97b 	.word	0x4002d97b
 80145e8:	3ff921fb 	.word	0x3ff921fb
 80145ec:	413921fb 	.word	0x413921fb
 80145f0:	3fe00000 	.word	0x3fe00000
 80145f4:	08019d44 	.word	0x08019d44
 80145f8:	7fefffff 	.word	0x7fefffff
 80145fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014600:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014604:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014608:	4630      	mov	r0, r6
 801460a:	460f      	mov	r7, r1
 801460c:	f7ec fabc 	bl	8000b88 <__aeabi_d2iz>
 8014610:	f7eb ffa0 	bl	8000554 <__aeabi_i2d>
 8014614:	4602      	mov	r2, r0
 8014616:	460b      	mov	r3, r1
 8014618:	4630      	mov	r0, r6
 801461a:	4639      	mov	r1, r7
 801461c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014620:	f7eb fe4a 	bl	80002b8 <__aeabi_dsub>
 8014624:	2200      	movs	r2, #0
 8014626:	4b1f      	ldr	r3, [pc, #124]	; (80146a4 <__ieee754_rem_pio2+0x3dc>)
 8014628:	f7eb fffe 	bl	8000628 <__aeabi_dmul>
 801462c:	460f      	mov	r7, r1
 801462e:	4606      	mov	r6, r0
 8014630:	f7ec faaa 	bl	8000b88 <__aeabi_d2iz>
 8014634:	f7eb ff8e 	bl	8000554 <__aeabi_i2d>
 8014638:	4602      	mov	r2, r0
 801463a:	460b      	mov	r3, r1
 801463c:	4630      	mov	r0, r6
 801463e:	4639      	mov	r1, r7
 8014640:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014644:	f7eb fe38 	bl	80002b8 <__aeabi_dsub>
 8014648:	2200      	movs	r2, #0
 801464a:	4b16      	ldr	r3, [pc, #88]	; (80146a4 <__ieee754_rem_pio2+0x3dc>)
 801464c:	f7eb ffec 	bl	8000628 <__aeabi_dmul>
 8014650:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014654:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014658:	f04f 0803 	mov.w	r8, #3
 801465c:	2600      	movs	r6, #0
 801465e:	2700      	movs	r7, #0
 8014660:	4632      	mov	r2, r6
 8014662:	463b      	mov	r3, r7
 8014664:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014668:	f108 3aff 	add.w	sl, r8, #4294967295
 801466c:	f7ec fa44 	bl	8000af8 <__aeabi_dcmpeq>
 8014670:	b9b0      	cbnz	r0, 80146a0 <__ieee754_rem_pio2+0x3d8>
 8014672:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <__ieee754_rem_pio2+0x3e0>)
 8014674:	9301      	str	r3, [sp, #4]
 8014676:	2302      	movs	r3, #2
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	462a      	mov	r2, r5
 801467c:	4643      	mov	r3, r8
 801467e:	4621      	mov	r1, r4
 8014680:	a806      	add	r0, sp, #24
 8014682:	f000 f8dd 	bl	8014840 <__kernel_rem_pio2>
 8014686:	9b04      	ldr	r3, [sp, #16]
 8014688:	2b00      	cmp	r3, #0
 801468a:	4605      	mov	r5, r0
 801468c:	f6bf ae58 	bge.w	8014340 <__ieee754_rem_pio2+0x78>
 8014690:	6863      	ldr	r3, [r4, #4]
 8014692:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014696:	6063      	str	r3, [r4, #4]
 8014698:	68e3      	ldr	r3, [r4, #12]
 801469a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801469e:	e746      	b.n	801452e <__ieee754_rem_pio2+0x266>
 80146a0:	46d0      	mov	r8, sl
 80146a2:	e7dd      	b.n	8014660 <__ieee754_rem_pio2+0x398>
 80146a4:	41700000 	.word	0x41700000
 80146a8:	08019dc4 	.word	0x08019dc4
 80146ac:	00000000 	.word	0x00000000

080146b0 <__kernel_cos>:
 80146b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b4:	ec59 8b10 	vmov	r8, r9, d0
 80146b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80146bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80146c0:	ed2d 8b02 	vpush	{d8}
 80146c4:	eeb0 8a41 	vmov.f32	s16, s2
 80146c8:	eef0 8a61 	vmov.f32	s17, s3
 80146cc:	da07      	bge.n	80146de <__kernel_cos+0x2e>
 80146ce:	ee10 0a10 	vmov	r0, s0
 80146d2:	4649      	mov	r1, r9
 80146d4:	f7ec fa58 	bl	8000b88 <__aeabi_d2iz>
 80146d8:	2800      	cmp	r0, #0
 80146da:	f000 8089 	beq.w	80147f0 <__kernel_cos+0x140>
 80146de:	4642      	mov	r2, r8
 80146e0:	464b      	mov	r3, r9
 80146e2:	4640      	mov	r0, r8
 80146e4:	4649      	mov	r1, r9
 80146e6:	f7eb ff9f 	bl	8000628 <__aeabi_dmul>
 80146ea:	2200      	movs	r2, #0
 80146ec:	4b4e      	ldr	r3, [pc, #312]	; (8014828 <__kernel_cos+0x178>)
 80146ee:	4604      	mov	r4, r0
 80146f0:	460d      	mov	r5, r1
 80146f2:	f7eb ff99 	bl	8000628 <__aeabi_dmul>
 80146f6:	a340      	add	r3, pc, #256	; (adr r3, 80147f8 <__kernel_cos+0x148>)
 80146f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fc:	4682      	mov	sl, r0
 80146fe:	468b      	mov	fp, r1
 8014700:	4620      	mov	r0, r4
 8014702:	4629      	mov	r1, r5
 8014704:	f7eb ff90 	bl	8000628 <__aeabi_dmul>
 8014708:	a33d      	add	r3, pc, #244	; (adr r3, 8014800 <__kernel_cos+0x150>)
 801470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470e:	f7eb fdd5 	bl	80002bc <__adddf3>
 8014712:	4622      	mov	r2, r4
 8014714:	462b      	mov	r3, r5
 8014716:	f7eb ff87 	bl	8000628 <__aeabi_dmul>
 801471a:	a33b      	add	r3, pc, #236	; (adr r3, 8014808 <__kernel_cos+0x158>)
 801471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014720:	f7eb fdca 	bl	80002b8 <__aeabi_dsub>
 8014724:	4622      	mov	r2, r4
 8014726:	462b      	mov	r3, r5
 8014728:	f7eb ff7e 	bl	8000628 <__aeabi_dmul>
 801472c:	a338      	add	r3, pc, #224	; (adr r3, 8014810 <__kernel_cos+0x160>)
 801472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014732:	f7eb fdc3 	bl	80002bc <__adddf3>
 8014736:	4622      	mov	r2, r4
 8014738:	462b      	mov	r3, r5
 801473a:	f7eb ff75 	bl	8000628 <__aeabi_dmul>
 801473e:	a336      	add	r3, pc, #216	; (adr r3, 8014818 <__kernel_cos+0x168>)
 8014740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014744:	f7eb fdb8 	bl	80002b8 <__aeabi_dsub>
 8014748:	4622      	mov	r2, r4
 801474a:	462b      	mov	r3, r5
 801474c:	f7eb ff6c 	bl	8000628 <__aeabi_dmul>
 8014750:	a333      	add	r3, pc, #204	; (adr r3, 8014820 <__kernel_cos+0x170>)
 8014752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014756:	f7eb fdb1 	bl	80002bc <__adddf3>
 801475a:	4622      	mov	r2, r4
 801475c:	462b      	mov	r3, r5
 801475e:	f7eb ff63 	bl	8000628 <__aeabi_dmul>
 8014762:	4622      	mov	r2, r4
 8014764:	462b      	mov	r3, r5
 8014766:	f7eb ff5f 	bl	8000628 <__aeabi_dmul>
 801476a:	ec53 2b18 	vmov	r2, r3, d8
 801476e:	4604      	mov	r4, r0
 8014770:	460d      	mov	r5, r1
 8014772:	4640      	mov	r0, r8
 8014774:	4649      	mov	r1, r9
 8014776:	f7eb ff57 	bl	8000628 <__aeabi_dmul>
 801477a:	460b      	mov	r3, r1
 801477c:	4602      	mov	r2, r0
 801477e:	4629      	mov	r1, r5
 8014780:	4620      	mov	r0, r4
 8014782:	f7eb fd99 	bl	80002b8 <__aeabi_dsub>
 8014786:	4b29      	ldr	r3, [pc, #164]	; (801482c <__kernel_cos+0x17c>)
 8014788:	429e      	cmp	r6, r3
 801478a:	4680      	mov	r8, r0
 801478c:	4689      	mov	r9, r1
 801478e:	dc11      	bgt.n	80147b4 <__kernel_cos+0x104>
 8014790:	4602      	mov	r2, r0
 8014792:	460b      	mov	r3, r1
 8014794:	4650      	mov	r0, sl
 8014796:	4659      	mov	r1, fp
 8014798:	f7eb fd8e 	bl	80002b8 <__aeabi_dsub>
 801479c:	460b      	mov	r3, r1
 801479e:	4924      	ldr	r1, [pc, #144]	; (8014830 <__kernel_cos+0x180>)
 80147a0:	4602      	mov	r2, r0
 80147a2:	2000      	movs	r0, #0
 80147a4:	f7eb fd88 	bl	80002b8 <__aeabi_dsub>
 80147a8:	ecbd 8b02 	vpop	{d8}
 80147ac:	ec41 0b10 	vmov	d0, r0, r1
 80147b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b4:	4b1f      	ldr	r3, [pc, #124]	; (8014834 <__kernel_cos+0x184>)
 80147b6:	491e      	ldr	r1, [pc, #120]	; (8014830 <__kernel_cos+0x180>)
 80147b8:	429e      	cmp	r6, r3
 80147ba:	bfcc      	ite	gt
 80147bc:	4d1e      	ldrgt	r5, [pc, #120]	; (8014838 <__kernel_cos+0x188>)
 80147be:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80147c2:	2400      	movs	r4, #0
 80147c4:	4622      	mov	r2, r4
 80147c6:	462b      	mov	r3, r5
 80147c8:	2000      	movs	r0, #0
 80147ca:	f7eb fd75 	bl	80002b8 <__aeabi_dsub>
 80147ce:	4622      	mov	r2, r4
 80147d0:	4606      	mov	r6, r0
 80147d2:	460f      	mov	r7, r1
 80147d4:	462b      	mov	r3, r5
 80147d6:	4650      	mov	r0, sl
 80147d8:	4659      	mov	r1, fp
 80147da:	f7eb fd6d 	bl	80002b8 <__aeabi_dsub>
 80147de:	4642      	mov	r2, r8
 80147e0:	464b      	mov	r3, r9
 80147e2:	f7eb fd69 	bl	80002b8 <__aeabi_dsub>
 80147e6:	4602      	mov	r2, r0
 80147e8:	460b      	mov	r3, r1
 80147ea:	4630      	mov	r0, r6
 80147ec:	4639      	mov	r1, r7
 80147ee:	e7d9      	b.n	80147a4 <__kernel_cos+0xf4>
 80147f0:	2000      	movs	r0, #0
 80147f2:	490f      	ldr	r1, [pc, #60]	; (8014830 <__kernel_cos+0x180>)
 80147f4:	e7d8      	b.n	80147a8 <__kernel_cos+0xf8>
 80147f6:	bf00      	nop
 80147f8:	be8838d4 	.word	0xbe8838d4
 80147fc:	bda8fae9 	.word	0xbda8fae9
 8014800:	bdb4b1c4 	.word	0xbdb4b1c4
 8014804:	3e21ee9e 	.word	0x3e21ee9e
 8014808:	809c52ad 	.word	0x809c52ad
 801480c:	3e927e4f 	.word	0x3e927e4f
 8014810:	19cb1590 	.word	0x19cb1590
 8014814:	3efa01a0 	.word	0x3efa01a0
 8014818:	16c15177 	.word	0x16c15177
 801481c:	3f56c16c 	.word	0x3f56c16c
 8014820:	5555554c 	.word	0x5555554c
 8014824:	3fa55555 	.word	0x3fa55555
 8014828:	3fe00000 	.word	0x3fe00000
 801482c:	3fd33332 	.word	0x3fd33332
 8014830:	3ff00000 	.word	0x3ff00000
 8014834:	3fe90000 	.word	0x3fe90000
 8014838:	3fd20000 	.word	0x3fd20000
 801483c:	00000000 	.word	0x00000000

08014840 <__kernel_rem_pio2>:
 8014840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014844:	ed2d 8b02 	vpush	{d8}
 8014848:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801484c:	1ed4      	subs	r4, r2, #3
 801484e:	9308      	str	r3, [sp, #32]
 8014850:	9101      	str	r1, [sp, #4]
 8014852:	4bc5      	ldr	r3, [pc, #788]	; (8014b68 <__kernel_rem_pio2+0x328>)
 8014854:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014856:	9009      	str	r0, [sp, #36]	; 0x24
 8014858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801485c:	9304      	str	r3, [sp, #16]
 801485e:	9b08      	ldr	r3, [sp, #32]
 8014860:	3b01      	subs	r3, #1
 8014862:	9307      	str	r3, [sp, #28]
 8014864:	2318      	movs	r3, #24
 8014866:	fb94 f4f3 	sdiv	r4, r4, r3
 801486a:	f06f 0317 	mvn.w	r3, #23
 801486e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014872:	fb04 3303 	mla	r3, r4, r3, r3
 8014876:	eb03 0a02 	add.w	sl, r3, r2
 801487a:	9b04      	ldr	r3, [sp, #16]
 801487c:	9a07      	ldr	r2, [sp, #28]
 801487e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014b58 <__kernel_rem_pio2+0x318>
 8014882:	eb03 0802 	add.w	r8, r3, r2
 8014886:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014888:	1aa7      	subs	r7, r4, r2
 801488a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801488e:	ae22      	add	r6, sp, #136	; 0x88
 8014890:	2500      	movs	r5, #0
 8014892:	4545      	cmp	r5, r8
 8014894:	dd13      	ble.n	80148be <__kernel_rem_pio2+0x7e>
 8014896:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014b58 <__kernel_rem_pio2+0x318>
 801489a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801489e:	2600      	movs	r6, #0
 80148a0:	9b04      	ldr	r3, [sp, #16]
 80148a2:	429e      	cmp	r6, r3
 80148a4:	dc32      	bgt.n	801490c <__kernel_rem_pio2+0xcc>
 80148a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a8:	9302      	str	r3, [sp, #8]
 80148aa:	9b08      	ldr	r3, [sp, #32]
 80148ac:	199d      	adds	r5, r3, r6
 80148ae:	ab22      	add	r3, sp, #136	; 0x88
 80148b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80148b4:	9306      	str	r3, [sp, #24]
 80148b6:	ec59 8b18 	vmov	r8, r9, d8
 80148ba:	2700      	movs	r7, #0
 80148bc:	e01f      	b.n	80148fe <__kernel_rem_pio2+0xbe>
 80148be:	42ef      	cmn	r7, r5
 80148c0:	d407      	bmi.n	80148d2 <__kernel_rem_pio2+0x92>
 80148c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80148c6:	f7eb fe45 	bl	8000554 <__aeabi_i2d>
 80148ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80148ce:	3501      	adds	r5, #1
 80148d0:	e7df      	b.n	8014892 <__kernel_rem_pio2+0x52>
 80148d2:	ec51 0b18 	vmov	r0, r1, d8
 80148d6:	e7f8      	b.n	80148ca <__kernel_rem_pio2+0x8a>
 80148d8:	9906      	ldr	r1, [sp, #24]
 80148da:	9d02      	ldr	r5, [sp, #8]
 80148dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80148e0:	9106      	str	r1, [sp, #24]
 80148e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80148e6:	9502      	str	r5, [sp, #8]
 80148e8:	f7eb fe9e 	bl	8000628 <__aeabi_dmul>
 80148ec:	4602      	mov	r2, r0
 80148ee:	460b      	mov	r3, r1
 80148f0:	4640      	mov	r0, r8
 80148f2:	4649      	mov	r1, r9
 80148f4:	f7eb fce2 	bl	80002bc <__adddf3>
 80148f8:	3701      	adds	r7, #1
 80148fa:	4680      	mov	r8, r0
 80148fc:	4689      	mov	r9, r1
 80148fe:	9b07      	ldr	r3, [sp, #28]
 8014900:	429f      	cmp	r7, r3
 8014902:	dde9      	ble.n	80148d8 <__kernel_rem_pio2+0x98>
 8014904:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014908:	3601      	adds	r6, #1
 801490a:	e7c9      	b.n	80148a0 <__kernel_rem_pio2+0x60>
 801490c:	9b04      	ldr	r3, [sp, #16]
 801490e:	aa0e      	add	r2, sp, #56	; 0x38
 8014910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014914:	930c      	str	r3, [sp, #48]	; 0x30
 8014916:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014918:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801491c:	9c04      	ldr	r4, [sp, #16]
 801491e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014920:	ab9a      	add	r3, sp, #616	; 0x268
 8014922:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014926:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801492a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801492e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014932:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014936:	ab9a      	add	r3, sp, #616	; 0x268
 8014938:	445b      	add	r3, fp
 801493a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801493e:	2500      	movs	r5, #0
 8014940:	1b63      	subs	r3, r4, r5
 8014942:	2b00      	cmp	r3, #0
 8014944:	dc78      	bgt.n	8014a38 <__kernel_rem_pio2+0x1f8>
 8014946:	4650      	mov	r0, sl
 8014948:	ec49 8b10 	vmov	d0, r8, r9
 801494c:	f000 fc00 	bl	8015150 <scalbn>
 8014950:	ec57 6b10 	vmov	r6, r7, d0
 8014954:	2200      	movs	r2, #0
 8014956:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801495a:	ee10 0a10 	vmov	r0, s0
 801495e:	4639      	mov	r1, r7
 8014960:	f7eb fe62 	bl	8000628 <__aeabi_dmul>
 8014964:	ec41 0b10 	vmov	d0, r0, r1
 8014968:	f000 fb6e 	bl	8015048 <floor>
 801496c:	2200      	movs	r2, #0
 801496e:	ec51 0b10 	vmov	r0, r1, d0
 8014972:	4b7e      	ldr	r3, [pc, #504]	; (8014b6c <__kernel_rem_pio2+0x32c>)
 8014974:	f7eb fe58 	bl	8000628 <__aeabi_dmul>
 8014978:	4602      	mov	r2, r0
 801497a:	460b      	mov	r3, r1
 801497c:	4630      	mov	r0, r6
 801497e:	4639      	mov	r1, r7
 8014980:	f7eb fc9a 	bl	80002b8 <__aeabi_dsub>
 8014984:	460f      	mov	r7, r1
 8014986:	4606      	mov	r6, r0
 8014988:	f7ec f8fe 	bl	8000b88 <__aeabi_d2iz>
 801498c:	9006      	str	r0, [sp, #24]
 801498e:	f7eb fde1 	bl	8000554 <__aeabi_i2d>
 8014992:	4602      	mov	r2, r0
 8014994:	460b      	mov	r3, r1
 8014996:	4630      	mov	r0, r6
 8014998:	4639      	mov	r1, r7
 801499a:	f7eb fc8d 	bl	80002b8 <__aeabi_dsub>
 801499e:	f1ba 0f00 	cmp.w	sl, #0
 80149a2:	4606      	mov	r6, r0
 80149a4:	460f      	mov	r7, r1
 80149a6:	dd6c      	ble.n	8014a82 <__kernel_rem_pio2+0x242>
 80149a8:	1e62      	subs	r2, r4, #1
 80149aa:	ab0e      	add	r3, sp, #56	; 0x38
 80149ac:	f1ca 0118 	rsb	r1, sl, #24
 80149b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80149b4:	9d06      	ldr	r5, [sp, #24]
 80149b6:	fa40 f301 	asr.w	r3, r0, r1
 80149ba:	441d      	add	r5, r3
 80149bc:	408b      	lsls	r3, r1
 80149be:	1ac0      	subs	r0, r0, r3
 80149c0:	ab0e      	add	r3, sp, #56	; 0x38
 80149c2:	9506      	str	r5, [sp, #24]
 80149c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80149c8:	f1ca 0317 	rsb	r3, sl, #23
 80149cc:	fa40 f303 	asr.w	r3, r0, r3
 80149d0:	9302      	str	r3, [sp, #8]
 80149d2:	9b02      	ldr	r3, [sp, #8]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	dd62      	ble.n	8014a9e <__kernel_rem_pio2+0x25e>
 80149d8:	9b06      	ldr	r3, [sp, #24]
 80149da:	2200      	movs	r2, #0
 80149dc:	3301      	adds	r3, #1
 80149de:	9306      	str	r3, [sp, #24]
 80149e0:	4615      	mov	r5, r2
 80149e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80149e6:	4294      	cmp	r4, r2
 80149e8:	f300 8095 	bgt.w	8014b16 <__kernel_rem_pio2+0x2d6>
 80149ec:	f1ba 0f00 	cmp.w	sl, #0
 80149f0:	dd07      	ble.n	8014a02 <__kernel_rem_pio2+0x1c2>
 80149f2:	f1ba 0f01 	cmp.w	sl, #1
 80149f6:	f000 80a2 	beq.w	8014b3e <__kernel_rem_pio2+0x2fe>
 80149fa:	f1ba 0f02 	cmp.w	sl, #2
 80149fe:	f000 80c1 	beq.w	8014b84 <__kernel_rem_pio2+0x344>
 8014a02:	9b02      	ldr	r3, [sp, #8]
 8014a04:	2b02      	cmp	r3, #2
 8014a06:	d14a      	bne.n	8014a9e <__kernel_rem_pio2+0x25e>
 8014a08:	4632      	mov	r2, r6
 8014a0a:	463b      	mov	r3, r7
 8014a0c:	2000      	movs	r0, #0
 8014a0e:	4958      	ldr	r1, [pc, #352]	; (8014b70 <__kernel_rem_pio2+0x330>)
 8014a10:	f7eb fc52 	bl	80002b8 <__aeabi_dsub>
 8014a14:	4606      	mov	r6, r0
 8014a16:	460f      	mov	r7, r1
 8014a18:	2d00      	cmp	r5, #0
 8014a1a:	d040      	beq.n	8014a9e <__kernel_rem_pio2+0x25e>
 8014a1c:	4650      	mov	r0, sl
 8014a1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014b60 <__kernel_rem_pio2+0x320>
 8014a22:	f000 fb95 	bl	8015150 <scalbn>
 8014a26:	4630      	mov	r0, r6
 8014a28:	4639      	mov	r1, r7
 8014a2a:	ec53 2b10 	vmov	r2, r3, d0
 8014a2e:	f7eb fc43 	bl	80002b8 <__aeabi_dsub>
 8014a32:	4606      	mov	r6, r0
 8014a34:	460f      	mov	r7, r1
 8014a36:	e032      	b.n	8014a9e <__kernel_rem_pio2+0x25e>
 8014a38:	2200      	movs	r2, #0
 8014a3a:	4b4e      	ldr	r3, [pc, #312]	; (8014b74 <__kernel_rem_pio2+0x334>)
 8014a3c:	4640      	mov	r0, r8
 8014a3e:	4649      	mov	r1, r9
 8014a40:	f7eb fdf2 	bl	8000628 <__aeabi_dmul>
 8014a44:	f7ec f8a0 	bl	8000b88 <__aeabi_d2iz>
 8014a48:	f7eb fd84 	bl	8000554 <__aeabi_i2d>
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	4b4a      	ldr	r3, [pc, #296]	; (8014b78 <__kernel_rem_pio2+0x338>)
 8014a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a54:	f7eb fde8 	bl	8000628 <__aeabi_dmul>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	4640      	mov	r0, r8
 8014a5e:	4649      	mov	r1, r9
 8014a60:	f7eb fc2a 	bl	80002b8 <__aeabi_dsub>
 8014a64:	f7ec f890 	bl	8000b88 <__aeabi_d2iz>
 8014a68:	ab0e      	add	r3, sp, #56	; 0x38
 8014a6a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014a6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a76:	f7eb fc21 	bl	80002bc <__adddf3>
 8014a7a:	3501      	adds	r5, #1
 8014a7c:	4680      	mov	r8, r0
 8014a7e:	4689      	mov	r9, r1
 8014a80:	e75e      	b.n	8014940 <__kernel_rem_pio2+0x100>
 8014a82:	d105      	bne.n	8014a90 <__kernel_rem_pio2+0x250>
 8014a84:	1e63      	subs	r3, r4, #1
 8014a86:	aa0e      	add	r2, sp, #56	; 0x38
 8014a88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014a8c:	15c3      	asrs	r3, r0, #23
 8014a8e:	e79f      	b.n	80149d0 <__kernel_rem_pio2+0x190>
 8014a90:	2200      	movs	r2, #0
 8014a92:	4b3a      	ldr	r3, [pc, #232]	; (8014b7c <__kernel_rem_pio2+0x33c>)
 8014a94:	f7ec f84e 	bl	8000b34 <__aeabi_dcmpge>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d139      	bne.n	8014b10 <__kernel_rem_pio2+0x2d0>
 8014a9c:	9002      	str	r0, [sp, #8]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	4639      	mov	r1, r7
 8014aa6:	f7ec f827 	bl	8000af8 <__aeabi_dcmpeq>
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	f000 80c7 	beq.w	8014c3e <__kernel_rem_pio2+0x3fe>
 8014ab0:	1e65      	subs	r5, r4, #1
 8014ab2:	462b      	mov	r3, r5
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	9904      	ldr	r1, [sp, #16]
 8014ab8:	428b      	cmp	r3, r1
 8014aba:	da6a      	bge.n	8014b92 <__kernel_rem_pio2+0x352>
 8014abc:	2a00      	cmp	r2, #0
 8014abe:	f000 8088 	beq.w	8014bd2 <__kernel_rem_pio2+0x392>
 8014ac2:	ab0e      	add	r3, sp, #56	; 0x38
 8014ac4:	f1aa 0a18 	sub.w	sl, sl, #24
 8014ac8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	f000 80b4 	beq.w	8014c3a <__kernel_rem_pio2+0x3fa>
 8014ad2:	4650      	mov	r0, sl
 8014ad4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014b60 <__kernel_rem_pio2+0x320>
 8014ad8:	f000 fb3a 	bl	8015150 <scalbn>
 8014adc:	00ec      	lsls	r4, r5, #3
 8014ade:	ab72      	add	r3, sp, #456	; 0x1c8
 8014ae0:	191e      	adds	r6, r3, r4
 8014ae2:	ec59 8b10 	vmov	r8, r9, d0
 8014ae6:	f106 0a08 	add.w	sl, r6, #8
 8014aea:	462f      	mov	r7, r5
 8014aec:	2f00      	cmp	r7, #0
 8014aee:	f280 80df 	bge.w	8014cb0 <__kernel_rem_pio2+0x470>
 8014af2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014b58 <__kernel_rem_pio2+0x318>
 8014af6:	f04f 0a00 	mov.w	sl, #0
 8014afa:	eba5 030a 	sub.w	r3, r5, sl
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	f2c0 810a 	blt.w	8014d18 <__kernel_rem_pio2+0x4d8>
 8014b04:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014b80 <__kernel_rem_pio2+0x340>
 8014b08:	ec59 8b18 	vmov	r8, r9, d8
 8014b0c:	2700      	movs	r7, #0
 8014b0e:	e0f5      	b.n	8014cfc <__kernel_rem_pio2+0x4bc>
 8014b10:	2302      	movs	r3, #2
 8014b12:	9302      	str	r3, [sp, #8]
 8014b14:	e760      	b.n	80149d8 <__kernel_rem_pio2+0x198>
 8014b16:	ab0e      	add	r3, sp, #56	; 0x38
 8014b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b1c:	b94d      	cbnz	r5, 8014b32 <__kernel_rem_pio2+0x2f2>
 8014b1e:	b12b      	cbz	r3, 8014b2c <__kernel_rem_pio2+0x2ec>
 8014b20:	a80e      	add	r0, sp, #56	; 0x38
 8014b22:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014b26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	3201      	adds	r2, #1
 8014b2e:	461d      	mov	r5, r3
 8014b30:	e759      	b.n	80149e6 <__kernel_rem_pio2+0x1a6>
 8014b32:	a80e      	add	r0, sp, #56	; 0x38
 8014b34:	1acb      	subs	r3, r1, r3
 8014b36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014b3a:	462b      	mov	r3, r5
 8014b3c:	e7f6      	b.n	8014b2c <__kernel_rem_pio2+0x2ec>
 8014b3e:	1e62      	subs	r2, r4, #1
 8014b40:	ab0e      	add	r3, sp, #56	; 0x38
 8014b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b46:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014b4a:	a90e      	add	r1, sp, #56	; 0x38
 8014b4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014b50:	e757      	b.n	8014a02 <__kernel_rem_pio2+0x1c2>
 8014b52:	bf00      	nop
 8014b54:	f3af 8000 	nop.w
	...
 8014b64:	3ff00000 	.word	0x3ff00000
 8014b68:	08019f10 	.word	0x08019f10
 8014b6c:	40200000 	.word	0x40200000
 8014b70:	3ff00000 	.word	0x3ff00000
 8014b74:	3e700000 	.word	0x3e700000
 8014b78:	41700000 	.word	0x41700000
 8014b7c:	3fe00000 	.word	0x3fe00000
 8014b80:	08019ed0 	.word	0x08019ed0
 8014b84:	1e62      	subs	r2, r4, #1
 8014b86:	ab0e      	add	r3, sp, #56	; 0x38
 8014b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014b90:	e7db      	b.n	8014b4a <__kernel_rem_pio2+0x30a>
 8014b92:	a90e      	add	r1, sp, #56	; 0x38
 8014b94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014b98:	3b01      	subs	r3, #1
 8014b9a:	430a      	orrs	r2, r1
 8014b9c:	e78b      	b.n	8014ab6 <__kernel_rem_pio2+0x276>
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014ba4:	2900      	cmp	r1, #0
 8014ba6:	d0fa      	beq.n	8014b9e <__kernel_rem_pio2+0x35e>
 8014ba8:	9a08      	ldr	r2, [sp, #32]
 8014baa:	4422      	add	r2, r4
 8014bac:	00d2      	lsls	r2, r2, #3
 8014bae:	a922      	add	r1, sp, #136	; 0x88
 8014bb0:	18e3      	adds	r3, r4, r3
 8014bb2:	9206      	str	r2, [sp, #24]
 8014bb4:	440a      	add	r2, r1
 8014bb6:	9302      	str	r3, [sp, #8]
 8014bb8:	f10b 0108 	add.w	r1, fp, #8
 8014bbc:	f102 0308 	add.w	r3, r2, #8
 8014bc0:	1c66      	adds	r6, r4, #1
 8014bc2:	910a      	str	r1, [sp, #40]	; 0x28
 8014bc4:	2500      	movs	r5, #0
 8014bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8014bc8:	9b02      	ldr	r3, [sp, #8]
 8014bca:	42b3      	cmp	r3, r6
 8014bcc:	da04      	bge.n	8014bd8 <__kernel_rem_pio2+0x398>
 8014bce:	461c      	mov	r4, r3
 8014bd0:	e6a6      	b.n	8014920 <__kernel_rem_pio2+0xe0>
 8014bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e7e3      	b.n	8014ba0 <__kernel_rem_pio2+0x360>
 8014bd8:	9b06      	ldr	r3, [sp, #24]
 8014bda:	18ef      	adds	r7, r5, r3
 8014bdc:	ab22      	add	r3, sp, #136	; 0x88
 8014bde:	441f      	add	r7, r3
 8014be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014be2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014be6:	f7eb fcb5 	bl	8000554 <__aeabi_i2d>
 8014bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bec:	461c      	mov	r4, r3
 8014bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bf0:	e9c7 0100 	strd	r0, r1, [r7]
 8014bf4:	eb03 0b05 	add.w	fp, r3, r5
 8014bf8:	2700      	movs	r7, #0
 8014bfa:	f04f 0800 	mov.w	r8, #0
 8014bfe:	f04f 0900 	mov.w	r9, #0
 8014c02:	9b07      	ldr	r3, [sp, #28]
 8014c04:	429f      	cmp	r7, r3
 8014c06:	dd08      	ble.n	8014c1a <__kernel_rem_pio2+0x3da>
 8014c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c0a:	aa72      	add	r2, sp, #456	; 0x1c8
 8014c0c:	18eb      	adds	r3, r5, r3
 8014c0e:	4413      	add	r3, r2
 8014c10:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014c14:	3601      	adds	r6, #1
 8014c16:	3508      	adds	r5, #8
 8014c18:	e7d6      	b.n	8014bc8 <__kernel_rem_pio2+0x388>
 8014c1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014c1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014c22:	f7eb fd01 	bl	8000628 <__aeabi_dmul>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	4640      	mov	r0, r8
 8014c2c:	4649      	mov	r1, r9
 8014c2e:	f7eb fb45 	bl	80002bc <__adddf3>
 8014c32:	3701      	adds	r7, #1
 8014c34:	4680      	mov	r8, r0
 8014c36:	4689      	mov	r9, r1
 8014c38:	e7e3      	b.n	8014c02 <__kernel_rem_pio2+0x3c2>
 8014c3a:	3d01      	subs	r5, #1
 8014c3c:	e741      	b.n	8014ac2 <__kernel_rem_pio2+0x282>
 8014c3e:	f1ca 0000 	rsb	r0, sl, #0
 8014c42:	ec47 6b10 	vmov	d0, r6, r7
 8014c46:	f000 fa83 	bl	8015150 <scalbn>
 8014c4a:	ec57 6b10 	vmov	r6, r7, d0
 8014c4e:	2200      	movs	r2, #0
 8014c50:	4b99      	ldr	r3, [pc, #612]	; (8014eb8 <__kernel_rem_pio2+0x678>)
 8014c52:	ee10 0a10 	vmov	r0, s0
 8014c56:	4639      	mov	r1, r7
 8014c58:	f7eb ff6c 	bl	8000b34 <__aeabi_dcmpge>
 8014c5c:	b1f8      	cbz	r0, 8014c9e <__kernel_rem_pio2+0x45e>
 8014c5e:	2200      	movs	r2, #0
 8014c60:	4b96      	ldr	r3, [pc, #600]	; (8014ebc <__kernel_rem_pio2+0x67c>)
 8014c62:	4630      	mov	r0, r6
 8014c64:	4639      	mov	r1, r7
 8014c66:	f7eb fcdf 	bl	8000628 <__aeabi_dmul>
 8014c6a:	f7eb ff8d 	bl	8000b88 <__aeabi_d2iz>
 8014c6e:	4680      	mov	r8, r0
 8014c70:	f7eb fc70 	bl	8000554 <__aeabi_i2d>
 8014c74:	2200      	movs	r2, #0
 8014c76:	4b90      	ldr	r3, [pc, #576]	; (8014eb8 <__kernel_rem_pio2+0x678>)
 8014c78:	f7eb fcd6 	bl	8000628 <__aeabi_dmul>
 8014c7c:	460b      	mov	r3, r1
 8014c7e:	4602      	mov	r2, r0
 8014c80:	4639      	mov	r1, r7
 8014c82:	4630      	mov	r0, r6
 8014c84:	f7eb fb18 	bl	80002b8 <__aeabi_dsub>
 8014c88:	f7eb ff7e 	bl	8000b88 <__aeabi_d2iz>
 8014c8c:	1c65      	adds	r5, r4, #1
 8014c8e:	ab0e      	add	r3, sp, #56	; 0x38
 8014c90:	f10a 0a18 	add.w	sl, sl, #24
 8014c94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014c98:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014c9c:	e719      	b.n	8014ad2 <__kernel_rem_pio2+0x292>
 8014c9e:	4630      	mov	r0, r6
 8014ca0:	4639      	mov	r1, r7
 8014ca2:	f7eb ff71 	bl	8000b88 <__aeabi_d2iz>
 8014ca6:	ab0e      	add	r3, sp, #56	; 0x38
 8014ca8:	4625      	mov	r5, r4
 8014caa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014cae:	e710      	b.n	8014ad2 <__kernel_rem_pio2+0x292>
 8014cb0:	ab0e      	add	r3, sp, #56	; 0x38
 8014cb2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014cb6:	f7eb fc4d 	bl	8000554 <__aeabi_i2d>
 8014cba:	4642      	mov	r2, r8
 8014cbc:	464b      	mov	r3, r9
 8014cbe:	f7eb fcb3 	bl	8000628 <__aeabi_dmul>
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014cc8:	4b7c      	ldr	r3, [pc, #496]	; (8014ebc <__kernel_rem_pio2+0x67c>)
 8014cca:	4640      	mov	r0, r8
 8014ccc:	4649      	mov	r1, r9
 8014cce:	f7eb fcab 	bl	8000628 <__aeabi_dmul>
 8014cd2:	3f01      	subs	r7, #1
 8014cd4:	4680      	mov	r8, r0
 8014cd6:	4689      	mov	r9, r1
 8014cd8:	e708      	b.n	8014aec <__kernel_rem_pio2+0x2ac>
 8014cda:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014ce6:	f7eb fc9f 	bl	8000628 <__aeabi_dmul>
 8014cea:	4602      	mov	r2, r0
 8014cec:	460b      	mov	r3, r1
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	f7eb fae3 	bl	80002bc <__adddf3>
 8014cf6:	3701      	adds	r7, #1
 8014cf8:	4680      	mov	r8, r0
 8014cfa:	4689      	mov	r9, r1
 8014cfc:	9b04      	ldr	r3, [sp, #16]
 8014cfe:	429f      	cmp	r7, r3
 8014d00:	dc01      	bgt.n	8014d06 <__kernel_rem_pio2+0x4c6>
 8014d02:	45ba      	cmp	sl, r7
 8014d04:	dae9      	bge.n	8014cda <__kernel_rem_pio2+0x49a>
 8014d06:	ab4a      	add	r3, sp, #296	; 0x128
 8014d08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d0c:	e9c3 8900 	strd	r8, r9, [r3]
 8014d10:	f10a 0a01 	add.w	sl, sl, #1
 8014d14:	3e08      	subs	r6, #8
 8014d16:	e6f0      	b.n	8014afa <__kernel_rem_pio2+0x2ba>
 8014d18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014d1a:	2b03      	cmp	r3, #3
 8014d1c:	d85b      	bhi.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014d1e:	e8df f003 	tbb	[pc, r3]
 8014d22:	264a      	.short	0x264a
 8014d24:	0226      	.short	0x0226
 8014d26:	ab9a      	add	r3, sp, #616	; 0x268
 8014d28:	441c      	add	r4, r3
 8014d2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014d2e:	46a2      	mov	sl, r4
 8014d30:	46ab      	mov	fp, r5
 8014d32:	f1bb 0f00 	cmp.w	fp, #0
 8014d36:	dc6c      	bgt.n	8014e12 <__kernel_rem_pio2+0x5d2>
 8014d38:	46a2      	mov	sl, r4
 8014d3a:	46ab      	mov	fp, r5
 8014d3c:	f1bb 0f01 	cmp.w	fp, #1
 8014d40:	f300 8086 	bgt.w	8014e50 <__kernel_rem_pio2+0x610>
 8014d44:	2000      	movs	r0, #0
 8014d46:	2100      	movs	r1, #0
 8014d48:	2d01      	cmp	r5, #1
 8014d4a:	f300 80a0 	bgt.w	8014e8e <__kernel_rem_pio2+0x64e>
 8014d4e:	9b02      	ldr	r3, [sp, #8]
 8014d50:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014d54:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f040 809e 	bne.w	8014e9a <__kernel_rem_pio2+0x65a>
 8014d5e:	9b01      	ldr	r3, [sp, #4]
 8014d60:	e9c3 7800 	strd	r7, r8, [r3]
 8014d64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014d68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014d6c:	e033      	b.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014d6e:	3408      	adds	r4, #8
 8014d70:	ab4a      	add	r3, sp, #296	; 0x128
 8014d72:	441c      	add	r4, r3
 8014d74:	462e      	mov	r6, r5
 8014d76:	2000      	movs	r0, #0
 8014d78:	2100      	movs	r1, #0
 8014d7a:	2e00      	cmp	r6, #0
 8014d7c:	da3a      	bge.n	8014df4 <__kernel_rem_pio2+0x5b4>
 8014d7e:	9b02      	ldr	r3, [sp, #8]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d03d      	beq.n	8014e00 <__kernel_rem_pio2+0x5c0>
 8014d84:	4602      	mov	r2, r0
 8014d86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d8a:	9c01      	ldr	r4, [sp, #4]
 8014d8c:	e9c4 2300 	strd	r2, r3, [r4]
 8014d90:	4602      	mov	r2, r0
 8014d92:	460b      	mov	r3, r1
 8014d94:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014d98:	f7eb fa8e 	bl	80002b8 <__aeabi_dsub>
 8014d9c:	ae4c      	add	r6, sp, #304	; 0x130
 8014d9e:	2401      	movs	r4, #1
 8014da0:	42a5      	cmp	r5, r4
 8014da2:	da30      	bge.n	8014e06 <__kernel_rem_pio2+0x5c6>
 8014da4:	9b02      	ldr	r3, [sp, #8]
 8014da6:	b113      	cbz	r3, 8014dae <__kernel_rem_pio2+0x56e>
 8014da8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dac:	4619      	mov	r1, r3
 8014dae:	9b01      	ldr	r3, [sp, #4]
 8014db0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014db4:	e00f      	b.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014db6:	ab9a      	add	r3, sp, #616	; 0x268
 8014db8:	441c      	add	r4, r3
 8014dba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	2d00      	cmp	r5, #0
 8014dc4:	da10      	bge.n	8014de8 <__kernel_rem_pio2+0x5a8>
 8014dc6:	9b02      	ldr	r3, [sp, #8]
 8014dc8:	b113      	cbz	r3, 8014dd0 <__kernel_rem_pio2+0x590>
 8014dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dce:	4619      	mov	r1, r3
 8014dd0:	9b01      	ldr	r3, [sp, #4]
 8014dd2:	e9c3 0100 	strd	r0, r1, [r3]
 8014dd6:	9b06      	ldr	r3, [sp, #24]
 8014dd8:	f003 0007 	and.w	r0, r3, #7
 8014ddc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014de0:	ecbd 8b02 	vpop	{d8}
 8014de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014de8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014dec:	f7eb fa66 	bl	80002bc <__adddf3>
 8014df0:	3d01      	subs	r5, #1
 8014df2:	e7e6      	b.n	8014dc2 <__kernel_rem_pio2+0x582>
 8014df4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014df8:	f7eb fa60 	bl	80002bc <__adddf3>
 8014dfc:	3e01      	subs	r6, #1
 8014dfe:	e7bc      	b.n	8014d7a <__kernel_rem_pio2+0x53a>
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	e7c1      	b.n	8014d8a <__kernel_rem_pio2+0x54a>
 8014e06:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014e0a:	f7eb fa57 	bl	80002bc <__adddf3>
 8014e0e:	3401      	adds	r4, #1
 8014e10:	e7c6      	b.n	8014da0 <__kernel_rem_pio2+0x560>
 8014e12:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014e16:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014e1a:	4640      	mov	r0, r8
 8014e1c:	ec53 2b17 	vmov	r2, r3, d7
 8014e20:	4649      	mov	r1, r9
 8014e22:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e26:	f7eb fa49 	bl	80002bc <__adddf3>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	4606      	mov	r6, r0
 8014e30:	460f      	mov	r7, r1
 8014e32:	4640      	mov	r0, r8
 8014e34:	4649      	mov	r1, r9
 8014e36:	f7eb fa3f 	bl	80002b8 <__aeabi_dsub>
 8014e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e3e:	f7eb fa3d 	bl	80002bc <__adddf3>
 8014e42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e46:	e9ca 0100 	strd	r0, r1, [sl]
 8014e4a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014e4e:	e770      	b.n	8014d32 <__kernel_rem_pio2+0x4f2>
 8014e50:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014e54:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014e58:	4630      	mov	r0, r6
 8014e5a:	ec53 2b17 	vmov	r2, r3, d7
 8014e5e:	4639      	mov	r1, r7
 8014e60:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e64:	f7eb fa2a 	bl	80002bc <__adddf3>
 8014e68:	4602      	mov	r2, r0
 8014e6a:	460b      	mov	r3, r1
 8014e6c:	4680      	mov	r8, r0
 8014e6e:	4689      	mov	r9, r1
 8014e70:	4630      	mov	r0, r6
 8014e72:	4639      	mov	r1, r7
 8014e74:	f7eb fa20 	bl	80002b8 <__aeabi_dsub>
 8014e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e7c:	f7eb fa1e 	bl	80002bc <__adddf3>
 8014e80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e84:	e9ca 0100 	strd	r0, r1, [sl]
 8014e88:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014e8c:	e756      	b.n	8014d3c <__kernel_rem_pio2+0x4fc>
 8014e8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014e92:	f7eb fa13 	bl	80002bc <__adddf3>
 8014e96:	3d01      	subs	r5, #1
 8014e98:	e756      	b.n	8014d48 <__kernel_rem_pio2+0x508>
 8014e9a:	9b01      	ldr	r3, [sp, #4]
 8014e9c:	9a01      	ldr	r2, [sp, #4]
 8014e9e:	601f      	str	r7, [r3, #0]
 8014ea0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014ea4:	605c      	str	r4, [r3, #4]
 8014ea6:	609d      	str	r5, [r3, #8]
 8014ea8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014eac:	60d3      	str	r3, [r2, #12]
 8014eae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014eb2:	6110      	str	r0, [r2, #16]
 8014eb4:	6153      	str	r3, [r2, #20]
 8014eb6:	e78e      	b.n	8014dd6 <__kernel_rem_pio2+0x596>
 8014eb8:	41700000 	.word	0x41700000
 8014ebc:	3e700000 	.word	0x3e700000

08014ec0 <__kernel_sin>:
 8014ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	ec55 4b10 	vmov	r4, r5, d0
 8014ec8:	b085      	sub	sp, #20
 8014eca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014ece:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014ed2:	ed8d 1b00 	vstr	d1, [sp]
 8014ed6:	9002      	str	r0, [sp, #8]
 8014ed8:	da06      	bge.n	8014ee8 <__kernel_sin+0x28>
 8014eda:	ee10 0a10 	vmov	r0, s0
 8014ede:	4629      	mov	r1, r5
 8014ee0:	f7eb fe52 	bl	8000b88 <__aeabi_d2iz>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d051      	beq.n	8014f8c <__kernel_sin+0xcc>
 8014ee8:	4622      	mov	r2, r4
 8014eea:	462b      	mov	r3, r5
 8014eec:	4620      	mov	r0, r4
 8014eee:	4629      	mov	r1, r5
 8014ef0:	f7eb fb9a 	bl	8000628 <__aeabi_dmul>
 8014ef4:	4682      	mov	sl, r0
 8014ef6:	468b      	mov	fp, r1
 8014ef8:	4602      	mov	r2, r0
 8014efa:	460b      	mov	r3, r1
 8014efc:	4620      	mov	r0, r4
 8014efe:	4629      	mov	r1, r5
 8014f00:	f7eb fb92 	bl	8000628 <__aeabi_dmul>
 8014f04:	a341      	add	r3, pc, #260	; (adr r3, 801500c <__kernel_sin+0x14c>)
 8014f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0a:	4680      	mov	r8, r0
 8014f0c:	4689      	mov	r9, r1
 8014f0e:	4650      	mov	r0, sl
 8014f10:	4659      	mov	r1, fp
 8014f12:	f7eb fb89 	bl	8000628 <__aeabi_dmul>
 8014f16:	a33f      	add	r3, pc, #252	; (adr r3, 8015014 <__kernel_sin+0x154>)
 8014f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1c:	f7eb f9cc 	bl	80002b8 <__aeabi_dsub>
 8014f20:	4652      	mov	r2, sl
 8014f22:	465b      	mov	r3, fp
 8014f24:	f7eb fb80 	bl	8000628 <__aeabi_dmul>
 8014f28:	a33c      	add	r3, pc, #240	; (adr r3, 801501c <__kernel_sin+0x15c>)
 8014f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2e:	f7eb f9c5 	bl	80002bc <__adddf3>
 8014f32:	4652      	mov	r2, sl
 8014f34:	465b      	mov	r3, fp
 8014f36:	f7eb fb77 	bl	8000628 <__aeabi_dmul>
 8014f3a:	a33a      	add	r3, pc, #232	; (adr r3, 8015024 <__kernel_sin+0x164>)
 8014f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f40:	f7eb f9ba 	bl	80002b8 <__aeabi_dsub>
 8014f44:	4652      	mov	r2, sl
 8014f46:	465b      	mov	r3, fp
 8014f48:	f7eb fb6e 	bl	8000628 <__aeabi_dmul>
 8014f4c:	a337      	add	r3, pc, #220	; (adr r3, 801502c <__kernel_sin+0x16c>)
 8014f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f52:	f7eb f9b3 	bl	80002bc <__adddf3>
 8014f56:	9b02      	ldr	r3, [sp, #8]
 8014f58:	4606      	mov	r6, r0
 8014f5a:	460f      	mov	r7, r1
 8014f5c:	b9db      	cbnz	r3, 8014f96 <__kernel_sin+0xd6>
 8014f5e:	4602      	mov	r2, r0
 8014f60:	460b      	mov	r3, r1
 8014f62:	4650      	mov	r0, sl
 8014f64:	4659      	mov	r1, fp
 8014f66:	f7eb fb5f 	bl	8000628 <__aeabi_dmul>
 8014f6a:	a325      	add	r3, pc, #148	; (adr r3, 8015000 <__kernel_sin+0x140>)
 8014f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f70:	f7eb f9a2 	bl	80002b8 <__aeabi_dsub>
 8014f74:	4642      	mov	r2, r8
 8014f76:	464b      	mov	r3, r9
 8014f78:	f7eb fb56 	bl	8000628 <__aeabi_dmul>
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	460b      	mov	r3, r1
 8014f80:	4620      	mov	r0, r4
 8014f82:	4629      	mov	r1, r5
 8014f84:	f7eb f99a 	bl	80002bc <__adddf3>
 8014f88:	4604      	mov	r4, r0
 8014f8a:	460d      	mov	r5, r1
 8014f8c:	ec45 4b10 	vmov	d0, r4, r5
 8014f90:	b005      	add	sp, #20
 8014f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f96:	2200      	movs	r2, #0
 8014f98:	4b1b      	ldr	r3, [pc, #108]	; (8015008 <__kernel_sin+0x148>)
 8014f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f9e:	f7eb fb43 	bl	8000628 <__aeabi_dmul>
 8014fa2:	4632      	mov	r2, r6
 8014fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fa8:	463b      	mov	r3, r7
 8014faa:	4640      	mov	r0, r8
 8014fac:	4649      	mov	r1, r9
 8014fae:	f7eb fb3b 	bl	8000628 <__aeabi_dmul>
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	460b      	mov	r3, r1
 8014fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fba:	f7eb f97d 	bl	80002b8 <__aeabi_dsub>
 8014fbe:	4652      	mov	r2, sl
 8014fc0:	465b      	mov	r3, fp
 8014fc2:	f7eb fb31 	bl	8000628 <__aeabi_dmul>
 8014fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fca:	f7eb f975 	bl	80002b8 <__aeabi_dsub>
 8014fce:	a30c      	add	r3, pc, #48	; (adr r3, 8015000 <__kernel_sin+0x140>)
 8014fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd4:	4606      	mov	r6, r0
 8014fd6:	460f      	mov	r7, r1
 8014fd8:	4640      	mov	r0, r8
 8014fda:	4649      	mov	r1, r9
 8014fdc:	f7eb fb24 	bl	8000628 <__aeabi_dmul>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	4639      	mov	r1, r7
 8014fe8:	f7eb f968 	bl	80002bc <__adddf3>
 8014fec:	4602      	mov	r2, r0
 8014fee:	460b      	mov	r3, r1
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	4629      	mov	r1, r5
 8014ff4:	f7eb f960 	bl	80002b8 <__aeabi_dsub>
 8014ff8:	e7c6      	b.n	8014f88 <__kernel_sin+0xc8>
 8014ffa:	bf00      	nop
 8014ffc:	f3af 8000 	nop.w
 8015000:	55555549 	.word	0x55555549
 8015004:	3fc55555 	.word	0x3fc55555
 8015008:	3fe00000 	.word	0x3fe00000
 801500c:	5acfd57c 	.word	0x5acfd57c
 8015010:	3de5d93a 	.word	0x3de5d93a
 8015014:	8a2b9ceb 	.word	0x8a2b9ceb
 8015018:	3e5ae5e6 	.word	0x3e5ae5e6
 801501c:	57b1fe7d 	.word	0x57b1fe7d
 8015020:	3ec71de3 	.word	0x3ec71de3
 8015024:	19c161d5 	.word	0x19c161d5
 8015028:	3f2a01a0 	.word	0x3f2a01a0
 801502c:	1110f8a6 	.word	0x1110f8a6
 8015030:	3f811111 	.word	0x3f811111

08015034 <fabs>:
 8015034:	ec51 0b10 	vmov	r0, r1, d0
 8015038:	ee10 2a10 	vmov	r2, s0
 801503c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015040:	ec43 2b10 	vmov	d0, r2, r3
 8015044:	4770      	bx	lr
	...

08015048 <floor>:
 8015048:	ec51 0b10 	vmov	r0, r1, d0
 801504c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015050:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015054:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015058:	2e13      	cmp	r6, #19
 801505a:	460c      	mov	r4, r1
 801505c:	ee10 5a10 	vmov	r5, s0
 8015060:	4680      	mov	r8, r0
 8015062:	dc34      	bgt.n	80150ce <floor+0x86>
 8015064:	2e00      	cmp	r6, #0
 8015066:	da16      	bge.n	8015096 <floor+0x4e>
 8015068:	a335      	add	r3, pc, #212	; (adr r3, 8015140 <floor+0xf8>)
 801506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506e:	f7eb f925 	bl	80002bc <__adddf3>
 8015072:	2200      	movs	r2, #0
 8015074:	2300      	movs	r3, #0
 8015076:	f7eb fd67 	bl	8000b48 <__aeabi_dcmpgt>
 801507a:	b148      	cbz	r0, 8015090 <floor+0x48>
 801507c:	2c00      	cmp	r4, #0
 801507e:	da59      	bge.n	8015134 <floor+0xec>
 8015080:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015084:	4a30      	ldr	r2, [pc, #192]	; (8015148 <floor+0x100>)
 8015086:	432b      	orrs	r3, r5
 8015088:	2500      	movs	r5, #0
 801508a:	42ab      	cmp	r3, r5
 801508c:	bf18      	it	ne
 801508e:	4614      	movne	r4, r2
 8015090:	4621      	mov	r1, r4
 8015092:	4628      	mov	r0, r5
 8015094:	e025      	b.n	80150e2 <floor+0x9a>
 8015096:	4f2d      	ldr	r7, [pc, #180]	; (801514c <floor+0x104>)
 8015098:	4137      	asrs	r7, r6
 801509a:	ea01 0307 	and.w	r3, r1, r7
 801509e:	4303      	orrs	r3, r0
 80150a0:	d01f      	beq.n	80150e2 <floor+0x9a>
 80150a2:	a327      	add	r3, pc, #156	; (adr r3, 8015140 <floor+0xf8>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	f7eb f908 	bl	80002bc <__adddf3>
 80150ac:	2200      	movs	r2, #0
 80150ae:	2300      	movs	r3, #0
 80150b0:	f7eb fd4a 	bl	8000b48 <__aeabi_dcmpgt>
 80150b4:	2800      	cmp	r0, #0
 80150b6:	d0eb      	beq.n	8015090 <floor+0x48>
 80150b8:	2c00      	cmp	r4, #0
 80150ba:	bfbe      	ittt	lt
 80150bc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80150c0:	fa43 f606 	asrlt.w	r6, r3, r6
 80150c4:	19a4      	addlt	r4, r4, r6
 80150c6:	ea24 0407 	bic.w	r4, r4, r7
 80150ca:	2500      	movs	r5, #0
 80150cc:	e7e0      	b.n	8015090 <floor+0x48>
 80150ce:	2e33      	cmp	r6, #51	; 0x33
 80150d0:	dd0b      	ble.n	80150ea <floor+0xa2>
 80150d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80150d6:	d104      	bne.n	80150e2 <floor+0x9a>
 80150d8:	ee10 2a10 	vmov	r2, s0
 80150dc:	460b      	mov	r3, r1
 80150de:	f7eb f8ed 	bl	80002bc <__adddf3>
 80150e2:	ec41 0b10 	vmov	d0, r0, r1
 80150e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80150ee:	f04f 33ff 	mov.w	r3, #4294967295
 80150f2:	fa23 f707 	lsr.w	r7, r3, r7
 80150f6:	4207      	tst	r7, r0
 80150f8:	d0f3      	beq.n	80150e2 <floor+0x9a>
 80150fa:	a311      	add	r3, pc, #68	; (adr r3, 8015140 <floor+0xf8>)
 80150fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015100:	f7eb f8dc 	bl	80002bc <__adddf3>
 8015104:	2200      	movs	r2, #0
 8015106:	2300      	movs	r3, #0
 8015108:	f7eb fd1e 	bl	8000b48 <__aeabi_dcmpgt>
 801510c:	2800      	cmp	r0, #0
 801510e:	d0bf      	beq.n	8015090 <floor+0x48>
 8015110:	2c00      	cmp	r4, #0
 8015112:	da02      	bge.n	801511a <floor+0xd2>
 8015114:	2e14      	cmp	r6, #20
 8015116:	d103      	bne.n	8015120 <floor+0xd8>
 8015118:	3401      	adds	r4, #1
 801511a:	ea25 0507 	bic.w	r5, r5, r7
 801511e:	e7b7      	b.n	8015090 <floor+0x48>
 8015120:	2301      	movs	r3, #1
 8015122:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015126:	fa03 f606 	lsl.w	r6, r3, r6
 801512a:	4435      	add	r5, r6
 801512c:	4545      	cmp	r5, r8
 801512e:	bf38      	it	cc
 8015130:	18e4      	addcc	r4, r4, r3
 8015132:	e7f2      	b.n	801511a <floor+0xd2>
 8015134:	2500      	movs	r5, #0
 8015136:	462c      	mov	r4, r5
 8015138:	e7aa      	b.n	8015090 <floor+0x48>
 801513a:	bf00      	nop
 801513c:	f3af 8000 	nop.w
 8015140:	8800759c 	.word	0x8800759c
 8015144:	7e37e43c 	.word	0x7e37e43c
 8015148:	bff00000 	.word	0xbff00000
 801514c:	000fffff 	.word	0x000fffff

08015150 <scalbn>:
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	ec55 4b10 	vmov	r4, r5, d0
 8015156:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801515a:	4606      	mov	r6, r0
 801515c:	462b      	mov	r3, r5
 801515e:	b9aa      	cbnz	r2, 801518c <scalbn+0x3c>
 8015160:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015164:	4323      	orrs	r3, r4
 8015166:	d03b      	beq.n	80151e0 <scalbn+0x90>
 8015168:	4b31      	ldr	r3, [pc, #196]	; (8015230 <scalbn+0xe0>)
 801516a:	4629      	mov	r1, r5
 801516c:	2200      	movs	r2, #0
 801516e:	ee10 0a10 	vmov	r0, s0
 8015172:	f7eb fa59 	bl	8000628 <__aeabi_dmul>
 8015176:	4b2f      	ldr	r3, [pc, #188]	; (8015234 <scalbn+0xe4>)
 8015178:	429e      	cmp	r6, r3
 801517a:	4604      	mov	r4, r0
 801517c:	460d      	mov	r5, r1
 801517e:	da12      	bge.n	80151a6 <scalbn+0x56>
 8015180:	a327      	add	r3, pc, #156	; (adr r3, 8015220 <scalbn+0xd0>)
 8015182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015186:	f7eb fa4f 	bl	8000628 <__aeabi_dmul>
 801518a:	e009      	b.n	80151a0 <scalbn+0x50>
 801518c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015190:	428a      	cmp	r2, r1
 8015192:	d10c      	bne.n	80151ae <scalbn+0x5e>
 8015194:	ee10 2a10 	vmov	r2, s0
 8015198:	4620      	mov	r0, r4
 801519a:	4629      	mov	r1, r5
 801519c:	f7eb f88e 	bl	80002bc <__adddf3>
 80151a0:	4604      	mov	r4, r0
 80151a2:	460d      	mov	r5, r1
 80151a4:	e01c      	b.n	80151e0 <scalbn+0x90>
 80151a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80151aa:	460b      	mov	r3, r1
 80151ac:	3a36      	subs	r2, #54	; 0x36
 80151ae:	4432      	add	r2, r6
 80151b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80151b4:	428a      	cmp	r2, r1
 80151b6:	dd0b      	ble.n	80151d0 <scalbn+0x80>
 80151b8:	ec45 4b11 	vmov	d1, r4, r5
 80151bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015228 <scalbn+0xd8>
 80151c0:	f000 f83c 	bl	801523c <copysign>
 80151c4:	a318      	add	r3, pc, #96	; (adr r3, 8015228 <scalbn+0xd8>)
 80151c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ca:	ec51 0b10 	vmov	r0, r1, d0
 80151ce:	e7da      	b.n	8015186 <scalbn+0x36>
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	dd08      	ble.n	80151e6 <scalbn+0x96>
 80151d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80151d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80151dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80151e0:	ec45 4b10 	vmov	d0, r4, r5
 80151e4:	bd70      	pop	{r4, r5, r6, pc}
 80151e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80151ea:	da0d      	bge.n	8015208 <scalbn+0xb8>
 80151ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 80151f0:	429e      	cmp	r6, r3
 80151f2:	ec45 4b11 	vmov	d1, r4, r5
 80151f6:	dce1      	bgt.n	80151bc <scalbn+0x6c>
 80151f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015220 <scalbn+0xd0>
 80151fc:	f000 f81e 	bl	801523c <copysign>
 8015200:	a307      	add	r3, pc, #28	; (adr r3, 8015220 <scalbn+0xd0>)
 8015202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015206:	e7e0      	b.n	80151ca <scalbn+0x7a>
 8015208:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801520c:	3236      	adds	r2, #54	; 0x36
 801520e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015212:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015216:	4620      	mov	r0, r4
 8015218:	4629      	mov	r1, r5
 801521a:	2200      	movs	r2, #0
 801521c:	4b06      	ldr	r3, [pc, #24]	; (8015238 <scalbn+0xe8>)
 801521e:	e7b2      	b.n	8015186 <scalbn+0x36>
 8015220:	c2f8f359 	.word	0xc2f8f359
 8015224:	01a56e1f 	.word	0x01a56e1f
 8015228:	8800759c 	.word	0x8800759c
 801522c:	7e37e43c 	.word	0x7e37e43c
 8015230:	43500000 	.word	0x43500000
 8015234:	ffff3cb0 	.word	0xffff3cb0
 8015238:	3c900000 	.word	0x3c900000

0801523c <copysign>:
 801523c:	ec51 0b10 	vmov	r0, r1, d0
 8015240:	ee11 0a90 	vmov	r0, s3
 8015244:	ee10 2a10 	vmov	r2, s0
 8015248:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801524c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015250:	ea41 0300 	orr.w	r3, r1, r0
 8015254:	ec43 2b10 	vmov	d0, r2, r3
 8015258:	4770      	bx	lr
	...

0801525c <__errno>:
 801525c:	4b01      	ldr	r3, [pc, #4]	; (8015264 <__errno+0x8>)
 801525e:	6818      	ldr	r0, [r3, #0]
 8015260:	4770      	bx	lr
 8015262:	bf00      	nop
 8015264:	2000000c 	.word	0x2000000c

08015268 <__libc_init_array>:
 8015268:	b570      	push	{r4, r5, r6, lr}
 801526a:	4e0d      	ldr	r6, [pc, #52]	; (80152a0 <__libc_init_array+0x38>)
 801526c:	4c0d      	ldr	r4, [pc, #52]	; (80152a4 <__libc_init_array+0x3c>)
 801526e:	1ba4      	subs	r4, r4, r6
 8015270:	10a4      	asrs	r4, r4, #2
 8015272:	2500      	movs	r5, #0
 8015274:	42a5      	cmp	r5, r4
 8015276:	d109      	bne.n	801528c <__libc_init_array+0x24>
 8015278:	4e0b      	ldr	r6, [pc, #44]	; (80152a8 <__libc_init_array+0x40>)
 801527a:	4c0c      	ldr	r4, [pc, #48]	; (80152ac <__libc_init_array+0x44>)
 801527c:	f004 f9e8 	bl	8019650 <_init>
 8015280:	1ba4      	subs	r4, r4, r6
 8015282:	10a4      	asrs	r4, r4, #2
 8015284:	2500      	movs	r5, #0
 8015286:	42a5      	cmp	r5, r4
 8015288:	d105      	bne.n	8015296 <__libc_init_array+0x2e>
 801528a:	bd70      	pop	{r4, r5, r6, pc}
 801528c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015290:	4798      	blx	r3
 8015292:	3501      	adds	r5, #1
 8015294:	e7ee      	b.n	8015274 <__libc_init_array+0xc>
 8015296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801529a:	4798      	blx	r3
 801529c:	3501      	adds	r5, #1
 801529e:	e7f2      	b.n	8015286 <__libc_init_array+0x1e>
 80152a0:	0801a25c 	.word	0x0801a25c
 80152a4:	0801a25c 	.word	0x0801a25c
 80152a8:	0801a25c 	.word	0x0801a25c
 80152ac:	0801a264 	.word	0x0801a264

080152b0 <memcpy>:
 80152b0:	b510      	push	{r4, lr}
 80152b2:	1e43      	subs	r3, r0, #1
 80152b4:	440a      	add	r2, r1
 80152b6:	4291      	cmp	r1, r2
 80152b8:	d100      	bne.n	80152bc <memcpy+0xc>
 80152ba:	bd10      	pop	{r4, pc}
 80152bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80152c4:	e7f7      	b.n	80152b6 <memcpy+0x6>

080152c6 <memset>:
 80152c6:	4402      	add	r2, r0
 80152c8:	4603      	mov	r3, r0
 80152ca:	4293      	cmp	r3, r2
 80152cc:	d100      	bne.n	80152d0 <memset+0xa>
 80152ce:	4770      	bx	lr
 80152d0:	f803 1b01 	strb.w	r1, [r3], #1
 80152d4:	e7f9      	b.n	80152ca <memset+0x4>

080152d6 <__cvt>:
 80152d6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152da:	ec55 4b10 	vmov	r4, r5, d0
 80152de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80152e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80152e4:	2d00      	cmp	r5, #0
 80152e6:	460e      	mov	r6, r1
 80152e8:	4691      	mov	r9, r2
 80152ea:	4619      	mov	r1, r3
 80152ec:	bfb8      	it	lt
 80152ee:	4622      	movlt	r2, r4
 80152f0:	462b      	mov	r3, r5
 80152f2:	f027 0720 	bic.w	r7, r7, #32
 80152f6:	bfbb      	ittet	lt
 80152f8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80152fc:	461d      	movlt	r5, r3
 80152fe:	2300      	movge	r3, #0
 8015300:	232d      	movlt	r3, #45	; 0x2d
 8015302:	bfb8      	it	lt
 8015304:	4614      	movlt	r4, r2
 8015306:	2f46      	cmp	r7, #70	; 0x46
 8015308:	700b      	strb	r3, [r1, #0]
 801530a:	d004      	beq.n	8015316 <__cvt+0x40>
 801530c:	2f45      	cmp	r7, #69	; 0x45
 801530e:	d100      	bne.n	8015312 <__cvt+0x3c>
 8015310:	3601      	adds	r6, #1
 8015312:	2102      	movs	r1, #2
 8015314:	e000      	b.n	8015318 <__cvt+0x42>
 8015316:	2103      	movs	r1, #3
 8015318:	ab03      	add	r3, sp, #12
 801531a:	9301      	str	r3, [sp, #4]
 801531c:	ab02      	add	r3, sp, #8
 801531e:	9300      	str	r3, [sp, #0]
 8015320:	4632      	mov	r2, r6
 8015322:	4653      	mov	r3, sl
 8015324:	ec45 4b10 	vmov	d0, r4, r5
 8015328:	f001 fdfe 	bl	8016f28 <_dtoa_r>
 801532c:	2f47      	cmp	r7, #71	; 0x47
 801532e:	4680      	mov	r8, r0
 8015330:	d102      	bne.n	8015338 <__cvt+0x62>
 8015332:	f019 0f01 	tst.w	r9, #1
 8015336:	d026      	beq.n	8015386 <__cvt+0xb0>
 8015338:	2f46      	cmp	r7, #70	; 0x46
 801533a:	eb08 0906 	add.w	r9, r8, r6
 801533e:	d111      	bne.n	8015364 <__cvt+0x8e>
 8015340:	f898 3000 	ldrb.w	r3, [r8]
 8015344:	2b30      	cmp	r3, #48	; 0x30
 8015346:	d10a      	bne.n	801535e <__cvt+0x88>
 8015348:	2200      	movs	r2, #0
 801534a:	2300      	movs	r3, #0
 801534c:	4620      	mov	r0, r4
 801534e:	4629      	mov	r1, r5
 8015350:	f7eb fbd2 	bl	8000af8 <__aeabi_dcmpeq>
 8015354:	b918      	cbnz	r0, 801535e <__cvt+0x88>
 8015356:	f1c6 0601 	rsb	r6, r6, #1
 801535a:	f8ca 6000 	str.w	r6, [sl]
 801535e:	f8da 3000 	ldr.w	r3, [sl]
 8015362:	4499      	add	r9, r3
 8015364:	2200      	movs	r2, #0
 8015366:	2300      	movs	r3, #0
 8015368:	4620      	mov	r0, r4
 801536a:	4629      	mov	r1, r5
 801536c:	f7eb fbc4 	bl	8000af8 <__aeabi_dcmpeq>
 8015370:	b938      	cbnz	r0, 8015382 <__cvt+0xac>
 8015372:	2230      	movs	r2, #48	; 0x30
 8015374:	9b03      	ldr	r3, [sp, #12]
 8015376:	454b      	cmp	r3, r9
 8015378:	d205      	bcs.n	8015386 <__cvt+0xb0>
 801537a:	1c59      	adds	r1, r3, #1
 801537c:	9103      	str	r1, [sp, #12]
 801537e:	701a      	strb	r2, [r3, #0]
 8015380:	e7f8      	b.n	8015374 <__cvt+0x9e>
 8015382:	f8cd 900c 	str.w	r9, [sp, #12]
 8015386:	9b03      	ldr	r3, [sp, #12]
 8015388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801538a:	eba3 0308 	sub.w	r3, r3, r8
 801538e:	4640      	mov	r0, r8
 8015390:	6013      	str	r3, [r2, #0]
 8015392:	b004      	add	sp, #16
 8015394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015398 <__exponent>:
 8015398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801539a:	2900      	cmp	r1, #0
 801539c:	4604      	mov	r4, r0
 801539e:	bfba      	itte	lt
 80153a0:	4249      	neglt	r1, r1
 80153a2:	232d      	movlt	r3, #45	; 0x2d
 80153a4:	232b      	movge	r3, #43	; 0x2b
 80153a6:	2909      	cmp	r1, #9
 80153a8:	f804 2b02 	strb.w	r2, [r4], #2
 80153ac:	7043      	strb	r3, [r0, #1]
 80153ae:	dd20      	ble.n	80153f2 <__exponent+0x5a>
 80153b0:	f10d 0307 	add.w	r3, sp, #7
 80153b4:	461f      	mov	r7, r3
 80153b6:	260a      	movs	r6, #10
 80153b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80153bc:	fb06 1115 	mls	r1, r6, r5, r1
 80153c0:	3130      	adds	r1, #48	; 0x30
 80153c2:	2d09      	cmp	r5, #9
 80153c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80153c8:	f103 32ff 	add.w	r2, r3, #4294967295
 80153cc:	4629      	mov	r1, r5
 80153ce:	dc09      	bgt.n	80153e4 <__exponent+0x4c>
 80153d0:	3130      	adds	r1, #48	; 0x30
 80153d2:	3b02      	subs	r3, #2
 80153d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80153d8:	42bb      	cmp	r3, r7
 80153da:	4622      	mov	r2, r4
 80153dc:	d304      	bcc.n	80153e8 <__exponent+0x50>
 80153de:	1a10      	subs	r0, r2, r0
 80153e0:	b003      	add	sp, #12
 80153e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153e4:	4613      	mov	r3, r2
 80153e6:	e7e7      	b.n	80153b8 <__exponent+0x20>
 80153e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153ec:	f804 2b01 	strb.w	r2, [r4], #1
 80153f0:	e7f2      	b.n	80153d8 <__exponent+0x40>
 80153f2:	2330      	movs	r3, #48	; 0x30
 80153f4:	4419      	add	r1, r3
 80153f6:	7083      	strb	r3, [r0, #2]
 80153f8:	1d02      	adds	r2, r0, #4
 80153fa:	70c1      	strb	r1, [r0, #3]
 80153fc:	e7ef      	b.n	80153de <__exponent+0x46>
	...

08015400 <_printf_float>:
 8015400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015404:	b08d      	sub	sp, #52	; 0x34
 8015406:	460c      	mov	r4, r1
 8015408:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801540c:	4616      	mov	r6, r2
 801540e:	461f      	mov	r7, r3
 8015410:	4605      	mov	r5, r0
 8015412:	f002 fe7b 	bl	801810c <_localeconv_r>
 8015416:	6803      	ldr	r3, [r0, #0]
 8015418:	9304      	str	r3, [sp, #16]
 801541a:	4618      	mov	r0, r3
 801541c:	f7ea fef0 	bl	8000200 <strlen>
 8015420:	2300      	movs	r3, #0
 8015422:	930a      	str	r3, [sp, #40]	; 0x28
 8015424:	f8d8 3000 	ldr.w	r3, [r8]
 8015428:	9005      	str	r0, [sp, #20]
 801542a:	3307      	adds	r3, #7
 801542c:	f023 0307 	bic.w	r3, r3, #7
 8015430:	f103 0208 	add.w	r2, r3, #8
 8015434:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015438:	f8d4 b000 	ldr.w	fp, [r4]
 801543c:	f8c8 2000 	str.w	r2, [r8]
 8015440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015444:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015448:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801544c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015450:	9307      	str	r3, [sp, #28]
 8015452:	f8cd 8018 	str.w	r8, [sp, #24]
 8015456:	f04f 32ff 	mov.w	r2, #4294967295
 801545a:	4ba7      	ldr	r3, [pc, #668]	; (80156f8 <_printf_float+0x2f8>)
 801545c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015460:	f7eb fb7c 	bl	8000b5c <__aeabi_dcmpun>
 8015464:	bb70      	cbnz	r0, 80154c4 <_printf_float+0xc4>
 8015466:	f04f 32ff 	mov.w	r2, #4294967295
 801546a:	4ba3      	ldr	r3, [pc, #652]	; (80156f8 <_printf_float+0x2f8>)
 801546c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015470:	f7eb fb56 	bl	8000b20 <__aeabi_dcmple>
 8015474:	bb30      	cbnz	r0, 80154c4 <_printf_float+0xc4>
 8015476:	2200      	movs	r2, #0
 8015478:	2300      	movs	r3, #0
 801547a:	4640      	mov	r0, r8
 801547c:	4649      	mov	r1, r9
 801547e:	f7eb fb45 	bl	8000b0c <__aeabi_dcmplt>
 8015482:	b110      	cbz	r0, 801548a <_printf_float+0x8a>
 8015484:	232d      	movs	r3, #45	; 0x2d
 8015486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801548a:	4a9c      	ldr	r2, [pc, #624]	; (80156fc <_printf_float+0x2fc>)
 801548c:	4b9c      	ldr	r3, [pc, #624]	; (8015700 <_printf_float+0x300>)
 801548e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015492:	bf8c      	ite	hi
 8015494:	4690      	movhi	r8, r2
 8015496:	4698      	movls	r8, r3
 8015498:	2303      	movs	r3, #3
 801549a:	f02b 0204 	bic.w	r2, fp, #4
 801549e:	6123      	str	r3, [r4, #16]
 80154a0:	6022      	str	r2, [r4, #0]
 80154a2:	f04f 0900 	mov.w	r9, #0
 80154a6:	9700      	str	r7, [sp, #0]
 80154a8:	4633      	mov	r3, r6
 80154aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80154ac:	4621      	mov	r1, r4
 80154ae:	4628      	mov	r0, r5
 80154b0:	f000 f9e6 	bl	8015880 <_printf_common>
 80154b4:	3001      	adds	r0, #1
 80154b6:	f040 808d 	bne.w	80155d4 <_printf_float+0x1d4>
 80154ba:	f04f 30ff 	mov.w	r0, #4294967295
 80154be:	b00d      	add	sp, #52	; 0x34
 80154c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154c4:	4642      	mov	r2, r8
 80154c6:	464b      	mov	r3, r9
 80154c8:	4640      	mov	r0, r8
 80154ca:	4649      	mov	r1, r9
 80154cc:	f7eb fb46 	bl	8000b5c <__aeabi_dcmpun>
 80154d0:	b110      	cbz	r0, 80154d8 <_printf_float+0xd8>
 80154d2:	4a8c      	ldr	r2, [pc, #560]	; (8015704 <_printf_float+0x304>)
 80154d4:	4b8c      	ldr	r3, [pc, #560]	; (8015708 <_printf_float+0x308>)
 80154d6:	e7da      	b.n	801548e <_printf_float+0x8e>
 80154d8:	6861      	ldr	r1, [r4, #4]
 80154da:	1c4b      	adds	r3, r1, #1
 80154dc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80154e0:	a80a      	add	r0, sp, #40	; 0x28
 80154e2:	d13e      	bne.n	8015562 <_printf_float+0x162>
 80154e4:	2306      	movs	r3, #6
 80154e6:	6063      	str	r3, [r4, #4]
 80154e8:	2300      	movs	r3, #0
 80154ea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80154ee:	ab09      	add	r3, sp, #36	; 0x24
 80154f0:	9300      	str	r3, [sp, #0]
 80154f2:	ec49 8b10 	vmov	d0, r8, r9
 80154f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80154fa:	6022      	str	r2, [r4, #0]
 80154fc:	f8cd a004 	str.w	sl, [sp, #4]
 8015500:	6861      	ldr	r1, [r4, #4]
 8015502:	4628      	mov	r0, r5
 8015504:	f7ff fee7 	bl	80152d6 <__cvt>
 8015508:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801550c:	2b47      	cmp	r3, #71	; 0x47
 801550e:	4680      	mov	r8, r0
 8015510:	d109      	bne.n	8015526 <_printf_float+0x126>
 8015512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015514:	1cd8      	adds	r0, r3, #3
 8015516:	db02      	blt.n	801551e <_printf_float+0x11e>
 8015518:	6862      	ldr	r2, [r4, #4]
 801551a:	4293      	cmp	r3, r2
 801551c:	dd47      	ble.n	80155ae <_printf_float+0x1ae>
 801551e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015522:	fa5f fa8a 	uxtb.w	sl, sl
 8015526:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801552a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801552c:	d824      	bhi.n	8015578 <_printf_float+0x178>
 801552e:	3901      	subs	r1, #1
 8015530:	4652      	mov	r2, sl
 8015532:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015536:	9109      	str	r1, [sp, #36]	; 0x24
 8015538:	f7ff ff2e 	bl	8015398 <__exponent>
 801553c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801553e:	1813      	adds	r3, r2, r0
 8015540:	2a01      	cmp	r2, #1
 8015542:	4681      	mov	r9, r0
 8015544:	6123      	str	r3, [r4, #16]
 8015546:	dc02      	bgt.n	801554e <_printf_float+0x14e>
 8015548:	6822      	ldr	r2, [r4, #0]
 801554a:	07d1      	lsls	r1, r2, #31
 801554c:	d501      	bpl.n	8015552 <_printf_float+0x152>
 801554e:	3301      	adds	r3, #1
 8015550:	6123      	str	r3, [r4, #16]
 8015552:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015556:	2b00      	cmp	r3, #0
 8015558:	d0a5      	beq.n	80154a6 <_printf_float+0xa6>
 801555a:	232d      	movs	r3, #45	; 0x2d
 801555c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015560:	e7a1      	b.n	80154a6 <_printf_float+0xa6>
 8015562:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015566:	f000 8177 	beq.w	8015858 <_printf_float+0x458>
 801556a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801556e:	d1bb      	bne.n	80154e8 <_printf_float+0xe8>
 8015570:	2900      	cmp	r1, #0
 8015572:	d1b9      	bne.n	80154e8 <_printf_float+0xe8>
 8015574:	2301      	movs	r3, #1
 8015576:	e7b6      	b.n	80154e6 <_printf_float+0xe6>
 8015578:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801557c:	d119      	bne.n	80155b2 <_printf_float+0x1b2>
 801557e:	2900      	cmp	r1, #0
 8015580:	6863      	ldr	r3, [r4, #4]
 8015582:	dd0c      	ble.n	801559e <_printf_float+0x19e>
 8015584:	6121      	str	r1, [r4, #16]
 8015586:	b913      	cbnz	r3, 801558e <_printf_float+0x18e>
 8015588:	6822      	ldr	r2, [r4, #0]
 801558a:	07d2      	lsls	r2, r2, #31
 801558c:	d502      	bpl.n	8015594 <_printf_float+0x194>
 801558e:	3301      	adds	r3, #1
 8015590:	440b      	add	r3, r1
 8015592:	6123      	str	r3, [r4, #16]
 8015594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015596:	65a3      	str	r3, [r4, #88]	; 0x58
 8015598:	f04f 0900 	mov.w	r9, #0
 801559c:	e7d9      	b.n	8015552 <_printf_float+0x152>
 801559e:	b913      	cbnz	r3, 80155a6 <_printf_float+0x1a6>
 80155a0:	6822      	ldr	r2, [r4, #0]
 80155a2:	07d0      	lsls	r0, r2, #31
 80155a4:	d501      	bpl.n	80155aa <_printf_float+0x1aa>
 80155a6:	3302      	adds	r3, #2
 80155a8:	e7f3      	b.n	8015592 <_printf_float+0x192>
 80155aa:	2301      	movs	r3, #1
 80155ac:	e7f1      	b.n	8015592 <_printf_float+0x192>
 80155ae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80155b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80155b6:	4293      	cmp	r3, r2
 80155b8:	db05      	blt.n	80155c6 <_printf_float+0x1c6>
 80155ba:	6822      	ldr	r2, [r4, #0]
 80155bc:	6123      	str	r3, [r4, #16]
 80155be:	07d1      	lsls	r1, r2, #31
 80155c0:	d5e8      	bpl.n	8015594 <_printf_float+0x194>
 80155c2:	3301      	adds	r3, #1
 80155c4:	e7e5      	b.n	8015592 <_printf_float+0x192>
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	bfd4      	ite	le
 80155ca:	f1c3 0302 	rsble	r3, r3, #2
 80155ce:	2301      	movgt	r3, #1
 80155d0:	4413      	add	r3, r2
 80155d2:	e7de      	b.n	8015592 <_printf_float+0x192>
 80155d4:	6823      	ldr	r3, [r4, #0]
 80155d6:	055a      	lsls	r2, r3, #21
 80155d8:	d407      	bmi.n	80155ea <_printf_float+0x1ea>
 80155da:	6923      	ldr	r3, [r4, #16]
 80155dc:	4642      	mov	r2, r8
 80155de:	4631      	mov	r1, r6
 80155e0:	4628      	mov	r0, r5
 80155e2:	47b8      	blx	r7
 80155e4:	3001      	adds	r0, #1
 80155e6:	d12b      	bne.n	8015640 <_printf_float+0x240>
 80155e8:	e767      	b.n	80154ba <_printf_float+0xba>
 80155ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80155ee:	f240 80dc 	bls.w	80157aa <_printf_float+0x3aa>
 80155f2:	2200      	movs	r2, #0
 80155f4:	2300      	movs	r3, #0
 80155f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155fa:	f7eb fa7d 	bl	8000af8 <__aeabi_dcmpeq>
 80155fe:	2800      	cmp	r0, #0
 8015600:	d033      	beq.n	801566a <_printf_float+0x26a>
 8015602:	2301      	movs	r3, #1
 8015604:	4a41      	ldr	r2, [pc, #260]	; (801570c <_printf_float+0x30c>)
 8015606:	4631      	mov	r1, r6
 8015608:	4628      	mov	r0, r5
 801560a:	47b8      	blx	r7
 801560c:	3001      	adds	r0, #1
 801560e:	f43f af54 	beq.w	80154ba <_printf_float+0xba>
 8015612:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015616:	429a      	cmp	r2, r3
 8015618:	db02      	blt.n	8015620 <_printf_float+0x220>
 801561a:	6823      	ldr	r3, [r4, #0]
 801561c:	07d8      	lsls	r0, r3, #31
 801561e:	d50f      	bpl.n	8015640 <_printf_float+0x240>
 8015620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015624:	4631      	mov	r1, r6
 8015626:	4628      	mov	r0, r5
 8015628:	47b8      	blx	r7
 801562a:	3001      	adds	r0, #1
 801562c:	f43f af45 	beq.w	80154ba <_printf_float+0xba>
 8015630:	f04f 0800 	mov.w	r8, #0
 8015634:	f104 091a 	add.w	r9, r4, #26
 8015638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801563a:	3b01      	subs	r3, #1
 801563c:	4543      	cmp	r3, r8
 801563e:	dc09      	bgt.n	8015654 <_printf_float+0x254>
 8015640:	6823      	ldr	r3, [r4, #0]
 8015642:	079b      	lsls	r3, r3, #30
 8015644:	f100 8103 	bmi.w	801584e <_printf_float+0x44e>
 8015648:	68e0      	ldr	r0, [r4, #12]
 801564a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801564c:	4298      	cmp	r0, r3
 801564e:	bfb8      	it	lt
 8015650:	4618      	movlt	r0, r3
 8015652:	e734      	b.n	80154be <_printf_float+0xbe>
 8015654:	2301      	movs	r3, #1
 8015656:	464a      	mov	r2, r9
 8015658:	4631      	mov	r1, r6
 801565a:	4628      	mov	r0, r5
 801565c:	47b8      	blx	r7
 801565e:	3001      	adds	r0, #1
 8015660:	f43f af2b 	beq.w	80154ba <_printf_float+0xba>
 8015664:	f108 0801 	add.w	r8, r8, #1
 8015668:	e7e6      	b.n	8015638 <_printf_float+0x238>
 801566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801566c:	2b00      	cmp	r3, #0
 801566e:	dc2b      	bgt.n	80156c8 <_printf_float+0x2c8>
 8015670:	2301      	movs	r3, #1
 8015672:	4a26      	ldr	r2, [pc, #152]	; (801570c <_printf_float+0x30c>)
 8015674:	4631      	mov	r1, r6
 8015676:	4628      	mov	r0, r5
 8015678:	47b8      	blx	r7
 801567a:	3001      	adds	r0, #1
 801567c:	f43f af1d 	beq.w	80154ba <_printf_float+0xba>
 8015680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015682:	b923      	cbnz	r3, 801568e <_printf_float+0x28e>
 8015684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015686:	b913      	cbnz	r3, 801568e <_printf_float+0x28e>
 8015688:	6823      	ldr	r3, [r4, #0]
 801568a:	07d9      	lsls	r1, r3, #31
 801568c:	d5d8      	bpl.n	8015640 <_printf_float+0x240>
 801568e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015692:	4631      	mov	r1, r6
 8015694:	4628      	mov	r0, r5
 8015696:	47b8      	blx	r7
 8015698:	3001      	adds	r0, #1
 801569a:	f43f af0e 	beq.w	80154ba <_printf_float+0xba>
 801569e:	f04f 0900 	mov.w	r9, #0
 80156a2:	f104 0a1a 	add.w	sl, r4, #26
 80156a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156a8:	425b      	negs	r3, r3
 80156aa:	454b      	cmp	r3, r9
 80156ac:	dc01      	bgt.n	80156b2 <_printf_float+0x2b2>
 80156ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b0:	e794      	b.n	80155dc <_printf_float+0x1dc>
 80156b2:	2301      	movs	r3, #1
 80156b4:	4652      	mov	r2, sl
 80156b6:	4631      	mov	r1, r6
 80156b8:	4628      	mov	r0, r5
 80156ba:	47b8      	blx	r7
 80156bc:	3001      	adds	r0, #1
 80156be:	f43f aefc 	beq.w	80154ba <_printf_float+0xba>
 80156c2:	f109 0901 	add.w	r9, r9, #1
 80156c6:	e7ee      	b.n	80156a6 <_printf_float+0x2a6>
 80156c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80156cc:	429a      	cmp	r2, r3
 80156ce:	bfa8      	it	ge
 80156d0:	461a      	movge	r2, r3
 80156d2:	2a00      	cmp	r2, #0
 80156d4:	4691      	mov	r9, r2
 80156d6:	dd07      	ble.n	80156e8 <_printf_float+0x2e8>
 80156d8:	4613      	mov	r3, r2
 80156da:	4631      	mov	r1, r6
 80156dc:	4642      	mov	r2, r8
 80156de:	4628      	mov	r0, r5
 80156e0:	47b8      	blx	r7
 80156e2:	3001      	adds	r0, #1
 80156e4:	f43f aee9 	beq.w	80154ba <_printf_float+0xba>
 80156e8:	f104 031a 	add.w	r3, r4, #26
 80156ec:	f04f 0b00 	mov.w	fp, #0
 80156f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156f4:	9306      	str	r3, [sp, #24]
 80156f6:	e015      	b.n	8015724 <_printf_float+0x324>
 80156f8:	7fefffff 	.word	0x7fefffff
 80156fc:	08019f24 	.word	0x08019f24
 8015700:	08019f20 	.word	0x08019f20
 8015704:	08019f2c 	.word	0x08019f2c
 8015708:	08019f28 	.word	0x08019f28
 801570c:	0801a14b 	.word	0x0801a14b
 8015710:	2301      	movs	r3, #1
 8015712:	9a06      	ldr	r2, [sp, #24]
 8015714:	4631      	mov	r1, r6
 8015716:	4628      	mov	r0, r5
 8015718:	47b8      	blx	r7
 801571a:	3001      	adds	r0, #1
 801571c:	f43f aecd 	beq.w	80154ba <_printf_float+0xba>
 8015720:	f10b 0b01 	add.w	fp, fp, #1
 8015724:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015728:	ebaa 0309 	sub.w	r3, sl, r9
 801572c:	455b      	cmp	r3, fp
 801572e:	dcef      	bgt.n	8015710 <_printf_float+0x310>
 8015730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015734:	429a      	cmp	r2, r3
 8015736:	44d0      	add	r8, sl
 8015738:	db15      	blt.n	8015766 <_printf_float+0x366>
 801573a:	6823      	ldr	r3, [r4, #0]
 801573c:	07da      	lsls	r2, r3, #31
 801573e:	d412      	bmi.n	8015766 <_printf_float+0x366>
 8015740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015744:	eba3 020a 	sub.w	r2, r3, sl
 8015748:	eba3 0a01 	sub.w	sl, r3, r1
 801574c:	4592      	cmp	sl, r2
 801574e:	bfa8      	it	ge
 8015750:	4692      	movge	sl, r2
 8015752:	f1ba 0f00 	cmp.w	sl, #0
 8015756:	dc0e      	bgt.n	8015776 <_printf_float+0x376>
 8015758:	f04f 0800 	mov.w	r8, #0
 801575c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015760:	f104 091a 	add.w	r9, r4, #26
 8015764:	e019      	b.n	801579a <_printf_float+0x39a>
 8015766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801576a:	4631      	mov	r1, r6
 801576c:	4628      	mov	r0, r5
 801576e:	47b8      	blx	r7
 8015770:	3001      	adds	r0, #1
 8015772:	d1e5      	bne.n	8015740 <_printf_float+0x340>
 8015774:	e6a1      	b.n	80154ba <_printf_float+0xba>
 8015776:	4653      	mov	r3, sl
 8015778:	4642      	mov	r2, r8
 801577a:	4631      	mov	r1, r6
 801577c:	4628      	mov	r0, r5
 801577e:	47b8      	blx	r7
 8015780:	3001      	adds	r0, #1
 8015782:	d1e9      	bne.n	8015758 <_printf_float+0x358>
 8015784:	e699      	b.n	80154ba <_printf_float+0xba>
 8015786:	2301      	movs	r3, #1
 8015788:	464a      	mov	r2, r9
 801578a:	4631      	mov	r1, r6
 801578c:	4628      	mov	r0, r5
 801578e:	47b8      	blx	r7
 8015790:	3001      	adds	r0, #1
 8015792:	f43f ae92 	beq.w	80154ba <_printf_float+0xba>
 8015796:	f108 0801 	add.w	r8, r8, #1
 801579a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801579e:	1a9b      	subs	r3, r3, r2
 80157a0:	eba3 030a 	sub.w	r3, r3, sl
 80157a4:	4543      	cmp	r3, r8
 80157a6:	dcee      	bgt.n	8015786 <_printf_float+0x386>
 80157a8:	e74a      	b.n	8015640 <_printf_float+0x240>
 80157aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157ac:	2a01      	cmp	r2, #1
 80157ae:	dc01      	bgt.n	80157b4 <_printf_float+0x3b4>
 80157b0:	07db      	lsls	r3, r3, #31
 80157b2:	d53a      	bpl.n	801582a <_printf_float+0x42a>
 80157b4:	2301      	movs	r3, #1
 80157b6:	4642      	mov	r2, r8
 80157b8:	4631      	mov	r1, r6
 80157ba:	4628      	mov	r0, r5
 80157bc:	47b8      	blx	r7
 80157be:	3001      	adds	r0, #1
 80157c0:	f43f ae7b 	beq.w	80154ba <_printf_float+0xba>
 80157c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157c8:	4631      	mov	r1, r6
 80157ca:	4628      	mov	r0, r5
 80157cc:	47b8      	blx	r7
 80157ce:	3001      	adds	r0, #1
 80157d0:	f108 0801 	add.w	r8, r8, #1
 80157d4:	f43f ae71 	beq.w	80154ba <_printf_float+0xba>
 80157d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157da:	2200      	movs	r2, #0
 80157dc:	f103 3aff 	add.w	sl, r3, #4294967295
 80157e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80157e4:	2300      	movs	r3, #0
 80157e6:	f7eb f987 	bl	8000af8 <__aeabi_dcmpeq>
 80157ea:	b9c8      	cbnz	r0, 8015820 <_printf_float+0x420>
 80157ec:	4653      	mov	r3, sl
 80157ee:	4642      	mov	r2, r8
 80157f0:	4631      	mov	r1, r6
 80157f2:	4628      	mov	r0, r5
 80157f4:	47b8      	blx	r7
 80157f6:	3001      	adds	r0, #1
 80157f8:	d10e      	bne.n	8015818 <_printf_float+0x418>
 80157fa:	e65e      	b.n	80154ba <_printf_float+0xba>
 80157fc:	2301      	movs	r3, #1
 80157fe:	4652      	mov	r2, sl
 8015800:	4631      	mov	r1, r6
 8015802:	4628      	mov	r0, r5
 8015804:	47b8      	blx	r7
 8015806:	3001      	adds	r0, #1
 8015808:	f43f ae57 	beq.w	80154ba <_printf_float+0xba>
 801580c:	f108 0801 	add.w	r8, r8, #1
 8015810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015812:	3b01      	subs	r3, #1
 8015814:	4543      	cmp	r3, r8
 8015816:	dcf1      	bgt.n	80157fc <_printf_float+0x3fc>
 8015818:	464b      	mov	r3, r9
 801581a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801581e:	e6de      	b.n	80155de <_printf_float+0x1de>
 8015820:	f04f 0800 	mov.w	r8, #0
 8015824:	f104 0a1a 	add.w	sl, r4, #26
 8015828:	e7f2      	b.n	8015810 <_printf_float+0x410>
 801582a:	2301      	movs	r3, #1
 801582c:	e7df      	b.n	80157ee <_printf_float+0x3ee>
 801582e:	2301      	movs	r3, #1
 8015830:	464a      	mov	r2, r9
 8015832:	4631      	mov	r1, r6
 8015834:	4628      	mov	r0, r5
 8015836:	47b8      	blx	r7
 8015838:	3001      	adds	r0, #1
 801583a:	f43f ae3e 	beq.w	80154ba <_printf_float+0xba>
 801583e:	f108 0801 	add.w	r8, r8, #1
 8015842:	68e3      	ldr	r3, [r4, #12]
 8015844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015846:	1a9b      	subs	r3, r3, r2
 8015848:	4543      	cmp	r3, r8
 801584a:	dcf0      	bgt.n	801582e <_printf_float+0x42e>
 801584c:	e6fc      	b.n	8015648 <_printf_float+0x248>
 801584e:	f04f 0800 	mov.w	r8, #0
 8015852:	f104 0919 	add.w	r9, r4, #25
 8015856:	e7f4      	b.n	8015842 <_printf_float+0x442>
 8015858:	2900      	cmp	r1, #0
 801585a:	f43f ae8b 	beq.w	8015574 <_printf_float+0x174>
 801585e:	2300      	movs	r3, #0
 8015860:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015864:	ab09      	add	r3, sp, #36	; 0x24
 8015866:	9300      	str	r3, [sp, #0]
 8015868:	ec49 8b10 	vmov	d0, r8, r9
 801586c:	6022      	str	r2, [r4, #0]
 801586e:	f8cd a004 	str.w	sl, [sp, #4]
 8015872:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015876:	4628      	mov	r0, r5
 8015878:	f7ff fd2d 	bl	80152d6 <__cvt>
 801587c:	4680      	mov	r8, r0
 801587e:	e648      	b.n	8015512 <_printf_float+0x112>

08015880 <_printf_common>:
 8015880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015884:	4691      	mov	r9, r2
 8015886:	461f      	mov	r7, r3
 8015888:	688a      	ldr	r2, [r1, #8]
 801588a:	690b      	ldr	r3, [r1, #16]
 801588c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015890:	4293      	cmp	r3, r2
 8015892:	bfb8      	it	lt
 8015894:	4613      	movlt	r3, r2
 8015896:	f8c9 3000 	str.w	r3, [r9]
 801589a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801589e:	4606      	mov	r6, r0
 80158a0:	460c      	mov	r4, r1
 80158a2:	b112      	cbz	r2, 80158aa <_printf_common+0x2a>
 80158a4:	3301      	adds	r3, #1
 80158a6:	f8c9 3000 	str.w	r3, [r9]
 80158aa:	6823      	ldr	r3, [r4, #0]
 80158ac:	0699      	lsls	r1, r3, #26
 80158ae:	bf42      	ittt	mi
 80158b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80158b4:	3302      	addmi	r3, #2
 80158b6:	f8c9 3000 	strmi.w	r3, [r9]
 80158ba:	6825      	ldr	r5, [r4, #0]
 80158bc:	f015 0506 	ands.w	r5, r5, #6
 80158c0:	d107      	bne.n	80158d2 <_printf_common+0x52>
 80158c2:	f104 0a19 	add.w	sl, r4, #25
 80158c6:	68e3      	ldr	r3, [r4, #12]
 80158c8:	f8d9 2000 	ldr.w	r2, [r9]
 80158cc:	1a9b      	subs	r3, r3, r2
 80158ce:	42ab      	cmp	r3, r5
 80158d0:	dc28      	bgt.n	8015924 <_printf_common+0xa4>
 80158d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80158d6:	6822      	ldr	r2, [r4, #0]
 80158d8:	3300      	adds	r3, #0
 80158da:	bf18      	it	ne
 80158dc:	2301      	movne	r3, #1
 80158de:	0692      	lsls	r2, r2, #26
 80158e0:	d42d      	bmi.n	801593e <_printf_common+0xbe>
 80158e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158e6:	4639      	mov	r1, r7
 80158e8:	4630      	mov	r0, r6
 80158ea:	47c0      	blx	r8
 80158ec:	3001      	adds	r0, #1
 80158ee:	d020      	beq.n	8015932 <_printf_common+0xb2>
 80158f0:	6823      	ldr	r3, [r4, #0]
 80158f2:	68e5      	ldr	r5, [r4, #12]
 80158f4:	f8d9 2000 	ldr.w	r2, [r9]
 80158f8:	f003 0306 	and.w	r3, r3, #6
 80158fc:	2b04      	cmp	r3, #4
 80158fe:	bf08      	it	eq
 8015900:	1aad      	subeq	r5, r5, r2
 8015902:	68a3      	ldr	r3, [r4, #8]
 8015904:	6922      	ldr	r2, [r4, #16]
 8015906:	bf0c      	ite	eq
 8015908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801590c:	2500      	movne	r5, #0
 801590e:	4293      	cmp	r3, r2
 8015910:	bfc4      	itt	gt
 8015912:	1a9b      	subgt	r3, r3, r2
 8015914:	18ed      	addgt	r5, r5, r3
 8015916:	f04f 0900 	mov.w	r9, #0
 801591a:	341a      	adds	r4, #26
 801591c:	454d      	cmp	r5, r9
 801591e:	d11a      	bne.n	8015956 <_printf_common+0xd6>
 8015920:	2000      	movs	r0, #0
 8015922:	e008      	b.n	8015936 <_printf_common+0xb6>
 8015924:	2301      	movs	r3, #1
 8015926:	4652      	mov	r2, sl
 8015928:	4639      	mov	r1, r7
 801592a:	4630      	mov	r0, r6
 801592c:	47c0      	blx	r8
 801592e:	3001      	adds	r0, #1
 8015930:	d103      	bne.n	801593a <_printf_common+0xba>
 8015932:	f04f 30ff 	mov.w	r0, #4294967295
 8015936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801593a:	3501      	adds	r5, #1
 801593c:	e7c3      	b.n	80158c6 <_printf_common+0x46>
 801593e:	18e1      	adds	r1, r4, r3
 8015940:	1c5a      	adds	r2, r3, #1
 8015942:	2030      	movs	r0, #48	; 0x30
 8015944:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015948:	4422      	add	r2, r4
 801594a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801594e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015952:	3302      	adds	r3, #2
 8015954:	e7c5      	b.n	80158e2 <_printf_common+0x62>
 8015956:	2301      	movs	r3, #1
 8015958:	4622      	mov	r2, r4
 801595a:	4639      	mov	r1, r7
 801595c:	4630      	mov	r0, r6
 801595e:	47c0      	blx	r8
 8015960:	3001      	adds	r0, #1
 8015962:	d0e6      	beq.n	8015932 <_printf_common+0xb2>
 8015964:	f109 0901 	add.w	r9, r9, #1
 8015968:	e7d8      	b.n	801591c <_printf_common+0x9c>
	...

0801596c <_printf_i>:
 801596c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015970:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015974:	460c      	mov	r4, r1
 8015976:	7e09      	ldrb	r1, [r1, #24]
 8015978:	b085      	sub	sp, #20
 801597a:	296e      	cmp	r1, #110	; 0x6e
 801597c:	4617      	mov	r7, r2
 801597e:	4606      	mov	r6, r0
 8015980:	4698      	mov	r8, r3
 8015982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015984:	f000 80b3 	beq.w	8015aee <_printf_i+0x182>
 8015988:	d822      	bhi.n	80159d0 <_printf_i+0x64>
 801598a:	2963      	cmp	r1, #99	; 0x63
 801598c:	d036      	beq.n	80159fc <_printf_i+0x90>
 801598e:	d80a      	bhi.n	80159a6 <_printf_i+0x3a>
 8015990:	2900      	cmp	r1, #0
 8015992:	f000 80b9 	beq.w	8015b08 <_printf_i+0x19c>
 8015996:	2958      	cmp	r1, #88	; 0x58
 8015998:	f000 8083 	beq.w	8015aa2 <_printf_i+0x136>
 801599c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80159a4:	e032      	b.n	8015a0c <_printf_i+0xa0>
 80159a6:	2964      	cmp	r1, #100	; 0x64
 80159a8:	d001      	beq.n	80159ae <_printf_i+0x42>
 80159aa:	2969      	cmp	r1, #105	; 0x69
 80159ac:	d1f6      	bne.n	801599c <_printf_i+0x30>
 80159ae:	6820      	ldr	r0, [r4, #0]
 80159b0:	6813      	ldr	r3, [r2, #0]
 80159b2:	0605      	lsls	r5, r0, #24
 80159b4:	f103 0104 	add.w	r1, r3, #4
 80159b8:	d52a      	bpl.n	8015a10 <_printf_i+0xa4>
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	6011      	str	r1, [r2, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	da03      	bge.n	80159ca <_printf_i+0x5e>
 80159c2:	222d      	movs	r2, #45	; 0x2d
 80159c4:	425b      	negs	r3, r3
 80159c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80159ca:	486f      	ldr	r0, [pc, #444]	; (8015b88 <_printf_i+0x21c>)
 80159cc:	220a      	movs	r2, #10
 80159ce:	e039      	b.n	8015a44 <_printf_i+0xd8>
 80159d0:	2973      	cmp	r1, #115	; 0x73
 80159d2:	f000 809d 	beq.w	8015b10 <_printf_i+0x1a4>
 80159d6:	d808      	bhi.n	80159ea <_printf_i+0x7e>
 80159d8:	296f      	cmp	r1, #111	; 0x6f
 80159da:	d020      	beq.n	8015a1e <_printf_i+0xb2>
 80159dc:	2970      	cmp	r1, #112	; 0x70
 80159de:	d1dd      	bne.n	801599c <_printf_i+0x30>
 80159e0:	6823      	ldr	r3, [r4, #0]
 80159e2:	f043 0320 	orr.w	r3, r3, #32
 80159e6:	6023      	str	r3, [r4, #0]
 80159e8:	e003      	b.n	80159f2 <_printf_i+0x86>
 80159ea:	2975      	cmp	r1, #117	; 0x75
 80159ec:	d017      	beq.n	8015a1e <_printf_i+0xb2>
 80159ee:	2978      	cmp	r1, #120	; 0x78
 80159f0:	d1d4      	bne.n	801599c <_printf_i+0x30>
 80159f2:	2378      	movs	r3, #120	; 0x78
 80159f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80159f8:	4864      	ldr	r0, [pc, #400]	; (8015b8c <_printf_i+0x220>)
 80159fa:	e055      	b.n	8015aa8 <_printf_i+0x13c>
 80159fc:	6813      	ldr	r3, [r2, #0]
 80159fe:	1d19      	adds	r1, r3, #4
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	6011      	str	r1, [r2, #0]
 8015a04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	e08c      	b.n	8015b2a <_printf_i+0x1be>
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	6011      	str	r1, [r2, #0]
 8015a14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a18:	bf18      	it	ne
 8015a1a:	b21b      	sxthne	r3, r3
 8015a1c:	e7cf      	b.n	80159be <_printf_i+0x52>
 8015a1e:	6813      	ldr	r3, [r2, #0]
 8015a20:	6825      	ldr	r5, [r4, #0]
 8015a22:	1d18      	adds	r0, r3, #4
 8015a24:	6010      	str	r0, [r2, #0]
 8015a26:	0628      	lsls	r0, r5, #24
 8015a28:	d501      	bpl.n	8015a2e <_printf_i+0xc2>
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	e002      	b.n	8015a34 <_printf_i+0xc8>
 8015a2e:	0668      	lsls	r0, r5, #25
 8015a30:	d5fb      	bpl.n	8015a2a <_printf_i+0xbe>
 8015a32:	881b      	ldrh	r3, [r3, #0]
 8015a34:	4854      	ldr	r0, [pc, #336]	; (8015b88 <_printf_i+0x21c>)
 8015a36:	296f      	cmp	r1, #111	; 0x6f
 8015a38:	bf14      	ite	ne
 8015a3a:	220a      	movne	r2, #10
 8015a3c:	2208      	moveq	r2, #8
 8015a3e:	2100      	movs	r1, #0
 8015a40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015a44:	6865      	ldr	r5, [r4, #4]
 8015a46:	60a5      	str	r5, [r4, #8]
 8015a48:	2d00      	cmp	r5, #0
 8015a4a:	f2c0 8095 	blt.w	8015b78 <_printf_i+0x20c>
 8015a4e:	6821      	ldr	r1, [r4, #0]
 8015a50:	f021 0104 	bic.w	r1, r1, #4
 8015a54:	6021      	str	r1, [r4, #0]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d13d      	bne.n	8015ad6 <_printf_i+0x16a>
 8015a5a:	2d00      	cmp	r5, #0
 8015a5c:	f040 808e 	bne.w	8015b7c <_printf_i+0x210>
 8015a60:	4665      	mov	r5, ip
 8015a62:	2a08      	cmp	r2, #8
 8015a64:	d10b      	bne.n	8015a7e <_printf_i+0x112>
 8015a66:	6823      	ldr	r3, [r4, #0]
 8015a68:	07db      	lsls	r3, r3, #31
 8015a6a:	d508      	bpl.n	8015a7e <_printf_i+0x112>
 8015a6c:	6923      	ldr	r3, [r4, #16]
 8015a6e:	6862      	ldr	r2, [r4, #4]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	bfde      	ittt	le
 8015a74:	2330      	movle	r3, #48	; 0x30
 8015a76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a7e:	ebac 0305 	sub.w	r3, ip, r5
 8015a82:	6123      	str	r3, [r4, #16]
 8015a84:	f8cd 8000 	str.w	r8, [sp]
 8015a88:	463b      	mov	r3, r7
 8015a8a:	aa03      	add	r2, sp, #12
 8015a8c:	4621      	mov	r1, r4
 8015a8e:	4630      	mov	r0, r6
 8015a90:	f7ff fef6 	bl	8015880 <_printf_common>
 8015a94:	3001      	adds	r0, #1
 8015a96:	d14d      	bne.n	8015b34 <_printf_i+0x1c8>
 8015a98:	f04f 30ff 	mov.w	r0, #4294967295
 8015a9c:	b005      	add	sp, #20
 8015a9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015aa2:	4839      	ldr	r0, [pc, #228]	; (8015b88 <_printf_i+0x21c>)
 8015aa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015aa8:	6813      	ldr	r3, [r2, #0]
 8015aaa:	6821      	ldr	r1, [r4, #0]
 8015aac:	1d1d      	adds	r5, r3, #4
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	6015      	str	r5, [r2, #0]
 8015ab2:	060a      	lsls	r2, r1, #24
 8015ab4:	d50b      	bpl.n	8015ace <_printf_i+0x162>
 8015ab6:	07ca      	lsls	r2, r1, #31
 8015ab8:	bf44      	itt	mi
 8015aba:	f041 0120 	orrmi.w	r1, r1, #32
 8015abe:	6021      	strmi	r1, [r4, #0]
 8015ac0:	b91b      	cbnz	r3, 8015aca <_printf_i+0x15e>
 8015ac2:	6822      	ldr	r2, [r4, #0]
 8015ac4:	f022 0220 	bic.w	r2, r2, #32
 8015ac8:	6022      	str	r2, [r4, #0]
 8015aca:	2210      	movs	r2, #16
 8015acc:	e7b7      	b.n	8015a3e <_printf_i+0xd2>
 8015ace:	064d      	lsls	r5, r1, #25
 8015ad0:	bf48      	it	mi
 8015ad2:	b29b      	uxthmi	r3, r3
 8015ad4:	e7ef      	b.n	8015ab6 <_printf_i+0x14a>
 8015ad6:	4665      	mov	r5, ip
 8015ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8015adc:	fb02 3311 	mls	r3, r2, r1, r3
 8015ae0:	5cc3      	ldrb	r3, [r0, r3]
 8015ae2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015ae6:	460b      	mov	r3, r1
 8015ae8:	2900      	cmp	r1, #0
 8015aea:	d1f5      	bne.n	8015ad8 <_printf_i+0x16c>
 8015aec:	e7b9      	b.n	8015a62 <_printf_i+0xf6>
 8015aee:	6813      	ldr	r3, [r2, #0]
 8015af0:	6825      	ldr	r5, [r4, #0]
 8015af2:	6961      	ldr	r1, [r4, #20]
 8015af4:	1d18      	adds	r0, r3, #4
 8015af6:	6010      	str	r0, [r2, #0]
 8015af8:	0628      	lsls	r0, r5, #24
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	d501      	bpl.n	8015b02 <_printf_i+0x196>
 8015afe:	6019      	str	r1, [r3, #0]
 8015b00:	e002      	b.n	8015b08 <_printf_i+0x19c>
 8015b02:	066a      	lsls	r2, r5, #25
 8015b04:	d5fb      	bpl.n	8015afe <_printf_i+0x192>
 8015b06:	8019      	strh	r1, [r3, #0]
 8015b08:	2300      	movs	r3, #0
 8015b0a:	6123      	str	r3, [r4, #16]
 8015b0c:	4665      	mov	r5, ip
 8015b0e:	e7b9      	b.n	8015a84 <_printf_i+0x118>
 8015b10:	6813      	ldr	r3, [r2, #0]
 8015b12:	1d19      	adds	r1, r3, #4
 8015b14:	6011      	str	r1, [r2, #0]
 8015b16:	681d      	ldr	r5, [r3, #0]
 8015b18:	6862      	ldr	r2, [r4, #4]
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	f7ea fb77 	bl	8000210 <memchr>
 8015b22:	b108      	cbz	r0, 8015b28 <_printf_i+0x1bc>
 8015b24:	1b40      	subs	r0, r0, r5
 8015b26:	6060      	str	r0, [r4, #4]
 8015b28:	6863      	ldr	r3, [r4, #4]
 8015b2a:	6123      	str	r3, [r4, #16]
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b32:	e7a7      	b.n	8015a84 <_printf_i+0x118>
 8015b34:	6923      	ldr	r3, [r4, #16]
 8015b36:	462a      	mov	r2, r5
 8015b38:	4639      	mov	r1, r7
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	47c0      	blx	r8
 8015b3e:	3001      	adds	r0, #1
 8015b40:	d0aa      	beq.n	8015a98 <_printf_i+0x12c>
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	079b      	lsls	r3, r3, #30
 8015b46:	d413      	bmi.n	8015b70 <_printf_i+0x204>
 8015b48:	68e0      	ldr	r0, [r4, #12]
 8015b4a:	9b03      	ldr	r3, [sp, #12]
 8015b4c:	4298      	cmp	r0, r3
 8015b4e:	bfb8      	it	lt
 8015b50:	4618      	movlt	r0, r3
 8015b52:	e7a3      	b.n	8015a9c <_printf_i+0x130>
 8015b54:	2301      	movs	r3, #1
 8015b56:	464a      	mov	r2, r9
 8015b58:	4639      	mov	r1, r7
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	47c0      	blx	r8
 8015b5e:	3001      	adds	r0, #1
 8015b60:	d09a      	beq.n	8015a98 <_printf_i+0x12c>
 8015b62:	3501      	adds	r5, #1
 8015b64:	68e3      	ldr	r3, [r4, #12]
 8015b66:	9a03      	ldr	r2, [sp, #12]
 8015b68:	1a9b      	subs	r3, r3, r2
 8015b6a:	42ab      	cmp	r3, r5
 8015b6c:	dcf2      	bgt.n	8015b54 <_printf_i+0x1e8>
 8015b6e:	e7eb      	b.n	8015b48 <_printf_i+0x1dc>
 8015b70:	2500      	movs	r5, #0
 8015b72:	f104 0919 	add.w	r9, r4, #25
 8015b76:	e7f5      	b.n	8015b64 <_printf_i+0x1f8>
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d1ac      	bne.n	8015ad6 <_printf_i+0x16a>
 8015b7c:	7803      	ldrb	r3, [r0, #0]
 8015b7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b86:	e76c      	b.n	8015a62 <_printf_i+0xf6>
 8015b88:	08019f30 	.word	0x08019f30
 8015b8c:	08019f41 	.word	0x08019f41

08015b90 <_scanf_float>:
 8015b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b94:	469a      	mov	sl, r3
 8015b96:	688b      	ldr	r3, [r1, #8]
 8015b98:	4616      	mov	r6, r2
 8015b9a:	1e5a      	subs	r2, r3, #1
 8015b9c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015ba0:	b087      	sub	sp, #28
 8015ba2:	bf83      	ittte	hi
 8015ba4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015ba8:	189b      	addhi	r3, r3, r2
 8015baa:	9301      	strhi	r3, [sp, #4]
 8015bac:	2300      	movls	r3, #0
 8015bae:	bf86      	itte	hi
 8015bb0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015bb4:	608b      	strhi	r3, [r1, #8]
 8015bb6:	9301      	strls	r3, [sp, #4]
 8015bb8:	680b      	ldr	r3, [r1, #0]
 8015bba:	4688      	mov	r8, r1
 8015bbc:	f04f 0b00 	mov.w	fp, #0
 8015bc0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015bc4:	f848 3b1c 	str.w	r3, [r8], #28
 8015bc8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015bcc:	4607      	mov	r7, r0
 8015bce:	460c      	mov	r4, r1
 8015bd0:	4645      	mov	r5, r8
 8015bd2:	465a      	mov	r2, fp
 8015bd4:	46d9      	mov	r9, fp
 8015bd6:	f8cd b008 	str.w	fp, [sp, #8]
 8015bda:	68a1      	ldr	r1, [r4, #8]
 8015bdc:	b181      	cbz	r1, 8015c00 <_scanf_float+0x70>
 8015bde:	6833      	ldr	r3, [r6, #0]
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	2b49      	cmp	r3, #73	; 0x49
 8015be4:	d071      	beq.n	8015cca <_scanf_float+0x13a>
 8015be6:	d84d      	bhi.n	8015c84 <_scanf_float+0xf4>
 8015be8:	2b39      	cmp	r3, #57	; 0x39
 8015bea:	d840      	bhi.n	8015c6e <_scanf_float+0xde>
 8015bec:	2b31      	cmp	r3, #49	; 0x31
 8015bee:	f080 8088 	bcs.w	8015d02 <_scanf_float+0x172>
 8015bf2:	2b2d      	cmp	r3, #45	; 0x2d
 8015bf4:	f000 8090 	beq.w	8015d18 <_scanf_float+0x188>
 8015bf8:	d815      	bhi.n	8015c26 <_scanf_float+0x96>
 8015bfa:	2b2b      	cmp	r3, #43	; 0x2b
 8015bfc:	f000 808c 	beq.w	8015d18 <_scanf_float+0x188>
 8015c00:	f1b9 0f00 	cmp.w	r9, #0
 8015c04:	d003      	beq.n	8015c0e <_scanf_float+0x7e>
 8015c06:	6823      	ldr	r3, [r4, #0]
 8015c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015c0c:	6023      	str	r3, [r4, #0]
 8015c0e:	3a01      	subs	r2, #1
 8015c10:	2a01      	cmp	r2, #1
 8015c12:	f200 80ea 	bhi.w	8015dea <_scanf_float+0x25a>
 8015c16:	4545      	cmp	r5, r8
 8015c18:	f200 80dc 	bhi.w	8015dd4 <_scanf_float+0x244>
 8015c1c:	2601      	movs	r6, #1
 8015c1e:	4630      	mov	r0, r6
 8015c20:	b007      	add	sp, #28
 8015c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c26:	2b2e      	cmp	r3, #46	; 0x2e
 8015c28:	f000 809f 	beq.w	8015d6a <_scanf_float+0x1da>
 8015c2c:	2b30      	cmp	r3, #48	; 0x30
 8015c2e:	d1e7      	bne.n	8015c00 <_scanf_float+0x70>
 8015c30:	6820      	ldr	r0, [r4, #0]
 8015c32:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015c36:	d064      	beq.n	8015d02 <_scanf_float+0x172>
 8015c38:	9b01      	ldr	r3, [sp, #4]
 8015c3a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015c3e:	6020      	str	r0, [r4, #0]
 8015c40:	f109 0901 	add.w	r9, r9, #1
 8015c44:	b11b      	cbz	r3, 8015c4e <_scanf_float+0xbe>
 8015c46:	3b01      	subs	r3, #1
 8015c48:	3101      	adds	r1, #1
 8015c4a:	9301      	str	r3, [sp, #4]
 8015c4c:	60a1      	str	r1, [r4, #8]
 8015c4e:	68a3      	ldr	r3, [r4, #8]
 8015c50:	3b01      	subs	r3, #1
 8015c52:	60a3      	str	r3, [r4, #8]
 8015c54:	6923      	ldr	r3, [r4, #16]
 8015c56:	3301      	adds	r3, #1
 8015c58:	6123      	str	r3, [r4, #16]
 8015c5a:	6873      	ldr	r3, [r6, #4]
 8015c5c:	3b01      	subs	r3, #1
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	6073      	str	r3, [r6, #4]
 8015c62:	f340 80ac 	ble.w	8015dbe <_scanf_float+0x22e>
 8015c66:	6833      	ldr	r3, [r6, #0]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	6033      	str	r3, [r6, #0]
 8015c6c:	e7b5      	b.n	8015bda <_scanf_float+0x4a>
 8015c6e:	2b45      	cmp	r3, #69	; 0x45
 8015c70:	f000 8085 	beq.w	8015d7e <_scanf_float+0x1ee>
 8015c74:	2b46      	cmp	r3, #70	; 0x46
 8015c76:	d06a      	beq.n	8015d4e <_scanf_float+0x1be>
 8015c78:	2b41      	cmp	r3, #65	; 0x41
 8015c7a:	d1c1      	bne.n	8015c00 <_scanf_float+0x70>
 8015c7c:	2a01      	cmp	r2, #1
 8015c7e:	d1bf      	bne.n	8015c00 <_scanf_float+0x70>
 8015c80:	2202      	movs	r2, #2
 8015c82:	e046      	b.n	8015d12 <_scanf_float+0x182>
 8015c84:	2b65      	cmp	r3, #101	; 0x65
 8015c86:	d07a      	beq.n	8015d7e <_scanf_float+0x1ee>
 8015c88:	d818      	bhi.n	8015cbc <_scanf_float+0x12c>
 8015c8a:	2b54      	cmp	r3, #84	; 0x54
 8015c8c:	d066      	beq.n	8015d5c <_scanf_float+0x1cc>
 8015c8e:	d811      	bhi.n	8015cb4 <_scanf_float+0x124>
 8015c90:	2b4e      	cmp	r3, #78	; 0x4e
 8015c92:	d1b5      	bne.n	8015c00 <_scanf_float+0x70>
 8015c94:	2a00      	cmp	r2, #0
 8015c96:	d146      	bne.n	8015d26 <_scanf_float+0x196>
 8015c98:	f1b9 0f00 	cmp.w	r9, #0
 8015c9c:	d145      	bne.n	8015d2a <_scanf_float+0x19a>
 8015c9e:	6821      	ldr	r1, [r4, #0]
 8015ca0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015ca4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ca8:	d13f      	bne.n	8015d2a <_scanf_float+0x19a>
 8015caa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015cae:	6021      	str	r1, [r4, #0]
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	e02e      	b.n	8015d12 <_scanf_float+0x182>
 8015cb4:	2b59      	cmp	r3, #89	; 0x59
 8015cb6:	d01e      	beq.n	8015cf6 <_scanf_float+0x166>
 8015cb8:	2b61      	cmp	r3, #97	; 0x61
 8015cba:	e7de      	b.n	8015c7a <_scanf_float+0xea>
 8015cbc:	2b6e      	cmp	r3, #110	; 0x6e
 8015cbe:	d0e9      	beq.n	8015c94 <_scanf_float+0x104>
 8015cc0:	d815      	bhi.n	8015cee <_scanf_float+0x15e>
 8015cc2:	2b66      	cmp	r3, #102	; 0x66
 8015cc4:	d043      	beq.n	8015d4e <_scanf_float+0x1be>
 8015cc6:	2b69      	cmp	r3, #105	; 0x69
 8015cc8:	d19a      	bne.n	8015c00 <_scanf_float+0x70>
 8015cca:	f1bb 0f00 	cmp.w	fp, #0
 8015cce:	d138      	bne.n	8015d42 <_scanf_float+0x1b2>
 8015cd0:	f1b9 0f00 	cmp.w	r9, #0
 8015cd4:	d197      	bne.n	8015c06 <_scanf_float+0x76>
 8015cd6:	6821      	ldr	r1, [r4, #0]
 8015cd8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015cdc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ce0:	d195      	bne.n	8015c0e <_scanf_float+0x7e>
 8015ce2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015ce6:	6021      	str	r1, [r4, #0]
 8015ce8:	f04f 0b01 	mov.w	fp, #1
 8015cec:	e011      	b.n	8015d12 <_scanf_float+0x182>
 8015cee:	2b74      	cmp	r3, #116	; 0x74
 8015cf0:	d034      	beq.n	8015d5c <_scanf_float+0x1cc>
 8015cf2:	2b79      	cmp	r3, #121	; 0x79
 8015cf4:	d184      	bne.n	8015c00 <_scanf_float+0x70>
 8015cf6:	f1bb 0f07 	cmp.w	fp, #7
 8015cfa:	d181      	bne.n	8015c00 <_scanf_float+0x70>
 8015cfc:	f04f 0b08 	mov.w	fp, #8
 8015d00:	e007      	b.n	8015d12 <_scanf_float+0x182>
 8015d02:	eb12 0f0b 	cmn.w	r2, fp
 8015d06:	f47f af7b 	bne.w	8015c00 <_scanf_float+0x70>
 8015d0a:	6821      	ldr	r1, [r4, #0]
 8015d0c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015d10:	6021      	str	r1, [r4, #0]
 8015d12:	702b      	strb	r3, [r5, #0]
 8015d14:	3501      	adds	r5, #1
 8015d16:	e79a      	b.n	8015c4e <_scanf_float+0xbe>
 8015d18:	6821      	ldr	r1, [r4, #0]
 8015d1a:	0608      	lsls	r0, r1, #24
 8015d1c:	f57f af70 	bpl.w	8015c00 <_scanf_float+0x70>
 8015d20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015d24:	e7f4      	b.n	8015d10 <_scanf_float+0x180>
 8015d26:	2a02      	cmp	r2, #2
 8015d28:	d047      	beq.n	8015dba <_scanf_float+0x22a>
 8015d2a:	f1bb 0f01 	cmp.w	fp, #1
 8015d2e:	d003      	beq.n	8015d38 <_scanf_float+0x1a8>
 8015d30:	f1bb 0f04 	cmp.w	fp, #4
 8015d34:	f47f af64 	bne.w	8015c00 <_scanf_float+0x70>
 8015d38:	f10b 0b01 	add.w	fp, fp, #1
 8015d3c:	fa5f fb8b 	uxtb.w	fp, fp
 8015d40:	e7e7      	b.n	8015d12 <_scanf_float+0x182>
 8015d42:	f1bb 0f03 	cmp.w	fp, #3
 8015d46:	d0f7      	beq.n	8015d38 <_scanf_float+0x1a8>
 8015d48:	f1bb 0f05 	cmp.w	fp, #5
 8015d4c:	e7f2      	b.n	8015d34 <_scanf_float+0x1a4>
 8015d4e:	f1bb 0f02 	cmp.w	fp, #2
 8015d52:	f47f af55 	bne.w	8015c00 <_scanf_float+0x70>
 8015d56:	f04f 0b03 	mov.w	fp, #3
 8015d5a:	e7da      	b.n	8015d12 <_scanf_float+0x182>
 8015d5c:	f1bb 0f06 	cmp.w	fp, #6
 8015d60:	f47f af4e 	bne.w	8015c00 <_scanf_float+0x70>
 8015d64:	f04f 0b07 	mov.w	fp, #7
 8015d68:	e7d3      	b.n	8015d12 <_scanf_float+0x182>
 8015d6a:	6821      	ldr	r1, [r4, #0]
 8015d6c:	0588      	lsls	r0, r1, #22
 8015d6e:	f57f af47 	bpl.w	8015c00 <_scanf_float+0x70>
 8015d72:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015d76:	6021      	str	r1, [r4, #0]
 8015d78:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d7c:	e7c9      	b.n	8015d12 <_scanf_float+0x182>
 8015d7e:	6821      	ldr	r1, [r4, #0]
 8015d80:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015d84:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015d88:	d006      	beq.n	8015d98 <_scanf_float+0x208>
 8015d8a:	0548      	lsls	r0, r1, #21
 8015d8c:	f57f af38 	bpl.w	8015c00 <_scanf_float+0x70>
 8015d90:	f1b9 0f00 	cmp.w	r9, #0
 8015d94:	f43f af3b 	beq.w	8015c0e <_scanf_float+0x7e>
 8015d98:	0588      	lsls	r0, r1, #22
 8015d9a:	bf58      	it	pl
 8015d9c:	9802      	ldrpl	r0, [sp, #8]
 8015d9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015da2:	bf58      	it	pl
 8015da4:	eba9 0000 	subpl.w	r0, r9, r0
 8015da8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015dac:	bf58      	it	pl
 8015dae:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015db2:	6021      	str	r1, [r4, #0]
 8015db4:	f04f 0900 	mov.w	r9, #0
 8015db8:	e7ab      	b.n	8015d12 <_scanf_float+0x182>
 8015dba:	2203      	movs	r2, #3
 8015dbc:	e7a9      	b.n	8015d12 <_scanf_float+0x182>
 8015dbe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015dc2:	9205      	str	r2, [sp, #20]
 8015dc4:	4631      	mov	r1, r6
 8015dc6:	4638      	mov	r0, r7
 8015dc8:	4798      	blx	r3
 8015dca:	9a05      	ldr	r2, [sp, #20]
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	f43f af04 	beq.w	8015bda <_scanf_float+0x4a>
 8015dd2:	e715      	b.n	8015c00 <_scanf_float+0x70>
 8015dd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ddc:	4632      	mov	r2, r6
 8015dde:	4638      	mov	r0, r7
 8015de0:	4798      	blx	r3
 8015de2:	6923      	ldr	r3, [r4, #16]
 8015de4:	3b01      	subs	r3, #1
 8015de6:	6123      	str	r3, [r4, #16]
 8015de8:	e715      	b.n	8015c16 <_scanf_float+0x86>
 8015dea:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015dee:	2b06      	cmp	r3, #6
 8015df0:	d80a      	bhi.n	8015e08 <_scanf_float+0x278>
 8015df2:	f1bb 0f02 	cmp.w	fp, #2
 8015df6:	d968      	bls.n	8015eca <_scanf_float+0x33a>
 8015df8:	f1ab 0b03 	sub.w	fp, fp, #3
 8015dfc:	fa5f fb8b 	uxtb.w	fp, fp
 8015e00:	eba5 0b0b 	sub.w	fp, r5, fp
 8015e04:	455d      	cmp	r5, fp
 8015e06:	d14b      	bne.n	8015ea0 <_scanf_float+0x310>
 8015e08:	6823      	ldr	r3, [r4, #0]
 8015e0a:	05da      	lsls	r2, r3, #23
 8015e0c:	d51f      	bpl.n	8015e4e <_scanf_float+0x2be>
 8015e0e:	055b      	lsls	r3, r3, #21
 8015e10:	d468      	bmi.n	8015ee4 <_scanf_float+0x354>
 8015e12:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015e16:	6923      	ldr	r3, [r4, #16]
 8015e18:	2965      	cmp	r1, #101	; 0x65
 8015e1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8015e1e:	f105 3bff 	add.w	fp, r5, #4294967295
 8015e22:	6123      	str	r3, [r4, #16]
 8015e24:	d00d      	beq.n	8015e42 <_scanf_float+0x2b2>
 8015e26:	2945      	cmp	r1, #69	; 0x45
 8015e28:	d00b      	beq.n	8015e42 <_scanf_float+0x2b2>
 8015e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e2e:	4632      	mov	r2, r6
 8015e30:	4638      	mov	r0, r7
 8015e32:	4798      	blx	r3
 8015e34:	6923      	ldr	r3, [r4, #16]
 8015e36:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015e3a:	3b01      	subs	r3, #1
 8015e3c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015e40:	6123      	str	r3, [r4, #16]
 8015e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e46:	4632      	mov	r2, r6
 8015e48:	4638      	mov	r0, r7
 8015e4a:	4798      	blx	r3
 8015e4c:	465d      	mov	r5, fp
 8015e4e:	6826      	ldr	r6, [r4, #0]
 8015e50:	f016 0610 	ands.w	r6, r6, #16
 8015e54:	d17a      	bne.n	8015f4c <_scanf_float+0x3bc>
 8015e56:	702e      	strb	r6, [r5, #0]
 8015e58:	6823      	ldr	r3, [r4, #0]
 8015e5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e62:	d142      	bne.n	8015eea <_scanf_float+0x35a>
 8015e64:	9b02      	ldr	r3, [sp, #8]
 8015e66:	eba9 0303 	sub.w	r3, r9, r3
 8015e6a:	425a      	negs	r2, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d149      	bne.n	8015f04 <_scanf_float+0x374>
 8015e70:	2200      	movs	r2, #0
 8015e72:	4641      	mov	r1, r8
 8015e74:	4638      	mov	r0, r7
 8015e76:	f000 ff0b 	bl	8016c90 <_strtod_r>
 8015e7a:	6825      	ldr	r5, [r4, #0]
 8015e7c:	f8da 3000 	ldr.w	r3, [sl]
 8015e80:	f015 0f02 	tst.w	r5, #2
 8015e84:	f103 0204 	add.w	r2, r3, #4
 8015e88:	ec59 8b10 	vmov	r8, r9, d0
 8015e8c:	f8ca 2000 	str.w	r2, [sl]
 8015e90:	d043      	beq.n	8015f1a <_scanf_float+0x38a>
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	e9c3 8900 	strd	r8, r9, [r3]
 8015e98:	68e3      	ldr	r3, [r4, #12]
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	60e3      	str	r3, [r4, #12]
 8015e9e:	e6be      	b.n	8015c1e <_scanf_float+0x8e>
 8015ea0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ea4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ea8:	4632      	mov	r2, r6
 8015eaa:	4638      	mov	r0, r7
 8015eac:	4798      	blx	r3
 8015eae:	6923      	ldr	r3, [r4, #16]
 8015eb0:	3b01      	subs	r3, #1
 8015eb2:	6123      	str	r3, [r4, #16]
 8015eb4:	e7a6      	b.n	8015e04 <_scanf_float+0x274>
 8015eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015eba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ebe:	4632      	mov	r2, r6
 8015ec0:	4638      	mov	r0, r7
 8015ec2:	4798      	blx	r3
 8015ec4:	6923      	ldr	r3, [r4, #16]
 8015ec6:	3b01      	subs	r3, #1
 8015ec8:	6123      	str	r3, [r4, #16]
 8015eca:	4545      	cmp	r5, r8
 8015ecc:	d8f3      	bhi.n	8015eb6 <_scanf_float+0x326>
 8015ece:	e6a5      	b.n	8015c1c <_scanf_float+0x8c>
 8015ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ed4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ed8:	4632      	mov	r2, r6
 8015eda:	4638      	mov	r0, r7
 8015edc:	4798      	blx	r3
 8015ede:	6923      	ldr	r3, [r4, #16]
 8015ee0:	3b01      	subs	r3, #1
 8015ee2:	6123      	str	r3, [r4, #16]
 8015ee4:	4545      	cmp	r5, r8
 8015ee6:	d8f3      	bhi.n	8015ed0 <_scanf_float+0x340>
 8015ee8:	e698      	b.n	8015c1c <_scanf_float+0x8c>
 8015eea:	9b03      	ldr	r3, [sp, #12]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d0bf      	beq.n	8015e70 <_scanf_float+0x2e0>
 8015ef0:	9904      	ldr	r1, [sp, #16]
 8015ef2:	230a      	movs	r3, #10
 8015ef4:	4632      	mov	r2, r6
 8015ef6:	3101      	adds	r1, #1
 8015ef8:	4638      	mov	r0, r7
 8015efa:	f000 ff55 	bl	8016da8 <_strtol_r>
 8015efe:	9b03      	ldr	r3, [sp, #12]
 8015f00:	9d04      	ldr	r5, [sp, #16]
 8015f02:	1ac2      	subs	r2, r0, r3
 8015f04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015f08:	429d      	cmp	r5, r3
 8015f0a:	bf28      	it	cs
 8015f0c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015f10:	490f      	ldr	r1, [pc, #60]	; (8015f50 <_scanf_float+0x3c0>)
 8015f12:	4628      	mov	r0, r5
 8015f14:	f000 f858 	bl	8015fc8 <siprintf>
 8015f18:	e7aa      	b.n	8015e70 <_scanf_float+0x2e0>
 8015f1a:	f015 0504 	ands.w	r5, r5, #4
 8015f1e:	d1b8      	bne.n	8015e92 <_scanf_float+0x302>
 8015f20:	681f      	ldr	r7, [r3, #0]
 8015f22:	ee10 2a10 	vmov	r2, s0
 8015f26:	464b      	mov	r3, r9
 8015f28:	ee10 0a10 	vmov	r0, s0
 8015f2c:	4649      	mov	r1, r9
 8015f2e:	f7ea fe15 	bl	8000b5c <__aeabi_dcmpun>
 8015f32:	b128      	cbz	r0, 8015f40 <_scanf_float+0x3b0>
 8015f34:	4628      	mov	r0, r5
 8015f36:	f000 f80d 	bl	8015f54 <nanf>
 8015f3a:	ed87 0a00 	vstr	s0, [r7]
 8015f3e:	e7ab      	b.n	8015e98 <_scanf_float+0x308>
 8015f40:	4640      	mov	r0, r8
 8015f42:	4649      	mov	r1, r9
 8015f44:	f7ea fe68 	bl	8000c18 <__aeabi_d2f>
 8015f48:	6038      	str	r0, [r7, #0]
 8015f4a:	e7a5      	b.n	8015e98 <_scanf_float+0x308>
 8015f4c:	2600      	movs	r6, #0
 8015f4e:	e666      	b.n	8015c1e <_scanf_float+0x8e>
 8015f50:	08019f52 	.word	0x08019f52

08015f54 <nanf>:
 8015f54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015f5c <nanf+0x8>
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop
 8015f5c:	7fc00000 	.word	0x7fc00000

08015f60 <sniprintf>:
 8015f60:	b40c      	push	{r2, r3}
 8015f62:	b530      	push	{r4, r5, lr}
 8015f64:	4b17      	ldr	r3, [pc, #92]	; (8015fc4 <sniprintf+0x64>)
 8015f66:	1e0c      	subs	r4, r1, #0
 8015f68:	b09d      	sub	sp, #116	; 0x74
 8015f6a:	681d      	ldr	r5, [r3, #0]
 8015f6c:	da08      	bge.n	8015f80 <sniprintf+0x20>
 8015f6e:	238b      	movs	r3, #139	; 0x8b
 8015f70:	602b      	str	r3, [r5, #0]
 8015f72:	f04f 30ff 	mov.w	r0, #4294967295
 8015f76:	b01d      	add	sp, #116	; 0x74
 8015f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f7c:	b002      	add	sp, #8
 8015f7e:	4770      	bx	lr
 8015f80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015f84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f88:	bf14      	ite	ne
 8015f8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015f8e:	4623      	moveq	r3, r4
 8015f90:	9304      	str	r3, [sp, #16]
 8015f92:	9307      	str	r3, [sp, #28]
 8015f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f98:	9002      	str	r0, [sp, #8]
 8015f9a:	9006      	str	r0, [sp, #24]
 8015f9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015fa0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015fa2:	ab21      	add	r3, sp, #132	; 0x84
 8015fa4:	a902      	add	r1, sp, #8
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	9301      	str	r3, [sp, #4]
 8015faa:	f002 fde7 	bl	8018b7c <_svfiprintf_r>
 8015fae:	1c43      	adds	r3, r0, #1
 8015fb0:	bfbc      	itt	lt
 8015fb2:	238b      	movlt	r3, #139	; 0x8b
 8015fb4:	602b      	strlt	r3, [r5, #0]
 8015fb6:	2c00      	cmp	r4, #0
 8015fb8:	d0dd      	beq.n	8015f76 <sniprintf+0x16>
 8015fba:	9b02      	ldr	r3, [sp, #8]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	701a      	strb	r2, [r3, #0]
 8015fc0:	e7d9      	b.n	8015f76 <sniprintf+0x16>
 8015fc2:	bf00      	nop
 8015fc4:	2000000c 	.word	0x2000000c

08015fc8 <siprintf>:
 8015fc8:	b40e      	push	{r1, r2, r3}
 8015fca:	b500      	push	{lr}
 8015fcc:	b09c      	sub	sp, #112	; 0x70
 8015fce:	ab1d      	add	r3, sp, #116	; 0x74
 8015fd0:	9002      	str	r0, [sp, #8]
 8015fd2:	9006      	str	r0, [sp, #24]
 8015fd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015fd8:	4809      	ldr	r0, [pc, #36]	; (8016000 <siprintf+0x38>)
 8015fda:	9107      	str	r1, [sp, #28]
 8015fdc:	9104      	str	r1, [sp, #16]
 8015fde:	4909      	ldr	r1, [pc, #36]	; (8016004 <siprintf+0x3c>)
 8015fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fe4:	9105      	str	r1, [sp, #20]
 8015fe6:	6800      	ldr	r0, [r0, #0]
 8015fe8:	9301      	str	r3, [sp, #4]
 8015fea:	a902      	add	r1, sp, #8
 8015fec:	f002 fdc6 	bl	8018b7c <_svfiprintf_r>
 8015ff0:	9b02      	ldr	r3, [sp, #8]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	701a      	strb	r2, [r3, #0]
 8015ff6:	b01c      	add	sp, #112	; 0x70
 8015ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ffc:	b003      	add	sp, #12
 8015ffe:	4770      	bx	lr
 8016000:	2000000c 	.word	0x2000000c
 8016004:	ffff0208 	.word	0xffff0208

08016008 <siscanf>:
 8016008:	b40e      	push	{r1, r2, r3}
 801600a:	b530      	push	{r4, r5, lr}
 801600c:	b09c      	sub	sp, #112	; 0x70
 801600e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016010:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016014:	f854 5b04 	ldr.w	r5, [r4], #4
 8016018:	f8ad 2014 	strh.w	r2, [sp, #20]
 801601c:	9002      	str	r0, [sp, #8]
 801601e:	9006      	str	r0, [sp, #24]
 8016020:	f7ea f8ee 	bl	8000200 <strlen>
 8016024:	4b0b      	ldr	r3, [pc, #44]	; (8016054 <siscanf+0x4c>)
 8016026:	9003      	str	r0, [sp, #12]
 8016028:	9007      	str	r0, [sp, #28]
 801602a:	930b      	str	r3, [sp, #44]	; 0x2c
 801602c:	480a      	ldr	r0, [pc, #40]	; (8016058 <siscanf+0x50>)
 801602e:	9401      	str	r4, [sp, #4]
 8016030:	2300      	movs	r3, #0
 8016032:	930f      	str	r3, [sp, #60]	; 0x3c
 8016034:	9314      	str	r3, [sp, #80]	; 0x50
 8016036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801603a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801603e:	462a      	mov	r2, r5
 8016040:	4623      	mov	r3, r4
 8016042:	a902      	add	r1, sp, #8
 8016044:	6800      	ldr	r0, [r0, #0]
 8016046:	f002 feeb 	bl	8018e20 <__ssvfiscanf_r>
 801604a:	b01c      	add	sp, #112	; 0x70
 801604c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016050:	b003      	add	sp, #12
 8016052:	4770      	bx	lr
 8016054:	0801605d 	.word	0x0801605d
 8016058:	2000000c 	.word	0x2000000c

0801605c <__seofread>:
 801605c:	2000      	movs	r0, #0
 801605e:	4770      	bx	lr

08016060 <strcpy>:
 8016060:	4603      	mov	r3, r0
 8016062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016066:	f803 2b01 	strb.w	r2, [r3], #1
 801606a:	2a00      	cmp	r2, #0
 801606c:	d1f9      	bne.n	8016062 <strcpy+0x2>
 801606e:	4770      	bx	lr

08016070 <sulp>:
 8016070:	b570      	push	{r4, r5, r6, lr}
 8016072:	4604      	mov	r4, r0
 8016074:	460d      	mov	r5, r1
 8016076:	ec45 4b10 	vmov	d0, r4, r5
 801607a:	4616      	mov	r6, r2
 801607c:	f002 fb3a 	bl	80186f4 <__ulp>
 8016080:	ec51 0b10 	vmov	r0, r1, d0
 8016084:	b17e      	cbz	r6, 80160a6 <sulp+0x36>
 8016086:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801608a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801608e:	2b00      	cmp	r3, #0
 8016090:	dd09      	ble.n	80160a6 <sulp+0x36>
 8016092:	051b      	lsls	r3, r3, #20
 8016094:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016098:	2400      	movs	r4, #0
 801609a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801609e:	4622      	mov	r2, r4
 80160a0:	462b      	mov	r3, r5
 80160a2:	f7ea fac1 	bl	8000628 <__aeabi_dmul>
 80160a6:	bd70      	pop	{r4, r5, r6, pc}

080160a8 <_strtod_l>:
 80160a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ac:	461f      	mov	r7, r3
 80160ae:	b0a1      	sub	sp, #132	; 0x84
 80160b0:	2300      	movs	r3, #0
 80160b2:	4681      	mov	r9, r0
 80160b4:	4638      	mov	r0, r7
 80160b6:	460e      	mov	r6, r1
 80160b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80160ba:	931c      	str	r3, [sp, #112]	; 0x70
 80160bc:	f002 f824 	bl	8018108 <__localeconv_l>
 80160c0:	4680      	mov	r8, r0
 80160c2:	6800      	ldr	r0, [r0, #0]
 80160c4:	f7ea f89c 	bl	8000200 <strlen>
 80160c8:	f04f 0a00 	mov.w	sl, #0
 80160cc:	4604      	mov	r4, r0
 80160ce:	f04f 0b00 	mov.w	fp, #0
 80160d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80160d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160d6:	781a      	ldrb	r2, [r3, #0]
 80160d8:	2a0d      	cmp	r2, #13
 80160da:	d832      	bhi.n	8016142 <_strtod_l+0x9a>
 80160dc:	2a09      	cmp	r2, #9
 80160de:	d236      	bcs.n	801614e <_strtod_l+0xa6>
 80160e0:	2a00      	cmp	r2, #0
 80160e2:	d03e      	beq.n	8016162 <_strtod_l+0xba>
 80160e4:	2300      	movs	r3, #0
 80160e6:	930d      	str	r3, [sp, #52]	; 0x34
 80160e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80160ea:	782b      	ldrb	r3, [r5, #0]
 80160ec:	2b30      	cmp	r3, #48	; 0x30
 80160ee:	f040 80ac 	bne.w	801624a <_strtod_l+0x1a2>
 80160f2:	786b      	ldrb	r3, [r5, #1]
 80160f4:	2b58      	cmp	r3, #88	; 0x58
 80160f6:	d001      	beq.n	80160fc <_strtod_l+0x54>
 80160f8:	2b78      	cmp	r3, #120	; 0x78
 80160fa:	d167      	bne.n	80161cc <_strtod_l+0x124>
 80160fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160fe:	9301      	str	r3, [sp, #4]
 8016100:	ab1c      	add	r3, sp, #112	; 0x70
 8016102:	9300      	str	r3, [sp, #0]
 8016104:	9702      	str	r7, [sp, #8]
 8016106:	ab1d      	add	r3, sp, #116	; 0x74
 8016108:	4a88      	ldr	r2, [pc, #544]	; (801632c <_strtod_l+0x284>)
 801610a:	a91b      	add	r1, sp, #108	; 0x6c
 801610c:	4648      	mov	r0, r9
 801610e:	f001 fd12 	bl	8017b36 <__gethex>
 8016112:	f010 0407 	ands.w	r4, r0, #7
 8016116:	4606      	mov	r6, r0
 8016118:	d005      	beq.n	8016126 <_strtod_l+0x7e>
 801611a:	2c06      	cmp	r4, #6
 801611c:	d12b      	bne.n	8016176 <_strtod_l+0xce>
 801611e:	3501      	adds	r5, #1
 8016120:	2300      	movs	r3, #0
 8016122:	951b      	str	r5, [sp, #108]	; 0x6c
 8016124:	930d      	str	r3, [sp, #52]	; 0x34
 8016126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016128:	2b00      	cmp	r3, #0
 801612a:	f040 859a 	bne.w	8016c62 <_strtod_l+0xbba>
 801612e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016130:	b1e3      	cbz	r3, 801616c <_strtod_l+0xc4>
 8016132:	4652      	mov	r2, sl
 8016134:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016138:	ec43 2b10 	vmov	d0, r2, r3
 801613c:	b021      	add	sp, #132	; 0x84
 801613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016142:	2a2b      	cmp	r2, #43	; 0x2b
 8016144:	d015      	beq.n	8016172 <_strtod_l+0xca>
 8016146:	2a2d      	cmp	r2, #45	; 0x2d
 8016148:	d004      	beq.n	8016154 <_strtod_l+0xac>
 801614a:	2a20      	cmp	r2, #32
 801614c:	d1ca      	bne.n	80160e4 <_strtod_l+0x3c>
 801614e:	3301      	adds	r3, #1
 8016150:	931b      	str	r3, [sp, #108]	; 0x6c
 8016152:	e7bf      	b.n	80160d4 <_strtod_l+0x2c>
 8016154:	2201      	movs	r2, #1
 8016156:	920d      	str	r2, [sp, #52]	; 0x34
 8016158:	1c5a      	adds	r2, r3, #1
 801615a:	921b      	str	r2, [sp, #108]	; 0x6c
 801615c:	785b      	ldrb	r3, [r3, #1]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d1c2      	bne.n	80160e8 <_strtod_l+0x40>
 8016162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016164:	961b      	str	r6, [sp, #108]	; 0x6c
 8016166:	2b00      	cmp	r3, #0
 8016168:	f040 8579 	bne.w	8016c5e <_strtod_l+0xbb6>
 801616c:	4652      	mov	r2, sl
 801616e:	465b      	mov	r3, fp
 8016170:	e7e2      	b.n	8016138 <_strtod_l+0x90>
 8016172:	2200      	movs	r2, #0
 8016174:	e7ef      	b.n	8016156 <_strtod_l+0xae>
 8016176:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016178:	b13a      	cbz	r2, 801618a <_strtod_l+0xe2>
 801617a:	2135      	movs	r1, #53	; 0x35
 801617c:	a81e      	add	r0, sp, #120	; 0x78
 801617e:	f002 fbb1 	bl	80188e4 <__copybits>
 8016182:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016184:	4648      	mov	r0, r9
 8016186:	f002 f81d 	bl	80181c4 <_Bfree>
 801618a:	3c01      	subs	r4, #1
 801618c:	2c04      	cmp	r4, #4
 801618e:	d806      	bhi.n	801619e <_strtod_l+0xf6>
 8016190:	e8df f004 	tbb	[pc, r4]
 8016194:	1714030a 	.word	0x1714030a
 8016198:	0a          	.byte	0x0a
 8016199:	00          	.byte	0x00
 801619a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801619e:	0730      	lsls	r0, r6, #28
 80161a0:	d5c1      	bpl.n	8016126 <_strtod_l+0x7e>
 80161a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80161a6:	e7be      	b.n	8016126 <_strtod_l+0x7e>
 80161a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80161ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80161ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80161b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80161b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80161ba:	e7f0      	b.n	801619e <_strtod_l+0xf6>
 80161bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016330 <_strtod_l+0x288>
 80161c0:	e7ed      	b.n	801619e <_strtod_l+0xf6>
 80161c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80161c6:	f04f 3aff 	mov.w	sl, #4294967295
 80161ca:	e7e8      	b.n	801619e <_strtod_l+0xf6>
 80161cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161ce:	1c5a      	adds	r2, r3, #1
 80161d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80161d2:	785b      	ldrb	r3, [r3, #1]
 80161d4:	2b30      	cmp	r3, #48	; 0x30
 80161d6:	d0f9      	beq.n	80161cc <_strtod_l+0x124>
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d0a4      	beq.n	8016126 <_strtod_l+0x7e>
 80161dc:	2301      	movs	r3, #1
 80161de:	2500      	movs	r5, #0
 80161e0:	9306      	str	r3, [sp, #24]
 80161e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161e4:	9308      	str	r3, [sp, #32]
 80161e6:	9507      	str	r5, [sp, #28]
 80161e8:	9505      	str	r5, [sp, #20]
 80161ea:	220a      	movs	r2, #10
 80161ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80161ee:	7807      	ldrb	r7, [r0, #0]
 80161f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80161f4:	b2d9      	uxtb	r1, r3
 80161f6:	2909      	cmp	r1, #9
 80161f8:	d929      	bls.n	801624e <_strtod_l+0x1a6>
 80161fa:	4622      	mov	r2, r4
 80161fc:	f8d8 1000 	ldr.w	r1, [r8]
 8016200:	f003 f8f8 	bl	80193f4 <strncmp>
 8016204:	2800      	cmp	r0, #0
 8016206:	d031      	beq.n	801626c <_strtod_l+0x1c4>
 8016208:	2000      	movs	r0, #0
 801620a:	9c05      	ldr	r4, [sp, #20]
 801620c:	9004      	str	r0, [sp, #16]
 801620e:	463b      	mov	r3, r7
 8016210:	4602      	mov	r2, r0
 8016212:	2b65      	cmp	r3, #101	; 0x65
 8016214:	d001      	beq.n	801621a <_strtod_l+0x172>
 8016216:	2b45      	cmp	r3, #69	; 0x45
 8016218:	d114      	bne.n	8016244 <_strtod_l+0x19c>
 801621a:	b924      	cbnz	r4, 8016226 <_strtod_l+0x17e>
 801621c:	b910      	cbnz	r0, 8016224 <_strtod_l+0x17c>
 801621e:	9b06      	ldr	r3, [sp, #24]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d09e      	beq.n	8016162 <_strtod_l+0xba>
 8016224:	2400      	movs	r4, #0
 8016226:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016228:	1c73      	adds	r3, r6, #1
 801622a:	931b      	str	r3, [sp, #108]	; 0x6c
 801622c:	7873      	ldrb	r3, [r6, #1]
 801622e:	2b2b      	cmp	r3, #43	; 0x2b
 8016230:	d078      	beq.n	8016324 <_strtod_l+0x27c>
 8016232:	2b2d      	cmp	r3, #45	; 0x2d
 8016234:	d070      	beq.n	8016318 <_strtod_l+0x270>
 8016236:	f04f 0c00 	mov.w	ip, #0
 801623a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801623e:	2f09      	cmp	r7, #9
 8016240:	d97c      	bls.n	801633c <_strtod_l+0x294>
 8016242:	961b      	str	r6, [sp, #108]	; 0x6c
 8016244:	f04f 0e00 	mov.w	lr, #0
 8016248:	e09a      	b.n	8016380 <_strtod_l+0x2d8>
 801624a:	2300      	movs	r3, #0
 801624c:	e7c7      	b.n	80161de <_strtod_l+0x136>
 801624e:	9905      	ldr	r1, [sp, #20]
 8016250:	2908      	cmp	r1, #8
 8016252:	bfdd      	ittte	le
 8016254:	9907      	ldrle	r1, [sp, #28]
 8016256:	fb02 3301 	mlale	r3, r2, r1, r3
 801625a:	9307      	strle	r3, [sp, #28]
 801625c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016260:	9b05      	ldr	r3, [sp, #20]
 8016262:	3001      	adds	r0, #1
 8016264:	3301      	adds	r3, #1
 8016266:	9305      	str	r3, [sp, #20]
 8016268:	901b      	str	r0, [sp, #108]	; 0x6c
 801626a:	e7bf      	b.n	80161ec <_strtod_l+0x144>
 801626c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801626e:	191a      	adds	r2, r3, r4
 8016270:	921b      	str	r2, [sp, #108]	; 0x6c
 8016272:	9a05      	ldr	r2, [sp, #20]
 8016274:	5d1b      	ldrb	r3, [r3, r4]
 8016276:	2a00      	cmp	r2, #0
 8016278:	d037      	beq.n	80162ea <_strtod_l+0x242>
 801627a:	9c05      	ldr	r4, [sp, #20]
 801627c:	4602      	mov	r2, r0
 801627e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016282:	2909      	cmp	r1, #9
 8016284:	d913      	bls.n	80162ae <_strtod_l+0x206>
 8016286:	2101      	movs	r1, #1
 8016288:	9104      	str	r1, [sp, #16]
 801628a:	e7c2      	b.n	8016212 <_strtod_l+0x16a>
 801628c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801628e:	1c5a      	adds	r2, r3, #1
 8016290:	921b      	str	r2, [sp, #108]	; 0x6c
 8016292:	785b      	ldrb	r3, [r3, #1]
 8016294:	3001      	adds	r0, #1
 8016296:	2b30      	cmp	r3, #48	; 0x30
 8016298:	d0f8      	beq.n	801628c <_strtod_l+0x1e4>
 801629a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801629e:	2a08      	cmp	r2, #8
 80162a0:	f200 84e4 	bhi.w	8016c6c <_strtod_l+0xbc4>
 80162a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80162a6:	9208      	str	r2, [sp, #32]
 80162a8:	4602      	mov	r2, r0
 80162aa:	2000      	movs	r0, #0
 80162ac:	4604      	mov	r4, r0
 80162ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80162b2:	f100 0101 	add.w	r1, r0, #1
 80162b6:	d012      	beq.n	80162de <_strtod_l+0x236>
 80162b8:	440a      	add	r2, r1
 80162ba:	eb00 0c04 	add.w	ip, r0, r4
 80162be:	4621      	mov	r1, r4
 80162c0:	270a      	movs	r7, #10
 80162c2:	458c      	cmp	ip, r1
 80162c4:	d113      	bne.n	80162ee <_strtod_l+0x246>
 80162c6:	1821      	adds	r1, r4, r0
 80162c8:	2908      	cmp	r1, #8
 80162ca:	f104 0401 	add.w	r4, r4, #1
 80162ce:	4404      	add	r4, r0
 80162d0:	dc19      	bgt.n	8016306 <_strtod_l+0x25e>
 80162d2:	9b07      	ldr	r3, [sp, #28]
 80162d4:	210a      	movs	r1, #10
 80162d6:	fb01 e303 	mla	r3, r1, r3, lr
 80162da:	9307      	str	r3, [sp, #28]
 80162dc:	2100      	movs	r1, #0
 80162de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162e0:	1c58      	adds	r0, r3, #1
 80162e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80162e4:	785b      	ldrb	r3, [r3, #1]
 80162e6:	4608      	mov	r0, r1
 80162e8:	e7c9      	b.n	801627e <_strtod_l+0x1d6>
 80162ea:	9805      	ldr	r0, [sp, #20]
 80162ec:	e7d3      	b.n	8016296 <_strtod_l+0x1ee>
 80162ee:	2908      	cmp	r1, #8
 80162f0:	f101 0101 	add.w	r1, r1, #1
 80162f4:	dc03      	bgt.n	80162fe <_strtod_l+0x256>
 80162f6:	9b07      	ldr	r3, [sp, #28]
 80162f8:	437b      	muls	r3, r7
 80162fa:	9307      	str	r3, [sp, #28]
 80162fc:	e7e1      	b.n	80162c2 <_strtod_l+0x21a>
 80162fe:	2910      	cmp	r1, #16
 8016300:	bfd8      	it	le
 8016302:	437d      	mulle	r5, r7
 8016304:	e7dd      	b.n	80162c2 <_strtod_l+0x21a>
 8016306:	2c10      	cmp	r4, #16
 8016308:	bfdc      	itt	le
 801630a:	210a      	movle	r1, #10
 801630c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016310:	e7e4      	b.n	80162dc <_strtod_l+0x234>
 8016312:	2301      	movs	r3, #1
 8016314:	9304      	str	r3, [sp, #16]
 8016316:	e781      	b.n	801621c <_strtod_l+0x174>
 8016318:	f04f 0c01 	mov.w	ip, #1
 801631c:	1cb3      	adds	r3, r6, #2
 801631e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016320:	78b3      	ldrb	r3, [r6, #2]
 8016322:	e78a      	b.n	801623a <_strtod_l+0x192>
 8016324:	f04f 0c00 	mov.w	ip, #0
 8016328:	e7f8      	b.n	801631c <_strtod_l+0x274>
 801632a:	bf00      	nop
 801632c:	08019f58 	.word	0x08019f58
 8016330:	7ff00000 	.word	0x7ff00000
 8016334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016336:	1c5f      	adds	r7, r3, #1
 8016338:	971b      	str	r7, [sp, #108]	; 0x6c
 801633a:	785b      	ldrb	r3, [r3, #1]
 801633c:	2b30      	cmp	r3, #48	; 0x30
 801633e:	d0f9      	beq.n	8016334 <_strtod_l+0x28c>
 8016340:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016344:	2f08      	cmp	r7, #8
 8016346:	f63f af7d 	bhi.w	8016244 <_strtod_l+0x19c>
 801634a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801634e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016350:	930a      	str	r3, [sp, #40]	; 0x28
 8016352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016354:	1c5f      	adds	r7, r3, #1
 8016356:	971b      	str	r7, [sp, #108]	; 0x6c
 8016358:	785b      	ldrb	r3, [r3, #1]
 801635a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801635e:	f1b8 0f09 	cmp.w	r8, #9
 8016362:	d937      	bls.n	80163d4 <_strtod_l+0x32c>
 8016364:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016366:	1a7f      	subs	r7, r7, r1
 8016368:	2f08      	cmp	r7, #8
 801636a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801636e:	dc37      	bgt.n	80163e0 <_strtod_l+0x338>
 8016370:	45be      	cmp	lr, r7
 8016372:	bfa8      	it	ge
 8016374:	46be      	movge	lr, r7
 8016376:	f1bc 0f00 	cmp.w	ip, #0
 801637a:	d001      	beq.n	8016380 <_strtod_l+0x2d8>
 801637c:	f1ce 0e00 	rsb	lr, lr, #0
 8016380:	2c00      	cmp	r4, #0
 8016382:	d151      	bne.n	8016428 <_strtod_l+0x380>
 8016384:	2800      	cmp	r0, #0
 8016386:	f47f aece 	bne.w	8016126 <_strtod_l+0x7e>
 801638a:	9a06      	ldr	r2, [sp, #24]
 801638c:	2a00      	cmp	r2, #0
 801638e:	f47f aeca 	bne.w	8016126 <_strtod_l+0x7e>
 8016392:	9a04      	ldr	r2, [sp, #16]
 8016394:	2a00      	cmp	r2, #0
 8016396:	f47f aee4 	bne.w	8016162 <_strtod_l+0xba>
 801639a:	2b4e      	cmp	r3, #78	; 0x4e
 801639c:	d027      	beq.n	80163ee <_strtod_l+0x346>
 801639e:	dc21      	bgt.n	80163e4 <_strtod_l+0x33c>
 80163a0:	2b49      	cmp	r3, #73	; 0x49
 80163a2:	f47f aede 	bne.w	8016162 <_strtod_l+0xba>
 80163a6:	49a0      	ldr	r1, [pc, #640]	; (8016628 <_strtod_l+0x580>)
 80163a8:	a81b      	add	r0, sp, #108	; 0x6c
 80163aa:	f001 fdf7 	bl	8017f9c <__match>
 80163ae:	2800      	cmp	r0, #0
 80163b0:	f43f aed7 	beq.w	8016162 <_strtod_l+0xba>
 80163b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163b6:	499d      	ldr	r1, [pc, #628]	; (801662c <_strtod_l+0x584>)
 80163b8:	3b01      	subs	r3, #1
 80163ba:	a81b      	add	r0, sp, #108	; 0x6c
 80163bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80163be:	f001 fded 	bl	8017f9c <__match>
 80163c2:	b910      	cbnz	r0, 80163ca <_strtod_l+0x322>
 80163c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163c6:	3301      	adds	r3, #1
 80163c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80163ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016640 <_strtod_l+0x598>
 80163ce:	f04f 0a00 	mov.w	sl, #0
 80163d2:	e6a8      	b.n	8016126 <_strtod_l+0x7e>
 80163d4:	210a      	movs	r1, #10
 80163d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80163da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80163de:	e7b8      	b.n	8016352 <_strtod_l+0x2aa>
 80163e0:	46be      	mov	lr, r7
 80163e2:	e7c8      	b.n	8016376 <_strtod_l+0x2ce>
 80163e4:	2b69      	cmp	r3, #105	; 0x69
 80163e6:	d0de      	beq.n	80163a6 <_strtod_l+0x2fe>
 80163e8:	2b6e      	cmp	r3, #110	; 0x6e
 80163ea:	f47f aeba 	bne.w	8016162 <_strtod_l+0xba>
 80163ee:	4990      	ldr	r1, [pc, #576]	; (8016630 <_strtod_l+0x588>)
 80163f0:	a81b      	add	r0, sp, #108	; 0x6c
 80163f2:	f001 fdd3 	bl	8017f9c <__match>
 80163f6:	2800      	cmp	r0, #0
 80163f8:	f43f aeb3 	beq.w	8016162 <_strtod_l+0xba>
 80163fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	2b28      	cmp	r3, #40	; 0x28
 8016402:	d10e      	bne.n	8016422 <_strtod_l+0x37a>
 8016404:	aa1e      	add	r2, sp, #120	; 0x78
 8016406:	498b      	ldr	r1, [pc, #556]	; (8016634 <_strtod_l+0x58c>)
 8016408:	a81b      	add	r0, sp, #108	; 0x6c
 801640a:	f001 fddb 	bl	8017fc4 <__hexnan>
 801640e:	2805      	cmp	r0, #5
 8016410:	d107      	bne.n	8016422 <_strtod_l+0x37a>
 8016412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016414:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016418:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801641c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016420:	e681      	b.n	8016126 <_strtod_l+0x7e>
 8016422:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016648 <_strtod_l+0x5a0>
 8016426:	e7d2      	b.n	80163ce <_strtod_l+0x326>
 8016428:	ebae 0302 	sub.w	r3, lr, r2
 801642c:	9306      	str	r3, [sp, #24]
 801642e:	9b05      	ldr	r3, [sp, #20]
 8016430:	9807      	ldr	r0, [sp, #28]
 8016432:	2b00      	cmp	r3, #0
 8016434:	bf08      	it	eq
 8016436:	4623      	moveq	r3, r4
 8016438:	2c10      	cmp	r4, #16
 801643a:	9305      	str	r3, [sp, #20]
 801643c:	46a0      	mov	r8, r4
 801643e:	bfa8      	it	ge
 8016440:	f04f 0810 	movge.w	r8, #16
 8016444:	f7ea f876 	bl	8000534 <__aeabi_ui2d>
 8016448:	2c09      	cmp	r4, #9
 801644a:	4682      	mov	sl, r0
 801644c:	468b      	mov	fp, r1
 801644e:	dc13      	bgt.n	8016478 <_strtod_l+0x3d0>
 8016450:	9b06      	ldr	r3, [sp, #24]
 8016452:	2b00      	cmp	r3, #0
 8016454:	f43f ae67 	beq.w	8016126 <_strtod_l+0x7e>
 8016458:	9b06      	ldr	r3, [sp, #24]
 801645a:	dd7a      	ble.n	8016552 <_strtod_l+0x4aa>
 801645c:	2b16      	cmp	r3, #22
 801645e:	dc61      	bgt.n	8016524 <_strtod_l+0x47c>
 8016460:	4a75      	ldr	r2, [pc, #468]	; (8016638 <_strtod_l+0x590>)
 8016462:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016466:	e9de 0100 	ldrd	r0, r1, [lr]
 801646a:	4652      	mov	r2, sl
 801646c:	465b      	mov	r3, fp
 801646e:	f7ea f8db 	bl	8000628 <__aeabi_dmul>
 8016472:	4682      	mov	sl, r0
 8016474:	468b      	mov	fp, r1
 8016476:	e656      	b.n	8016126 <_strtod_l+0x7e>
 8016478:	4b6f      	ldr	r3, [pc, #444]	; (8016638 <_strtod_l+0x590>)
 801647a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801647e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016482:	f7ea f8d1 	bl	8000628 <__aeabi_dmul>
 8016486:	4606      	mov	r6, r0
 8016488:	4628      	mov	r0, r5
 801648a:	460f      	mov	r7, r1
 801648c:	f7ea f852 	bl	8000534 <__aeabi_ui2d>
 8016490:	4602      	mov	r2, r0
 8016492:	460b      	mov	r3, r1
 8016494:	4630      	mov	r0, r6
 8016496:	4639      	mov	r1, r7
 8016498:	f7e9 ff10 	bl	80002bc <__adddf3>
 801649c:	2c0f      	cmp	r4, #15
 801649e:	4682      	mov	sl, r0
 80164a0:	468b      	mov	fp, r1
 80164a2:	ddd5      	ble.n	8016450 <_strtod_l+0x3a8>
 80164a4:	9b06      	ldr	r3, [sp, #24]
 80164a6:	eba4 0808 	sub.w	r8, r4, r8
 80164aa:	4498      	add	r8, r3
 80164ac:	f1b8 0f00 	cmp.w	r8, #0
 80164b0:	f340 8096 	ble.w	80165e0 <_strtod_l+0x538>
 80164b4:	f018 030f 	ands.w	r3, r8, #15
 80164b8:	d00a      	beq.n	80164d0 <_strtod_l+0x428>
 80164ba:	495f      	ldr	r1, [pc, #380]	; (8016638 <_strtod_l+0x590>)
 80164bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80164c0:	4652      	mov	r2, sl
 80164c2:	465b      	mov	r3, fp
 80164c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80164c8:	f7ea f8ae 	bl	8000628 <__aeabi_dmul>
 80164cc:	4682      	mov	sl, r0
 80164ce:	468b      	mov	fp, r1
 80164d0:	f038 080f 	bics.w	r8, r8, #15
 80164d4:	d073      	beq.n	80165be <_strtod_l+0x516>
 80164d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80164da:	dd47      	ble.n	801656c <_strtod_l+0x4c4>
 80164dc:	2400      	movs	r4, #0
 80164de:	46a0      	mov	r8, r4
 80164e0:	9407      	str	r4, [sp, #28]
 80164e2:	9405      	str	r4, [sp, #20]
 80164e4:	2322      	movs	r3, #34	; 0x22
 80164e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016640 <_strtod_l+0x598>
 80164ea:	f8c9 3000 	str.w	r3, [r9]
 80164ee:	f04f 0a00 	mov.w	sl, #0
 80164f2:	9b07      	ldr	r3, [sp, #28]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	f43f ae16 	beq.w	8016126 <_strtod_l+0x7e>
 80164fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80164fc:	4648      	mov	r0, r9
 80164fe:	f001 fe61 	bl	80181c4 <_Bfree>
 8016502:	9905      	ldr	r1, [sp, #20]
 8016504:	4648      	mov	r0, r9
 8016506:	f001 fe5d 	bl	80181c4 <_Bfree>
 801650a:	4641      	mov	r1, r8
 801650c:	4648      	mov	r0, r9
 801650e:	f001 fe59 	bl	80181c4 <_Bfree>
 8016512:	9907      	ldr	r1, [sp, #28]
 8016514:	4648      	mov	r0, r9
 8016516:	f001 fe55 	bl	80181c4 <_Bfree>
 801651a:	4621      	mov	r1, r4
 801651c:	4648      	mov	r0, r9
 801651e:	f001 fe51 	bl	80181c4 <_Bfree>
 8016522:	e600      	b.n	8016126 <_strtod_l+0x7e>
 8016524:	9a06      	ldr	r2, [sp, #24]
 8016526:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801652a:	4293      	cmp	r3, r2
 801652c:	dbba      	blt.n	80164a4 <_strtod_l+0x3fc>
 801652e:	4d42      	ldr	r5, [pc, #264]	; (8016638 <_strtod_l+0x590>)
 8016530:	f1c4 040f 	rsb	r4, r4, #15
 8016534:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016538:	4652      	mov	r2, sl
 801653a:	465b      	mov	r3, fp
 801653c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016540:	f7ea f872 	bl	8000628 <__aeabi_dmul>
 8016544:	9b06      	ldr	r3, [sp, #24]
 8016546:	1b1c      	subs	r4, r3, r4
 8016548:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801654c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016550:	e78d      	b.n	801646e <_strtod_l+0x3c6>
 8016552:	f113 0f16 	cmn.w	r3, #22
 8016556:	dba5      	blt.n	80164a4 <_strtod_l+0x3fc>
 8016558:	4a37      	ldr	r2, [pc, #220]	; (8016638 <_strtod_l+0x590>)
 801655a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801655e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016562:	4650      	mov	r0, sl
 8016564:	4659      	mov	r1, fp
 8016566:	f7ea f989 	bl	800087c <__aeabi_ddiv>
 801656a:	e782      	b.n	8016472 <_strtod_l+0x3ca>
 801656c:	2300      	movs	r3, #0
 801656e:	4e33      	ldr	r6, [pc, #204]	; (801663c <_strtod_l+0x594>)
 8016570:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016574:	4650      	mov	r0, sl
 8016576:	4659      	mov	r1, fp
 8016578:	461d      	mov	r5, r3
 801657a:	f1b8 0f01 	cmp.w	r8, #1
 801657e:	dc21      	bgt.n	80165c4 <_strtod_l+0x51c>
 8016580:	b10b      	cbz	r3, 8016586 <_strtod_l+0x4de>
 8016582:	4682      	mov	sl, r0
 8016584:	468b      	mov	fp, r1
 8016586:	4b2d      	ldr	r3, [pc, #180]	; (801663c <_strtod_l+0x594>)
 8016588:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801658c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016590:	4652      	mov	r2, sl
 8016592:	465b      	mov	r3, fp
 8016594:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016598:	f7ea f846 	bl	8000628 <__aeabi_dmul>
 801659c:	4b28      	ldr	r3, [pc, #160]	; (8016640 <_strtod_l+0x598>)
 801659e:	460a      	mov	r2, r1
 80165a0:	400b      	ands	r3, r1
 80165a2:	4928      	ldr	r1, [pc, #160]	; (8016644 <_strtod_l+0x59c>)
 80165a4:	428b      	cmp	r3, r1
 80165a6:	4682      	mov	sl, r0
 80165a8:	d898      	bhi.n	80164dc <_strtod_l+0x434>
 80165aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80165ae:	428b      	cmp	r3, r1
 80165b0:	bf86      	itte	hi
 80165b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801664c <_strtod_l+0x5a4>
 80165b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80165ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80165be:	2300      	movs	r3, #0
 80165c0:	9304      	str	r3, [sp, #16]
 80165c2:	e077      	b.n	80166b4 <_strtod_l+0x60c>
 80165c4:	f018 0f01 	tst.w	r8, #1
 80165c8:	d006      	beq.n	80165d8 <_strtod_l+0x530>
 80165ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80165ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d2:	f7ea f829 	bl	8000628 <__aeabi_dmul>
 80165d6:	2301      	movs	r3, #1
 80165d8:	3501      	adds	r5, #1
 80165da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80165de:	e7cc      	b.n	801657a <_strtod_l+0x4d2>
 80165e0:	d0ed      	beq.n	80165be <_strtod_l+0x516>
 80165e2:	f1c8 0800 	rsb	r8, r8, #0
 80165e6:	f018 020f 	ands.w	r2, r8, #15
 80165ea:	d00a      	beq.n	8016602 <_strtod_l+0x55a>
 80165ec:	4b12      	ldr	r3, [pc, #72]	; (8016638 <_strtod_l+0x590>)
 80165ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165f2:	4650      	mov	r0, sl
 80165f4:	4659      	mov	r1, fp
 80165f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165fa:	f7ea f93f 	bl	800087c <__aeabi_ddiv>
 80165fe:	4682      	mov	sl, r0
 8016600:	468b      	mov	fp, r1
 8016602:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016606:	d0da      	beq.n	80165be <_strtod_l+0x516>
 8016608:	f1b8 0f1f 	cmp.w	r8, #31
 801660c:	dd20      	ble.n	8016650 <_strtod_l+0x5a8>
 801660e:	2400      	movs	r4, #0
 8016610:	46a0      	mov	r8, r4
 8016612:	9407      	str	r4, [sp, #28]
 8016614:	9405      	str	r4, [sp, #20]
 8016616:	2322      	movs	r3, #34	; 0x22
 8016618:	f04f 0a00 	mov.w	sl, #0
 801661c:	f04f 0b00 	mov.w	fp, #0
 8016620:	f8c9 3000 	str.w	r3, [r9]
 8016624:	e765      	b.n	80164f2 <_strtod_l+0x44a>
 8016626:	bf00      	nop
 8016628:	08019f25 	.word	0x08019f25
 801662c:	08019fab 	.word	0x08019fab
 8016630:	08019f2d 	.word	0x08019f2d
 8016634:	08019f6c 	.word	0x08019f6c
 8016638:	0801a050 	.word	0x0801a050
 801663c:	0801a028 	.word	0x0801a028
 8016640:	7ff00000 	.word	0x7ff00000
 8016644:	7ca00000 	.word	0x7ca00000
 8016648:	fff80000 	.word	0xfff80000
 801664c:	7fefffff 	.word	0x7fefffff
 8016650:	f018 0310 	ands.w	r3, r8, #16
 8016654:	bf18      	it	ne
 8016656:	236a      	movne	r3, #106	; 0x6a
 8016658:	4da0      	ldr	r5, [pc, #640]	; (80168dc <_strtod_l+0x834>)
 801665a:	9304      	str	r3, [sp, #16]
 801665c:	4650      	mov	r0, sl
 801665e:	4659      	mov	r1, fp
 8016660:	2300      	movs	r3, #0
 8016662:	f1b8 0f00 	cmp.w	r8, #0
 8016666:	f300 810a 	bgt.w	801687e <_strtod_l+0x7d6>
 801666a:	b10b      	cbz	r3, 8016670 <_strtod_l+0x5c8>
 801666c:	4682      	mov	sl, r0
 801666e:	468b      	mov	fp, r1
 8016670:	9b04      	ldr	r3, [sp, #16]
 8016672:	b1bb      	cbz	r3, 80166a4 <_strtod_l+0x5fc>
 8016674:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016678:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801667c:	2b00      	cmp	r3, #0
 801667e:	4659      	mov	r1, fp
 8016680:	dd10      	ble.n	80166a4 <_strtod_l+0x5fc>
 8016682:	2b1f      	cmp	r3, #31
 8016684:	f340 8107 	ble.w	8016896 <_strtod_l+0x7ee>
 8016688:	2b34      	cmp	r3, #52	; 0x34
 801668a:	bfde      	ittt	le
 801668c:	3b20      	suble	r3, #32
 801668e:	f04f 32ff 	movle.w	r2, #4294967295
 8016692:	fa02 f303 	lslle.w	r3, r2, r3
 8016696:	f04f 0a00 	mov.w	sl, #0
 801669a:	bfcc      	ite	gt
 801669c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80166a0:	ea03 0b01 	andle.w	fp, r3, r1
 80166a4:	2200      	movs	r2, #0
 80166a6:	2300      	movs	r3, #0
 80166a8:	4650      	mov	r0, sl
 80166aa:	4659      	mov	r1, fp
 80166ac:	f7ea fa24 	bl	8000af8 <__aeabi_dcmpeq>
 80166b0:	2800      	cmp	r0, #0
 80166b2:	d1ac      	bne.n	801660e <_strtod_l+0x566>
 80166b4:	9b07      	ldr	r3, [sp, #28]
 80166b6:	9300      	str	r3, [sp, #0]
 80166b8:	9a05      	ldr	r2, [sp, #20]
 80166ba:	9908      	ldr	r1, [sp, #32]
 80166bc:	4623      	mov	r3, r4
 80166be:	4648      	mov	r0, r9
 80166c0:	f001 fdd2 	bl	8018268 <__s2b>
 80166c4:	9007      	str	r0, [sp, #28]
 80166c6:	2800      	cmp	r0, #0
 80166c8:	f43f af08 	beq.w	80164dc <_strtod_l+0x434>
 80166cc:	9a06      	ldr	r2, [sp, #24]
 80166ce:	9b06      	ldr	r3, [sp, #24]
 80166d0:	2a00      	cmp	r2, #0
 80166d2:	f1c3 0300 	rsb	r3, r3, #0
 80166d6:	bfa8      	it	ge
 80166d8:	2300      	movge	r3, #0
 80166da:	930e      	str	r3, [sp, #56]	; 0x38
 80166dc:	2400      	movs	r4, #0
 80166de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80166e2:	9316      	str	r3, [sp, #88]	; 0x58
 80166e4:	46a0      	mov	r8, r4
 80166e6:	9b07      	ldr	r3, [sp, #28]
 80166e8:	4648      	mov	r0, r9
 80166ea:	6859      	ldr	r1, [r3, #4]
 80166ec:	f001 fd36 	bl	801815c <_Balloc>
 80166f0:	9005      	str	r0, [sp, #20]
 80166f2:	2800      	cmp	r0, #0
 80166f4:	f43f aef6 	beq.w	80164e4 <_strtod_l+0x43c>
 80166f8:	9b07      	ldr	r3, [sp, #28]
 80166fa:	691a      	ldr	r2, [r3, #16]
 80166fc:	3202      	adds	r2, #2
 80166fe:	f103 010c 	add.w	r1, r3, #12
 8016702:	0092      	lsls	r2, r2, #2
 8016704:	300c      	adds	r0, #12
 8016706:	f7fe fdd3 	bl	80152b0 <memcpy>
 801670a:	aa1e      	add	r2, sp, #120	; 0x78
 801670c:	a91d      	add	r1, sp, #116	; 0x74
 801670e:	ec4b ab10 	vmov	d0, sl, fp
 8016712:	4648      	mov	r0, r9
 8016714:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016718:	f002 f862 	bl	80187e0 <__d2b>
 801671c:	901c      	str	r0, [sp, #112]	; 0x70
 801671e:	2800      	cmp	r0, #0
 8016720:	f43f aee0 	beq.w	80164e4 <_strtod_l+0x43c>
 8016724:	2101      	movs	r1, #1
 8016726:	4648      	mov	r0, r9
 8016728:	f001 fe2a 	bl	8018380 <__i2b>
 801672c:	4680      	mov	r8, r0
 801672e:	2800      	cmp	r0, #0
 8016730:	f43f aed8 	beq.w	80164e4 <_strtod_l+0x43c>
 8016734:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016736:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016738:	2e00      	cmp	r6, #0
 801673a:	bfab      	itete	ge
 801673c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801673e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016740:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016742:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016744:	bfac      	ite	ge
 8016746:	18f7      	addge	r7, r6, r3
 8016748:	1b9d      	sublt	r5, r3, r6
 801674a:	9b04      	ldr	r3, [sp, #16]
 801674c:	1af6      	subs	r6, r6, r3
 801674e:	4416      	add	r6, r2
 8016750:	4b63      	ldr	r3, [pc, #396]	; (80168e0 <_strtod_l+0x838>)
 8016752:	3e01      	subs	r6, #1
 8016754:	429e      	cmp	r6, r3
 8016756:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801675a:	f280 80af 	bge.w	80168bc <_strtod_l+0x814>
 801675e:	1b9b      	subs	r3, r3, r6
 8016760:	2b1f      	cmp	r3, #31
 8016762:	eba2 0203 	sub.w	r2, r2, r3
 8016766:	f04f 0101 	mov.w	r1, #1
 801676a:	f300 809b 	bgt.w	80168a4 <_strtod_l+0x7fc>
 801676e:	fa01 f303 	lsl.w	r3, r1, r3
 8016772:	930f      	str	r3, [sp, #60]	; 0x3c
 8016774:	2300      	movs	r3, #0
 8016776:	930a      	str	r3, [sp, #40]	; 0x28
 8016778:	18be      	adds	r6, r7, r2
 801677a:	9b04      	ldr	r3, [sp, #16]
 801677c:	42b7      	cmp	r7, r6
 801677e:	4415      	add	r5, r2
 8016780:	441d      	add	r5, r3
 8016782:	463b      	mov	r3, r7
 8016784:	bfa8      	it	ge
 8016786:	4633      	movge	r3, r6
 8016788:	42ab      	cmp	r3, r5
 801678a:	bfa8      	it	ge
 801678c:	462b      	movge	r3, r5
 801678e:	2b00      	cmp	r3, #0
 8016790:	bfc2      	ittt	gt
 8016792:	1af6      	subgt	r6, r6, r3
 8016794:	1aed      	subgt	r5, r5, r3
 8016796:	1aff      	subgt	r7, r7, r3
 8016798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801679a:	b1bb      	cbz	r3, 80167cc <_strtod_l+0x724>
 801679c:	4641      	mov	r1, r8
 801679e:	461a      	mov	r2, r3
 80167a0:	4648      	mov	r0, r9
 80167a2:	f001 fe8d 	bl	80184c0 <__pow5mult>
 80167a6:	4680      	mov	r8, r0
 80167a8:	2800      	cmp	r0, #0
 80167aa:	f43f ae9b 	beq.w	80164e4 <_strtod_l+0x43c>
 80167ae:	4601      	mov	r1, r0
 80167b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80167b2:	4648      	mov	r0, r9
 80167b4:	f001 fded 	bl	8018392 <__multiply>
 80167b8:	900c      	str	r0, [sp, #48]	; 0x30
 80167ba:	2800      	cmp	r0, #0
 80167bc:	f43f ae92 	beq.w	80164e4 <_strtod_l+0x43c>
 80167c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167c2:	4648      	mov	r0, r9
 80167c4:	f001 fcfe 	bl	80181c4 <_Bfree>
 80167c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167ca:	931c      	str	r3, [sp, #112]	; 0x70
 80167cc:	2e00      	cmp	r6, #0
 80167ce:	dc7a      	bgt.n	80168c6 <_strtod_l+0x81e>
 80167d0:	9b06      	ldr	r3, [sp, #24]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	dd08      	ble.n	80167e8 <_strtod_l+0x740>
 80167d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80167d8:	9905      	ldr	r1, [sp, #20]
 80167da:	4648      	mov	r0, r9
 80167dc:	f001 fe70 	bl	80184c0 <__pow5mult>
 80167e0:	9005      	str	r0, [sp, #20]
 80167e2:	2800      	cmp	r0, #0
 80167e4:	f43f ae7e 	beq.w	80164e4 <_strtod_l+0x43c>
 80167e8:	2d00      	cmp	r5, #0
 80167ea:	dd08      	ble.n	80167fe <_strtod_l+0x756>
 80167ec:	462a      	mov	r2, r5
 80167ee:	9905      	ldr	r1, [sp, #20]
 80167f0:	4648      	mov	r0, r9
 80167f2:	f001 feb3 	bl	801855c <__lshift>
 80167f6:	9005      	str	r0, [sp, #20]
 80167f8:	2800      	cmp	r0, #0
 80167fa:	f43f ae73 	beq.w	80164e4 <_strtod_l+0x43c>
 80167fe:	2f00      	cmp	r7, #0
 8016800:	dd08      	ble.n	8016814 <_strtod_l+0x76c>
 8016802:	4641      	mov	r1, r8
 8016804:	463a      	mov	r2, r7
 8016806:	4648      	mov	r0, r9
 8016808:	f001 fea8 	bl	801855c <__lshift>
 801680c:	4680      	mov	r8, r0
 801680e:	2800      	cmp	r0, #0
 8016810:	f43f ae68 	beq.w	80164e4 <_strtod_l+0x43c>
 8016814:	9a05      	ldr	r2, [sp, #20]
 8016816:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016818:	4648      	mov	r0, r9
 801681a:	f001 ff0d 	bl	8018638 <__mdiff>
 801681e:	4604      	mov	r4, r0
 8016820:	2800      	cmp	r0, #0
 8016822:	f43f ae5f 	beq.w	80164e4 <_strtod_l+0x43c>
 8016826:	68c3      	ldr	r3, [r0, #12]
 8016828:	930c      	str	r3, [sp, #48]	; 0x30
 801682a:	2300      	movs	r3, #0
 801682c:	60c3      	str	r3, [r0, #12]
 801682e:	4641      	mov	r1, r8
 8016830:	f001 fee8 	bl	8018604 <__mcmp>
 8016834:	2800      	cmp	r0, #0
 8016836:	da55      	bge.n	80168e4 <_strtod_l+0x83c>
 8016838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801683a:	b9e3      	cbnz	r3, 8016876 <_strtod_l+0x7ce>
 801683c:	f1ba 0f00 	cmp.w	sl, #0
 8016840:	d119      	bne.n	8016876 <_strtod_l+0x7ce>
 8016842:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016846:	b9b3      	cbnz	r3, 8016876 <_strtod_l+0x7ce>
 8016848:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801684c:	0d1b      	lsrs	r3, r3, #20
 801684e:	051b      	lsls	r3, r3, #20
 8016850:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016854:	d90f      	bls.n	8016876 <_strtod_l+0x7ce>
 8016856:	6963      	ldr	r3, [r4, #20]
 8016858:	b913      	cbnz	r3, 8016860 <_strtod_l+0x7b8>
 801685a:	6923      	ldr	r3, [r4, #16]
 801685c:	2b01      	cmp	r3, #1
 801685e:	dd0a      	ble.n	8016876 <_strtod_l+0x7ce>
 8016860:	4621      	mov	r1, r4
 8016862:	2201      	movs	r2, #1
 8016864:	4648      	mov	r0, r9
 8016866:	f001 fe79 	bl	801855c <__lshift>
 801686a:	4641      	mov	r1, r8
 801686c:	4604      	mov	r4, r0
 801686e:	f001 fec9 	bl	8018604 <__mcmp>
 8016872:	2800      	cmp	r0, #0
 8016874:	dc67      	bgt.n	8016946 <_strtod_l+0x89e>
 8016876:	9b04      	ldr	r3, [sp, #16]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d171      	bne.n	8016960 <_strtod_l+0x8b8>
 801687c:	e63d      	b.n	80164fa <_strtod_l+0x452>
 801687e:	f018 0f01 	tst.w	r8, #1
 8016882:	d004      	beq.n	801688e <_strtod_l+0x7e6>
 8016884:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016888:	f7e9 fece 	bl	8000628 <__aeabi_dmul>
 801688c:	2301      	movs	r3, #1
 801688e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016892:	3508      	adds	r5, #8
 8016894:	e6e5      	b.n	8016662 <_strtod_l+0x5ba>
 8016896:	f04f 32ff 	mov.w	r2, #4294967295
 801689a:	fa02 f303 	lsl.w	r3, r2, r3
 801689e:	ea03 0a0a 	and.w	sl, r3, sl
 80168a2:	e6ff      	b.n	80166a4 <_strtod_l+0x5fc>
 80168a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80168a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80168ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80168b0:	36e2      	adds	r6, #226	; 0xe2
 80168b2:	fa01 f306 	lsl.w	r3, r1, r6
 80168b6:	930a      	str	r3, [sp, #40]	; 0x28
 80168b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80168ba:	e75d      	b.n	8016778 <_strtod_l+0x6d0>
 80168bc:	2300      	movs	r3, #0
 80168be:	930a      	str	r3, [sp, #40]	; 0x28
 80168c0:	2301      	movs	r3, #1
 80168c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80168c4:	e758      	b.n	8016778 <_strtod_l+0x6d0>
 80168c6:	4632      	mov	r2, r6
 80168c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80168ca:	4648      	mov	r0, r9
 80168cc:	f001 fe46 	bl	801855c <__lshift>
 80168d0:	901c      	str	r0, [sp, #112]	; 0x70
 80168d2:	2800      	cmp	r0, #0
 80168d4:	f47f af7c 	bne.w	80167d0 <_strtod_l+0x728>
 80168d8:	e604      	b.n	80164e4 <_strtod_l+0x43c>
 80168da:	bf00      	nop
 80168dc:	08019f80 	.word	0x08019f80
 80168e0:	fffffc02 	.word	0xfffffc02
 80168e4:	465d      	mov	r5, fp
 80168e6:	f040 8086 	bne.w	80169f6 <_strtod_l+0x94e>
 80168ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168f0:	b32a      	cbz	r2, 801693e <_strtod_l+0x896>
 80168f2:	4aaf      	ldr	r2, [pc, #700]	; (8016bb0 <_strtod_l+0xb08>)
 80168f4:	4293      	cmp	r3, r2
 80168f6:	d153      	bne.n	80169a0 <_strtod_l+0x8f8>
 80168f8:	9b04      	ldr	r3, [sp, #16]
 80168fa:	4650      	mov	r0, sl
 80168fc:	b1d3      	cbz	r3, 8016934 <_strtod_l+0x88c>
 80168fe:	4aad      	ldr	r2, [pc, #692]	; (8016bb4 <_strtod_l+0xb0c>)
 8016900:	402a      	ands	r2, r5
 8016902:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016906:	f04f 31ff 	mov.w	r1, #4294967295
 801690a:	d816      	bhi.n	801693a <_strtod_l+0x892>
 801690c:	0d12      	lsrs	r2, r2, #20
 801690e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016912:	fa01 f303 	lsl.w	r3, r1, r3
 8016916:	4298      	cmp	r0, r3
 8016918:	d142      	bne.n	80169a0 <_strtod_l+0x8f8>
 801691a:	4ba7      	ldr	r3, [pc, #668]	; (8016bb8 <_strtod_l+0xb10>)
 801691c:	429d      	cmp	r5, r3
 801691e:	d102      	bne.n	8016926 <_strtod_l+0x87e>
 8016920:	3001      	adds	r0, #1
 8016922:	f43f addf 	beq.w	80164e4 <_strtod_l+0x43c>
 8016926:	4ba3      	ldr	r3, [pc, #652]	; (8016bb4 <_strtod_l+0xb0c>)
 8016928:	402b      	ands	r3, r5
 801692a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801692e:	f04f 0a00 	mov.w	sl, #0
 8016932:	e7a0      	b.n	8016876 <_strtod_l+0x7ce>
 8016934:	f04f 33ff 	mov.w	r3, #4294967295
 8016938:	e7ed      	b.n	8016916 <_strtod_l+0x86e>
 801693a:	460b      	mov	r3, r1
 801693c:	e7eb      	b.n	8016916 <_strtod_l+0x86e>
 801693e:	bb7b      	cbnz	r3, 80169a0 <_strtod_l+0x8f8>
 8016940:	f1ba 0f00 	cmp.w	sl, #0
 8016944:	d12c      	bne.n	80169a0 <_strtod_l+0x8f8>
 8016946:	9904      	ldr	r1, [sp, #16]
 8016948:	4a9a      	ldr	r2, [pc, #616]	; (8016bb4 <_strtod_l+0xb0c>)
 801694a:	465b      	mov	r3, fp
 801694c:	b1f1      	cbz	r1, 801698c <_strtod_l+0x8e4>
 801694e:	ea02 010b 	and.w	r1, r2, fp
 8016952:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016956:	dc19      	bgt.n	801698c <_strtod_l+0x8e4>
 8016958:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801695c:	f77f ae5b 	ble.w	8016616 <_strtod_l+0x56e>
 8016960:	4a96      	ldr	r2, [pc, #600]	; (8016bbc <_strtod_l+0xb14>)
 8016962:	2300      	movs	r3, #0
 8016964:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016968:	4650      	mov	r0, sl
 801696a:	4659      	mov	r1, fp
 801696c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016970:	f7e9 fe5a 	bl	8000628 <__aeabi_dmul>
 8016974:	4682      	mov	sl, r0
 8016976:	468b      	mov	fp, r1
 8016978:	2900      	cmp	r1, #0
 801697a:	f47f adbe 	bne.w	80164fa <_strtod_l+0x452>
 801697e:	2800      	cmp	r0, #0
 8016980:	f47f adbb 	bne.w	80164fa <_strtod_l+0x452>
 8016984:	2322      	movs	r3, #34	; 0x22
 8016986:	f8c9 3000 	str.w	r3, [r9]
 801698a:	e5b6      	b.n	80164fa <_strtod_l+0x452>
 801698c:	4013      	ands	r3, r2
 801698e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016992:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016996:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801699a:	f04f 3aff 	mov.w	sl, #4294967295
 801699e:	e76a      	b.n	8016876 <_strtod_l+0x7ce>
 80169a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169a2:	b193      	cbz	r3, 80169ca <_strtod_l+0x922>
 80169a4:	422b      	tst	r3, r5
 80169a6:	f43f af66 	beq.w	8016876 <_strtod_l+0x7ce>
 80169aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169ac:	9a04      	ldr	r2, [sp, #16]
 80169ae:	4650      	mov	r0, sl
 80169b0:	4659      	mov	r1, fp
 80169b2:	b173      	cbz	r3, 80169d2 <_strtod_l+0x92a>
 80169b4:	f7ff fb5c 	bl	8016070 <sulp>
 80169b8:	4602      	mov	r2, r0
 80169ba:	460b      	mov	r3, r1
 80169bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169c0:	f7e9 fc7c 	bl	80002bc <__adddf3>
 80169c4:	4682      	mov	sl, r0
 80169c6:	468b      	mov	fp, r1
 80169c8:	e755      	b.n	8016876 <_strtod_l+0x7ce>
 80169ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169cc:	ea13 0f0a 	tst.w	r3, sl
 80169d0:	e7e9      	b.n	80169a6 <_strtod_l+0x8fe>
 80169d2:	f7ff fb4d 	bl	8016070 <sulp>
 80169d6:	4602      	mov	r2, r0
 80169d8:	460b      	mov	r3, r1
 80169da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80169de:	f7e9 fc6b 	bl	80002b8 <__aeabi_dsub>
 80169e2:	2200      	movs	r2, #0
 80169e4:	2300      	movs	r3, #0
 80169e6:	4682      	mov	sl, r0
 80169e8:	468b      	mov	fp, r1
 80169ea:	f7ea f885 	bl	8000af8 <__aeabi_dcmpeq>
 80169ee:	2800      	cmp	r0, #0
 80169f0:	f47f ae11 	bne.w	8016616 <_strtod_l+0x56e>
 80169f4:	e73f      	b.n	8016876 <_strtod_l+0x7ce>
 80169f6:	4641      	mov	r1, r8
 80169f8:	4620      	mov	r0, r4
 80169fa:	f001 ff40 	bl	801887e <__ratio>
 80169fe:	ec57 6b10 	vmov	r6, r7, d0
 8016a02:	2200      	movs	r2, #0
 8016a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016a08:	ee10 0a10 	vmov	r0, s0
 8016a0c:	4639      	mov	r1, r7
 8016a0e:	f7ea f887 	bl	8000b20 <__aeabi_dcmple>
 8016a12:	2800      	cmp	r0, #0
 8016a14:	d077      	beq.n	8016b06 <_strtod_l+0xa5e>
 8016a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d04a      	beq.n	8016ab2 <_strtod_l+0xa0a>
 8016a1c:	4b68      	ldr	r3, [pc, #416]	; (8016bc0 <_strtod_l+0xb18>)
 8016a1e:	2200      	movs	r2, #0
 8016a20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a24:	4f66      	ldr	r7, [pc, #408]	; (8016bc0 <_strtod_l+0xb18>)
 8016a26:	2600      	movs	r6, #0
 8016a28:	4b62      	ldr	r3, [pc, #392]	; (8016bb4 <_strtod_l+0xb0c>)
 8016a2a:	402b      	ands	r3, r5
 8016a2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a30:	4b64      	ldr	r3, [pc, #400]	; (8016bc4 <_strtod_l+0xb1c>)
 8016a32:	429a      	cmp	r2, r3
 8016a34:	f040 80ce 	bne.w	8016bd4 <_strtod_l+0xb2c>
 8016a38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016a40:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016a44:	ec4b ab10 	vmov	d0, sl, fp
 8016a48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016a4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016a50:	f001 fe50 	bl	80186f4 <__ulp>
 8016a54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016a58:	ec53 2b10 	vmov	r2, r3, d0
 8016a5c:	f7e9 fde4 	bl	8000628 <__aeabi_dmul>
 8016a60:	4652      	mov	r2, sl
 8016a62:	465b      	mov	r3, fp
 8016a64:	f7e9 fc2a 	bl	80002bc <__adddf3>
 8016a68:	460b      	mov	r3, r1
 8016a6a:	4952      	ldr	r1, [pc, #328]	; (8016bb4 <_strtod_l+0xb0c>)
 8016a6c:	4a56      	ldr	r2, [pc, #344]	; (8016bc8 <_strtod_l+0xb20>)
 8016a6e:	4019      	ands	r1, r3
 8016a70:	4291      	cmp	r1, r2
 8016a72:	4682      	mov	sl, r0
 8016a74:	d95b      	bls.n	8016b2e <_strtod_l+0xa86>
 8016a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016a7c:	4293      	cmp	r3, r2
 8016a7e:	d103      	bne.n	8016a88 <_strtod_l+0x9e0>
 8016a80:	9b08      	ldr	r3, [sp, #32]
 8016a82:	3301      	adds	r3, #1
 8016a84:	f43f ad2e 	beq.w	80164e4 <_strtod_l+0x43c>
 8016a88:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016bb8 <_strtod_l+0xb10>
 8016a8c:	f04f 3aff 	mov.w	sl, #4294967295
 8016a90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a92:	4648      	mov	r0, r9
 8016a94:	f001 fb96 	bl	80181c4 <_Bfree>
 8016a98:	9905      	ldr	r1, [sp, #20]
 8016a9a:	4648      	mov	r0, r9
 8016a9c:	f001 fb92 	bl	80181c4 <_Bfree>
 8016aa0:	4641      	mov	r1, r8
 8016aa2:	4648      	mov	r0, r9
 8016aa4:	f001 fb8e 	bl	80181c4 <_Bfree>
 8016aa8:	4621      	mov	r1, r4
 8016aaa:	4648      	mov	r0, r9
 8016aac:	f001 fb8a 	bl	80181c4 <_Bfree>
 8016ab0:	e619      	b.n	80166e6 <_strtod_l+0x63e>
 8016ab2:	f1ba 0f00 	cmp.w	sl, #0
 8016ab6:	d11a      	bne.n	8016aee <_strtod_l+0xa46>
 8016ab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016abc:	b9eb      	cbnz	r3, 8016afa <_strtod_l+0xa52>
 8016abe:	2200      	movs	r2, #0
 8016ac0:	4b3f      	ldr	r3, [pc, #252]	; (8016bc0 <_strtod_l+0xb18>)
 8016ac2:	4630      	mov	r0, r6
 8016ac4:	4639      	mov	r1, r7
 8016ac6:	f7ea f821 	bl	8000b0c <__aeabi_dcmplt>
 8016aca:	b9c8      	cbnz	r0, 8016b00 <_strtod_l+0xa58>
 8016acc:	4630      	mov	r0, r6
 8016ace:	4639      	mov	r1, r7
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	4b3e      	ldr	r3, [pc, #248]	; (8016bcc <_strtod_l+0xb24>)
 8016ad4:	f7e9 fda8 	bl	8000628 <__aeabi_dmul>
 8016ad8:	4606      	mov	r6, r0
 8016ada:	460f      	mov	r7, r1
 8016adc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016ae0:	9618      	str	r6, [sp, #96]	; 0x60
 8016ae2:	9319      	str	r3, [sp, #100]	; 0x64
 8016ae4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016ae8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016aec:	e79c      	b.n	8016a28 <_strtod_l+0x980>
 8016aee:	f1ba 0f01 	cmp.w	sl, #1
 8016af2:	d102      	bne.n	8016afa <_strtod_l+0xa52>
 8016af4:	2d00      	cmp	r5, #0
 8016af6:	f43f ad8e 	beq.w	8016616 <_strtod_l+0x56e>
 8016afa:	2200      	movs	r2, #0
 8016afc:	4b34      	ldr	r3, [pc, #208]	; (8016bd0 <_strtod_l+0xb28>)
 8016afe:	e78f      	b.n	8016a20 <_strtod_l+0x978>
 8016b00:	2600      	movs	r6, #0
 8016b02:	4f32      	ldr	r7, [pc, #200]	; (8016bcc <_strtod_l+0xb24>)
 8016b04:	e7ea      	b.n	8016adc <_strtod_l+0xa34>
 8016b06:	4b31      	ldr	r3, [pc, #196]	; (8016bcc <_strtod_l+0xb24>)
 8016b08:	4630      	mov	r0, r6
 8016b0a:	4639      	mov	r1, r7
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	f7e9 fd8b 	bl	8000628 <__aeabi_dmul>
 8016b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b14:	4606      	mov	r6, r0
 8016b16:	460f      	mov	r7, r1
 8016b18:	b933      	cbnz	r3, 8016b28 <_strtod_l+0xa80>
 8016b1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b1e:	9010      	str	r0, [sp, #64]	; 0x40
 8016b20:	9311      	str	r3, [sp, #68]	; 0x44
 8016b22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016b26:	e7df      	b.n	8016ae8 <_strtod_l+0xa40>
 8016b28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016b2c:	e7f9      	b.n	8016b22 <_strtod_l+0xa7a>
 8016b2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016b32:	9b04      	ldr	r3, [sp, #16]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d1ab      	bne.n	8016a90 <_strtod_l+0x9e8>
 8016b38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016b3c:	0d1b      	lsrs	r3, r3, #20
 8016b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b40:	051b      	lsls	r3, r3, #20
 8016b42:	429a      	cmp	r2, r3
 8016b44:	465d      	mov	r5, fp
 8016b46:	d1a3      	bne.n	8016a90 <_strtod_l+0x9e8>
 8016b48:	4639      	mov	r1, r7
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	f7ea f81c 	bl	8000b88 <__aeabi_d2iz>
 8016b50:	f7e9 fd00 	bl	8000554 <__aeabi_i2d>
 8016b54:	460b      	mov	r3, r1
 8016b56:	4602      	mov	r2, r0
 8016b58:	4639      	mov	r1, r7
 8016b5a:	4630      	mov	r0, r6
 8016b5c:	f7e9 fbac 	bl	80002b8 <__aeabi_dsub>
 8016b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b62:	4606      	mov	r6, r0
 8016b64:	460f      	mov	r7, r1
 8016b66:	b933      	cbnz	r3, 8016b76 <_strtod_l+0xace>
 8016b68:	f1ba 0f00 	cmp.w	sl, #0
 8016b6c:	d103      	bne.n	8016b76 <_strtod_l+0xace>
 8016b6e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016b72:	2d00      	cmp	r5, #0
 8016b74:	d06d      	beq.n	8016c52 <_strtod_l+0xbaa>
 8016b76:	a30a      	add	r3, pc, #40	; (adr r3, 8016ba0 <_strtod_l+0xaf8>)
 8016b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7c:	4630      	mov	r0, r6
 8016b7e:	4639      	mov	r1, r7
 8016b80:	f7e9 ffc4 	bl	8000b0c <__aeabi_dcmplt>
 8016b84:	2800      	cmp	r0, #0
 8016b86:	f47f acb8 	bne.w	80164fa <_strtod_l+0x452>
 8016b8a:	a307      	add	r3, pc, #28	; (adr r3, 8016ba8 <_strtod_l+0xb00>)
 8016b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b90:	4630      	mov	r0, r6
 8016b92:	4639      	mov	r1, r7
 8016b94:	f7e9 ffd8 	bl	8000b48 <__aeabi_dcmpgt>
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	f43f af79 	beq.w	8016a90 <_strtod_l+0x9e8>
 8016b9e:	e4ac      	b.n	80164fa <_strtod_l+0x452>
 8016ba0:	94a03595 	.word	0x94a03595
 8016ba4:	3fdfffff 	.word	0x3fdfffff
 8016ba8:	35afe535 	.word	0x35afe535
 8016bac:	3fe00000 	.word	0x3fe00000
 8016bb0:	000fffff 	.word	0x000fffff
 8016bb4:	7ff00000 	.word	0x7ff00000
 8016bb8:	7fefffff 	.word	0x7fefffff
 8016bbc:	39500000 	.word	0x39500000
 8016bc0:	3ff00000 	.word	0x3ff00000
 8016bc4:	7fe00000 	.word	0x7fe00000
 8016bc8:	7c9fffff 	.word	0x7c9fffff
 8016bcc:	3fe00000 	.word	0x3fe00000
 8016bd0:	bff00000 	.word	0xbff00000
 8016bd4:	9b04      	ldr	r3, [sp, #16]
 8016bd6:	b333      	cbz	r3, 8016c26 <_strtod_l+0xb7e>
 8016bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016bde:	d822      	bhi.n	8016c26 <_strtod_l+0xb7e>
 8016be0:	a327      	add	r3, pc, #156	; (adr r3, 8016c80 <_strtod_l+0xbd8>)
 8016be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be6:	4630      	mov	r0, r6
 8016be8:	4639      	mov	r1, r7
 8016bea:	f7e9 ff99 	bl	8000b20 <__aeabi_dcmple>
 8016bee:	b1a0      	cbz	r0, 8016c1a <_strtod_l+0xb72>
 8016bf0:	4639      	mov	r1, r7
 8016bf2:	4630      	mov	r0, r6
 8016bf4:	f7e9 fff0 	bl	8000bd8 <__aeabi_d2uiz>
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	bf08      	it	eq
 8016bfc:	2001      	moveq	r0, #1
 8016bfe:	f7e9 fc99 	bl	8000534 <__aeabi_ui2d>
 8016c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c04:	4606      	mov	r6, r0
 8016c06:	460f      	mov	r7, r1
 8016c08:	bb03      	cbnz	r3, 8016c4c <_strtod_l+0xba4>
 8016c0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c0e:	9012      	str	r0, [sp, #72]	; 0x48
 8016c10:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016c16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c1e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016c22:	1a9b      	subs	r3, r3, r2
 8016c24:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c26:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016c2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016c2e:	f001 fd61 	bl	80186f4 <__ulp>
 8016c32:	4650      	mov	r0, sl
 8016c34:	ec53 2b10 	vmov	r2, r3, d0
 8016c38:	4659      	mov	r1, fp
 8016c3a:	f7e9 fcf5 	bl	8000628 <__aeabi_dmul>
 8016c3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016c42:	f7e9 fb3b 	bl	80002bc <__adddf3>
 8016c46:	4682      	mov	sl, r0
 8016c48:	468b      	mov	fp, r1
 8016c4a:	e772      	b.n	8016b32 <_strtod_l+0xa8a>
 8016c4c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016c50:	e7df      	b.n	8016c12 <_strtod_l+0xb6a>
 8016c52:	a30d      	add	r3, pc, #52	; (adr r3, 8016c88 <_strtod_l+0xbe0>)
 8016c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c58:	f7e9 ff58 	bl	8000b0c <__aeabi_dcmplt>
 8016c5c:	e79c      	b.n	8016b98 <_strtod_l+0xaf0>
 8016c5e:	2300      	movs	r3, #0
 8016c60:	930d      	str	r3, [sp, #52]	; 0x34
 8016c62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c66:	6013      	str	r3, [r2, #0]
 8016c68:	f7ff ba61 	b.w	801612e <_strtod_l+0x86>
 8016c6c:	2b65      	cmp	r3, #101	; 0x65
 8016c6e:	f04f 0200 	mov.w	r2, #0
 8016c72:	f43f ab4e 	beq.w	8016312 <_strtod_l+0x26a>
 8016c76:	2101      	movs	r1, #1
 8016c78:	4614      	mov	r4, r2
 8016c7a:	9104      	str	r1, [sp, #16]
 8016c7c:	f7ff bacb 	b.w	8016216 <_strtod_l+0x16e>
 8016c80:	ffc00000 	.word	0xffc00000
 8016c84:	41dfffff 	.word	0x41dfffff
 8016c88:	94a03595 	.word	0x94a03595
 8016c8c:	3fcfffff 	.word	0x3fcfffff

08016c90 <_strtod_r>:
 8016c90:	4b05      	ldr	r3, [pc, #20]	; (8016ca8 <_strtod_r+0x18>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	b410      	push	{r4}
 8016c96:	6a1b      	ldr	r3, [r3, #32]
 8016c98:	4c04      	ldr	r4, [pc, #16]	; (8016cac <_strtod_r+0x1c>)
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	bf08      	it	eq
 8016c9e:	4623      	moveq	r3, r4
 8016ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ca4:	f7ff ba00 	b.w	80160a8 <_strtod_l>
 8016ca8:	2000000c 	.word	0x2000000c
 8016cac:	20000070 	.word	0x20000070

08016cb0 <_strtol_l.isra.0>:
 8016cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cb4:	4680      	mov	r8, r0
 8016cb6:	4689      	mov	r9, r1
 8016cb8:	4692      	mov	sl, r2
 8016cba:	461e      	mov	r6, r3
 8016cbc:	460f      	mov	r7, r1
 8016cbe:	463d      	mov	r5, r7
 8016cc0:	9808      	ldr	r0, [sp, #32]
 8016cc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016cc6:	f001 fa0d 	bl	80180e4 <__locale_ctype_ptr_l>
 8016cca:	4420      	add	r0, r4
 8016ccc:	7843      	ldrb	r3, [r0, #1]
 8016cce:	f013 0308 	ands.w	r3, r3, #8
 8016cd2:	d132      	bne.n	8016d3a <_strtol_l.isra.0+0x8a>
 8016cd4:	2c2d      	cmp	r4, #45	; 0x2d
 8016cd6:	d132      	bne.n	8016d3e <_strtol_l.isra.0+0x8e>
 8016cd8:	787c      	ldrb	r4, [r7, #1]
 8016cda:	1cbd      	adds	r5, r7, #2
 8016cdc:	2201      	movs	r2, #1
 8016cde:	2e00      	cmp	r6, #0
 8016ce0:	d05d      	beq.n	8016d9e <_strtol_l.isra.0+0xee>
 8016ce2:	2e10      	cmp	r6, #16
 8016ce4:	d109      	bne.n	8016cfa <_strtol_l.isra.0+0x4a>
 8016ce6:	2c30      	cmp	r4, #48	; 0x30
 8016ce8:	d107      	bne.n	8016cfa <_strtol_l.isra.0+0x4a>
 8016cea:	782b      	ldrb	r3, [r5, #0]
 8016cec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016cf0:	2b58      	cmp	r3, #88	; 0x58
 8016cf2:	d14f      	bne.n	8016d94 <_strtol_l.isra.0+0xe4>
 8016cf4:	786c      	ldrb	r4, [r5, #1]
 8016cf6:	2610      	movs	r6, #16
 8016cf8:	3502      	adds	r5, #2
 8016cfa:	2a00      	cmp	r2, #0
 8016cfc:	bf14      	ite	ne
 8016cfe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016d02:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016d06:	2700      	movs	r7, #0
 8016d08:	fbb1 fcf6 	udiv	ip, r1, r6
 8016d0c:	4638      	mov	r0, r7
 8016d0e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016d12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016d16:	2b09      	cmp	r3, #9
 8016d18:	d817      	bhi.n	8016d4a <_strtol_l.isra.0+0x9a>
 8016d1a:	461c      	mov	r4, r3
 8016d1c:	42a6      	cmp	r6, r4
 8016d1e:	dd23      	ble.n	8016d68 <_strtol_l.isra.0+0xb8>
 8016d20:	1c7b      	adds	r3, r7, #1
 8016d22:	d007      	beq.n	8016d34 <_strtol_l.isra.0+0x84>
 8016d24:	4584      	cmp	ip, r0
 8016d26:	d31c      	bcc.n	8016d62 <_strtol_l.isra.0+0xb2>
 8016d28:	d101      	bne.n	8016d2e <_strtol_l.isra.0+0x7e>
 8016d2a:	45a6      	cmp	lr, r4
 8016d2c:	db19      	blt.n	8016d62 <_strtol_l.isra.0+0xb2>
 8016d2e:	fb00 4006 	mla	r0, r0, r6, r4
 8016d32:	2701      	movs	r7, #1
 8016d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d38:	e7eb      	b.n	8016d12 <_strtol_l.isra.0+0x62>
 8016d3a:	462f      	mov	r7, r5
 8016d3c:	e7bf      	b.n	8016cbe <_strtol_l.isra.0+0xe>
 8016d3e:	2c2b      	cmp	r4, #43	; 0x2b
 8016d40:	bf04      	itt	eq
 8016d42:	1cbd      	addeq	r5, r7, #2
 8016d44:	787c      	ldrbeq	r4, [r7, #1]
 8016d46:	461a      	mov	r2, r3
 8016d48:	e7c9      	b.n	8016cde <_strtol_l.isra.0+0x2e>
 8016d4a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016d4e:	2b19      	cmp	r3, #25
 8016d50:	d801      	bhi.n	8016d56 <_strtol_l.isra.0+0xa6>
 8016d52:	3c37      	subs	r4, #55	; 0x37
 8016d54:	e7e2      	b.n	8016d1c <_strtol_l.isra.0+0x6c>
 8016d56:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016d5a:	2b19      	cmp	r3, #25
 8016d5c:	d804      	bhi.n	8016d68 <_strtol_l.isra.0+0xb8>
 8016d5e:	3c57      	subs	r4, #87	; 0x57
 8016d60:	e7dc      	b.n	8016d1c <_strtol_l.isra.0+0x6c>
 8016d62:	f04f 37ff 	mov.w	r7, #4294967295
 8016d66:	e7e5      	b.n	8016d34 <_strtol_l.isra.0+0x84>
 8016d68:	1c7b      	adds	r3, r7, #1
 8016d6a:	d108      	bne.n	8016d7e <_strtol_l.isra.0+0xce>
 8016d6c:	2322      	movs	r3, #34	; 0x22
 8016d6e:	f8c8 3000 	str.w	r3, [r8]
 8016d72:	4608      	mov	r0, r1
 8016d74:	f1ba 0f00 	cmp.w	sl, #0
 8016d78:	d107      	bne.n	8016d8a <_strtol_l.isra.0+0xda>
 8016d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d7e:	b102      	cbz	r2, 8016d82 <_strtol_l.isra.0+0xd2>
 8016d80:	4240      	negs	r0, r0
 8016d82:	f1ba 0f00 	cmp.w	sl, #0
 8016d86:	d0f8      	beq.n	8016d7a <_strtol_l.isra.0+0xca>
 8016d88:	b10f      	cbz	r7, 8016d8e <_strtol_l.isra.0+0xde>
 8016d8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016d8e:	f8ca 9000 	str.w	r9, [sl]
 8016d92:	e7f2      	b.n	8016d7a <_strtol_l.isra.0+0xca>
 8016d94:	2430      	movs	r4, #48	; 0x30
 8016d96:	2e00      	cmp	r6, #0
 8016d98:	d1af      	bne.n	8016cfa <_strtol_l.isra.0+0x4a>
 8016d9a:	2608      	movs	r6, #8
 8016d9c:	e7ad      	b.n	8016cfa <_strtol_l.isra.0+0x4a>
 8016d9e:	2c30      	cmp	r4, #48	; 0x30
 8016da0:	d0a3      	beq.n	8016cea <_strtol_l.isra.0+0x3a>
 8016da2:	260a      	movs	r6, #10
 8016da4:	e7a9      	b.n	8016cfa <_strtol_l.isra.0+0x4a>
	...

08016da8 <_strtol_r>:
 8016da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016daa:	4c06      	ldr	r4, [pc, #24]	; (8016dc4 <_strtol_r+0x1c>)
 8016dac:	4d06      	ldr	r5, [pc, #24]	; (8016dc8 <_strtol_r+0x20>)
 8016dae:	6824      	ldr	r4, [r4, #0]
 8016db0:	6a24      	ldr	r4, [r4, #32]
 8016db2:	2c00      	cmp	r4, #0
 8016db4:	bf08      	it	eq
 8016db6:	462c      	moveq	r4, r5
 8016db8:	9400      	str	r4, [sp, #0]
 8016dba:	f7ff ff79 	bl	8016cb0 <_strtol_l.isra.0>
 8016dbe:	b003      	add	sp, #12
 8016dc0:	bd30      	pop	{r4, r5, pc}
 8016dc2:	bf00      	nop
 8016dc4:	2000000c 	.word	0x2000000c
 8016dc8:	20000070 	.word	0x20000070

08016dcc <_vsiprintf_r>:
 8016dcc:	b500      	push	{lr}
 8016dce:	b09b      	sub	sp, #108	; 0x6c
 8016dd0:	9100      	str	r1, [sp, #0]
 8016dd2:	9104      	str	r1, [sp, #16]
 8016dd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016dd8:	9105      	str	r1, [sp, #20]
 8016dda:	9102      	str	r1, [sp, #8]
 8016ddc:	4905      	ldr	r1, [pc, #20]	; (8016df4 <_vsiprintf_r+0x28>)
 8016dde:	9103      	str	r1, [sp, #12]
 8016de0:	4669      	mov	r1, sp
 8016de2:	f001 fecb 	bl	8018b7c <_svfiprintf_r>
 8016de6:	9b00      	ldr	r3, [sp, #0]
 8016de8:	2200      	movs	r2, #0
 8016dea:	701a      	strb	r2, [r3, #0]
 8016dec:	b01b      	add	sp, #108	; 0x6c
 8016dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8016df2:	bf00      	nop
 8016df4:	ffff0208 	.word	0xffff0208

08016df8 <vsiprintf>:
 8016df8:	4613      	mov	r3, r2
 8016dfa:	460a      	mov	r2, r1
 8016dfc:	4601      	mov	r1, r0
 8016dfe:	4802      	ldr	r0, [pc, #8]	; (8016e08 <vsiprintf+0x10>)
 8016e00:	6800      	ldr	r0, [r0, #0]
 8016e02:	f7ff bfe3 	b.w	8016dcc <_vsiprintf_r>
 8016e06:	bf00      	nop
 8016e08:	2000000c 	.word	0x2000000c

08016e0c <quorem>:
 8016e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e10:	6903      	ldr	r3, [r0, #16]
 8016e12:	690c      	ldr	r4, [r1, #16]
 8016e14:	42a3      	cmp	r3, r4
 8016e16:	4680      	mov	r8, r0
 8016e18:	f2c0 8082 	blt.w	8016f20 <quorem+0x114>
 8016e1c:	3c01      	subs	r4, #1
 8016e1e:	f101 0714 	add.w	r7, r1, #20
 8016e22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016e26:	f100 0614 	add.w	r6, r0, #20
 8016e2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016e2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016e32:	eb06 030c 	add.w	r3, r6, ip
 8016e36:	3501      	adds	r5, #1
 8016e38:	eb07 090c 	add.w	r9, r7, ip
 8016e3c:	9301      	str	r3, [sp, #4]
 8016e3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016e42:	b395      	cbz	r5, 8016eaa <quorem+0x9e>
 8016e44:	f04f 0a00 	mov.w	sl, #0
 8016e48:	4638      	mov	r0, r7
 8016e4a:	46b6      	mov	lr, r6
 8016e4c:	46d3      	mov	fp, sl
 8016e4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016e52:	b293      	uxth	r3, r2
 8016e54:	fb05 a303 	mla	r3, r5, r3, sl
 8016e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016e5c:	b29b      	uxth	r3, r3
 8016e5e:	ebab 0303 	sub.w	r3, fp, r3
 8016e62:	0c12      	lsrs	r2, r2, #16
 8016e64:	f8de b000 	ldr.w	fp, [lr]
 8016e68:	fb05 a202 	mla	r2, r5, r2, sl
 8016e6c:	fa13 f38b 	uxtah	r3, r3, fp
 8016e70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016e74:	fa1f fb82 	uxth.w	fp, r2
 8016e78:	f8de 2000 	ldr.w	r2, [lr]
 8016e7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e8a:	4581      	cmp	r9, r0
 8016e8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016e90:	f84e 3b04 	str.w	r3, [lr], #4
 8016e94:	d2db      	bcs.n	8016e4e <quorem+0x42>
 8016e96:	f856 300c 	ldr.w	r3, [r6, ip]
 8016e9a:	b933      	cbnz	r3, 8016eaa <quorem+0x9e>
 8016e9c:	9b01      	ldr	r3, [sp, #4]
 8016e9e:	3b04      	subs	r3, #4
 8016ea0:	429e      	cmp	r6, r3
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	d330      	bcc.n	8016f08 <quorem+0xfc>
 8016ea6:	f8c8 4010 	str.w	r4, [r8, #16]
 8016eaa:	4640      	mov	r0, r8
 8016eac:	f001 fbaa 	bl	8018604 <__mcmp>
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	db25      	blt.n	8016f00 <quorem+0xf4>
 8016eb4:	3501      	adds	r5, #1
 8016eb6:	4630      	mov	r0, r6
 8016eb8:	f04f 0c00 	mov.w	ip, #0
 8016ebc:	f857 2b04 	ldr.w	r2, [r7], #4
 8016ec0:	f8d0 e000 	ldr.w	lr, [r0]
 8016ec4:	b293      	uxth	r3, r2
 8016ec6:	ebac 0303 	sub.w	r3, ip, r3
 8016eca:	0c12      	lsrs	r2, r2, #16
 8016ecc:	fa13 f38e 	uxtah	r3, r3, lr
 8016ed0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016ed8:	b29b      	uxth	r3, r3
 8016eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ede:	45b9      	cmp	r9, r7
 8016ee0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016ee4:	f840 3b04 	str.w	r3, [r0], #4
 8016ee8:	d2e8      	bcs.n	8016ebc <quorem+0xb0>
 8016eea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016eee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016ef2:	b92a      	cbnz	r2, 8016f00 <quorem+0xf4>
 8016ef4:	3b04      	subs	r3, #4
 8016ef6:	429e      	cmp	r6, r3
 8016ef8:	461a      	mov	r2, r3
 8016efa:	d30b      	bcc.n	8016f14 <quorem+0x108>
 8016efc:	f8c8 4010 	str.w	r4, [r8, #16]
 8016f00:	4628      	mov	r0, r5
 8016f02:	b003      	add	sp, #12
 8016f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f08:	6812      	ldr	r2, [r2, #0]
 8016f0a:	3b04      	subs	r3, #4
 8016f0c:	2a00      	cmp	r2, #0
 8016f0e:	d1ca      	bne.n	8016ea6 <quorem+0x9a>
 8016f10:	3c01      	subs	r4, #1
 8016f12:	e7c5      	b.n	8016ea0 <quorem+0x94>
 8016f14:	6812      	ldr	r2, [r2, #0]
 8016f16:	3b04      	subs	r3, #4
 8016f18:	2a00      	cmp	r2, #0
 8016f1a:	d1ef      	bne.n	8016efc <quorem+0xf0>
 8016f1c:	3c01      	subs	r4, #1
 8016f1e:	e7ea      	b.n	8016ef6 <quorem+0xea>
 8016f20:	2000      	movs	r0, #0
 8016f22:	e7ee      	b.n	8016f02 <quorem+0xf6>
 8016f24:	0000      	movs	r0, r0
	...

08016f28 <_dtoa_r>:
 8016f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f2c:	ec57 6b10 	vmov	r6, r7, d0
 8016f30:	b097      	sub	sp, #92	; 0x5c
 8016f32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016f34:	9106      	str	r1, [sp, #24]
 8016f36:	4604      	mov	r4, r0
 8016f38:	920b      	str	r2, [sp, #44]	; 0x2c
 8016f3a:	9312      	str	r3, [sp, #72]	; 0x48
 8016f3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016f40:	e9cd 6700 	strd	r6, r7, [sp]
 8016f44:	b93d      	cbnz	r5, 8016f56 <_dtoa_r+0x2e>
 8016f46:	2010      	movs	r0, #16
 8016f48:	f001 f8ee 	bl	8018128 <malloc>
 8016f4c:	6260      	str	r0, [r4, #36]	; 0x24
 8016f4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016f52:	6005      	str	r5, [r0, #0]
 8016f54:	60c5      	str	r5, [r0, #12]
 8016f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f58:	6819      	ldr	r1, [r3, #0]
 8016f5a:	b151      	cbz	r1, 8016f72 <_dtoa_r+0x4a>
 8016f5c:	685a      	ldr	r2, [r3, #4]
 8016f5e:	604a      	str	r2, [r1, #4]
 8016f60:	2301      	movs	r3, #1
 8016f62:	4093      	lsls	r3, r2
 8016f64:	608b      	str	r3, [r1, #8]
 8016f66:	4620      	mov	r0, r4
 8016f68:	f001 f92c 	bl	80181c4 <_Bfree>
 8016f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f6e:	2200      	movs	r2, #0
 8016f70:	601a      	str	r2, [r3, #0]
 8016f72:	1e3b      	subs	r3, r7, #0
 8016f74:	bfbb      	ittet	lt
 8016f76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016f7a:	9301      	strlt	r3, [sp, #4]
 8016f7c:	2300      	movge	r3, #0
 8016f7e:	2201      	movlt	r2, #1
 8016f80:	bfac      	ite	ge
 8016f82:	f8c8 3000 	strge.w	r3, [r8]
 8016f86:	f8c8 2000 	strlt.w	r2, [r8]
 8016f8a:	4baf      	ldr	r3, [pc, #700]	; (8017248 <_dtoa_r+0x320>)
 8016f8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016f90:	ea33 0308 	bics.w	r3, r3, r8
 8016f94:	d114      	bne.n	8016fc0 <_dtoa_r+0x98>
 8016f96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f98:	f242 730f 	movw	r3, #9999	; 0x270f
 8016f9c:	6013      	str	r3, [r2, #0]
 8016f9e:	9b00      	ldr	r3, [sp, #0]
 8016fa0:	b923      	cbnz	r3, 8016fac <_dtoa_r+0x84>
 8016fa2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016fa6:	2800      	cmp	r0, #0
 8016fa8:	f000 8542 	beq.w	8017a30 <_dtoa_r+0xb08>
 8016fac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801725c <_dtoa_r+0x334>
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	f000 8544 	beq.w	8017a40 <_dtoa_r+0xb18>
 8016fb8:	f10b 0303 	add.w	r3, fp, #3
 8016fbc:	f000 bd3e 	b.w	8017a3c <_dtoa_r+0xb14>
 8016fc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	4630      	mov	r0, r6
 8016fca:	4639      	mov	r1, r7
 8016fcc:	f7e9 fd94 	bl	8000af8 <__aeabi_dcmpeq>
 8016fd0:	4681      	mov	r9, r0
 8016fd2:	b168      	cbz	r0, 8016ff0 <_dtoa_r+0xc8>
 8016fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	6013      	str	r3, [r2, #0]
 8016fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	f000 8524 	beq.w	8017a2a <_dtoa_r+0xb02>
 8016fe2:	4b9a      	ldr	r3, [pc, #616]	; (801724c <_dtoa_r+0x324>)
 8016fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016fe6:	f103 3bff 	add.w	fp, r3, #4294967295
 8016fea:	6013      	str	r3, [r2, #0]
 8016fec:	f000 bd28 	b.w	8017a40 <_dtoa_r+0xb18>
 8016ff0:	aa14      	add	r2, sp, #80	; 0x50
 8016ff2:	a915      	add	r1, sp, #84	; 0x54
 8016ff4:	ec47 6b10 	vmov	d0, r6, r7
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f001 fbf1 	bl	80187e0 <__d2b>
 8016ffe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017002:	9004      	str	r0, [sp, #16]
 8017004:	2d00      	cmp	r5, #0
 8017006:	d07c      	beq.n	8017102 <_dtoa_r+0x1da>
 8017008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801700c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017010:	46b2      	mov	sl, r6
 8017012:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801701a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801701e:	2200      	movs	r2, #0
 8017020:	4b8b      	ldr	r3, [pc, #556]	; (8017250 <_dtoa_r+0x328>)
 8017022:	4650      	mov	r0, sl
 8017024:	4659      	mov	r1, fp
 8017026:	f7e9 f947 	bl	80002b8 <__aeabi_dsub>
 801702a:	a381      	add	r3, pc, #516	; (adr r3, 8017230 <_dtoa_r+0x308>)
 801702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017030:	f7e9 fafa 	bl	8000628 <__aeabi_dmul>
 8017034:	a380      	add	r3, pc, #512	; (adr r3, 8017238 <_dtoa_r+0x310>)
 8017036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703a:	f7e9 f93f 	bl	80002bc <__adddf3>
 801703e:	4606      	mov	r6, r0
 8017040:	4628      	mov	r0, r5
 8017042:	460f      	mov	r7, r1
 8017044:	f7e9 fa86 	bl	8000554 <__aeabi_i2d>
 8017048:	a37d      	add	r3, pc, #500	; (adr r3, 8017240 <_dtoa_r+0x318>)
 801704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801704e:	f7e9 faeb 	bl	8000628 <__aeabi_dmul>
 8017052:	4602      	mov	r2, r0
 8017054:	460b      	mov	r3, r1
 8017056:	4630      	mov	r0, r6
 8017058:	4639      	mov	r1, r7
 801705a:	f7e9 f92f 	bl	80002bc <__adddf3>
 801705e:	4606      	mov	r6, r0
 8017060:	460f      	mov	r7, r1
 8017062:	f7e9 fd91 	bl	8000b88 <__aeabi_d2iz>
 8017066:	2200      	movs	r2, #0
 8017068:	4682      	mov	sl, r0
 801706a:	2300      	movs	r3, #0
 801706c:	4630      	mov	r0, r6
 801706e:	4639      	mov	r1, r7
 8017070:	f7e9 fd4c 	bl	8000b0c <__aeabi_dcmplt>
 8017074:	b148      	cbz	r0, 801708a <_dtoa_r+0x162>
 8017076:	4650      	mov	r0, sl
 8017078:	f7e9 fa6c 	bl	8000554 <__aeabi_i2d>
 801707c:	4632      	mov	r2, r6
 801707e:	463b      	mov	r3, r7
 8017080:	f7e9 fd3a 	bl	8000af8 <__aeabi_dcmpeq>
 8017084:	b908      	cbnz	r0, 801708a <_dtoa_r+0x162>
 8017086:	f10a 3aff 	add.w	sl, sl, #4294967295
 801708a:	f1ba 0f16 	cmp.w	sl, #22
 801708e:	d859      	bhi.n	8017144 <_dtoa_r+0x21c>
 8017090:	4970      	ldr	r1, [pc, #448]	; (8017254 <_dtoa_r+0x32c>)
 8017092:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017096:	e9dd 2300 	ldrd	r2, r3, [sp]
 801709a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801709e:	f7e9 fd53 	bl	8000b48 <__aeabi_dcmpgt>
 80170a2:	2800      	cmp	r0, #0
 80170a4:	d050      	beq.n	8017148 <_dtoa_r+0x220>
 80170a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80170aa:	2300      	movs	r3, #0
 80170ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80170ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80170b0:	1b5d      	subs	r5, r3, r5
 80170b2:	f1b5 0801 	subs.w	r8, r5, #1
 80170b6:	bf49      	itett	mi
 80170b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80170bc:	2300      	movpl	r3, #0
 80170be:	9305      	strmi	r3, [sp, #20]
 80170c0:	f04f 0800 	movmi.w	r8, #0
 80170c4:	bf58      	it	pl
 80170c6:	9305      	strpl	r3, [sp, #20]
 80170c8:	f1ba 0f00 	cmp.w	sl, #0
 80170cc:	db3e      	blt.n	801714c <_dtoa_r+0x224>
 80170ce:	2300      	movs	r3, #0
 80170d0:	44d0      	add	r8, sl
 80170d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80170d6:	9307      	str	r3, [sp, #28]
 80170d8:	9b06      	ldr	r3, [sp, #24]
 80170da:	2b09      	cmp	r3, #9
 80170dc:	f200 8090 	bhi.w	8017200 <_dtoa_r+0x2d8>
 80170e0:	2b05      	cmp	r3, #5
 80170e2:	bfc4      	itt	gt
 80170e4:	3b04      	subgt	r3, #4
 80170e6:	9306      	strgt	r3, [sp, #24]
 80170e8:	9b06      	ldr	r3, [sp, #24]
 80170ea:	f1a3 0302 	sub.w	r3, r3, #2
 80170ee:	bfcc      	ite	gt
 80170f0:	2500      	movgt	r5, #0
 80170f2:	2501      	movle	r5, #1
 80170f4:	2b03      	cmp	r3, #3
 80170f6:	f200 808f 	bhi.w	8017218 <_dtoa_r+0x2f0>
 80170fa:	e8df f003 	tbb	[pc, r3]
 80170fe:	7f7d      	.short	0x7f7d
 8017100:	7131      	.short	0x7131
 8017102:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017106:	441d      	add	r5, r3
 8017108:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801710c:	2820      	cmp	r0, #32
 801710e:	dd13      	ble.n	8017138 <_dtoa_r+0x210>
 8017110:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017114:	9b00      	ldr	r3, [sp, #0]
 8017116:	fa08 f800 	lsl.w	r8, r8, r0
 801711a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801711e:	fa23 f000 	lsr.w	r0, r3, r0
 8017122:	ea48 0000 	orr.w	r0, r8, r0
 8017126:	f7e9 fa05 	bl	8000534 <__aeabi_ui2d>
 801712a:	2301      	movs	r3, #1
 801712c:	4682      	mov	sl, r0
 801712e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017132:	3d01      	subs	r5, #1
 8017134:	9313      	str	r3, [sp, #76]	; 0x4c
 8017136:	e772      	b.n	801701e <_dtoa_r+0xf6>
 8017138:	9b00      	ldr	r3, [sp, #0]
 801713a:	f1c0 0020 	rsb	r0, r0, #32
 801713e:	fa03 f000 	lsl.w	r0, r3, r0
 8017142:	e7f0      	b.n	8017126 <_dtoa_r+0x1fe>
 8017144:	2301      	movs	r3, #1
 8017146:	e7b1      	b.n	80170ac <_dtoa_r+0x184>
 8017148:	900f      	str	r0, [sp, #60]	; 0x3c
 801714a:	e7b0      	b.n	80170ae <_dtoa_r+0x186>
 801714c:	9b05      	ldr	r3, [sp, #20]
 801714e:	eba3 030a 	sub.w	r3, r3, sl
 8017152:	9305      	str	r3, [sp, #20]
 8017154:	f1ca 0300 	rsb	r3, sl, #0
 8017158:	9307      	str	r3, [sp, #28]
 801715a:	2300      	movs	r3, #0
 801715c:	930e      	str	r3, [sp, #56]	; 0x38
 801715e:	e7bb      	b.n	80170d8 <_dtoa_r+0x1b0>
 8017160:	2301      	movs	r3, #1
 8017162:	930a      	str	r3, [sp, #40]	; 0x28
 8017164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017166:	2b00      	cmp	r3, #0
 8017168:	dd59      	ble.n	801721e <_dtoa_r+0x2f6>
 801716a:	9302      	str	r3, [sp, #8]
 801716c:	4699      	mov	r9, r3
 801716e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017170:	2200      	movs	r2, #0
 8017172:	6072      	str	r2, [r6, #4]
 8017174:	2204      	movs	r2, #4
 8017176:	f102 0014 	add.w	r0, r2, #20
 801717a:	4298      	cmp	r0, r3
 801717c:	6871      	ldr	r1, [r6, #4]
 801717e:	d953      	bls.n	8017228 <_dtoa_r+0x300>
 8017180:	4620      	mov	r0, r4
 8017182:	f000 ffeb 	bl	801815c <_Balloc>
 8017186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017188:	6030      	str	r0, [r6, #0]
 801718a:	f1b9 0f0e 	cmp.w	r9, #14
 801718e:	f8d3 b000 	ldr.w	fp, [r3]
 8017192:	f200 80e6 	bhi.w	8017362 <_dtoa_r+0x43a>
 8017196:	2d00      	cmp	r5, #0
 8017198:	f000 80e3 	beq.w	8017362 <_dtoa_r+0x43a>
 801719c:	ed9d 7b00 	vldr	d7, [sp]
 80171a0:	f1ba 0f00 	cmp.w	sl, #0
 80171a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80171a8:	dd74      	ble.n	8017294 <_dtoa_r+0x36c>
 80171aa:	4a2a      	ldr	r2, [pc, #168]	; (8017254 <_dtoa_r+0x32c>)
 80171ac:	f00a 030f 	and.w	r3, sl, #15
 80171b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80171b4:	ed93 7b00 	vldr	d7, [r3]
 80171b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80171bc:	06f0      	lsls	r0, r6, #27
 80171be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80171c2:	d565      	bpl.n	8017290 <_dtoa_r+0x368>
 80171c4:	4b24      	ldr	r3, [pc, #144]	; (8017258 <_dtoa_r+0x330>)
 80171c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80171ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80171ce:	f7e9 fb55 	bl	800087c <__aeabi_ddiv>
 80171d2:	e9cd 0100 	strd	r0, r1, [sp]
 80171d6:	f006 060f 	and.w	r6, r6, #15
 80171da:	2503      	movs	r5, #3
 80171dc:	4f1e      	ldr	r7, [pc, #120]	; (8017258 <_dtoa_r+0x330>)
 80171de:	e04c      	b.n	801727a <_dtoa_r+0x352>
 80171e0:	2301      	movs	r3, #1
 80171e2:	930a      	str	r3, [sp, #40]	; 0x28
 80171e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171e6:	4453      	add	r3, sl
 80171e8:	f103 0901 	add.w	r9, r3, #1
 80171ec:	9302      	str	r3, [sp, #8]
 80171ee:	464b      	mov	r3, r9
 80171f0:	2b01      	cmp	r3, #1
 80171f2:	bfb8      	it	lt
 80171f4:	2301      	movlt	r3, #1
 80171f6:	e7ba      	b.n	801716e <_dtoa_r+0x246>
 80171f8:	2300      	movs	r3, #0
 80171fa:	e7b2      	b.n	8017162 <_dtoa_r+0x23a>
 80171fc:	2300      	movs	r3, #0
 80171fe:	e7f0      	b.n	80171e2 <_dtoa_r+0x2ba>
 8017200:	2501      	movs	r5, #1
 8017202:	2300      	movs	r3, #0
 8017204:	9306      	str	r3, [sp, #24]
 8017206:	950a      	str	r5, [sp, #40]	; 0x28
 8017208:	f04f 33ff 	mov.w	r3, #4294967295
 801720c:	9302      	str	r3, [sp, #8]
 801720e:	4699      	mov	r9, r3
 8017210:	2200      	movs	r2, #0
 8017212:	2312      	movs	r3, #18
 8017214:	920b      	str	r2, [sp, #44]	; 0x2c
 8017216:	e7aa      	b.n	801716e <_dtoa_r+0x246>
 8017218:	2301      	movs	r3, #1
 801721a:	930a      	str	r3, [sp, #40]	; 0x28
 801721c:	e7f4      	b.n	8017208 <_dtoa_r+0x2e0>
 801721e:	2301      	movs	r3, #1
 8017220:	9302      	str	r3, [sp, #8]
 8017222:	4699      	mov	r9, r3
 8017224:	461a      	mov	r2, r3
 8017226:	e7f5      	b.n	8017214 <_dtoa_r+0x2ec>
 8017228:	3101      	adds	r1, #1
 801722a:	6071      	str	r1, [r6, #4]
 801722c:	0052      	lsls	r2, r2, #1
 801722e:	e7a2      	b.n	8017176 <_dtoa_r+0x24e>
 8017230:	636f4361 	.word	0x636f4361
 8017234:	3fd287a7 	.word	0x3fd287a7
 8017238:	8b60c8b3 	.word	0x8b60c8b3
 801723c:	3fc68a28 	.word	0x3fc68a28
 8017240:	509f79fb 	.word	0x509f79fb
 8017244:	3fd34413 	.word	0x3fd34413
 8017248:	7ff00000 	.word	0x7ff00000
 801724c:	0801a14c 	.word	0x0801a14c
 8017250:	3ff80000 	.word	0x3ff80000
 8017254:	0801a050 	.word	0x0801a050
 8017258:	0801a028 	.word	0x0801a028
 801725c:	08019fb1 	.word	0x08019fb1
 8017260:	07f1      	lsls	r1, r6, #31
 8017262:	d508      	bpl.n	8017276 <_dtoa_r+0x34e>
 8017264:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017268:	e9d7 2300 	ldrd	r2, r3, [r7]
 801726c:	f7e9 f9dc 	bl	8000628 <__aeabi_dmul>
 8017270:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017274:	3501      	adds	r5, #1
 8017276:	1076      	asrs	r6, r6, #1
 8017278:	3708      	adds	r7, #8
 801727a:	2e00      	cmp	r6, #0
 801727c:	d1f0      	bne.n	8017260 <_dtoa_r+0x338>
 801727e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017282:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017286:	f7e9 faf9 	bl	800087c <__aeabi_ddiv>
 801728a:	e9cd 0100 	strd	r0, r1, [sp]
 801728e:	e01a      	b.n	80172c6 <_dtoa_r+0x39e>
 8017290:	2502      	movs	r5, #2
 8017292:	e7a3      	b.n	80171dc <_dtoa_r+0x2b4>
 8017294:	f000 80a0 	beq.w	80173d8 <_dtoa_r+0x4b0>
 8017298:	f1ca 0600 	rsb	r6, sl, #0
 801729c:	4b9f      	ldr	r3, [pc, #636]	; (801751c <_dtoa_r+0x5f4>)
 801729e:	4fa0      	ldr	r7, [pc, #640]	; (8017520 <_dtoa_r+0x5f8>)
 80172a0:	f006 020f 	and.w	r2, r6, #15
 80172a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80172b0:	f7e9 f9ba 	bl	8000628 <__aeabi_dmul>
 80172b4:	e9cd 0100 	strd	r0, r1, [sp]
 80172b8:	1136      	asrs	r6, r6, #4
 80172ba:	2300      	movs	r3, #0
 80172bc:	2502      	movs	r5, #2
 80172be:	2e00      	cmp	r6, #0
 80172c0:	d17f      	bne.n	80173c2 <_dtoa_r+0x49a>
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d1e1      	bne.n	801728a <_dtoa_r+0x362>
 80172c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	f000 8087 	beq.w	80173dc <_dtoa_r+0x4b4>
 80172ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80172d2:	2200      	movs	r2, #0
 80172d4:	4b93      	ldr	r3, [pc, #588]	; (8017524 <_dtoa_r+0x5fc>)
 80172d6:	4630      	mov	r0, r6
 80172d8:	4639      	mov	r1, r7
 80172da:	f7e9 fc17 	bl	8000b0c <__aeabi_dcmplt>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d07c      	beq.n	80173dc <_dtoa_r+0x4b4>
 80172e2:	f1b9 0f00 	cmp.w	r9, #0
 80172e6:	d079      	beq.n	80173dc <_dtoa_r+0x4b4>
 80172e8:	9b02      	ldr	r3, [sp, #8]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	dd35      	ble.n	801735a <_dtoa_r+0x432>
 80172ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80172f2:	9308      	str	r3, [sp, #32]
 80172f4:	4639      	mov	r1, r7
 80172f6:	2200      	movs	r2, #0
 80172f8:	4b8b      	ldr	r3, [pc, #556]	; (8017528 <_dtoa_r+0x600>)
 80172fa:	4630      	mov	r0, r6
 80172fc:	f7e9 f994 	bl	8000628 <__aeabi_dmul>
 8017300:	e9cd 0100 	strd	r0, r1, [sp]
 8017304:	9f02      	ldr	r7, [sp, #8]
 8017306:	3501      	adds	r5, #1
 8017308:	4628      	mov	r0, r5
 801730a:	f7e9 f923 	bl	8000554 <__aeabi_i2d>
 801730e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017312:	f7e9 f989 	bl	8000628 <__aeabi_dmul>
 8017316:	2200      	movs	r2, #0
 8017318:	4b84      	ldr	r3, [pc, #528]	; (801752c <_dtoa_r+0x604>)
 801731a:	f7e8 ffcf 	bl	80002bc <__adddf3>
 801731e:	4605      	mov	r5, r0
 8017320:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017324:	2f00      	cmp	r7, #0
 8017326:	d15d      	bne.n	80173e4 <_dtoa_r+0x4bc>
 8017328:	2200      	movs	r2, #0
 801732a:	4b81      	ldr	r3, [pc, #516]	; (8017530 <_dtoa_r+0x608>)
 801732c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017330:	f7e8 ffc2 	bl	80002b8 <__aeabi_dsub>
 8017334:	462a      	mov	r2, r5
 8017336:	4633      	mov	r3, r6
 8017338:	e9cd 0100 	strd	r0, r1, [sp]
 801733c:	f7e9 fc04 	bl	8000b48 <__aeabi_dcmpgt>
 8017340:	2800      	cmp	r0, #0
 8017342:	f040 8288 	bne.w	8017856 <_dtoa_r+0x92e>
 8017346:	462a      	mov	r2, r5
 8017348:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801734c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017350:	f7e9 fbdc 	bl	8000b0c <__aeabi_dcmplt>
 8017354:	2800      	cmp	r0, #0
 8017356:	f040 827c 	bne.w	8017852 <_dtoa_r+0x92a>
 801735a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801735e:	e9cd 2300 	strd	r2, r3, [sp]
 8017362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017364:	2b00      	cmp	r3, #0
 8017366:	f2c0 8150 	blt.w	801760a <_dtoa_r+0x6e2>
 801736a:	f1ba 0f0e 	cmp.w	sl, #14
 801736e:	f300 814c 	bgt.w	801760a <_dtoa_r+0x6e2>
 8017372:	4b6a      	ldr	r3, [pc, #424]	; (801751c <_dtoa_r+0x5f4>)
 8017374:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017378:	ed93 7b00 	vldr	d7, [r3]
 801737c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801737e:	2b00      	cmp	r3, #0
 8017380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017384:	f280 80d8 	bge.w	8017538 <_dtoa_r+0x610>
 8017388:	f1b9 0f00 	cmp.w	r9, #0
 801738c:	f300 80d4 	bgt.w	8017538 <_dtoa_r+0x610>
 8017390:	f040 825e 	bne.w	8017850 <_dtoa_r+0x928>
 8017394:	2200      	movs	r2, #0
 8017396:	4b66      	ldr	r3, [pc, #408]	; (8017530 <_dtoa_r+0x608>)
 8017398:	ec51 0b17 	vmov	r0, r1, d7
 801739c:	f7e9 f944 	bl	8000628 <__aeabi_dmul>
 80173a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173a4:	f7e9 fbc6 	bl	8000b34 <__aeabi_dcmpge>
 80173a8:	464f      	mov	r7, r9
 80173aa:	464e      	mov	r6, r9
 80173ac:	2800      	cmp	r0, #0
 80173ae:	f040 8234 	bne.w	801781a <_dtoa_r+0x8f2>
 80173b2:	2331      	movs	r3, #49	; 0x31
 80173b4:	f10b 0501 	add.w	r5, fp, #1
 80173b8:	f88b 3000 	strb.w	r3, [fp]
 80173bc:	f10a 0a01 	add.w	sl, sl, #1
 80173c0:	e22f      	b.n	8017822 <_dtoa_r+0x8fa>
 80173c2:	07f2      	lsls	r2, r6, #31
 80173c4:	d505      	bpl.n	80173d2 <_dtoa_r+0x4aa>
 80173c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80173ca:	f7e9 f92d 	bl	8000628 <__aeabi_dmul>
 80173ce:	3501      	adds	r5, #1
 80173d0:	2301      	movs	r3, #1
 80173d2:	1076      	asrs	r6, r6, #1
 80173d4:	3708      	adds	r7, #8
 80173d6:	e772      	b.n	80172be <_dtoa_r+0x396>
 80173d8:	2502      	movs	r5, #2
 80173da:	e774      	b.n	80172c6 <_dtoa_r+0x39e>
 80173dc:	f8cd a020 	str.w	sl, [sp, #32]
 80173e0:	464f      	mov	r7, r9
 80173e2:	e791      	b.n	8017308 <_dtoa_r+0x3e0>
 80173e4:	4b4d      	ldr	r3, [pc, #308]	; (801751c <_dtoa_r+0x5f4>)
 80173e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80173ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80173ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d047      	beq.n	8017484 <_dtoa_r+0x55c>
 80173f4:	4602      	mov	r2, r0
 80173f6:	460b      	mov	r3, r1
 80173f8:	2000      	movs	r0, #0
 80173fa:	494e      	ldr	r1, [pc, #312]	; (8017534 <_dtoa_r+0x60c>)
 80173fc:	f7e9 fa3e 	bl	800087c <__aeabi_ddiv>
 8017400:	462a      	mov	r2, r5
 8017402:	4633      	mov	r3, r6
 8017404:	f7e8 ff58 	bl	80002b8 <__aeabi_dsub>
 8017408:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801740c:	465d      	mov	r5, fp
 801740e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017412:	f7e9 fbb9 	bl	8000b88 <__aeabi_d2iz>
 8017416:	4606      	mov	r6, r0
 8017418:	f7e9 f89c 	bl	8000554 <__aeabi_i2d>
 801741c:	4602      	mov	r2, r0
 801741e:	460b      	mov	r3, r1
 8017420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017424:	f7e8 ff48 	bl	80002b8 <__aeabi_dsub>
 8017428:	3630      	adds	r6, #48	; 0x30
 801742a:	f805 6b01 	strb.w	r6, [r5], #1
 801742e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017432:	e9cd 0100 	strd	r0, r1, [sp]
 8017436:	f7e9 fb69 	bl	8000b0c <__aeabi_dcmplt>
 801743a:	2800      	cmp	r0, #0
 801743c:	d163      	bne.n	8017506 <_dtoa_r+0x5de>
 801743e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017442:	2000      	movs	r0, #0
 8017444:	4937      	ldr	r1, [pc, #220]	; (8017524 <_dtoa_r+0x5fc>)
 8017446:	f7e8 ff37 	bl	80002b8 <__aeabi_dsub>
 801744a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801744e:	f7e9 fb5d 	bl	8000b0c <__aeabi_dcmplt>
 8017452:	2800      	cmp	r0, #0
 8017454:	f040 80b7 	bne.w	80175c6 <_dtoa_r+0x69e>
 8017458:	eba5 030b 	sub.w	r3, r5, fp
 801745c:	429f      	cmp	r7, r3
 801745e:	f77f af7c 	ble.w	801735a <_dtoa_r+0x432>
 8017462:	2200      	movs	r2, #0
 8017464:	4b30      	ldr	r3, [pc, #192]	; (8017528 <_dtoa_r+0x600>)
 8017466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801746a:	f7e9 f8dd 	bl	8000628 <__aeabi_dmul>
 801746e:	2200      	movs	r2, #0
 8017470:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017474:	4b2c      	ldr	r3, [pc, #176]	; (8017528 <_dtoa_r+0x600>)
 8017476:	e9dd 0100 	ldrd	r0, r1, [sp]
 801747a:	f7e9 f8d5 	bl	8000628 <__aeabi_dmul>
 801747e:	e9cd 0100 	strd	r0, r1, [sp]
 8017482:	e7c4      	b.n	801740e <_dtoa_r+0x4e6>
 8017484:	462a      	mov	r2, r5
 8017486:	4633      	mov	r3, r6
 8017488:	f7e9 f8ce 	bl	8000628 <__aeabi_dmul>
 801748c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017490:	eb0b 0507 	add.w	r5, fp, r7
 8017494:	465e      	mov	r6, fp
 8017496:	e9dd 0100 	ldrd	r0, r1, [sp]
 801749a:	f7e9 fb75 	bl	8000b88 <__aeabi_d2iz>
 801749e:	4607      	mov	r7, r0
 80174a0:	f7e9 f858 	bl	8000554 <__aeabi_i2d>
 80174a4:	3730      	adds	r7, #48	; 0x30
 80174a6:	4602      	mov	r2, r0
 80174a8:	460b      	mov	r3, r1
 80174aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174ae:	f7e8 ff03 	bl	80002b8 <__aeabi_dsub>
 80174b2:	f806 7b01 	strb.w	r7, [r6], #1
 80174b6:	42ae      	cmp	r6, r5
 80174b8:	e9cd 0100 	strd	r0, r1, [sp]
 80174bc:	f04f 0200 	mov.w	r2, #0
 80174c0:	d126      	bne.n	8017510 <_dtoa_r+0x5e8>
 80174c2:	4b1c      	ldr	r3, [pc, #112]	; (8017534 <_dtoa_r+0x60c>)
 80174c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80174c8:	f7e8 fef8 	bl	80002bc <__adddf3>
 80174cc:	4602      	mov	r2, r0
 80174ce:	460b      	mov	r3, r1
 80174d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174d4:	f7e9 fb38 	bl	8000b48 <__aeabi_dcmpgt>
 80174d8:	2800      	cmp	r0, #0
 80174da:	d174      	bne.n	80175c6 <_dtoa_r+0x69e>
 80174dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80174e0:	2000      	movs	r0, #0
 80174e2:	4914      	ldr	r1, [pc, #80]	; (8017534 <_dtoa_r+0x60c>)
 80174e4:	f7e8 fee8 	bl	80002b8 <__aeabi_dsub>
 80174e8:	4602      	mov	r2, r0
 80174ea:	460b      	mov	r3, r1
 80174ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174f0:	f7e9 fb0c 	bl	8000b0c <__aeabi_dcmplt>
 80174f4:	2800      	cmp	r0, #0
 80174f6:	f43f af30 	beq.w	801735a <_dtoa_r+0x432>
 80174fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80174fe:	2b30      	cmp	r3, #48	; 0x30
 8017500:	f105 32ff 	add.w	r2, r5, #4294967295
 8017504:	d002      	beq.n	801750c <_dtoa_r+0x5e4>
 8017506:	f8dd a020 	ldr.w	sl, [sp, #32]
 801750a:	e04a      	b.n	80175a2 <_dtoa_r+0x67a>
 801750c:	4615      	mov	r5, r2
 801750e:	e7f4      	b.n	80174fa <_dtoa_r+0x5d2>
 8017510:	4b05      	ldr	r3, [pc, #20]	; (8017528 <_dtoa_r+0x600>)
 8017512:	f7e9 f889 	bl	8000628 <__aeabi_dmul>
 8017516:	e9cd 0100 	strd	r0, r1, [sp]
 801751a:	e7bc      	b.n	8017496 <_dtoa_r+0x56e>
 801751c:	0801a050 	.word	0x0801a050
 8017520:	0801a028 	.word	0x0801a028
 8017524:	3ff00000 	.word	0x3ff00000
 8017528:	40240000 	.word	0x40240000
 801752c:	401c0000 	.word	0x401c0000
 8017530:	40140000 	.word	0x40140000
 8017534:	3fe00000 	.word	0x3fe00000
 8017538:	e9dd 6700 	ldrd	r6, r7, [sp]
 801753c:	465d      	mov	r5, fp
 801753e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017542:	4630      	mov	r0, r6
 8017544:	4639      	mov	r1, r7
 8017546:	f7e9 f999 	bl	800087c <__aeabi_ddiv>
 801754a:	f7e9 fb1d 	bl	8000b88 <__aeabi_d2iz>
 801754e:	4680      	mov	r8, r0
 8017550:	f7e9 f800 	bl	8000554 <__aeabi_i2d>
 8017554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017558:	f7e9 f866 	bl	8000628 <__aeabi_dmul>
 801755c:	4602      	mov	r2, r0
 801755e:	460b      	mov	r3, r1
 8017560:	4630      	mov	r0, r6
 8017562:	4639      	mov	r1, r7
 8017564:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017568:	f7e8 fea6 	bl	80002b8 <__aeabi_dsub>
 801756c:	f805 6b01 	strb.w	r6, [r5], #1
 8017570:	eba5 060b 	sub.w	r6, r5, fp
 8017574:	45b1      	cmp	r9, r6
 8017576:	4602      	mov	r2, r0
 8017578:	460b      	mov	r3, r1
 801757a:	d139      	bne.n	80175f0 <_dtoa_r+0x6c8>
 801757c:	f7e8 fe9e 	bl	80002bc <__adddf3>
 8017580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017584:	4606      	mov	r6, r0
 8017586:	460f      	mov	r7, r1
 8017588:	f7e9 fade 	bl	8000b48 <__aeabi_dcmpgt>
 801758c:	b9c8      	cbnz	r0, 80175c2 <_dtoa_r+0x69a>
 801758e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017592:	4630      	mov	r0, r6
 8017594:	4639      	mov	r1, r7
 8017596:	f7e9 faaf 	bl	8000af8 <__aeabi_dcmpeq>
 801759a:	b110      	cbz	r0, 80175a2 <_dtoa_r+0x67a>
 801759c:	f018 0f01 	tst.w	r8, #1
 80175a0:	d10f      	bne.n	80175c2 <_dtoa_r+0x69a>
 80175a2:	9904      	ldr	r1, [sp, #16]
 80175a4:	4620      	mov	r0, r4
 80175a6:	f000 fe0d 	bl	80181c4 <_Bfree>
 80175aa:	2300      	movs	r3, #0
 80175ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175ae:	702b      	strb	r3, [r5, #0]
 80175b0:	f10a 0301 	add.w	r3, sl, #1
 80175b4:	6013      	str	r3, [r2, #0]
 80175b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	f000 8241 	beq.w	8017a40 <_dtoa_r+0xb18>
 80175be:	601d      	str	r5, [r3, #0]
 80175c0:	e23e      	b.n	8017a40 <_dtoa_r+0xb18>
 80175c2:	f8cd a020 	str.w	sl, [sp, #32]
 80175c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80175ca:	2a39      	cmp	r2, #57	; 0x39
 80175cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80175d0:	d108      	bne.n	80175e4 <_dtoa_r+0x6bc>
 80175d2:	459b      	cmp	fp, r3
 80175d4:	d10a      	bne.n	80175ec <_dtoa_r+0x6c4>
 80175d6:	9b08      	ldr	r3, [sp, #32]
 80175d8:	3301      	adds	r3, #1
 80175da:	9308      	str	r3, [sp, #32]
 80175dc:	2330      	movs	r3, #48	; 0x30
 80175de:	f88b 3000 	strb.w	r3, [fp]
 80175e2:	465b      	mov	r3, fp
 80175e4:	781a      	ldrb	r2, [r3, #0]
 80175e6:	3201      	adds	r2, #1
 80175e8:	701a      	strb	r2, [r3, #0]
 80175ea:	e78c      	b.n	8017506 <_dtoa_r+0x5de>
 80175ec:	461d      	mov	r5, r3
 80175ee:	e7ea      	b.n	80175c6 <_dtoa_r+0x69e>
 80175f0:	2200      	movs	r2, #0
 80175f2:	4b9b      	ldr	r3, [pc, #620]	; (8017860 <_dtoa_r+0x938>)
 80175f4:	f7e9 f818 	bl	8000628 <__aeabi_dmul>
 80175f8:	2200      	movs	r2, #0
 80175fa:	2300      	movs	r3, #0
 80175fc:	4606      	mov	r6, r0
 80175fe:	460f      	mov	r7, r1
 8017600:	f7e9 fa7a 	bl	8000af8 <__aeabi_dcmpeq>
 8017604:	2800      	cmp	r0, #0
 8017606:	d09a      	beq.n	801753e <_dtoa_r+0x616>
 8017608:	e7cb      	b.n	80175a2 <_dtoa_r+0x67a>
 801760a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801760c:	2a00      	cmp	r2, #0
 801760e:	f000 808b 	beq.w	8017728 <_dtoa_r+0x800>
 8017612:	9a06      	ldr	r2, [sp, #24]
 8017614:	2a01      	cmp	r2, #1
 8017616:	dc6e      	bgt.n	80176f6 <_dtoa_r+0x7ce>
 8017618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801761a:	2a00      	cmp	r2, #0
 801761c:	d067      	beq.n	80176ee <_dtoa_r+0x7c6>
 801761e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017622:	9f07      	ldr	r7, [sp, #28]
 8017624:	9d05      	ldr	r5, [sp, #20]
 8017626:	9a05      	ldr	r2, [sp, #20]
 8017628:	2101      	movs	r1, #1
 801762a:	441a      	add	r2, r3
 801762c:	4620      	mov	r0, r4
 801762e:	9205      	str	r2, [sp, #20]
 8017630:	4498      	add	r8, r3
 8017632:	f000 fea5 	bl	8018380 <__i2b>
 8017636:	4606      	mov	r6, r0
 8017638:	2d00      	cmp	r5, #0
 801763a:	dd0c      	ble.n	8017656 <_dtoa_r+0x72e>
 801763c:	f1b8 0f00 	cmp.w	r8, #0
 8017640:	dd09      	ble.n	8017656 <_dtoa_r+0x72e>
 8017642:	4545      	cmp	r5, r8
 8017644:	9a05      	ldr	r2, [sp, #20]
 8017646:	462b      	mov	r3, r5
 8017648:	bfa8      	it	ge
 801764a:	4643      	movge	r3, r8
 801764c:	1ad2      	subs	r2, r2, r3
 801764e:	9205      	str	r2, [sp, #20]
 8017650:	1aed      	subs	r5, r5, r3
 8017652:	eba8 0803 	sub.w	r8, r8, r3
 8017656:	9b07      	ldr	r3, [sp, #28]
 8017658:	b1eb      	cbz	r3, 8017696 <_dtoa_r+0x76e>
 801765a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801765c:	2b00      	cmp	r3, #0
 801765e:	d067      	beq.n	8017730 <_dtoa_r+0x808>
 8017660:	b18f      	cbz	r7, 8017686 <_dtoa_r+0x75e>
 8017662:	4631      	mov	r1, r6
 8017664:	463a      	mov	r2, r7
 8017666:	4620      	mov	r0, r4
 8017668:	f000 ff2a 	bl	80184c0 <__pow5mult>
 801766c:	9a04      	ldr	r2, [sp, #16]
 801766e:	4601      	mov	r1, r0
 8017670:	4606      	mov	r6, r0
 8017672:	4620      	mov	r0, r4
 8017674:	f000 fe8d 	bl	8018392 <__multiply>
 8017678:	9904      	ldr	r1, [sp, #16]
 801767a:	9008      	str	r0, [sp, #32]
 801767c:	4620      	mov	r0, r4
 801767e:	f000 fda1 	bl	80181c4 <_Bfree>
 8017682:	9b08      	ldr	r3, [sp, #32]
 8017684:	9304      	str	r3, [sp, #16]
 8017686:	9b07      	ldr	r3, [sp, #28]
 8017688:	1bda      	subs	r2, r3, r7
 801768a:	d004      	beq.n	8017696 <_dtoa_r+0x76e>
 801768c:	9904      	ldr	r1, [sp, #16]
 801768e:	4620      	mov	r0, r4
 8017690:	f000 ff16 	bl	80184c0 <__pow5mult>
 8017694:	9004      	str	r0, [sp, #16]
 8017696:	2101      	movs	r1, #1
 8017698:	4620      	mov	r0, r4
 801769a:	f000 fe71 	bl	8018380 <__i2b>
 801769e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176a0:	4607      	mov	r7, r0
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	f000 81d0 	beq.w	8017a48 <_dtoa_r+0xb20>
 80176a8:	461a      	mov	r2, r3
 80176aa:	4601      	mov	r1, r0
 80176ac:	4620      	mov	r0, r4
 80176ae:	f000 ff07 	bl	80184c0 <__pow5mult>
 80176b2:	9b06      	ldr	r3, [sp, #24]
 80176b4:	2b01      	cmp	r3, #1
 80176b6:	4607      	mov	r7, r0
 80176b8:	dc40      	bgt.n	801773c <_dtoa_r+0x814>
 80176ba:	9b00      	ldr	r3, [sp, #0]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d139      	bne.n	8017734 <_dtoa_r+0x80c>
 80176c0:	9b01      	ldr	r3, [sp, #4]
 80176c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d136      	bne.n	8017738 <_dtoa_r+0x810>
 80176ca:	9b01      	ldr	r3, [sp, #4]
 80176cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80176d0:	0d1b      	lsrs	r3, r3, #20
 80176d2:	051b      	lsls	r3, r3, #20
 80176d4:	b12b      	cbz	r3, 80176e2 <_dtoa_r+0x7ba>
 80176d6:	9b05      	ldr	r3, [sp, #20]
 80176d8:	3301      	adds	r3, #1
 80176da:	9305      	str	r3, [sp, #20]
 80176dc:	f108 0801 	add.w	r8, r8, #1
 80176e0:	2301      	movs	r3, #1
 80176e2:	9307      	str	r3, [sp, #28]
 80176e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d12a      	bne.n	8017740 <_dtoa_r+0x818>
 80176ea:	2001      	movs	r0, #1
 80176ec:	e030      	b.n	8017750 <_dtoa_r+0x828>
 80176ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80176f4:	e795      	b.n	8017622 <_dtoa_r+0x6fa>
 80176f6:	9b07      	ldr	r3, [sp, #28]
 80176f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80176fc:	42bb      	cmp	r3, r7
 80176fe:	bfbf      	itttt	lt
 8017700:	9b07      	ldrlt	r3, [sp, #28]
 8017702:	9707      	strlt	r7, [sp, #28]
 8017704:	1afa      	sublt	r2, r7, r3
 8017706:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017708:	bfbb      	ittet	lt
 801770a:	189b      	addlt	r3, r3, r2
 801770c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801770e:	1bdf      	subge	r7, r3, r7
 8017710:	2700      	movlt	r7, #0
 8017712:	f1b9 0f00 	cmp.w	r9, #0
 8017716:	bfb5      	itete	lt
 8017718:	9b05      	ldrlt	r3, [sp, #20]
 801771a:	9d05      	ldrge	r5, [sp, #20]
 801771c:	eba3 0509 	sublt.w	r5, r3, r9
 8017720:	464b      	movge	r3, r9
 8017722:	bfb8      	it	lt
 8017724:	2300      	movlt	r3, #0
 8017726:	e77e      	b.n	8017626 <_dtoa_r+0x6fe>
 8017728:	9f07      	ldr	r7, [sp, #28]
 801772a:	9d05      	ldr	r5, [sp, #20]
 801772c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801772e:	e783      	b.n	8017638 <_dtoa_r+0x710>
 8017730:	9a07      	ldr	r2, [sp, #28]
 8017732:	e7ab      	b.n	801768c <_dtoa_r+0x764>
 8017734:	2300      	movs	r3, #0
 8017736:	e7d4      	b.n	80176e2 <_dtoa_r+0x7ba>
 8017738:	9b00      	ldr	r3, [sp, #0]
 801773a:	e7d2      	b.n	80176e2 <_dtoa_r+0x7ba>
 801773c:	2300      	movs	r3, #0
 801773e:	9307      	str	r3, [sp, #28]
 8017740:	693b      	ldr	r3, [r7, #16]
 8017742:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017746:	6918      	ldr	r0, [r3, #16]
 8017748:	f000 fdcc 	bl	80182e4 <__hi0bits>
 801774c:	f1c0 0020 	rsb	r0, r0, #32
 8017750:	4440      	add	r0, r8
 8017752:	f010 001f 	ands.w	r0, r0, #31
 8017756:	d047      	beq.n	80177e8 <_dtoa_r+0x8c0>
 8017758:	f1c0 0320 	rsb	r3, r0, #32
 801775c:	2b04      	cmp	r3, #4
 801775e:	dd3b      	ble.n	80177d8 <_dtoa_r+0x8b0>
 8017760:	9b05      	ldr	r3, [sp, #20]
 8017762:	f1c0 001c 	rsb	r0, r0, #28
 8017766:	4403      	add	r3, r0
 8017768:	9305      	str	r3, [sp, #20]
 801776a:	4405      	add	r5, r0
 801776c:	4480      	add	r8, r0
 801776e:	9b05      	ldr	r3, [sp, #20]
 8017770:	2b00      	cmp	r3, #0
 8017772:	dd05      	ble.n	8017780 <_dtoa_r+0x858>
 8017774:	461a      	mov	r2, r3
 8017776:	9904      	ldr	r1, [sp, #16]
 8017778:	4620      	mov	r0, r4
 801777a:	f000 feef 	bl	801855c <__lshift>
 801777e:	9004      	str	r0, [sp, #16]
 8017780:	f1b8 0f00 	cmp.w	r8, #0
 8017784:	dd05      	ble.n	8017792 <_dtoa_r+0x86a>
 8017786:	4639      	mov	r1, r7
 8017788:	4642      	mov	r2, r8
 801778a:	4620      	mov	r0, r4
 801778c:	f000 fee6 	bl	801855c <__lshift>
 8017790:	4607      	mov	r7, r0
 8017792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017794:	b353      	cbz	r3, 80177ec <_dtoa_r+0x8c4>
 8017796:	4639      	mov	r1, r7
 8017798:	9804      	ldr	r0, [sp, #16]
 801779a:	f000 ff33 	bl	8018604 <__mcmp>
 801779e:	2800      	cmp	r0, #0
 80177a0:	da24      	bge.n	80177ec <_dtoa_r+0x8c4>
 80177a2:	2300      	movs	r3, #0
 80177a4:	220a      	movs	r2, #10
 80177a6:	9904      	ldr	r1, [sp, #16]
 80177a8:	4620      	mov	r0, r4
 80177aa:	f000 fd22 	bl	80181f2 <__multadd>
 80177ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177b0:	9004      	str	r0, [sp, #16]
 80177b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	f000 814d 	beq.w	8017a56 <_dtoa_r+0xb2e>
 80177bc:	2300      	movs	r3, #0
 80177be:	4631      	mov	r1, r6
 80177c0:	220a      	movs	r2, #10
 80177c2:	4620      	mov	r0, r4
 80177c4:	f000 fd15 	bl	80181f2 <__multadd>
 80177c8:	9b02      	ldr	r3, [sp, #8]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	4606      	mov	r6, r0
 80177ce:	dc4f      	bgt.n	8017870 <_dtoa_r+0x948>
 80177d0:	9b06      	ldr	r3, [sp, #24]
 80177d2:	2b02      	cmp	r3, #2
 80177d4:	dd4c      	ble.n	8017870 <_dtoa_r+0x948>
 80177d6:	e011      	b.n	80177fc <_dtoa_r+0x8d4>
 80177d8:	d0c9      	beq.n	801776e <_dtoa_r+0x846>
 80177da:	9a05      	ldr	r2, [sp, #20]
 80177dc:	331c      	adds	r3, #28
 80177de:	441a      	add	r2, r3
 80177e0:	9205      	str	r2, [sp, #20]
 80177e2:	441d      	add	r5, r3
 80177e4:	4498      	add	r8, r3
 80177e6:	e7c2      	b.n	801776e <_dtoa_r+0x846>
 80177e8:	4603      	mov	r3, r0
 80177ea:	e7f6      	b.n	80177da <_dtoa_r+0x8b2>
 80177ec:	f1b9 0f00 	cmp.w	r9, #0
 80177f0:	dc38      	bgt.n	8017864 <_dtoa_r+0x93c>
 80177f2:	9b06      	ldr	r3, [sp, #24]
 80177f4:	2b02      	cmp	r3, #2
 80177f6:	dd35      	ble.n	8017864 <_dtoa_r+0x93c>
 80177f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80177fc:	9b02      	ldr	r3, [sp, #8]
 80177fe:	b963      	cbnz	r3, 801781a <_dtoa_r+0x8f2>
 8017800:	4639      	mov	r1, r7
 8017802:	2205      	movs	r2, #5
 8017804:	4620      	mov	r0, r4
 8017806:	f000 fcf4 	bl	80181f2 <__multadd>
 801780a:	4601      	mov	r1, r0
 801780c:	4607      	mov	r7, r0
 801780e:	9804      	ldr	r0, [sp, #16]
 8017810:	f000 fef8 	bl	8018604 <__mcmp>
 8017814:	2800      	cmp	r0, #0
 8017816:	f73f adcc 	bgt.w	80173b2 <_dtoa_r+0x48a>
 801781a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801781c:	465d      	mov	r5, fp
 801781e:	ea6f 0a03 	mvn.w	sl, r3
 8017822:	f04f 0900 	mov.w	r9, #0
 8017826:	4639      	mov	r1, r7
 8017828:	4620      	mov	r0, r4
 801782a:	f000 fccb 	bl	80181c4 <_Bfree>
 801782e:	2e00      	cmp	r6, #0
 8017830:	f43f aeb7 	beq.w	80175a2 <_dtoa_r+0x67a>
 8017834:	f1b9 0f00 	cmp.w	r9, #0
 8017838:	d005      	beq.n	8017846 <_dtoa_r+0x91e>
 801783a:	45b1      	cmp	r9, r6
 801783c:	d003      	beq.n	8017846 <_dtoa_r+0x91e>
 801783e:	4649      	mov	r1, r9
 8017840:	4620      	mov	r0, r4
 8017842:	f000 fcbf 	bl	80181c4 <_Bfree>
 8017846:	4631      	mov	r1, r6
 8017848:	4620      	mov	r0, r4
 801784a:	f000 fcbb 	bl	80181c4 <_Bfree>
 801784e:	e6a8      	b.n	80175a2 <_dtoa_r+0x67a>
 8017850:	2700      	movs	r7, #0
 8017852:	463e      	mov	r6, r7
 8017854:	e7e1      	b.n	801781a <_dtoa_r+0x8f2>
 8017856:	f8dd a020 	ldr.w	sl, [sp, #32]
 801785a:	463e      	mov	r6, r7
 801785c:	e5a9      	b.n	80173b2 <_dtoa_r+0x48a>
 801785e:	bf00      	nop
 8017860:	40240000 	.word	0x40240000
 8017864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017866:	f8cd 9008 	str.w	r9, [sp, #8]
 801786a:	2b00      	cmp	r3, #0
 801786c:	f000 80fa 	beq.w	8017a64 <_dtoa_r+0xb3c>
 8017870:	2d00      	cmp	r5, #0
 8017872:	dd05      	ble.n	8017880 <_dtoa_r+0x958>
 8017874:	4631      	mov	r1, r6
 8017876:	462a      	mov	r2, r5
 8017878:	4620      	mov	r0, r4
 801787a:	f000 fe6f 	bl	801855c <__lshift>
 801787e:	4606      	mov	r6, r0
 8017880:	9b07      	ldr	r3, [sp, #28]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d04c      	beq.n	8017920 <_dtoa_r+0x9f8>
 8017886:	6871      	ldr	r1, [r6, #4]
 8017888:	4620      	mov	r0, r4
 801788a:	f000 fc67 	bl	801815c <_Balloc>
 801788e:	6932      	ldr	r2, [r6, #16]
 8017890:	3202      	adds	r2, #2
 8017892:	4605      	mov	r5, r0
 8017894:	0092      	lsls	r2, r2, #2
 8017896:	f106 010c 	add.w	r1, r6, #12
 801789a:	300c      	adds	r0, #12
 801789c:	f7fd fd08 	bl	80152b0 <memcpy>
 80178a0:	2201      	movs	r2, #1
 80178a2:	4629      	mov	r1, r5
 80178a4:	4620      	mov	r0, r4
 80178a6:	f000 fe59 	bl	801855c <__lshift>
 80178aa:	9b00      	ldr	r3, [sp, #0]
 80178ac:	f8cd b014 	str.w	fp, [sp, #20]
 80178b0:	f003 0301 	and.w	r3, r3, #1
 80178b4:	46b1      	mov	r9, r6
 80178b6:	9307      	str	r3, [sp, #28]
 80178b8:	4606      	mov	r6, r0
 80178ba:	4639      	mov	r1, r7
 80178bc:	9804      	ldr	r0, [sp, #16]
 80178be:	f7ff faa5 	bl	8016e0c <quorem>
 80178c2:	4649      	mov	r1, r9
 80178c4:	4605      	mov	r5, r0
 80178c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80178ca:	9804      	ldr	r0, [sp, #16]
 80178cc:	f000 fe9a 	bl	8018604 <__mcmp>
 80178d0:	4632      	mov	r2, r6
 80178d2:	9000      	str	r0, [sp, #0]
 80178d4:	4639      	mov	r1, r7
 80178d6:	4620      	mov	r0, r4
 80178d8:	f000 feae 	bl	8018638 <__mdiff>
 80178dc:	68c3      	ldr	r3, [r0, #12]
 80178de:	4602      	mov	r2, r0
 80178e0:	bb03      	cbnz	r3, 8017924 <_dtoa_r+0x9fc>
 80178e2:	4601      	mov	r1, r0
 80178e4:	9008      	str	r0, [sp, #32]
 80178e6:	9804      	ldr	r0, [sp, #16]
 80178e8:	f000 fe8c 	bl	8018604 <__mcmp>
 80178ec:	9a08      	ldr	r2, [sp, #32]
 80178ee:	4603      	mov	r3, r0
 80178f0:	4611      	mov	r1, r2
 80178f2:	4620      	mov	r0, r4
 80178f4:	9308      	str	r3, [sp, #32]
 80178f6:	f000 fc65 	bl	80181c4 <_Bfree>
 80178fa:	9b08      	ldr	r3, [sp, #32]
 80178fc:	b9a3      	cbnz	r3, 8017928 <_dtoa_r+0xa00>
 80178fe:	9a06      	ldr	r2, [sp, #24]
 8017900:	b992      	cbnz	r2, 8017928 <_dtoa_r+0xa00>
 8017902:	9a07      	ldr	r2, [sp, #28]
 8017904:	b982      	cbnz	r2, 8017928 <_dtoa_r+0xa00>
 8017906:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801790a:	d029      	beq.n	8017960 <_dtoa_r+0xa38>
 801790c:	9b00      	ldr	r3, [sp, #0]
 801790e:	2b00      	cmp	r3, #0
 8017910:	dd01      	ble.n	8017916 <_dtoa_r+0x9ee>
 8017912:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017916:	9b05      	ldr	r3, [sp, #20]
 8017918:	1c5d      	adds	r5, r3, #1
 801791a:	f883 8000 	strb.w	r8, [r3]
 801791e:	e782      	b.n	8017826 <_dtoa_r+0x8fe>
 8017920:	4630      	mov	r0, r6
 8017922:	e7c2      	b.n	80178aa <_dtoa_r+0x982>
 8017924:	2301      	movs	r3, #1
 8017926:	e7e3      	b.n	80178f0 <_dtoa_r+0x9c8>
 8017928:	9a00      	ldr	r2, [sp, #0]
 801792a:	2a00      	cmp	r2, #0
 801792c:	db04      	blt.n	8017938 <_dtoa_r+0xa10>
 801792e:	d125      	bne.n	801797c <_dtoa_r+0xa54>
 8017930:	9a06      	ldr	r2, [sp, #24]
 8017932:	bb1a      	cbnz	r2, 801797c <_dtoa_r+0xa54>
 8017934:	9a07      	ldr	r2, [sp, #28]
 8017936:	bb0a      	cbnz	r2, 801797c <_dtoa_r+0xa54>
 8017938:	2b00      	cmp	r3, #0
 801793a:	ddec      	ble.n	8017916 <_dtoa_r+0x9ee>
 801793c:	2201      	movs	r2, #1
 801793e:	9904      	ldr	r1, [sp, #16]
 8017940:	4620      	mov	r0, r4
 8017942:	f000 fe0b 	bl	801855c <__lshift>
 8017946:	4639      	mov	r1, r7
 8017948:	9004      	str	r0, [sp, #16]
 801794a:	f000 fe5b 	bl	8018604 <__mcmp>
 801794e:	2800      	cmp	r0, #0
 8017950:	dc03      	bgt.n	801795a <_dtoa_r+0xa32>
 8017952:	d1e0      	bne.n	8017916 <_dtoa_r+0x9ee>
 8017954:	f018 0f01 	tst.w	r8, #1
 8017958:	d0dd      	beq.n	8017916 <_dtoa_r+0x9ee>
 801795a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801795e:	d1d8      	bne.n	8017912 <_dtoa_r+0x9ea>
 8017960:	9b05      	ldr	r3, [sp, #20]
 8017962:	9a05      	ldr	r2, [sp, #20]
 8017964:	1c5d      	adds	r5, r3, #1
 8017966:	2339      	movs	r3, #57	; 0x39
 8017968:	7013      	strb	r3, [r2, #0]
 801796a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801796e:	2b39      	cmp	r3, #57	; 0x39
 8017970:	f105 32ff 	add.w	r2, r5, #4294967295
 8017974:	d04f      	beq.n	8017a16 <_dtoa_r+0xaee>
 8017976:	3301      	adds	r3, #1
 8017978:	7013      	strb	r3, [r2, #0]
 801797a:	e754      	b.n	8017826 <_dtoa_r+0x8fe>
 801797c:	9a05      	ldr	r2, [sp, #20]
 801797e:	2b00      	cmp	r3, #0
 8017980:	f102 0501 	add.w	r5, r2, #1
 8017984:	dd06      	ble.n	8017994 <_dtoa_r+0xa6c>
 8017986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801798a:	d0e9      	beq.n	8017960 <_dtoa_r+0xa38>
 801798c:	f108 0801 	add.w	r8, r8, #1
 8017990:	9b05      	ldr	r3, [sp, #20]
 8017992:	e7c2      	b.n	801791a <_dtoa_r+0x9f2>
 8017994:	9a02      	ldr	r2, [sp, #8]
 8017996:	f805 8c01 	strb.w	r8, [r5, #-1]
 801799a:	eba5 030b 	sub.w	r3, r5, fp
 801799e:	4293      	cmp	r3, r2
 80179a0:	d021      	beq.n	80179e6 <_dtoa_r+0xabe>
 80179a2:	2300      	movs	r3, #0
 80179a4:	220a      	movs	r2, #10
 80179a6:	9904      	ldr	r1, [sp, #16]
 80179a8:	4620      	mov	r0, r4
 80179aa:	f000 fc22 	bl	80181f2 <__multadd>
 80179ae:	45b1      	cmp	r9, r6
 80179b0:	9004      	str	r0, [sp, #16]
 80179b2:	f04f 0300 	mov.w	r3, #0
 80179b6:	f04f 020a 	mov.w	r2, #10
 80179ba:	4649      	mov	r1, r9
 80179bc:	4620      	mov	r0, r4
 80179be:	d105      	bne.n	80179cc <_dtoa_r+0xaa4>
 80179c0:	f000 fc17 	bl	80181f2 <__multadd>
 80179c4:	4681      	mov	r9, r0
 80179c6:	4606      	mov	r6, r0
 80179c8:	9505      	str	r5, [sp, #20]
 80179ca:	e776      	b.n	80178ba <_dtoa_r+0x992>
 80179cc:	f000 fc11 	bl	80181f2 <__multadd>
 80179d0:	4631      	mov	r1, r6
 80179d2:	4681      	mov	r9, r0
 80179d4:	2300      	movs	r3, #0
 80179d6:	220a      	movs	r2, #10
 80179d8:	4620      	mov	r0, r4
 80179da:	f000 fc0a 	bl	80181f2 <__multadd>
 80179de:	4606      	mov	r6, r0
 80179e0:	e7f2      	b.n	80179c8 <_dtoa_r+0xaa0>
 80179e2:	f04f 0900 	mov.w	r9, #0
 80179e6:	2201      	movs	r2, #1
 80179e8:	9904      	ldr	r1, [sp, #16]
 80179ea:	4620      	mov	r0, r4
 80179ec:	f000 fdb6 	bl	801855c <__lshift>
 80179f0:	4639      	mov	r1, r7
 80179f2:	9004      	str	r0, [sp, #16]
 80179f4:	f000 fe06 	bl	8018604 <__mcmp>
 80179f8:	2800      	cmp	r0, #0
 80179fa:	dcb6      	bgt.n	801796a <_dtoa_r+0xa42>
 80179fc:	d102      	bne.n	8017a04 <_dtoa_r+0xadc>
 80179fe:	f018 0f01 	tst.w	r8, #1
 8017a02:	d1b2      	bne.n	801796a <_dtoa_r+0xa42>
 8017a04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017a08:	2b30      	cmp	r3, #48	; 0x30
 8017a0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8017a0e:	f47f af0a 	bne.w	8017826 <_dtoa_r+0x8fe>
 8017a12:	4615      	mov	r5, r2
 8017a14:	e7f6      	b.n	8017a04 <_dtoa_r+0xadc>
 8017a16:	4593      	cmp	fp, r2
 8017a18:	d105      	bne.n	8017a26 <_dtoa_r+0xafe>
 8017a1a:	2331      	movs	r3, #49	; 0x31
 8017a1c:	f10a 0a01 	add.w	sl, sl, #1
 8017a20:	f88b 3000 	strb.w	r3, [fp]
 8017a24:	e6ff      	b.n	8017826 <_dtoa_r+0x8fe>
 8017a26:	4615      	mov	r5, r2
 8017a28:	e79f      	b.n	801796a <_dtoa_r+0xa42>
 8017a2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017a90 <_dtoa_r+0xb68>
 8017a2e:	e007      	b.n	8017a40 <_dtoa_r+0xb18>
 8017a30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017a94 <_dtoa_r+0xb6c>
 8017a36:	b11b      	cbz	r3, 8017a40 <_dtoa_r+0xb18>
 8017a38:	f10b 0308 	add.w	r3, fp, #8
 8017a3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017a3e:	6013      	str	r3, [r2, #0]
 8017a40:	4658      	mov	r0, fp
 8017a42:	b017      	add	sp, #92	; 0x5c
 8017a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a48:	9b06      	ldr	r3, [sp, #24]
 8017a4a:	2b01      	cmp	r3, #1
 8017a4c:	f77f ae35 	ble.w	80176ba <_dtoa_r+0x792>
 8017a50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a52:	9307      	str	r3, [sp, #28]
 8017a54:	e649      	b.n	80176ea <_dtoa_r+0x7c2>
 8017a56:	9b02      	ldr	r3, [sp, #8]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	dc03      	bgt.n	8017a64 <_dtoa_r+0xb3c>
 8017a5c:	9b06      	ldr	r3, [sp, #24]
 8017a5e:	2b02      	cmp	r3, #2
 8017a60:	f73f aecc 	bgt.w	80177fc <_dtoa_r+0x8d4>
 8017a64:	465d      	mov	r5, fp
 8017a66:	4639      	mov	r1, r7
 8017a68:	9804      	ldr	r0, [sp, #16]
 8017a6a:	f7ff f9cf 	bl	8016e0c <quorem>
 8017a6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017a72:	f805 8b01 	strb.w	r8, [r5], #1
 8017a76:	9a02      	ldr	r2, [sp, #8]
 8017a78:	eba5 030b 	sub.w	r3, r5, fp
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	ddb0      	ble.n	80179e2 <_dtoa_r+0xaba>
 8017a80:	2300      	movs	r3, #0
 8017a82:	220a      	movs	r2, #10
 8017a84:	9904      	ldr	r1, [sp, #16]
 8017a86:	4620      	mov	r0, r4
 8017a88:	f000 fbb3 	bl	80181f2 <__multadd>
 8017a8c:	9004      	str	r0, [sp, #16]
 8017a8e:	e7ea      	b.n	8017a66 <_dtoa_r+0xb3e>
 8017a90:	0801a14b 	.word	0x0801a14b
 8017a94:	08019fa8 	.word	0x08019fa8

08017a98 <rshift>:
 8017a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a9a:	6906      	ldr	r6, [r0, #16]
 8017a9c:	114b      	asrs	r3, r1, #5
 8017a9e:	429e      	cmp	r6, r3
 8017aa0:	f100 0414 	add.w	r4, r0, #20
 8017aa4:	dd30      	ble.n	8017b08 <rshift+0x70>
 8017aa6:	f011 011f 	ands.w	r1, r1, #31
 8017aaa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017aae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017ab2:	d108      	bne.n	8017ac6 <rshift+0x2e>
 8017ab4:	4621      	mov	r1, r4
 8017ab6:	42b2      	cmp	r2, r6
 8017ab8:	460b      	mov	r3, r1
 8017aba:	d211      	bcs.n	8017ae0 <rshift+0x48>
 8017abc:	f852 3b04 	ldr.w	r3, [r2], #4
 8017ac0:	f841 3b04 	str.w	r3, [r1], #4
 8017ac4:	e7f7      	b.n	8017ab6 <rshift+0x1e>
 8017ac6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017aca:	f1c1 0c20 	rsb	ip, r1, #32
 8017ace:	40cd      	lsrs	r5, r1
 8017ad0:	3204      	adds	r2, #4
 8017ad2:	4623      	mov	r3, r4
 8017ad4:	42b2      	cmp	r2, r6
 8017ad6:	4617      	mov	r7, r2
 8017ad8:	d30c      	bcc.n	8017af4 <rshift+0x5c>
 8017ada:	601d      	str	r5, [r3, #0]
 8017adc:	b105      	cbz	r5, 8017ae0 <rshift+0x48>
 8017ade:	3304      	adds	r3, #4
 8017ae0:	1b1a      	subs	r2, r3, r4
 8017ae2:	42a3      	cmp	r3, r4
 8017ae4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017ae8:	bf08      	it	eq
 8017aea:	2300      	moveq	r3, #0
 8017aec:	6102      	str	r2, [r0, #16]
 8017aee:	bf08      	it	eq
 8017af0:	6143      	streq	r3, [r0, #20]
 8017af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017af4:	683f      	ldr	r7, [r7, #0]
 8017af6:	fa07 f70c 	lsl.w	r7, r7, ip
 8017afa:	433d      	orrs	r5, r7
 8017afc:	f843 5b04 	str.w	r5, [r3], #4
 8017b00:	f852 5b04 	ldr.w	r5, [r2], #4
 8017b04:	40cd      	lsrs	r5, r1
 8017b06:	e7e5      	b.n	8017ad4 <rshift+0x3c>
 8017b08:	4623      	mov	r3, r4
 8017b0a:	e7e9      	b.n	8017ae0 <rshift+0x48>

08017b0c <__hexdig_fun>:
 8017b0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017b10:	2b09      	cmp	r3, #9
 8017b12:	d802      	bhi.n	8017b1a <__hexdig_fun+0xe>
 8017b14:	3820      	subs	r0, #32
 8017b16:	b2c0      	uxtb	r0, r0
 8017b18:	4770      	bx	lr
 8017b1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017b1e:	2b05      	cmp	r3, #5
 8017b20:	d801      	bhi.n	8017b26 <__hexdig_fun+0x1a>
 8017b22:	3847      	subs	r0, #71	; 0x47
 8017b24:	e7f7      	b.n	8017b16 <__hexdig_fun+0xa>
 8017b26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017b2a:	2b05      	cmp	r3, #5
 8017b2c:	d801      	bhi.n	8017b32 <__hexdig_fun+0x26>
 8017b2e:	3827      	subs	r0, #39	; 0x27
 8017b30:	e7f1      	b.n	8017b16 <__hexdig_fun+0xa>
 8017b32:	2000      	movs	r0, #0
 8017b34:	4770      	bx	lr

08017b36 <__gethex>:
 8017b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b3a:	b08b      	sub	sp, #44	; 0x2c
 8017b3c:	468a      	mov	sl, r1
 8017b3e:	9002      	str	r0, [sp, #8]
 8017b40:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017b42:	9306      	str	r3, [sp, #24]
 8017b44:	4690      	mov	r8, r2
 8017b46:	f000 fadf 	bl	8018108 <__localeconv_l>
 8017b4a:	6803      	ldr	r3, [r0, #0]
 8017b4c:	9303      	str	r3, [sp, #12]
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f7e8 fb56 	bl	8000200 <strlen>
 8017b54:	9b03      	ldr	r3, [sp, #12]
 8017b56:	9001      	str	r0, [sp, #4]
 8017b58:	4403      	add	r3, r0
 8017b5a:	f04f 0b00 	mov.w	fp, #0
 8017b5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017b62:	9307      	str	r3, [sp, #28]
 8017b64:	f8da 3000 	ldr.w	r3, [sl]
 8017b68:	3302      	adds	r3, #2
 8017b6a:	461f      	mov	r7, r3
 8017b6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017b70:	2830      	cmp	r0, #48	; 0x30
 8017b72:	d06c      	beq.n	8017c4e <__gethex+0x118>
 8017b74:	f7ff ffca 	bl	8017b0c <__hexdig_fun>
 8017b78:	4604      	mov	r4, r0
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	d16a      	bne.n	8017c54 <__gethex+0x11e>
 8017b7e:	9a01      	ldr	r2, [sp, #4]
 8017b80:	9903      	ldr	r1, [sp, #12]
 8017b82:	4638      	mov	r0, r7
 8017b84:	f001 fc36 	bl	80193f4 <strncmp>
 8017b88:	2800      	cmp	r0, #0
 8017b8a:	d166      	bne.n	8017c5a <__gethex+0x124>
 8017b8c:	9b01      	ldr	r3, [sp, #4]
 8017b8e:	5cf8      	ldrb	r0, [r7, r3]
 8017b90:	18fe      	adds	r6, r7, r3
 8017b92:	f7ff ffbb 	bl	8017b0c <__hexdig_fun>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	d062      	beq.n	8017c60 <__gethex+0x12a>
 8017b9a:	4633      	mov	r3, r6
 8017b9c:	7818      	ldrb	r0, [r3, #0]
 8017b9e:	2830      	cmp	r0, #48	; 0x30
 8017ba0:	461f      	mov	r7, r3
 8017ba2:	f103 0301 	add.w	r3, r3, #1
 8017ba6:	d0f9      	beq.n	8017b9c <__gethex+0x66>
 8017ba8:	f7ff ffb0 	bl	8017b0c <__hexdig_fun>
 8017bac:	fab0 f580 	clz	r5, r0
 8017bb0:	096d      	lsrs	r5, r5, #5
 8017bb2:	4634      	mov	r4, r6
 8017bb4:	f04f 0b01 	mov.w	fp, #1
 8017bb8:	463a      	mov	r2, r7
 8017bba:	4616      	mov	r6, r2
 8017bbc:	3201      	adds	r2, #1
 8017bbe:	7830      	ldrb	r0, [r6, #0]
 8017bc0:	f7ff ffa4 	bl	8017b0c <__hexdig_fun>
 8017bc4:	2800      	cmp	r0, #0
 8017bc6:	d1f8      	bne.n	8017bba <__gethex+0x84>
 8017bc8:	9a01      	ldr	r2, [sp, #4]
 8017bca:	9903      	ldr	r1, [sp, #12]
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f001 fc11 	bl	80193f4 <strncmp>
 8017bd2:	b950      	cbnz	r0, 8017bea <__gethex+0xb4>
 8017bd4:	b954      	cbnz	r4, 8017bec <__gethex+0xb6>
 8017bd6:	9b01      	ldr	r3, [sp, #4]
 8017bd8:	18f4      	adds	r4, r6, r3
 8017bda:	4622      	mov	r2, r4
 8017bdc:	4616      	mov	r6, r2
 8017bde:	3201      	adds	r2, #1
 8017be0:	7830      	ldrb	r0, [r6, #0]
 8017be2:	f7ff ff93 	bl	8017b0c <__hexdig_fun>
 8017be6:	2800      	cmp	r0, #0
 8017be8:	d1f8      	bne.n	8017bdc <__gethex+0xa6>
 8017bea:	b10c      	cbz	r4, 8017bf0 <__gethex+0xba>
 8017bec:	1ba4      	subs	r4, r4, r6
 8017bee:	00a4      	lsls	r4, r4, #2
 8017bf0:	7833      	ldrb	r3, [r6, #0]
 8017bf2:	2b50      	cmp	r3, #80	; 0x50
 8017bf4:	d001      	beq.n	8017bfa <__gethex+0xc4>
 8017bf6:	2b70      	cmp	r3, #112	; 0x70
 8017bf8:	d140      	bne.n	8017c7c <__gethex+0x146>
 8017bfa:	7873      	ldrb	r3, [r6, #1]
 8017bfc:	2b2b      	cmp	r3, #43	; 0x2b
 8017bfe:	d031      	beq.n	8017c64 <__gethex+0x12e>
 8017c00:	2b2d      	cmp	r3, #45	; 0x2d
 8017c02:	d033      	beq.n	8017c6c <__gethex+0x136>
 8017c04:	1c71      	adds	r1, r6, #1
 8017c06:	f04f 0900 	mov.w	r9, #0
 8017c0a:	7808      	ldrb	r0, [r1, #0]
 8017c0c:	f7ff ff7e 	bl	8017b0c <__hexdig_fun>
 8017c10:	1e43      	subs	r3, r0, #1
 8017c12:	b2db      	uxtb	r3, r3
 8017c14:	2b18      	cmp	r3, #24
 8017c16:	d831      	bhi.n	8017c7c <__gethex+0x146>
 8017c18:	f1a0 0210 	sub.w	r2, r0, #16
 8017c1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017c20:	f7ff ff74 	bl	8017b0c <__hexdig_fun>
 8017c24:	1e43      	subs	r3, r0, #1
 8017c26:	b2db      	uxtb	r3, r3
 8017c28:	2b18      	cmp	r3, #24
 8017c2a:	d922      	bls.n	8017c72 <__gethex+0x13c>
 8017c2c:	f1b9 0f00 	cmp.w	r9, #0
 8017c30:	d000      	beq.n	8017c34 <__gethex+0xfe>
 8017c32:	4252      	negs	r2, r2
 8017c34:	4414      	add	r4, r2
 8017c36:	f8ca 1000 	str.w	r1, [sl]
 8017c3a:	b30d      	cbz	r5, 8017c80 <__gethex+0x14a>
 8017c3c:	f1bb 0f00 	cmp.w	fp, #0
 8017c40:	bf0c      	ite	eq
 8017c42:	2706      	moveq	r7, #6
 8017c44:	2700      	movne	r7, #0
 8017c46:	4638      	mov	r0, r7
 8017c48:	b00b      	add	sp, #44	; 0x2c
 8017c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4e:	f10b 0b01 	add.w	fp, fp, #1
 8017c52:	e78a      	b.n	8017b6a <__gethex+0x34>
 8017c54:	2500      	movs	r5, #0
 8017c56:	462c      	mov	r4, r5
 8017c58:	e7ae      	b.n	8017bb8 <__gethex+0x82>
 8017c5a:	463e      	mov	r6, r7
 8017c5c:	2501      	movs	r5, #1
 8017c5e:	e7c7      	b.n	8017bf0 <__gethex+0xba>
 8017c60:	4604      	mov	r4, r0
 8017c62:	e7fb      	b.n	8017c5c <__gethex+0x126>
 8017c64:	f04f 0900 	mov.w	r9, #0
 8017c68:	1cb1      	adds	r1, r6, #2
 8017c6a:	e7ce      	b.n	8017c0a <__gethex+0xd4>
 8017c6c:	f04f 0901 	mov.w	r9, #1
 8017c70:	e7fa      	b.n	8017c68 <__gethex+0x132>
 8017c72:	230a      	movs	r3, #10
 8017c74:	fb03 0202 	mla	r2, r3, r2, r0
 8017c78:	3a10      	subs	r2, #16
 8017c7a:	e7cf      	b.n	8017c1c <__gethex+0xe6>
 8017c7c:	4631      	mov	r1, r6
 8017c7e:	e7da      	b.n	8017c36 <__gethex+0x100>
 8017c80:	1bf3      	subs	r3, r6, r7
 8017c82:	3b01      	subs	r3, #1
 8017c84:	4629      	mov	r1, r5
 8017c86:	2b07      	cmp	r3, #7
 8017c88:	dc49      	bgt.n	8017d1e <__gethex+0x1e8>
 8017c8a:	9802      	ldr	r0, [sp, #8]
 8017c8c:	f000 fa66 	bl	801815c <_Balloc>
 8017c90:	9b01      	ldr	r3, [sp, #4]
 8017c92:	f100 0914 	add.w	r9, r0, #20
 8017c96:	f04f 0b00 	mov.w	fp, #0
 8017c9a:	f1c3 0301 	rsb	r3, r3, #1
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	f8cd 9010 	str.w	r9, [sp, #16]
 8017ca4:	46da      	mov	sl, fp
 8017ca6:	9308      	str	r3, [sp, #32]
 8017ca8:	42b7      	cmp	r7, r6
 8017caa:	d33b      	bcc.n	8017d24 <__gethex+0x1ee>
 8017cac:	9804      	ldr	r0, [sp, #16]
 8017cae:	f840 ab04 	str.w	sl, [r0], #4
 8017cb2:	eba0 0009 	sub.w	r0, r0, r9
 8017cb6:	1080      	asrs	r0, r0, #2
 8017cb8:	6128      	str	r0, [r5, #16]
 8017cba:	0147      	lsls	r7, r0, #5
 8017cbc:	4650      	mov	r0, sl
 8017cbe:	f000 fb11 	bl	80182e4 <__hi0bits>
 8017cc2:	f8d8 6000 	ldr.w	r6, [r8]
 8017cc6:	1a3f      	subs	r7, r7, r0
 8017cc8:	42b7      	cmp	r7, r6
 8017cca:	dd64      	ble.n	8017d96 <__gethex+0x260>
 8017ccc:	1bbf      	subs	r7, r7, r6
 8017cce:	4639      	mov	r1, r7
 8017cd0:	4628      	mov	r0, r5
 8017cd2:	f000 fe21 	bl	8018918 <__any_on>
 8017cd6:	4682      	mov	sl, r0
 8017cd8:	b178      	cbz	r0, 8017cfa <__gethex+0x1c4>
 8017cda:	1e7b      	subs	r3, r7, #1
 8017cdc:	1159      	asrs	r1, r3, #5
 8017cde:	f003 021f 	and.w	r2, r3, #31
 8017ce2:	f04f 0a01 	mov.w	sl, #1
 8017ce6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017cea:	fa0a f202 	lsl.w	r2, sl, r2
 8017cee:	420a      	tst	r2, r1
 8017cf0:	d003      	beq.n	8017cfa <__gethex+0x1c4>
 8017cf2:	4553      	cmp	r3, sl
 8017cf4:	dc46      	bgt.n	8017d84 <__gethex+0x24e>
 8017cf6:	f04f 0a02 	mov.w	sl, #2
 8017cfa:	4639      	mov	r1, r7
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	f7ff fecb 	bl	8017a98 <rshift>
 8017d02:	443c      	add	r4, r7
 8017d04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d08:	42a3      	cmp	r3, r4
 8017d0a:	da52      	bge.n	8017db2 <__gethex+0x27c>
 8017d0c:	4629      	mov	r1, r5
 8017d0e:	9802      	ldr	r0, [sp, #8]
 8017d10:	f000 fa58 	bl	80181c4 <_Bfree>
 8017d14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d16:	2300      	movs	r3, #0
 8017d18:	6013      	str	r3, [r2, #0]
 8017d1a:	27a3      	movs	r7, #163	; 0xa3
 8017d1c:	e793      	b.n	8017c46 <__gethex+0x110>
 8017d1e:	3101      	adds	r1, #1
 8017d20:	105b      	asrs	r3, r3, #1
 8017d22:	e7b0      	b.n	8017c86 <__gethex+0x150>
 8017d24:	1e73      	subs	r3, r6, #1
 8017d26:	9305      	str	r3, [sp, #20]
 8017d28:	9a07      	ldr	r2, [sp, #28]
 8017d2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d018      	beq.n	8017d64 <__gethex+0x22e>
 8017d32:	f1bb 0f20 	cmp.w	fp, #32
 8017d36:	d107      	bne.n	8017d48 <__gethex+0x212>
 8017d38:	9b04      	ldr	r3, [sp, #16]
 8017d3a:	f8c3 a000 	str.w	sl, [r3]
 8017d3e:	3304      	adds	r3, #4
 8017d40:	f04f 0a00 	mov.w	sl, #0
 8017d44:	9304      	str	r3, [sp, #16]
 8017d46:	46d3      	mov	fp, sl
 8017d48:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017d4c:	f7ff fede 	bl	8017b0c <__hexdig_fun>
 8017d50:	f000 000f 	and.w	r0, r0, #15
 8017d54:	fa00 f00b 	lsl.w	r0, r0, fp
 8017d58:	ea4a 0a00 	orr.w	sl, sl, r0
 8017d5c:	f10b 0b04 	add.w	fp, fp, #4
 8017d60:	9b05      	ldr	r3, [sp, #20]
 8017d62:	e00d      	b.n	8017d80 <__gethex+0x24a>
 8017d64:	9b05      	ldr	r3, [sp, #20]
 8017d66:	9a08      	ldr	r2, [sp, #32]
 8017d68:	4413      	add	r3, r2
 8017d6a:	42bb      	cmp	r3, r7
 8017d6c:	d3e1      	bcc.n	8017d32 <__gethex+0x1fc>
 8017d6e:	4618      	mov	r0, r3
 8017d70:	9a01      	ldr	r2, [sp, #4]
 8017d72:	9903      	ldr	r1, [sp, #12]
 8017d74:	9309      	str	r3, [sp, #36]	; 0x24
 8017d76:	f001 fb3d 	bl	80193f4 <strncmp>
 8017d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d7c:	2800      	cmp	r0, #0
 8017d7e:	d1d8      	bne.n	8017d32 <__gethex+0x1fc>
 8017d80:	461e      	mov	r6, r3
 8017d82:	e791      	b.n	8017ca8 <__gethex+0x172>
 8017d84:	1eb9      	subs	r1, r7, #2
 8017d86:	4628      	mov	r0, r5
 8017d88:	f000 fdc6 	bl	8018918 <__any_on>
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	d0b2      	beq.n	8017cf6 <__gethex+0x1c0>
 8017d90:	f04f 0a03 	mov.w	sl, #3
 8017d94:	e7b1      	b.n	8017cfa <__gethex+0x1c4>
 8017d96:	da09      	bge.n	8017dac <__gethex+0x276>
 8017d98:	1bf7      	subs	r7, r6, r7
 8017d9a:	4629      	mov	r1, r5
 8017d9c:	463a      	mov	r2, r7
 8017d9e:	9802      	ldr	r0, [sp, #8]
 8017da0:	f000 fbdc 	bl	801855c <__lshift>
 8017da4:	1be4      	subs	r4, r4, r7
 8017da6:	4605      	mov	r5, r0
 8017da8:	f100 0914 	add.w	r9, r0, #20
 8017dac:	f04f 0a00 	mov.w	sl, #0
 8017db0:	e7a8      	b.n	8017d04 <__gethex+0x1ce>
 8017db2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017db6:	42a0      	cmp	r0, r4
 8017db8:	dd6a      	ble.n	8017e90 <__gethex+0x35a>
 8017dba:	1b04      	subs	r4, r0, r4
 8017dbc:	42a6      	cmp	r6, r4
 8017dbe:	dc2e      	bgt.n	8017e1e <__gethex+0x2e8>
 8017dc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017dc4:	2b02      	cmp	r3, #2
 8017dc6:	d022      	beq.n	8017e0e <__gethex+0x2d8>
 8017dc8:	2b03      	cmp	r3, #3
 8017dca:	d024      	beq.n	8017e16 <__gethex+0x2e0>
 8017dcc:	2b01      	cmp	r3, #1
 8017dce:	d115      	bne.n	8017dfc <__gethex+0x2c6>
 8017dd0:	42a6      	cmp	r6, r4
 8017dd2:	d113      	bne.n	8017dfc <__gethex+0x2c6>
 8017dd4:	2e01      	cmp	r6, #1
 8017dd6:	dc0b      	bgt.n	8017df0 <__gethex+0x2ba>
 8017dd8:	9a06      	ldr	r2, [sp, #24]
 8017dda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017dde:	6013      	str	r3, [r2, #0]
 8017de0:	2301      	movs	r3, #1
 8017de2:	612b      	str	r3, [r5, #16]
 8017de4:	f8c9 3000 	str.w	r3, [r9]
 8017de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017dea:	2762      	movs	r7, #98	; 0x62
 8017dec:	601d      	str	r5, [r3, #0]
 8017dee:	e72a      	b.n	8017c46 <__gethex+0x110>
 8017df0:	1e71      	subs	r1, r6, #1
 8017df2:	4628      	mov	r0, r5
 8017df4:	f000 fd90 	bl	8018918 <__any_on>
 8017df8:	2800      	cmp	r0, #0
 8017dfa:	d1ed      	bne.n	8017dd8 <__gethex+0x2a2>
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	9802      	ldr	r0, [sp, #8]
 8017e00:	f000 f9e0 	bl	80181c4 <_Bfree>
 8017e04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e06:	2300      	movs	r3, #0
 8017e08:	6013      	str	r3, [r2, #0]
 8017e0a:	2750      	movs	r7, #80	; 0x50
 8017e0c:	e71b      	b.n	8017c46 <__gethex+0x110>
 8017e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d0e1      	beq.n	8017dd8 <__gethex+0x2a2>
 8017e14:	e7f2      	b.n	8017dfc <__gethex+0x2c6>
 8017e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d1dd      	bne.n	8017dd8 <__gethex+0x2a2>
 8017e1c:	e7ee      	b.n	8017dfc <__gethex+0x2c6>
 8017e1e:	1e67      	subs	r7, r4, #1
 8017e20:	f1ba 0f00 	cmp.w	sl, #0
 8017e24:	d131      	bne.n	8017e8a <__gethex+0x354>
 8017e26:	b127      	cbz	r7, 8017e32 <__gethex+0x2fc>
 8017e28:	4639      	mov	r1, r7
 8017e2a:	4628      	mov	r0, r5
 8017e2c:	f000 fd74 	bl	8018918 <__any_on>
 8017e30:	4682      	mov	sl, r0
 8017e32:	117a      	asrs	r2, r7, #5
 8017e34:	2301      	movs	r3, #1
 8017e36:	f007 071f 	and.w	r7, r7, #31
 8017e3a:	fa03 f707 	lsl.w	r7, r3, r7
 8017e3e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017e42:	4621      	mov	r1, r4
 8017e44:	421f      	tst	r7, r3
 8017e46:	4628      	mov	r0, r5
 8017e48:	bf18      	it	ne
 8017e4a:	f04a 0a02 	orrne.w	sl, sl, #2
 8017e4e:	1b36      	subs	r6, r6, r4
 8017e50:	f7ff fe22 	bl	8017a98 <rshift>
 8017e54:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017e58:	2702      	movs	r7, #2
 8017e5a:	f1ba 0f00 	cmp.w	sl, #0
 8017e5e:	d048      	beq.n	8017ef2 <__gethex+0x3bc>
 8017e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e64:	2b02      	cmp	r3, #2
 8017e66:	d015      	beq.n	8017e94 <__gethex+0x35e>
 8017e68:	2b03      	cmp	r3, #3
 8017e6a:	d017      	beq.n	8017e9c <__gethex+0x366>
 8017e6c:	2b01      	cmp	r3, #1
 8017e6e:	d109      	bne.n	8017e84 <__gethex+0x34e>
 8017e70:	f01a 0f02 	tst.w	sl, #2
 8017e74:	d006      	beq.n	8017e84 <__gethex+0x34e>
 8017e76:	f8d9 3000 	ldr.w	r3, [r9]
 8017e7a:	ea4a 0a03 	orr.w	sl, sl, r3
 8017e7e:	f01a 0f01 	tst.w	sl, #1
 8017e82:	d10e      	bne.n	8017ea2 <__gethex+0x36c>
 8017e84:	f047 0710 	orr.w	r7, r7, #16
 8017e88:	e033      	b.n	8017ef2 <__gethex+0x3bc>
 8017e8a:	f04f 0a01 	mov.w	sl, #1
 8017e8e:	e7d0      	b.n	8017e32 <__gethex+0x2fc>
 8017e90:	2701      	movs	r7, #1
 8017e92:	e7e2      	b.n	8017e5a <__gethex+0x324>
 8017e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e96:	f1c3 0301 	rsb	r3, r3, #1
 8017e9a:	9315      	str	r3, [sp, #84]	; 0x54
 8017e9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d0f0      	beq.n	8017e84 <__gethex+0x34e>
 8017ea2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017ea6:	f105 0314 	add.w	r3, r5, #20
 8017eaa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017eae:	eb03 010a 	add.w	r1, r3, sl
 8017eb2:	f04f 0c00 	mov.w	ip, #0
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ebc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017ec0:	d01c      	beq.n	8017efc <__gethex+0x3c6>
 8017ec2:	3201      	adds	r2, #1
 8017ec4:	6002      	str	r2, [r0, #0]
 8017ec6:	2f02      	cmp	r7, #2
 8017ec8:	f105 0314 	add.w	r3, r5, #20
 8017ecc:	d138      	bne.n	8017f40 <__gethex+0x40a>
 8017ece:	f8d8 2000 	ldr.w	r2, [r8]
 8017ed2:	3a01      	subs	r2, #1
 8017ed4:	42b2      	cmp	r2, r6
 8017ed6:	d10a      	bne.n	8017eee <__gethex+0x3b8>
 8017ed8:	1171      	asrs	r1, r6, #5
 8017eda:	2201      	movs	r2, #1
 8017edc:	f006 061f 	and.w	r6, r6, #31
 8017ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8017ee8:	421e      	tst	r6, r3
 8017eea:	bf18      	it	ne
 8017eec:	4617      	movne	r7, r2
 8017eee:	f047 0720 	orr.w	r7, r7, #32
 8017ef2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ef4:	601d      	str	r5, [r3, #0]
 8017ef6:	9b06      	ldr	r3, [sp, #24]
 8017ef8:	601c      	str	r4, [r3, #0]
 8017efa:	e6a4      	b.n	8017c46 <__gethex+0x110>
 8017efc:	4299      	cmp	r1, r3
 8017efe:	f843 cc04 	str.w	ip, [r3, #-4]
 8017f02:	d8d8      	bhi.n	8017eb6 <__gethex+0x380>
 8017f04:	68ab      	ldr	r3, [r5, #8]
 8017f06:	4599      	cmp	r9, r3
 8017f08:	db12      	blt.n	8017f30 <__gethex+0x3fa>
 8017f0a:	6869      	ldr	r1, [r5, #4]
 8017f0c:	9802      	ldr	r0, [sp, #8]
 8017f0e:	3101      	adds	r1, #1
 8017f10:	f000 f924 	bl	801815c <_Balloc>
 8017f14:	692a      	ldr	r2, [r5, #16]
 8017f16:	3202      	adds	r2, #2
 8017f18:	f105 010c 	add.w	r1, r5, #12
 8017f1c:	4683      	mov	fp, r0
 8017f1e:	0092      	lsls	r2, r2, #2
 8017f20:	300c      	adds	r0, #12
 8017f22:	f7fd f9c5 	bl	80152b0 <memcpy>
 8017f26:	4629      	mov	r1, r5
 8017f28:	9802      	ldr	r0, [sp, #8]
 8017f2a:	f000 f94b 	bl	80181c4 <_Bfree>
 8017f2e:	465d      	mov	r5, fp
 8017f30:	692b      	ldr	r3, [r5, #16]
 8017f32:	1c5a      	adds	r2, r3, #1
 8017f34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017f38:	612a      	str	r2, [r5, #16]
 8017f3a:	2201      	movs	r2, #1
 8017f3c:	615a      	str	r2, [r3, #20]
 8017f3e:	e7c2      	b.n	8017ec6 <__gethex+0x390>
 8017f40:	692a      	ldr	r2, [r5, #16]
 8017f42:	454a      	cmp	r2, r9
 8017f44:	dd0b      	ble.n	8017f5e <__gethex+0x428>
 8017f46:	2101      	movs	r1, #1
 8017f48:	4628      	mov	r0, r5
 8017f4a:	f7ff fda5 	bl	8017a98 <rshift>
 8017f4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f52:	3401      	adds	r4, #1
 8017f54:	42a3      	cmp	r3, r4
 8017f56:	f6ff aed9 	blt.w	8017d0c <__gethex+0x1d6>
 8017f5a:	2701      	movs	r7, #1
 8017f5c:	e7c7      	b.n	8017eee <__gethex+0x3b8>
 8017f5e:	f016 061f 	ands.w	r6, r6, #31
 8017f62:	d0fa      	beq.n	8017f5a <__gethex+0x424>
 8017f64:	449a      	add	sl, r3
 8017f66:	f1c6 0620 	rsb	r6, r6, #32
 8017f6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017f6e:	f000 f9b9 	bl	80182e4 <__hi0bits>
 8017f72:	42b0      	cmp	r0, r6
 8017f74:	dbe7      	blt.n	8017f46 <__gethex+0x410>
 8017f76:	e7f0      	b.n	8017f5a <__gethex+0x424>

08017f78 <L_shift>:
 8017f78:	f1c2 0208 	rsb	r2, r2, #8
 8017f7c:	0092      	lsls	r2, r2, #2
 8017f7e:	b570      	push	{r4, r5, r6, lr}
 8017f80:	f1c2 0620 	rsb	r6, r2, #32
 8017f84:	6843      	ldr	r3, [r0, #4]
 8017f86:	6804      	ldr	r4, [r0, #0]
 8017f88:	fa03 f506 	lsl.w	r5, r3, r6
 8017f8c:	432c      	orrs	r4, r5
 8017f8e:	40d3      	lsrs	r3, r2
 8017f90:	6004      	str	r4, [r0, #0]
 8017f92:	f840 3f04 	str.w	r3, [r0, #4]!
 8017f96:	4288      	cmp	r0, r1
 8017f98:	d3f4      	bcc.n	8017f84 <L_shift+0xc>
 8017f9a:	bd70      	pop	{r4, r5, r6, pc}

08017f9c <__match>:
 8017f9c:	b530      	push	{r4, r5, lr}
 8017f9e:	6803      	ldr	r3, [r0, #0]
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017fa6:	b914      	cbnz	r4, 8017fae <__match+0x12>
 8017fa8:	6003      	str	r3, [r0, #0]
 8017faa:	2001      	movs	r0, #1
 8017fac:	bd30      	pop	{r4, r5, pc}
 8017fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017fb6:	2d19      	cmp	r5, #25
 8017fb8:	bf98      	it	ls
 8017fba:	3220      	addls	r2, #32
 8017fbc:	42a2      	cmp	r2, r4
 8017fbe:	d0f0      	beq.n	8017fa2 <__match+0x6>
 8017fc0:	2000      	movs	r0, #0
 8017fc2:	e7f3      	b.n	8017fac <__match+0x10>

08017fc4 <__hexnan>:
 8017fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fc8:	680b      	ldr	r3, [r1, #0]
 8017fca:	6801      	ldr	r1, [r0, #0]
 8017fcc:	115f      	asrs	r7, r3, #5
 8017fce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017fd2:	f013 031f 	ands.w	r3, r3, #31
 8017fd6:	b087      	sub	sp, #28
 8017fd8:	bf18      	it	ne
 8017fda:	3704      	addne	r7, #4
 8017fdc:	2500      	movs	r5, #0
 8017fde:	1f3e      	subs	r6, r7, #4
 8017fe0:	4682      	mov	sl, r0
 8017fe2:	4690      	mov	r8, r2
 8017fe4:	9301      	str	r3, [sp, #4]
 8017fe6:	f847 5c04 	str.w	r5, [r7, #-4]
 8017fea:	46b1      	mov	r9, r6
 8017fec:	4634      	mov	r4, r6
 8017fee:	9502      	str	r5, [sp, #8]
 8017ff0:	46ab      	mov	fp, r5
 8017ff2:	784a      	ldrb	r2, [r1, #1]
 8017ff4:	1c4b      	adds	r3, r1, #1
 8017ff6:	9303      	str	r3, [sp, #12]
 8017ff8:	b342      	cbz	r2, 801804c <__hexnan+0x88>
 8017ffa:	4610      	mov	r0, r2
 8017ffc:	9105      	str	r1, [sp, #20]
 8017ffe:	9204      	str	r2, [sp, #16]
 8018000:	f7ff fd84 	bl	8017b0c <__hexdig_fun>
 8018004:	2800      	cmp	r0, #0
 8018006:	d143      	bne.n	8018090 <__hexnan+0xcc>
 8018008:	9a04      	ldr	r2, [sp, #16]
 801800a:	9905      	ldr	r1, [sp, #20]
 801800c:	2a20      	cmp	r2, #32
 801800e:	d818      	bhi.n	8018042 <__hexnan+0x7e>
 8018010:	9b02      	ldr	r3, [sp, #8]
 8018012:	459b      	cmp	fp, r3
 8018014:	dd13      	ble.n	801803e <__hexnan+0x7a>
 8018016:	454c      	cmp	r4, r9
 8018018:	d206      	bcs.n	8018028 <__hexnan+0x64>
 801801a:	2d07      	cmp	r5, #7
 801801c:	dc04      	bgt.n	8018028 <__hexnan+0x64>
 801801e:	462a      	mov	r2, r5
 8018020:	4649      	mov	r1, r9
 8018022:	4620      	mov	r0, r4
 8018024:	f7ff ffa8 	bl	8017f78 <L_shift>
 8018028:	4544      	cmp	r4, r8
 801802a:	d944      	bls.n	80180b6 <__hexnan+0xf2>
 801802c:	2300      	movs	r3, #0
 801802e:	f1a4 0904 	sub.w	r9, r4, #4
 8018032:	f844 3c04 	str.w	r3, [r4, #-4]
 8018036:	f8cd b008 	str.w	fp, [sp, #8]
 801803a:	464c      	mov	r4, r9
 801803c:	461d      	mov	r5, r3
 801803e:	9903      	ldr	r1, [sp, #12]
 8018040:	e7d7      	b.n	8017ff2 <__hexnan+0x2e>
 8018042:	2a29      	cmp	r2, #41	; 0x29
 8018044:	d14a      	bne.n	80180dc <__hexnan+0x118>
 8018046:	3102      	adds	r1, #2
 8018048:	f8ca 1000 	str.w	r1, [sl]
 801804c:	f1bb 0f00 	cmp.w	fp, #0
 8018050:	d044      	beq.n	80180dc <__hexnan+0x118>
 8018052:	454c      	cmp	r4, r9
 8018054:	d206      	bcs.n	8018064 <__hexnan+0xa0>
 8018056:	2d07      	cmp	r5, #7
 8018058:	dc04      	bgt.n	8018064 <__hexnan+0xa0>
 801805a:	462a      	mov	r2, r5
 801805c:	4649      	mov	r1, r9
 801805e:	4620      	mov	r0, r4
 8018060:	f7ff ff8a 	bl	8017f78 <L_shift>
 8018064:	4544      	cmp	r4, r8
 8018066:	d928      	bls.n	80180ba <__hexnan+0xf6>
 8018068:	4643      	mov	r3, r8
 801806a:	f854 2b04 	ldr.w	r2, [r4], #4
 801806e:	f843 2b04 	str.w	r2, [r3], #4
 8018072:	42a6      	cmp	r6, r4
 8018074:	d2f9      	bcs.n	801806a <__hexnan+0xa6>
 8018076:	2200      	movs	r2, #0
 8018078:	f843 2b04 	str.w	r2, [r3], #4
 801807c:	429e      	cmp	r6, r3
 801807e:	d2fb      	bcs.n	8018078 <__hexnan+0xb4>
 8018080:	6833      	ldr	r3, [r6, #0]
 8018082:	b91b      	cbnz	r3, 801808c <__hexnan+0xc8>
 8018084:	4546      	cmp	r6, r8
 8018086:	d127      	bne.n	80180d8 <__hexnan+0x114>
 8018088:	2301      	movs	r3, #1
 801808a:	6033      	str	r3, [r6, #0]
 801808c:	2005      	movs	r0, #5
 801808e:	e026      	b.n	80180de <__hexnan+0x11a>
 8018090:	3501      	adds	r5, #1
 8018092:	2d08      	cmp	r5, #8
 8018094:	f10b 0b01 	add.w	fp, fp, #1
 8018098:	dd06      	ble.n	80180a8 <__hexnan+0xe4>
 801809a:	4544      	cmp	r4, r8
 801809c:	d9cf      	bls.n	801803e <__hexnan+0x7a>
 801809e:	2300      	movs	r3, #0
 80180a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80180a4:	2501      	movs	r5, #1
 80180a6:	3c04      	subs	r4, #4
 80180a8:	6822      	ldr	r2, [r4, #0]
 80180aa:	f000 000f 	and.w	r0, r0, #15
 80180ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80180b2:	6020      	str	r0, [r4, #0]
 80180b4:	e7c3      	b.n	801803e <__hexnan+0x7a>
 80180b6:	2508      	movs	r5, #8
 80180b8:	e7c1      	b.n	801803e <__hexnan+0x7a>
 80180ba:	9b01      	ldr	r3, [sp, #4]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d0df      	beq.n	8018080 <__hexnan+0xbc>
 80180c0:	f04f 32ff 	mov.w	r2, #4294967295
 80180c4:	f1c3 0320 	rsb	r3, r3, #32
 80180c8:	fa22 f303 	lsr.w	r3, r2, r3
 80180cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80180d0:	401a      	ands	r2, r3
 80180d2:	f847 2c04 	str.w	r2, [r7, #-4]
 80180d6:	e7d3      	b.n	8018080 <__hexnan+0xbc>
 80180d8:	3e04      	subs	r6, #4
 80180da:	e7d1      	b.n	8018080 <__hexnan+0xbc>
 80180dc:	2004      	movs	r0, #4
 80180de:	b007      	add	sp, #28
 80180e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180e4 <__locale_ctype_ptr_l>:
 80180e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80180e8:	4770      	bx	lr
	...

080180ec <__locale_ctype_ptr>:
 80180ec:	4b04      	ldr	r3, [pc, #16]	; (8018100 <__locale_ctype_ptr+0x14>)
 80180ee:	4a05      	ldr	r2, [pc, #20]	; (8018104 <__locale_ctype_ptr+0x18>)
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	6a1b      	ldr	r3, [r3, #32]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	bf08      	it	eq
 80180f8:	4613      	moveq	r3, r2
 80180fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80180fe:	4770      	bx	lr
 8018100:	2000000c 	.word	0x2000000c
 8018104:	20000070 	.word	0x20000070

08018108 <__localeconv_l>:
 8018108:	30f0      	adds	r0, #240	; 0xf0
 801810a:	4770      	bx	lr

0801810c <_localeconv_r>:
 801810c:	4b04      	ldr	r3, [pc, #16]	; (8018120 <_localeconv_r+0x14>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	6a18      	ldr	r0, [r3, #32]
 8018112:	4b04      	ldr	r3, [pc, #16]	; (8018124 <_localeconv_r+0x18>)
 8018114:	2800      	cmp	r0, #0
 8018116:	bf08      	it	eq
 8018118:	4618      	moveq	r0, r3
 801811a:	30f0      	adds	r0, #240	; 0xf0
 801811c:	4770      	bx	lr
 801811e:	bf00      	nop
 8018120:	2000000c 	.word	0x2000000c
 8018124:	20000070 	.word	0x20000070

08018128 <malloc>:
 8018128:	4b02      	ldr	r3, [pc, #8]	; (8018134 <malloc+0xc>)
 801812a:	4601      	mov	r1, r0
 801812c:	6818      	ldr	r0, [r3, #0]
 801812e:	f000 bc71 	b.w	8018a14 <_malloc_r>
 8018132:	bf00      	nop
 8018134:	2000000c 	.word	0x2000000c

08018138 <__ascii_mbtowc>:
 8018138:	b082      	sub	sp, #8
 801813a:	b901      	cbnz	r1, 801813e <__ascii_mbtowc+0x6>
 801813c:	a901      	add	r1, sp, #4
 801813e:	b142      	cbz	r2, 8018152 <__ascii_mbtowc+0x1a>
 8018140:	b14b      	cbz	r3, 8018156 <__ascii_mbtowc+0x1e>
 8018142:	7813      	ldrb	r3, [r2, #0]
 8018144:	600b      	str	r3, [r1, #0]
 8018146:	7812      	ldrb	r2, [r2, #0]
 8018148:	1c10      	adds	r0, r2, #0
 801814a:	bf18      	it	ne
 801814c:	2001      	movne	r0, #1
 801814e:	b002      	add	sp, #8
 8018150:	4770      	bx	lr
 8018152:	4610      	mov	r0, r2
 8018154:	e7fb      	b.n	801814e <__ascii_mbtowc+0x16>
 8018156:	f06f 0001 	mvn.w	r0, #1
 801815a:	e7f8      	b.n	801814e <__ascii_mbtowc+0x16>

0801815c <_Balloc>:
 801815c:	b570      	push	{r4, r5, r6, lr}
 801815e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018160:	4604      	mov	r4, r0
 8018162:	460e      	mov	r6, r1
 8018164:	b93d      	cbnz	r5, 8018176 <_Balloc+0x1a>
 8018166:	2010      	movs	r0, #16
 8018168:	f7ff ffde 	bl	8018128 <malloc>
 801816c:	6260      	str	r0, [r4, #36]	; 0x24
 801816e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018172:	6005      	str	r5, [r0, #0]
 8018174:	60c5      	str	r5, [r0, #12]
 8018176:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018178:	68eb      	ldr	r3, [r5, #12]
 801817a:	b183      	cbz	r3, 801819e <_Balloc+0x42>
 801817c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801817e:	68db      	ldr	r3, [r3, #12]
 8018180:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018184:	b9b8      	cbnz	r0, 80181b6 <_Balloc+0x5a>
 8018186:	2101      	movs	r1, #1
 8018188:	fa01 f506 	lsl.w	r5, r1, r6
 801818c:	1d6a      	adds	r2, r5, #5
 801818e:	0092      	lsls	r2, r2, #2
 8018190:	4620      	mov	r0, r4
 8018192:	f000 fbe2 	bl	801895a <_calloc_r>
 8018196:	b160      	cbz	r0, 80181b2 <_Balloc+0x56>
 8018198:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801819c:	e00e      	b.n	80181bc <_Balloc+0x60>
 801819e:	2221      	movs	r2, #33	; 0x21
 80181a0:	2104      	movs	r1, #4
 80181a2:	4620      	mov	r0, r4
 80181a4:	f000 fbd9 	bl	801895a <_calloc_r>
 80181a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181aa:	60e8      	str	r0, [r5, #12]
 80181ac:	68db      	ldr	r3, [r3, #12]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d1e4      	bne.n	801817c <_Balloc+0x20>
 80181b2:	2000      	movs	r0, #0
 80181b4:	bd70      	pop	{r4, r5, r6, pc}
 80181b6:	6802      	ldr	r2, [r0, #0]
 80181b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80181bc:	2300      	movs	r3, #0
 80181be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80181c2:	e7f7      	b.n	80181b4 <_Balloc+0x58>

080181c4 <_Bfree>:
 80181c4:	b570      	push	{r4, r5, r6, lr}
 80181c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80181c8:	4606      	mov	r6, r0
 80181ca:	460d      	mov	r5, r1
 80181cc:	b93c      	cbnz	r4, 80181de <_Bfree+0x1a>
 80181ce:	2010      	movs	r0, #16
 80181d0:	f7ff ffaa 	bl	8018128 <malloc>
 80181d4:	6270      	str	r0, [r6, #36]	; 0x24
 80181d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80181da:	6004      	str	r4, [r0, #0]
 80181dc:	60c4      	str	r4, [r0, #12]
 80181de:	b13d      	cbz	r5, 80181f0 <_Bfree+0x2c>
 80181e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80181e2:	686a      	ldr	r2, [r5, #4]
 80181e4:	68db      	ldr	r3, [r3, #12]
 80181e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80181ea:	6029      	str	r1, [r5, #0]
 80181ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80181f0:	bd70      	pop	{r4, r5, r6, pc}

080181f2 <__multadd>:
 80181f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181f6:	690d      	ldr	r5, [r1, #16]
 80181f8:	461f      	mov	r7, r3
 80181fa:	4606      	mov	r6, r0
 80181fc:	460c      	mov	r4, r1
 80181fe:	f101 0c14 	add.w	ip, r1, #20
 8018202:	2300      	movs	r3, #0
 8018204:	f8dc 0000 	ldr.w	r0, [ip]
 8018208:	b281      	uxth	r1, r0
 801820a:	fb02 7101 	mla	r1, r2, r1, r7
 801820e:	0c0f      	lsrs	r7, r1, #16
 8018210:	0c00      	lsrs	r0, r0, #16
 8018212:	fb02 7000 	mla	r0, r2, r0, r7
 8018216:	b289      	uxth	r1, r1
 8018218:	3301      	adds	r3, #1
 801821a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801821e:	429d      	cmp	r5, r3
 8018220:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018224:	f84c 1b04 	str.w	r1, [ip], #4
 8018228:	dcec      	bgt.n	8018204 <__multadd+0x12>
 801822a:	b1d7      	cbz	r7, 8018262 <__multadd+0x70>
 801822c:	68a3      	ldr	r3, [r4, #8]
 801822e:	42ab      	cmp	r3, r5
 8018230:	dc12      	bgt.n	8018258 <__multadd+0x66>
 8018232:	6861      	ldr	r1, [r4, #4]
 8018234:	4630      	mov	r0, r6
 8018236:	3101      	adds	r1, #1
 8018238:	f7ff ff90 	bl	801815c <_Balloc>
 801823c:	6922      	ldr	r2, [r4, #16]
 801823e:	3202      	adds	r2, #2
 8018240:	f104 010c 	add.w	r1, r4, #12
 8018244:	4680      	mov	r8, r0
 8018246:	0092      	lsls	r2, r2, #2
 8018248:	300c      	adds	r0, #12
 801824a:	f7fd f831 	bl	80152b0 <memcpy>
 801824e:	4621      	mov	r1, r4
 8018250:	4630      	mov	r0, r6
 8018252:	f7ff ffb7 	bl	80181c4 <_Bfree>
 8018256:	4644      	mov	r4, r8
 8018258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801825c:	3501      	adds	r5, #1
 801825e:	615f      	str	r7, [r3, #20]
 8018260:	6125      	str	r5, [r4, #16]
 8018262:	4620      	mov	r0, r4
 8018264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018268 <__s2b>:
 8018268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801826c:	460c      	mov	r4, r1
 801826e:	4615      	mov	r5, r2
 8018270:	461f      	mov	r7, r3
 8018272:	2209      	movs	r2, #9
 8018274:	3308      	adds	r3, #8
 8018276:	4606      	mov	r6, r0
 8018278:	fb93 f3f2 	sdiv	r3, r3, r2
 801827c:	2100      	movs	r1, #0
 801827e:	2201      	movs	r2, #1
 8018280:	429a      	cmp	r2, r3
 8018282:	db20      	blt.n	80182c6 <__s2b+0x5e>
 8018284:	4630      	mov	r0, r6
 8018286:	f7ff ff69 	bl	801815c <_Balloc>
 801828a:	9b08      	ldr	r3, [sp, #32]
 801828c:	6143      	str	r3, [r0, #20]
 801828e:	2d09      	cmp	r5, #9
 8018290:	f04f 0301 	mov.w	r3, #1
 8018294:	6103      	str	r3, [r0, #16]
 8018296:	dd19      	ble.n	80182cc <__s2b+0x64>
 8018298:	f104 0809 	add.w	r8, r4, #9
 801829c:	46c1      	mov	r9, r8
 801829e:	442c      	add	r4, r5
 80182a0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80182a4:	4601      	mov	r1, r0
 80182a6:	3b30      	subs	r3, #48	; 0x30
 80182a8:	220a      	movs	r2, #10
 80182aa:	4630      	mov	r0, r6
 80182ac:	f7ff ffa1 	bl	80181f2 <__multadd>
 80182b0:	45a1      	cmp	r9, r4
 80182b2:	d1f5      	bne.n	80182a0 <__s2b+0x38>
 80182b4:	eb08 0405 	add.w	r4, r8, r5
 80182b8:	3c08      	subs	r4, #8
 80182ba:	1b2d      	subs	r5, r5, r4
 80182bc:	1963      	adds	r3, r4, r5
 80182be:	42bb      	cmp	r3, r7
 80182c0:	db07      	blt.n	80182d2 <__s2b+0x6a>
 80182c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182c6:	0052      	lsls	r2, r2, #1
 80182c8:	3101      	adds	r1, #1
 80182ca:	e7d9      	b.n	8018280 <__s2b+0x18>
 80182cc:	340a      	adds	r4, #10
 80182ce:	2509      	movs	r5, #9
 80182d0:	e7f3      	b.n	80182ba <__s2b+0x52>
 80182d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80182d6:	4601      	mov	r1, r0
 80182d8:	3b30      	subs	r3, #48	; 0x30
 80182da:	220a      	movs	r2, #10
 80182dc:	4630      	mov	r0, r6
 80182de:	f7ff ff88 	bl	80181f2 <__multadd>
 80182e2:	e7eb      	b.n	80182bc <__s2b+0x54>

080182e4 <__hi0bits>:
 80182e4:	0c02      	lsrs	r2, r0, #16
 80182e6:	0412      	lsls	r2, r2, #16
 80182e8:	4603      	mov	r3, r0
 80182ea:	b9b2      	cbnz	r2, 801831a <__hi0bits+0x36>
 80182ec:	0403      	lsls	r3, r0, #16
 80182ee:	2010      	movs	r0, #16
 80182f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80182f4:	bf04      	itt	eq
 80182f6:	021b      	lsleq	r3, r3, #8
 80182f8:	3008      	addeq	r0, #8
 80182fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80182fe:	bf04      	itt	eq
 8018300:	011b      	lsleq	r3, r3, #4
 8018302:	3004      	addeq	r0, #4
 8018304:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018308:	bf04      	itt	eq
 801830a:	009b      	lsleq	r3, r3, #2
 801830c:	3002      	addeq	r0, #2
 801830e:	2b00      	cmp	r3, #0
 8018310:	db06      	blt.n	8018320 <__hi0bits+0x3c>
 8018312:	005b      	lsls	r3, r3, #1
 8018314:	d503      	bpl.n	801831e <__hi0bits+0x3a>
 8018316:	3001      	adds	r0, #1
 8018318:	4770      	bx	lr
 801831a:	2000      	movs	r0, #0
 801831c:	e7e8      	b.n	80182f0 <__hi0bits+0xc>
 801831e:	2020      	movs	r0, #32
 8018320:	4770      	bx	lr

08018322 <__lo0bits>:
 8018322:	6803      	ldr	r3, [r0, #0]
 8018324:	f013 0207 	ands.w	r2, r3, #7
 8018328:	4601      	mov	r1, r0
 801832a:	d00b      	beq.n	8018344 <__lo0bits+0x22>
 801832c:	07da      	lsls	r2, r3, #31
 801832e:	d423      	bmi.n	8018378 <__lo0bits+0x56>
 8018330:	0798      	lsls	r0, r3, #30
 8018332:	bf49      	itett	mi
 8018334:	085b      	lsrmi	r3, r3, #1
 8018336:	089b      	lsrpl	r3, r3, #2
 8018338:	2001      	movmi	r0, #1
 801833a:	600b      	strmi	r3, [r1, #0]
 801833c:	bf5c      	itt	pl
 801833e:	600b      	strpl	r3, [r1, #0]
 8018340:	2002      	movpl	r0, #2
 8018342:	4770      	bx	lr
 8018344:	b298      	uxth	r0, r3
 8018346:	b9a8      	cbnz	r0, 8018374 <__lo0bits+0x52>
 8018348:	0c1b      	lsrs	r3, r3, #16
 801834a:	2010      	movs	r0, #16
 801834c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018350:	bf04      	itt	eq
 8018352:	0a1b      	lsreq	r3, r3, #8
 8018354:	3008      	addeq	r0, #8
 8018356:	071a      	lsls	r2, r3, #28
 8018358:	bf04      	itt	eq
 801835a:	091b      	lsreq	r3, r3, #4
 801835c:	3004      	addeq	r0, #4
 801835e:	079a      	lsls	r2, r3, #30
 8018360:	bf04      	itt	eq
 8018362:	089b      	lsreq	r3, r3, #2
 8018364:	3002      	addeq	r0, #2
 8018366:	07da      	lsls	r2, r3, #31
 8018368:	d402      	bmi.n	8018370 <__lo0bits+0x4e>
 801836a:	085b      	lsrs	r3, r3, #1
 801836c:	d006      	beq.n	801837c <__lo0bits+0x5a>
 801836e:	3001      	adds	r0, #1
 8018370:	600b      	str	r3, [r1, #0]
 8018372:	4770      	bx	lr
 8018374:	4610      	mov	r0, r2
 8018376:	e7e9      	b.n	801834c <__lo0bits+0x2a>
 8018378:	2000      	movs	r0, #0
 801837a:	4770      	bx	lr
 801837c:	2020      	movs	r0, #32
 801837e:	4770      	bx	lr

08018380 <__i2b>:
 8018380:	b510      	push	{r4, lr}
 8018382:	460c      	mov	r4, r1
 8018384:	2101      	movs	r1, #1
 8018386:	f7ff fee9 	bl	801815c <_Balloc>
 801838a:	2201      	movs	r2, #1
 801838c:	6144      	str	r4, [r0, #20]
 801838e:	6102      	str	r2, [r0, #16]
 8018390:	bd10      	pop	{r4, pc}

08018392 <__multiply>:
 8018392:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018396:	4614      	mov	r4, r2
 8018398:	690a      	ldr	r2, [r1, #16]
 801839a:	6923      	ldr	r3, [r4, #16]
 801839c:	429a      	cmp	r2, r3
 801839e:	bfb8      	it	lt
 80183a0:	460b      	movlt	r3, r1
 80183a2:	4688      	mov	r8, r1
 80183a4:	bfbc      	itt	lt
 80183a6:	46a0      	movlt	r8, r4
 80183a8:	461c      	movlt	r4, r3
 80183aa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80183ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80183b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80183b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80183ba:	eb07 0609 	add.w	r6, r7, r9
 80183be:	42b3      	cmp	r3, r6
 80183c0:	bfb8      	it	lt
 80183c2:	3101      	addlt	r1, #1
 80183c4:	f7ff feca 	bl	801815c <_Balloc>
 80183c8:	f100 0514 	add.w	r5, r0, #20
 80183cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80183d0:	462b      	mov	r3, r5
 80183d2:	2200      	movs	r2, #0
 80183d4:	4573      	cmp	r3, lr
 80183d6:	d316      	bcc.n	8018406 <__multiply+0x74>
 80183d8:	f104 0214 	add.w	r2, r4, #20
 80183dc:	f108 0114 	add.w	r1, r8, #20
 80183e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80183e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80183e8:	9300      	str	r3, [sp, #0]
 80183ea:	9b00      	ldr	r3, [sp, #0]
 80183ec:	9201      	str	r2, [sp, #4]
 80183ee:	4293      	cmp	r3, r2
 80183f0:	d80c      	bhi.n	801840c <__multiply+0x7a>
 80183f2:	2e00      	cmp	r6, #0
 80183f4:	dd03      	ble.n	80183fe <__multiply+0x6c>
 80183f6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d05d      	beq.n	80184ba <__multiply+0x128>
 80183fe:	6106      	str	r6, [r0, #16]
 8018400:	b003      	add	sp, #12
 8018402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018406:	f843 2b04 	str.w	r2, [r3], #4
 801840a:	e7e3      	b.n	80183d4 <__multiply+0x42>
 801840c:	f8b2 b000 	ldrh.w	fp, [r2]
 8018410:	f1bb 0f00 	cmp.w	fp, #0
 8018414:	d023      	beq.n	801845e <__multiply+0xcc>
 8018416:	4689      	mov	r9, r1
 8018418:	46ac      	mov	ip, r5
 801841a:	f04f 0800 	mov.w	r8, #0
 801841e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018422:	f8dc a000 	ldr.w	sl, [ip]
 8018426:	b2a3      	uxth	r3, r4
 8018428:	fa1f fa8a 	uxth.w	sl, sl
 801842c:	fb0b a303 	mla	r3, fp, r3, sl
 8018430:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018434:	f8dc 4000 	ldr.w	r4, [ip]
 8018438:	4443      	add	r3, r8
 801843a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801843e:	fb0b 840a 	mla	r4, fp, sl, r8
 8018442:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018446:	46e2      	mov	sl, ip
 8018448:	b29b      	uxth	r3, r3
 801844a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801844e:	454f      	cmp	r7, r9
 8018450:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018454:	f84a 3b04 	str.w	r3, [sl], #4
 8018458:	d82b      	bhi.n	80184b2 <__multiply+0x120>
 801845a:	f8cc 8004 	str.w	r8, [ip, #4]
 801845e:	9b01      	ldr	r3, [sp, #4]
 8018460:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018464:	3204      	adds	r2, #4
 8018466:	f1ba 0f00 	cmp.w	sl, #0
 801846a:	d020      	beq.n	80184ae <__multiply+0x11c>
 801846c:	682b      	ldr	r3, [r5, #0]
 801846e:	4689      	mov	r9, r1
 8018470:	46a8      	mov	r8, r5
 8018472:	f04f 0b00 	mov.w	fp, #0
 8018476:	f8b9 c000 	ldrh.w	ip, [r9]
 801847a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801847e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018482:	445c      	add	r4, fp
 8018484:	46c4      	mov	ip, r8
 8018486:	b29b      	uxth	r3, r3
 8018488:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801848c:	f84c 3b04 	str.w	r3, [ip], #4
 8018490:	f859 3b04 	ldr.w	r3, [r9], #4
 8018494:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018498:	0c1b      	lsrs	r3, r3, #16
 801849a:	fb0a b303 	mla	r3, sl, r3, fp
 801849e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80184a2:	454f      	cmp	r7, r9
 80184a4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80184a8:	d805      	bhi.n	80184b6 <__multiply+0x124>
 80184aa:	f8c8 3004 	str.w	r3, [r8, #4]
 80184ae:	3504      	adds	r5, #4
 80184b0:	e79b      	b.n	80183ea <__multiply+0x58>
 80184b2:	46d4      	mov	ip, sl
 80184b4:	e7b3      	b.n	801841e <__multiply+0x8c>
 80184b6:	46e0      	mov	r8, ip
 80184b8:	e7dd      	b.n	8018476 <__multiply+0xe4>
 80184ba:	3e01      	subs	r6, #1
 80184bc:	e799      	b.n	80183f2 <__multiply+0x60>
	...

080184c0 <__pow5mult>:
 80184c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184c4:	4615      	mov	r5, r2
 80184c6:	f012 0203 	ands.w	r2, r2, #3
 80184ca:	4606      	mov	r6, r0
 80184cc:	460f      	mov	r7, r1
 80184ce:	d007      	beq.n	80184e0 <__pow5mult+0x20>
 80184d0:	3a01      	subs	r2, #1
 80184d2:	4c21      	ldr	r4, [pc, #132]	; (8018558 <__pow5mult+0x98>)
 80184d4:	2300      	movs	r3, #0
 80184d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80184da:	f7ff fe8a 	bl	80181f2 <__multadd>
 80184de:	4607      	mov	r7, r0
 80184e0:	10ad      	asrs	r5, r5, #2
 80184e2:	d035      	beq.n	8018550 <__pow5mult+0x90>
 80184e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80184e6:	b93c      	cbnz	r4, 80184f8 <__pow5mult+0x38>
 80184e8:	2010      	movs	r0, #16
 80184ea:	f7ff fe1d 	bl	8018128 <malloc>
 80184ee:	6270      	str	r0, [r6, #36]	; 0x24
 80184f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80184f4:	6004      	str	r4, [r0, #0]
 80184f6:	60c4      	str	r4, [r0, #12]
 80184f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80184fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018500:	b94c      	cbnz	r4, 8018516 <__pow5mult+0x56>
 8018502:	f240 2171 	movw	r1, #625	; 0x271
 8018506:	4630      	mov	r0, r6
 8018508:	f7ff ff3a 	bl	8018380 <__i2b>
 801850c:	2300      	movs	r3, #0
 801850e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018512:	4604      	mov	r4, r0
 8018514:	6003      	str	r3, [r0, #0]
 8018516:	f04f 0800 	mov.w	r8, #0
 801851a:	07eb      	lsls	r3, r5, #31
 801851c:	d50a      	bpl.n	8018534 <__pow5mult+0x74>
 801851e:	4639      	mov	r1, r7
 8018520:	4622      	mov	r2, r4
 8018522:	4630      	mov	r0, r6
 8018524:	f7ff ff35 	bl	8018392 <__multiply>
 8018528:	4639      	mov	r1, r7
 801852a:	4681      	mov	r9, r0
 801852c:	4630      	mov	r0, r6
 801852e:	f7ff fe49 	bl	80181c4 <_Bfree>
 8018532:	464f      	mov	r7, r9
 8018534:	106d      	asrs	r5, r5, #1
 8018536:	d00b      	beq.n	8018550 <__pow5mult+0x90>
 8018538:	6820      	ldr	r0, [r4, #0]
 801853a:	b938      	cbnz	r0, 801854c <__pow5mult+0x8c>
 801853c:	4622      	mov	r2, r4
 801853e:	4621      	mov	r1, r4
 8018540:	4630      	mov	r0, r6
 8018542:	f7ff ff26 	bl	8018392 <__multiply>
 8018546:	6020      	str	r0, [r4, #0]
 8018548:	f8c0 8000 	str.w	r8, [r0]
 801854c:	4604      	mov	r4, r0
 801854e:	e7e4      	b.n	801851a <__pow5mult+0x5a>
 8018550:	4638      	mov	r0, r7
 8018552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018556:	bf00      	nop
 8018558:	0801a118 	.word	0x0801a118

0801855c <__lshift>:
 801855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018560:	460c      	mov	r4, r1
 8018562:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018566:	6923      	ldr	r3, [r4, #16]
 8018568:	6849      	ldr	r1, [r1, #4]
 801856a:	eb0a 0903 	add.w	r9, sl, r3
 801856e:	68a3      	ldr	r3, [r4, #8]
 8018570:	4607      	mov	r7, r0
 8018572:	4616      	mov	r6, r2
 8018574:	f109 0501 	add.w	r5, r9, #1
 8018578:	42ab      	cmp	r3, r5
 801857a:	db32      	blt.n	80185e2 <__lshift+0x86>
 801857c:	4638      	mov	r0, r7
 801857e:	f7ff fded 	bl	801815c <_Balloc>
 8018582:	2300      	movs	r3, #0
 8018584:	4680      	mov	r8, r0
 8018586:	f100 0114 	add.w	r1, r0, #20
 801858a:	461a      	mov	r2, r3
 801858c:	4553      	cmp	r3, sl
 801858e:	db2b      	blt.n	80185e8 <__lshift+0x8c>
 8018590:	6920      	ldr	r0, [r4, #16]
 8018592:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018596:	f104 0314 	add.w	r3, r4, #20
 801859a:	f016 021f 	ands.w	r2, r6, #31
 801859e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80185a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80185a6:	d025      	beq.n	80185f4 <__lshift+0x98>
 80185a8:	f1c2 0e20 	rsb	lr, r2, #32
 80185ac:	2000      	movs	r0, #0
 80185ae:	681e      	ldr	r6, [r3, #0]
 80185b0:	468a      	mov	sl, r1
 80185b2:	4096      	lsls	r6, r2
 80185b4:	4330      	orrs	r0, r6
 80185b6:	f84a 0b04 	str.w	r0, [sl], #4
 80185ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80185be:	459c      	cmp	ip, r3
 80185c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80185c4:	d814      	bhi.n	80185f0 <__lshift+0x94>
 80185c6:	6048      	str	r0, [r1, #4]
 80185c8:	b108      	cbz	r0, 80185ce <__lshift+0x72>
 80185ca:	f109 0502 	add.w	r5, r9, #2
 80185ce:	3d01      	subs	r5, #1
 80185d0:	4638      	mov	r0, r7
 80185d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80185d6:	4621      	mov	r1, r4
 80185d8:	f7ff fdf4 	bl	80181c4 <_Bfree>
 80185dc:	4640      	mov	r0, r8
 80185de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185e2:	3101      	adds	r1, #1
 80185e4:	005b      	lsls	r3, r3, #1
 80185e6:	e7c7      	b.n	8018578 <__lshift+0x1c>
 80185e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80185ec:	3301      	adds	r3, #1
 80185ee:	e7cd      	b.n	801858c <__lshift+0x30>
 80185f0:	4651      	mov	r1, sl
 80185f2:	e7dc      	b.n	80185ae <__lshift+0x52>
 80185f4:	3904      	subs	r1, #4
 80185f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80185fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80185fe:	459c      	cmp	ip, r3
 8018600:	d8f9      	bhi.n	80185f6 <__lshift+0x9a>
 8018602:	e7e4      	b.n	80185ce <__lshift+0x72>

08018604 <__mcmp>:
 8018604:	6903      	ldr	r3, [r0, #16]
 8018606:	690a      	ldr	r2, [r1, #16]
 8018608:	1a9b      	subs	r3, r3, r2
 801860a:	b530      	push	{r4, r5, lr}
 801860c:	d10c      	bne.n	8018628 <__mcmp+0x24>
 801860e:	0092      	lsls	r2, r2, #2
 8018610:	3014      	adds	r0, #20
 8018612:	3114      	adds	r1, #20
 8018614:	1884      	adds	r4, r0, r2
 8018616:	4411      	add	r1, r2
 8018618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801861c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018620:	4295      	cmp	r5, r2
 8018622:	d003      	beq.n	801862c <__mcmp+0x28>
 8018624:	d305      	bcc.n	8018632 <__mcmp+0x2e>
 8018626:	2301      	movs	r3, #1
 8018628:	4618      	mov	r0, r3
 801862a:	bd30      	pop	{r4, r5, pc}
 801862c:	42a0      	cmp	r0, r4
 801862e:	d3f3      	bcc.n	8018618 <__mcmp+0x14>
 8018630:	e7fa      	b.n	8018628 <__mcmp+0x24>
 8018632:	f04f 33ff 	mov.w	r3, #4294967295
 8018636:	e7f7      	b.n	8018628 <__mcmp+0x24>

08018638 <__mdiff>:
 8018638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801863c:	460d      	mov	r5, r1
 801863e:	4607      	mov	r7, r0
 8018640:	4611      	mov	r1, r2
 8018642:	4628      	mov	r0, r5
 8018644:	4614      	mov	r4, r2
 8018646:	f7ff ffdd 	bl	8018604 <__mcmp>
 801864a:	1e06      	subs	r6, r0, #0
 801864c:	d108      	bne.n	8018660 <__mdiff+0x28>
 801864e:	4631      	mov	r1, r6
 8018650:	4638      	mov	r0, r7
 8018652:	f7ff fd83 	bl	801815c <_Balloc>
 8018656:	2301      	movs	r3, #1
 8018658:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801865c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018660:	bfa4      	itt	ge
 8018662:	4623      	movge	r3, r4
 8018664:	462c      	movge	r4, r5
 8018666:	4638      	mov	r0, r7
 8018668:	6861      	ldr	r1, [r4, #4]
 801866a:	bfa6      	itte	ge
 801866c:	461d      	movge	r5, r3
 801866e:	2600      	movge	r6, #0
 8018670:	2601      	movlt	r6, #1
 8018672:	f7ff fd73 	bl	801815c <_Balloc>
 8018676:	692b      	ldr	r3, [r5, #16]
 8018678:	60c6      	str	r6, [r0, #12]
 801867a:	6926      	ldr	r6, [r4, #16]
 801867c:	f105 0914 	add.w	r9, r5, #20
 8018680:	f104 0214 	add.w	r2, r4, #20
 8018684:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018688:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801868c:	f100 0514 	add.w	r5, r0, #20
 8018690:	f04f 0e00 	mov.w	lr, #0
 8018694:	f852 ab04 	ldr.w	sl, [r2], #4
 8018698:	f859 4b04 	ldr.w	r4, [r9], #4
 801869c:	fa1e f18a 	uxtah	r1, lr, sl
 80186a0:	b2a3      	uxth	r3, r4
 80186a2:	1ac9      	subs	r1, r1, r3
 80186a4:	0c23      	lsrs	r3, r4, #16
 80186a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80186aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80186ae:	b289      	uxth	r1, r1
 80186b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80186b4:	45c8      	cmp	r8, r9
 80186b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80186ba:	4694      	mov	ip, r2
 80186bc:	f845 3b04 	str.w	r3, [r5], #4
 80186c0:	d8e8      	bhi.n	8018694 <__mdiff+0x5c>
 80186c2:	45bc      	cmp	ip, r7
 80186c4:	d304      	bcc.n	80186d0 <__mdiff+0x98>
 80186c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80186ca:	b183      	cbz	r3, 80186ee <__mdiff+0xb6>
 80186cc:	6106      	str	r6, [r0, #16]
 80186ce:	e7c5      	b.n	801865c <__mdiff+0x24>
 80186d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80186d4:	fa1e f381 	uxtah	r3, lr, r1
 80186d8:	141a      	asrs	r2, r3, #16
 80186da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80186de:	b29b      	uxth	r3, r3
 80186e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80186e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80186e8:	f845 3b04 	str.w	r3, [r5], #4
 80186ec:	e7e9      	b.n	80186c2 <__mdiff+0x8a>
 80186ee:	3e01      	subs	r6, #1
 80186f0:	e7e9      	b.n	80186c6 <__mdiff+0x8e>
	...

080186f4 <__ulp>:
 80186f4:	4b12      	ldr	r3, [pc, #72]	; (8018740 <__ulp+0x4c>)
 80186f6:	ee10 2a90 	vmov	r2, s1
 80186fa:	401a      	ands	r2, r3
 80186fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018700:	2b00      	cmp	r3, #0
 8018702:	dd04      	ble.n	801870e <__ulp+0x1a>
 8018704:	2000      	movs	r0, #0
 8018706:	4619      	mov	r1, r3
 8018708:	ec41 0b10 	vmov	d0, r0, r1
 801870c:	4770      	bx	lr
 801870e:	425b      	negs	r3, r3
 8018710:	151b      	asrs	r3, r3, #20
 8018712:	2b13      	cmp	r3, #19
 8018714:	f04f 0000 	mov.w	r0, #0
 8018718:	f04f 0100 	mov.w	r1, #0
 801871c:	dc04      	bgt.n	8018728 <__ulp+0x34>
 801871e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018722:	fa42 f103 	asr.w	r1, r2, r3
 8018726:	e7ef      	b.n	8018708 <__ulp+0x14>
 8018728:	3b14      	subs	r3, #20
 801872a:	2b1e      	cmp	r3, #30
 801872c:	f04f 0201 	mov.w	r2, #1
 8018730:	bfda      	itte	le
 8018732:	f1c3 031f 	rsble	r3, r3, #31
 8018736:	fa02 f303 	lslle.w	r3, r2, r3
 801873a:	4613      	movgt	r3, r2
 801873c:	4618      	mov	r0, r3
 801873e:	e7e3      	b.n	8018708 <__ulp+0x14>
 8018740:	7ff00000 	.word	0x7ff00000

08018744 <__b2d>:
 8018744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018746:	6905      	ldr	r5, [r0, #16]
 8018748:	f100 0714 	add.w	r7, r0, #20
 801874c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018750:	1f2e      	subs	r6, r5, #4
 8018752:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018756:	4620      	mov	r0, r4
 8018758:	f7ff fdc4 	bl	80182e4 <__hi0bits>
 801875c:	f1c0 0320 	rsb	r3, r0, #32
 8018760:	280a      	cmp	r0, #10
 8018762:	600b      	str	r3, [r1, #0]
 8018764:	f8df c074 	ldr.w	ip, [pc, #116]	; 80187dc <__b2d+0x98>
 8018768:	dc14      	bgt.n	8018794 <__b2d+0x50>
 801876a:	f1c0 0e0b 	rsb	lr, r0, #11
 801876e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018772:	42b7      	cmp	r7, r6
 8018774:	ea41 030c 	orr.w	r3, r1, ip
 8018778:	bf34      	ite	cc
 801877a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801877e:	2100      	movcs	r1, #0
 8018780:	3015      	adds	r0, #21
 8018782:	fa04 f000 	lsl.w	r0, r4, r0
 8018786:	fa21 f10e 	lsr.w	r1, r1, lr
 801878a:	ea40 0201 	orr.w	r2, r0, r1
 801878e:	ec43 2b10 	vmov	d0, r2, r3
 8018792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018794:	42b7      	cmp	r7, r6
 8018796:	bf3a      	itte	cc
 8018798:	f1a5 0608 	subcc.w	r6, r5, #8
 801879c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80187a0:	2100      	movcs	r1, #0
 80187a2:	380b      	subs	r0, #11
 80187a4:	d015      	beq.n	80187d2 <__b2d+0x8e>
 80187a6:	4084      	lsls	r4, r0
 80187a8:	f1c0 0520 	rsb	r5, r0, #32
 80187ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80187b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80187b4:	42be      	cmp	r6, r7
 80187b6:	fa21 fc05 	lsr.w	ip, r1, r5
 80187ba:	ea44 030c 	orr.w	r3, r4, ip
 80187be:	bf8c      	ite	hi
 80187c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80187c4:	2400      	movls	r4, #0
 80187c6:	fa01 f000 	lsl.w	r0, r1, r0
 80187ca:	40ec      	lsrs	r4, r5
 80187cc:	ea40 0204 	orr.w	r2, r0, r4
 80187d0:	e7dd      	b.n	801878e <__b2d+0x4a>
 80187d2:	ea44 030c 	orr.w	r3, r4, ip
 80187d6:	460a      	mov	r2, r1
 80187d8:	e7d9      	b.n	801878e <__b2d+0x4a>
 80187da:	bf00      	nop
 80187dc:	3ff00000 	.word	0x3ff00000

080187e0 <__d2b>:
 80187e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80187e4:	460e      	mov	r6, r1
 80187e6:	2101      	movs	r1, #1
 80187e8:	ec59 8b10 	vmov	r8, r9, d0
 80187ec:	4615      	mov	r5, r2
 80187ee:	f7ff fcb5 	bl	801815c <_Balloc>
 80187f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80187f6:	4607      	mov	r7, r0
 80187f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80187fc:	bb34      	cbnz	r4, 801884c <__d2b+0x6c>
 80187fe:	9301      	str	r3, [sp, #4]
 8018800:	f1b8 0300 	subs.w	r3, r8, #0
 8018804:	d027      	beq.n	8018856 <__d2b+0x76>
 8018806:	a802      	add	r0, sp, #8
 8018808:	f840 3d08 	str.w	r3, [r0, #-8]!
 801880c:	f7ff fd89 	bl	8018322 <__lo0bits>
 8018810:	9900      	ldr	r1, [sp, #0]
 8018812:	b1f0      	cbz	r0, 8018852 <__d2b+0x72>
 8018814:	9a01      	ldr	r2, [sp, #4]
 8018816:	f1c0 0320 	rsb	r3, r0, #32
 801881a:	fa02 f303 	lsl.w	r3, r2, r3
 801881e:	430b      	orrs	r3, r1
 8018820:	40c2      	lsrs	r2, r0
 8018822:	617b      	str	r3, [r7, #20]
 8018824:	9201      	str	r2, [sp, #4]
 8018826:	9b01      	ldr	r3, [sp, #4]
 8018828:	61bb      	str	r3, [r7, #24]
 801882a:	2b00      	cmp	r3, #0
 801882c:	bf14      	ite	ne
 801882e:	2102      	movne	r1, #2
 8018830:	2101      	moveq	r1, #1
 8018832:	6139      	str	r1, [r7, #16]
 8018834:	b1c4      	cbz	r4, 8018868 <__d2b+0x88>
 8018836:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801883a:	4404      	add	r4, r0
 801883c:	6034      	str	r4, [r6, #0]
 801883e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018842:	6028      	str	r0, [r5, #0]
 8018844:	4638      	mov	r0, r7
 8018846:	b003      	add	sp, #12
 8018848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801884c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018850:	e7d5      	b.n	80187fe <__d2b+0x1e>
 8018852:	6179      	str	r1, [r7, #20]
 8018854:	e7e7      	b.n	8018826 <__d2b+0x46>
 8018856:	a801      	add	r0, sp, #4
 8018858:	f7ff fd63 	bl	8018322 <__lo0bits>
 801885c:	9b01      	ldr	r3, [sp, #4]
 801885e:	617b      	str	r3, [r7, #20]
 8018860:	2101      	movs	r1, #1
 8018862:	6139      	str	r1, [r7, #16]
 8018864:	3020      	adds	r0, #32
 8018866:	e7e5      	b.n	8018834 <__d2b+0x54>
 8018868:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801886c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018870:	6030      	str	r0, [r6, #0]
 8018872:	6918      	ldr	r0, [r3, #16]
 8018874:	f7ff fd36 	bl	80182e4 <__hi0bits>
 8018878:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801887c:	e7e1      	b.n	8018842 <__d2b+0x62>

0801887e <__ratio>:
 801887e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018882:	4688      	mov	r8, r1
 8018884:	4669      	mov	r1, sp
 8018886:	4681      	mov	r9, r0
 8018888:	f7ff ff5c 	bl	8018744 <__b2d>
 801888c:	a901      	add	r1, sp, #4
 801888e:	4640      	mov	r0, r8
 8018890:	ec57 6b10 	vmov	r6, r7, d0
 8018894:	f7ff ff56 	bl	8018744 <__b2d>
 8018898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801889c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80188a0:	eba3 0c02 	sub.w	ip, r3, r2
 80188a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80188a8:	1a9b      	subs	r3, r3, r2
 80188aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80188ae:	ec5b ab10 	vmov	sl, fp, d0
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	bfce      	itee	gt
 80188b6:	463a      	movgt	r2, r7
 80188b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80188bc:	465a      	movle	r2, fp
 80188be:	4659      	mov	r1, fp
 80188c0:	463d      	mov	r5, r7
 80188c2:	bfd4      	ite	le
 80188c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80188c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80188cc:	4630      	mov	r0, r6
 80188ce:	ee10 2a10 	vmov	r2, s0
 80188d2:	460b      	mov	r3, r1
 80188d4:	4629      	mov	r1, r5
 80188d6:	f7e7 ffd1 	bl	800087c <__aeabi_ddiv>
 80188da:	ec41 0b10 	vmov	d0, r0, r1
 80188de:	b003      	add	sp, #12
 80188e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080188e4 <__copybits>:
 80188e4:	3901      	subs	r1, #1
 80188e6:	b510      	push	{r4, lr}
 80188e8:	1149      	asrs	r1, r1, #5
 80188ea:	6914      	ldr	r4, [r2, #16]
 80188ec:	3101      	adds	r1, #1
 80188ee:	f102 0314 	add.w	r3, r2, #20
 80188f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80188f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80188fa:	42a3      	cmp	r3, r4
 80188fc:	4602      	mov	r2, r0
 80188fe:	d303      	bcc.n	8018908 <__copybits+0x24>
 8018900:	2300      	movs	r3, #0
 8018902:	428a      	cmp	r2, r1
 8018904:	d305      	bcc.n	8018912 <__copybits+0x2e>
 8018906:	bd10      	pop	{r4, pc}
 8018908:	f853 2b04 	ldr.w	r2, [r3], #4
 801890c:	f840 2b04 	str.w	r2, [r0], #4
 8018910:	e7f3      	b.n	80188fa <__copybits+0x16>
 8018912:	f842 3b04 	str.w	r3, [r2], #4
 8018916:	e7f4      	b.n	8018902 <__copybits+0x1e>

08018918 <__any_on>:
 8018918:	f100 0214 	add.w	r2, r0, #20
 801891c:	6900      	ldr	r0, [r0, #16]
 801891e:	114b      	asrs	r3, r1, #5
 8018920:	4298      	cmp	r0, r3
 8018922:	b510      	push	{r4, lr}
 8018924:	db11      	blt.n	801894a <__any_on+0x32>
 8018926:	dd0a      	ble.n	801893e <__any_on+0x26>
 8018928:	f011 011f 	ands.w	r1, r1, #31
 801892c:	d007      	beq.n	801893e <__any_on+0x26>
 801892e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018932:	fa24 f001 	lsr.w	r0, r4, r1
 8018936:	fa00 f101 	lsl.w	r1, r0, r1
 801893a:	428c      	cmp	r4, r1
 801893c:	d10b      	bne.n	8018956 <__any_on+0x3e>
 801893e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018942:	4293      	cmp	r3, r2
 8018944:	d803      	bhi.n	801894e <__any_on+0x36>
 8018946:	2000      	movs	r0, #0
 8018948:	bd10      	pop	{r4, pc}
 801894a:	4603      	mov	r3, r0
 801894c:	e7f7      	b.n	801893e <__any_on+0x26>
 801894e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018952:	2900      	cmp	r1, #0
 8018954:	d0f5      	beq.n	8018942 <__any_on+0x2a>
 8018956:	2001      	movs	r0, #1
 8018958:	e7f6      	b.n	8018948 <__any_on+0x30>

0801895a <_calloc_r>:
 801895a:	b538      	push	{r3, r4, r5, lr}
 801895c:	fb02 f401 	mul.w	r4, r2, r1
 8018960:	4621      	mov	r1, r4
 8018962:	f000 f857 	bl	8018a14 <_malloc_r>
 8018966:	4605      	mov	r5, r0
 8018968:	b118      	cbz	r0, 8018972 <_calloc_r+0x18>
 801896a:	4622      	mov	r2, r4
 801896c:	2100      	movs	r1, #0
 801896e:	f7fc fcaa 	bl	80152c6 <memset>
 8018972:	4628      	mov	r0, r5
 8018974:	bd38      	pop	{r3, r4, r5, pc}
	...

08018978 <_free_r>:
 8018978:	b538      	push	{r3, r4, r5, lr}
 801897a:	4605      	mov	r5, r0
 801897c:	2900      	cmp	r1, #0
 801897e:	d045      	beq.n	8018a0c <_free_r+0x94>
 8018980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018984:	1f0c      	subs	r4, r1, #4
 8018986:	2b00      	cmp	r3, #0
 8018988:	bfb8      	it	lt
 801898a:	18e4      	addlt	r4, r4, r3
 801898c:	f000 fe30 	bl	80195f0 <__malloc_lock>
 8018990:	4a1f      	ldr	r2, [pc, #124]	; (8018a10 <_free_r+0x98>)
 8018992:	6813      	ldr	r3, [r2, #0]
 8018994:	4610      	mov	r0, r2
 8018996:	b933      	cbnz	r3, 80189a6 <_free_r+0x2e>
 8018998:	6063      	str	r3, [r4, #4]
 801899a:	6014      	str	r4, [r2, #0]
 801899c:	4628      	mov	r0, r5
 801899e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189a2:	f000 be26 	b.w	80195f2 <__malloc_unlock>
 80189a6:	42a3      	cmp	r3, r4
 80189a8:	d90c      	bls.n	80189c4 <_free_r+0x4c>
 80189aa:	6821      	ldr	r1, [r4, #0]
 80189ac:	1862      	adds	r2, r4, r1
 80189ae:	4293      	cmp	r3, r2
 80189b0:	bf04      	itt	eq
 80189b2:	681a      	ldreq	r2, [r3, #0]
 80189b4:	685b      	ldreq	r3, [r3, #4]
 80189b6:	6063      	str	r3, [r4, #4]
 80189b8:	bf04      	itt	eq
 80189ba:	1852      	addeq	r2, r2, r1
 80189bc:	6022      	streq	r2, [r4, #0]
 80189be:	6004      	str	r4, [r0, #0]
 80189c0:	e7ec      	b.n	801899c <_free_r+0x24>
 80189c2:	4613      	mov	r3, r2
 80189c4:	685a      	ldr	r2, [r3, #4]
 80189c6:	b10a      	cbz	r2, 80189cc <_free_r+0x54>
 80189c8:	42a2      	cmp	r2, r4
 80189ca:	d9fa      	bls.n	80189c2 <_free_r+0x4a>
 80189cc:	6819      	ldr	r1, [r3, #0]
 80189ce:	1858      	adds	r0, r3, r1
 80189d0:	42a0      	cmp	r0, r4
 80189d2:	d10b      	bne.n	80189ec <_free_r+0x74>
 80189d4:	6820      	ldr	r0, [r4, #0]
 80189d6:	4401      	add	r1, r0
 80189d8:	1858      	adds	r0, r3, r1
 80189da:	4282      	cmp	r2, r0
 80189dc:	6019      	str	r1, [r3, #0]
 80189de:	d1dd      	bne.n	801899c <_free_r+0x24>
 80189e0:	6810      	ldr	r0, [r2, #0]
 80189e2:	6852      	ldr	r2, [r2, #4]
 80189e4:	605a      	str	r2, [r3, #4]
 80189e6:	4401      	add	r1, r0
 80189e8:	6019      	str	r1, [r3, #0]
 80189ea:	e7d7      	b.n	801899c <_free_r+0x24>
 80189ec:	d902      	bls.n	80189f4 <_free_r+0x7c>
 80189ee:	230c      	movs	r3, #12
 80189f0:	602b      	str	r3, [r5, #0]
 80189f2:	e7d3      	b.n	801899c <_free_r+0x24>
 80189f4:	6820      	ldr	r0, [r4, #0]
 80189f6:	1821      	adds	r1, r4, r0
 80189f8:	428a      	cmp	r2, r1
 80189fa:	bf04      	itt	eq
 80189fc:	6811      	ldreq	r1, [r2, #0]
 80189fe:	6852      	ldreq	r2, [r2, #4]
 8018a00:	6062      	str	r2, [r4, #4]
 8018a02:	bf04      	itt	eq
 8018a04:	1809      	addeq	r1, r1, r0
 8018a06:	6021      	streq	r1, [r4, #0]
 8018a08:	605c      	str	r4, [r3, #4]
 8018a0a:	e7c7      	b.n	801899c <_free_r+0x24>
 8018a0c:	bd38      	pop	{r3, r4, r5, pc}
 8018a0e:	bf00      	nop
 8018a10:	2003d4b4 	.word	0x2003d4b4

08018a14 <_malloc_r>:
 8018a14:	b570      	push	{r4, r5, r6, lr}
 8018a16:	1ccd      	adds	r5, r1, #3
 8018a18:	f025 0503 	bic.w	r5, r5, #3
 8018a1c:	3508      	adds	r5, #8
 8018a1e:	2d0c      	cmp	r5, #12
 8018a20:	bf38      	it	cc
 8018a22:	250c      	movcc	r5, #12
 8018a24:	2d00      	cmp	r5, #0
 8018a26:	4606      	mov	r6, r0
 8018a28:	db01      	blt.n	8018a2e <_malloc_r+0x1a>
 8018a2a:	42a9      	cmp	r1, r5
 8018a2c:	d903      	bls.n	8018a36 <_malloc_r+0x22>
 8018a2e:	230c      	movs	r3, #12
 8018a30:	6033      	str	r3, [r6, #0]
 8018a32:	2000      	movs	r0, #0
 8018a34:	bd70      	pop	{r4, r5, r6, pc}
 8018a36:	f000 fddb 	bl	80195f0 <__malloc_lock>
 8018a3a:	4a21      	ldr	r2, [pc, #132]	; (8018ac0 <_malloc_r+0xac>)
 8018a3c:	6814      	ldr	r4, [r2, #0]
 8018a3e:	4621      	mov	r1, r4
 8018a40:	b991      	cbnz	r1, 8018a68 <_malloc_r+0x54>
 8018a42:	4c20      	ldr	r4, [pc, #128]	; (8018ac4 <_malloc_r+0xb0>)
 8018a44:	6823      	ldr	r3, [r4, #0]
 8018a46:	b91b      	cbnz	r3, 8018a50 <_malloc_r+0x3c>
 8018a48:	4630      	mov	r0, r6
 8018a4a:	f000 fc91 	bl	8019370 <_sbrk_r>
 8018a4e:	6020      	str	r0, [r4, #0]
 8018a50:	4629      	mov	r1, r5
 8018a52:	4630      	mov	r0, r6
 8018a54:	f000 fc8c 	bl	8019370 <_sbrk_r>
 8018a58:	1c43      	adds	r3, r0, #1
 8018a5a:	d124      	bne.n	8018aa6 <_malloc_r+0x92>
 8018a5c:	230c      	movs	r3, #12
 8018a5e:	6033      	str	r3, [r6, #0]
 8018a60:	4630      	mov	r0, r6
 8018a62:	f000 fdc6 	bl	80195f2 <__malloc_unlock>
 8018a66:	e7e4      	b.n	8018a32 <_malloc_r+0x1e>
 8018a68:	680b      	ldr	r3, [r1, #0]
 8018a6a:	1b5b      	subs	r3, r3, r5
 8018a6c:	d418      	bmi.n	8018aa0 <_malloc_r+0x8c>
 8018a6e:	2b0b      	cmp	r3, #11
 8018a70:	d90f      	bls.n	8018a92 <_malloc_r+0x7e>
 8018a72:	600b      	str	r3, [r1, #0]
 8018a74:	50cd      	str	r5, [r1, r3]
 8018a76:	18cc      	adds	r4, r1, r3
 8018a78:	4630      	mov	r0, r6
 8018a7a:	f000 fdba 	bl	80195f2 <__malloc_unlock>
 8018a7e:	f104 000b 	add.w	r0, r4, #11
 8018a82:	1d23      	adds	r3, r4, #4
 8018a84:	f020 0007 	bic.w	r0, r0, #7
 8018a88:	1ac3      	subs	r3, r0, r3
 8018a8a:	d0d3      	beq.n	8018a34 <_malloc_r+0x20>
 8018a8c:	425a      	negs	r2, r3
 8018a8e:	50e2      	str	r2, [r4, r3]
 8018a90:	e7d0      	b.n	8018a34 <_malloc_r+0x20>
 8018a92:	428c      	cmp	r4, r1
 8018a94:	684b      	ldr	r3, [r1, #4]
 8018a96:	bf16      	itet	ne
 8018a98:	6063      	strne	r3, [r4, #4]
 8018a9a:	6013      	streq	r3, [r2, #0]
 8018a9c:	460c      	movne	r4, r1
 8018a9e:	e7eb      	b.n	8018a78 <_malloc_r+0x64>
 8018aa0:	460c      	mov	r4, r1
 8018aa2:	6849      	ldr	r1, [r1, #4]
 8018aa4:	e7cc      	b.n	8018a40 <_malloc_r+0x2c>
 8018aa6:	1cc4      	adds	r4, r0, #3
 8018aa8:	f024 0403 	bic.w	r4, r4, #3
 8018aac:	42a0      	cmp	r0, r4
 8018aae:	d005      	beq.n	8018abc <_malloc_r+0xa8>
 8018ab0:	1a21      	subs	r1, r4, r0
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	f000 fc5c 	bl	8019370 <_sbrk_r>
 8018ab8:	3001      	adds	r0, #1
 8018aba:	d0cf      	beq.n	8018a5c <_malloc_r+0x48>
 8018abc:	6025      	str	r5, [r4, #0]
 8018abe:	e7db      	b.n	8018a78 <_malloc_r+0x64>
 8018ac0:	2003d4b4 	.word	0x2003d4b4
 8018ac4:	2003d4b8 	.word	0x2003d4b8

08018ac8 <__ssputs_r>:
 8018ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018acc:	688e      	ldr	r6, [r1, #8]
 8018ace:	429e      	cmp	r6, r3
 8018ad0:	4682      	mov	sl, r0
 8018ad2:	460c      	mov	r4, r1
 8018ad4:	4690      	mov	r8, r2
 8018ad6:	4699      	mov	r9, r3
 8018ad8:	d837      	bhi.n	8018b4a <__ssputs_r+0x82>
 8018ada:	898a      	ldrh	r2, [r1, #12]
 8018adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ae0:	d031      	beq.n	8018b46 <__ssputs_r+0x7e>
 8018ae2:	6825      	ldr	r5, [r4, #0]
 8018ae4:	6909      	ldr	r1, [r1, #16]
 8018ae6:	1a6f      	subs	r7, r5, r1
 8018ae8:	6965      	ldr	r5, [r4, #20]
 8018aea:	2302      	movs	r3, #2
 8018aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018af0:	fb95 f5f3 	sdiv	r5, r5, r3
 8018af4:	f109 0301 	add.w	r3, r9, #1
 8018af8:	443b      	add	r3, r7
 8018afa:	429d      	cmp	r5, r3
 8018afc:	bf38      	it	cc
 8018afe:	461d      	movcc	r5, r3
 8018b00:	0553      	lsls	r3, r2, #21
 8018b02:	d530      	bpl.n	8018b66 <__ssputs_r+0x9e>
 8018b04:	4629      	mov	r1, r5
 8018b06:	f7ff ff85 	bl	8018a14 <_malloc_r>
 8018b0a:	4606      	mov	r6, r0
 8018b0c:	b950      	cbnz	r0, 8018b24 <__ssputs_r+0x5c>
 8018b0e:	230c      	movs	r3, #12
 8018b10:	f8ca 3000 	str.w	r3, [sl]
 8018b14:	89a3      	ldrh	r3, [r4, #12]
 8018b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b1a:	81a3      	strh	r3, [r4, #12]
 8018b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8018b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b24:	463a      	mov	r2, r7
 8018b26:	6921      	ldr	r1, [r4, #16]
 8018b28:	f7fc fbc2 	bl	80152b0 <memcpy>
 8018b2c:	89a3      	ldrh	r3, [r4, #12]
 8018b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b36:	81a3      	strh	r3, [r4, #12]
 8018b38:	6126      	str	r6, [r4, #16]
 8018b3a:	6165      	str	r5, [r4, #20]
 8018b3c:	443e      	add	r6, r7
 8018b3e:	1bed      	subs	r5, r5, r7
 8018b40:	6026      	str	r6, [r4, #0]
 8018b42:	60a5      	str	r5, [r4, #8]
 8018b44:	464e      	mov	r6, r9
 8018b46:	454e      	cmp	r6, r9
 8018b48:	d900      	bls.n	8018b4c <__ssputs_r+0x84>
 8018b4a:	464e      	mov	r6, r9
 8018b4c:	4632      	mov	r2, r6
 8018b4e:	4641      	mov	r1, r8
 8018b50:	6820      	ldr	r0, [r4, #0]
 8018b52:	f000 fd34 	bl	80195be <memmove>
 8018b56:	68a3      	ldr	r3, [r4, #8]
 8018b58:	1b9b      	subs	r3, r3, r6
 8018b5a:	60a3      	str	r3, [r4, #8]
 8018b5c:	6823      	ldr	r3, [r4, #0]
 8018b5e:	441e      	add	r6, r3
 8018b60:	6026      	str	r6, [r4, #0]
 8018b62:	2000      	movs	r0, #0
 8018b64:	e7dc      	b.n	8018b20 <__ssputs_r+0x58>
 8018b66:	462a      	mov	r2, r5
 8018b68:	f000 fd44 	bl	80195f4 <_realloc_r>
 8018b6c:	4606      	mov	r6, r0
 8018b6e:	2800      	cmp	r0, #0
 8018b70:	d1e2      	bne.n	8018b38 <__ssputs_r+0x70>
 8018b72:	6921      	ldr	r1, [r4, #16]
 8018b74:	4650      	mov	r0, sl
 8018b76:	f7ff feff 	bl	8018978 <_free_r>
 8018b7a:	e7c8      	b.n	8018b0e <__ssputs_r+0x46>

08018b7c <_svfiprintf_r>:
 8018b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b80:	461d      	mov	r5, r3
 8018b82:	898b      	ldrh	r3, [r1, #12]
 8018b84:	061f      	lsls	r7, r3, #24
 8018b86:	b09d      	sub	sp, #116	; 0x74
 8018b88:	4680      	mov	r8, r0
 8018b8a:	460c      	mov	r4, r1
 8018b8c:	4616      	mov	r6, r2
 8018b8e:	d50f      	bpl.n	8018bb0 <_svfiprintf_r+0x34>
 8018b90:	690b      	ldr	r3, [r1, #16]
 8018b92:	b96b      	cbnz	r3, 8018bb0 <_svfiprintf_r+0x34>
 8018b94:	2140      	movs	r1, #64	; 0x40
 8018b96:	f7ff ff3d 	bl	8018a14 <_malloc_r>
 8018b9a:	6020      	str	r0, [r4, #0]
 8018b9c:	6120      	str	r0, [r4, #16]
 8018b9e:	b928      	cbnz	r0, 8018bac <_svfiprintf_r+0x30>
 8018ba0:	230c      	movs	r3, #12
 8018ba2:	f8c8 3000 	str.w	r3, [r8]
 8018ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8018baa:	e0c8      	b.n	8018d3e <_svfiprintf_r+0x1c2>
 8018bac:	2340      	movs	r3, #64	; 0x40
 8018bae:	6163      	str	r3, [r4, #20]
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8018bb4:	2320      	movs	r3, #32
 8018bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018bba:	2330      	movs	r3, #48	; 0x30
 8018bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018bc0:	9503      	str	r5, [sp, #12]
 8018bc2:	f04f 0b01 	mov.w	fp, #1
 8018bc6:	4637      	mov	r7, r6
 8018bc8:	463d      	mov	r5, r7
 8018bca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018bce:	b10b      	cbz	r3, 8018bd4 <_svfiprintf_r+0x58>
 8018bd0:	2b25      	cmp	r3, #37	; 0x25
 8018bd2:	d13e      	bne.n	8018c52 <_svfiprintf_r+0xd6>
 8018bd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8018bd8:	d00b      	beq.n	8018bf2 <_svfiprintf_r+0x76>
 8018bda:	4653      	mov	r3, sl
 8018bdc:	4632      	mov	r2, r6
 8018bde:	4621      	mov	r1, r4
 8018be0:	4640      	mov	r0, r8
 8018be2:	f7ff ff71 	bl	8018ac8 <__ssputs_r>
 8018be6:	3001      	adds	r0, #1
 8018be8:	f000 80a4 	beq.w	8018d34 <_svfiprintf_r+0x1b8>
 8018bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bee:	4453      	add	r3, sl
 8018bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8018bf2:	783b      	ldrb	r3, [r7, #0]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	f000 809d 	beq.w	8018d34 <_svfiprintf_r+0x1b8>
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8018c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c04:	9304      	str	r3, [sp, #16]
 8018c06:	9307      	str	r3, [sp, #28]
 8018c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8018c0e:	462f      	mov	r7, r5
 8018c10:	2205      	movs	r2, #5
 8018c12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018c16:	4850      	ldr	r0, [pc, #320]	; (8018d58 <_svfiprintf_r+0x1dc>)
 8018c18:	f7e7 fafa 	bl	8000210 <memchr>
 8018c1c:	9b04      	ldr	r3, [sp, #16]
 8018c1e:	b9d0      	cbnz	r0, 8018c56 <_svfiprintf_r+0xda>
 8018c20:	06d9      	lsls	r1, r3, #27
 8018c22:	bf44      	itt	mi
 8018c24:	2220      	movmi	r2, #32
 8018c26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018c2a:	071a      	lsls	r2, r3, #28
 8018c2c:	bf44      	itt	mi
 8018c2e:	222b      	movmi	r2, #43	; 0x2b
 8018c30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018c34:	782a      	ldrb	r2, [r5, #0]
 8018c36:	2a2a      	cmp	r2, #42	; 0x2a
 8018c38:	d015      	beq.n	8018c66 <_svfiprintf_r+0xea>
 8018c3a:	9a07      	ldr	r2, [sp, #28]
 8018c3c:	462f      	mov	r7, r5
 8018c3e:	2000      	movs	r0, #0
 8018c40:	250a      	movs	r5, #10
 8018c42:	4639      	mov	r1, r7
 8018c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c48:	3b30      	subs	r3, #48	; 0x30
 8018c4a:	2b09      	cmp	r3, #9
 8018c4c:	d94d      	bls.n	8018cea <_svfiprintf_r+0x16e>
 8018c4e:	b1b8      	cbz	r0, 8018c80 <_svfiprintf_r+0x104>
 8018c50:	e00f      	b.n	8018c72 <_svfiprintf_r+0xf6>
 8018c52:	462f      	mov	r7, r5
 8018c54:	e7b8      	b.n	8018bc8 <_svfiprintf_r+0x4c>
 8018c56:	4a40      	ldr	r2, [pc, #256]	; (8018d58 <_svfiprintf_r+0x1dc>)
 8018c58:	1a80      	subs	r0, r0, r2
 8018c5a:	fa0b f000 	lsl.w	r0, fp, r0
 8018c5e:	4318      	orrs	r0, r3
 8018c60:	9004      	str	r0, [sp, #16]
 8018c62:	463d      	mov	r5, r7
 8018c64:	e7d3      	b.n	8018c0e <_svfiprintf_r+0x92>
 8018c66:	9a03      	ldr	r2, [sp, #12]
 8018c68:	1d11      	adds	r1, r2, #4
 8018c6a:	6812      	ldr	r2, [r2, #0]
 8018c6c:	9103      	str	r1, [sp, #12]
 8018c6e:	2a00      	cmp	r2, #0
 8018c70:	db01      	blt.n	8018c76 <_svfiprintf_r+0xfa>
 8018c72:	9207      	str	r2, [sp, #28]
 8018c74:	e004      	b.n	8018c80 <_svfiprintf_r+0x104>
 8018c76:	4252      	negs	r2, r2
 8018c78:	f043 0302 	orr.w	r3, r3, #2
 8018c7c:	9207      	str	r2, [sp, #28]
 8018c7e:	9304      	str	r3, [sp, #16]
 8018c80:	783b      	ldrb	r3, [r7, #0]
 8018c82:	2b2e      	cmp	r3, #46	; 0x2e
 8018c84:	d10c      	bne.n	8018ca0 <_svfiprintf_r+0x124>
 8018c86:	787b      	ldrb	r3, [r7, #1]
 8018c88:	2b2a      	cmp	r3, #42	; 0x2a
 8018c8a:	d133      	bne.n	8018cf4 <_svfiprintf_r+0x178>
 8018c8c:	9b03      	ldr	r3, [sp, #12]
 8018c8e:	1d1a      	adds	r2, r3, #4
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	9203      	str	r2, [sp, #12]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	bfb8      	it	lt
 8018c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8018c9c:	3702      	adds	r7, #2
 8018c9e:	9305      	str	r3, [sp, #20]
 8018ca0:	4d2e      	ldr	r5, [pc, #184]	; (8018d5c <_svfiprintf_r+0x1e0>)
 8018ca2:	7839      	ldrb	r1, [r7, #0]
 8018ca4:	2203      	movs	r2, #3
 8018ca6:	4628      	mov	r0, r5
 8018ca8:	f7e7 fab2 	bl	8000210 <memchr>
 8018cac:	b138      	cbz	r0, 8018cbe <_svfiprintf_r+0x142>
 8018cae:	2340      	movs	r3, #64	; 0x40
 8018cb0:	1b40      	subs	r0, r0, r5
 8018cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8018cb6:	9b04      	ldr	r3, [sp, #16]
 8018cb8:	4303      	orrs	r3, r0
 8018cba:	3701      	adds	r7, #1
 8018cbc:	9304      	str	r3, [sp, #16]
 8018cbe:	7839      	ldrb	r1, [r7, #0]
 8018cc0:	4827      	ldr	r0, [pc, #156]	; (8018d60 <_svfiprintf_r+0x1e4>)
 8018cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018cc6:	2206      	movs	r2, #6
 8018cc8:	1c7e      	adds	r6, r7, #1
 8018cca:	f7e7 faa1 	bl	8000210 <memchr>
 8018cce:	2800      	cmp	r0, #0
 8018cd0:	d038      	beq.n	8018d44 <_svfiprintf_r+0x1c8>
 8018cd2:	4b24      	ldr	r3, [pc, #144]	; (8018d64 <_svfiprintf_r+0x1e8>)
 8018cd4:	bb13      	cbnz	r3, 8018d1c <_svfiprintf_r+0x1a0>
 8018cd6:	9b03      	ldr	r3, [sp, #12]
 8018cd8:	3307      	adds	r3, #7
 8018cda:	f023 0307 	bic.w	r3, r3, #7
 8018cde:	3308      	adds	r3, #8
 8018ce0:	9303      	str	r3, [sp, #12]
 8018ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ce4:	444b      	add	r3, r9
 8018ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8018ce8:	e76d      	b.n	8018bc6 <_svfiprintf_r+0x4a>
 8018cea:	fb05 3202 	mla	r2, r5, r2, r3
 8018cee:	2001      	movs	r0, #1
 8018cf0:	460f      	mov	r7, r1
 8018cf2:	e7a6      	b.n	8018c42 <_svfiprintf_r+0xc6>
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	3701      	adds	r7, #1
 8018cf8:	9305      	str	r3, [sp, #20]
 8018cfa:	4619      	mov	r1, r3
 8018cfc:	250a      	movs	r5, #10
 8018cfe:	4638      	mov	r0, r7
 8018d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d04:	3a30      	subs	r2, #48	; 0x30
 8018d06:	2a09      	cmp	r2, #9
 8018d08:	d903      	bls.n	8018d12 <_svfiprintf_r+0x196>
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d0c8      	beq.n	8018ca0 <_svfiprintf_r+0x124>
 8018d0e:	9105      	str	r1, [sp, #20]
 8018d10:	e7c6      	b.n	8018ca0 <_svfiprintf_r+0x124>
 8018d12:	fb05 2101 	mla	r1, r5, r1, r2
 8018d16:	2301      	movs	r3, #1
 8018d18:	4607      	mov	r7, r0
 8018d1a:	e7f0      	b.n	8018cfe <_svfiprintf_r+0x182>
 8018d1c:	ab03      	add	r3, sp, #12
 8018d1e:	9300      	str	r3, [sp, #0]
 8018d20:	4622      	mov	r2, r4
 8018d22:	4b11      	ldr	r3, [pc, #68]	; (8018d68 <_svfiprintf_r+0x1ec>)
 8018d24:	a904      	add	r1, sp, #16
 8018d26:	4640      	mov	r0, r8
 8018d28:	f7fc fb6a 	bl	8015400 <_printf_float>
 8018d2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018d30:	4681      	mov	r9, r0
 8018d32:	d1d6      	bne.n	8018ce2 <_svfiprintf_r+0x166>
 8018d34:	89a3      	ldrh	r3, [r4, #12]
 8018d36:	065b      	lsls	r3, r3, #25
 8018d38:	f53f af35 	bmi.w	8018ba6 <_svfiprintf_r+0x2a>
 8018d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d3e:	b01d      	add	sp, #116	; 0x74
 8018d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d44:	ab03      	add	r3, sp, #12
 8018d46:	9300      	str	r3, [sp, #0]
 8018d48:	4622      	mov	r2, r4
 8018d4a:	4b07      	ldr	r3, [pc, #28]	; (8018d68 <_svfiprintf_r+0x1ec>)
 8018d4c:	a904      	add	r1, sp, #16
 8018d4e:	4640      	mov	r0, r8
 8018d50:	f7fc fe0c 	bl	801596c <_printf_i>
 8018d54:	e7ea      	b.n	8018d2c <_svfiprintf_r+0x1b0>
 8018d56:	bf00      	nop
 8018d58:	0801a124 	.word	0x0801a124
 8018d5c:	0801a12a 	.word	0x0801a12a
 8018d60:	0801a12e 	.word	0x0801a12e
 8018d64:	08015401 	.word	0x08015401
 8018d68:	08018ac9 	.word	0x08018ac9

08018d6c <_sungetc_r>:
 8018d6c:	b538      	push	{r3, r4, r5, lr}
 8018d6e:	1c4b      	adds	r3, r1, #1
 8018d70:	4614      	mov	r4, r2
 8018d72:	d103      	bne.n	8018d7c <_sungetc_r+0x10>
 8018d74:	f04f 35ff 	mov.w	r5, #4294967295
 8018d78:	4628      	mov	r0, r5
 8018d7a:	bd38      	pop	{r3, r4, r5, pc}
 8018d7c:	8993      	ldrh	r3, [r2, #12]
 8018d7e:	f023 0320 	bic.w	r3, r3, #32
 8018d82:	8193      	strh	r3, [r2, #12]
 8018d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d86:	6852      	ldr	r2, [r2, #4]
 8018d88:	b2cd      	uxtb	r5, r1
 8018d8a:	b18b      	cbz	r3, 8018db0 <_sungetc_r+0x44>
 8018d8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018d8e:	4293      	cmp	r3, r2
 8018d90:	dd08      	ble.n	8018da4 <_sungetc_r+0x38>
 8018d92:	6823      	ldr	r3, [r4, #0]
 8018d94:	1e5a      	subs	r2, r3, #1
 8018d96:	6022      	str	r2, [r4, #0]
 8018d98:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018d9c:	6863      	ldr	r3, [r4, #4]
 8018d9e:	3301      	adds	r3, #1
 8018da0:	6063      	str	r3, [r4, #4]
 8018da2:	e7e9      	b.n	8018d78 <_sungetc_r+0xc>
 8018da4:	4621      	mov	r1, r4
 8018da6:	f000 fbc3 	bl	8019530 <__submore>
 8018daa:	2800      	cmp	r0, #0
 8018dac:	d0f1      	beq.n	8018d92 <_sungetc_r+0x26>
 8018dae:	e7e1      	b.n	8018d74 <_sungetc_r+0x8>
 8018db0:	6921      	ldr	r1, [r4, #16]
 8018db2:	6823      	ldr	r3, [r4, #0]
 8018db4:	b151      	cbz	r1, 8018dcc <_sungetc_r+0x60>
 8018db6:	4299      	cmp	r1, r3
 8018db8:	d208      	bcs.n	8018dcc <_sungetc_r+0x60>
 8018dba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018dbe:	42a9      	cmp	r1, r5
 8018dc0:	d104      	bne.n	8018dcc <_sungetc_r+0x60>
 8018dc2:	3b01      	subs	r3, #1
 8018dc4:	3201      	adds	r2, #1
 8018dc6:	6023      	str	r3, [r4, #0]
 8018dc8:	6062      	str	r2, [r4, #4]
 8018dca:	e7d5      	b.n	8018d78 <_sungetc_r+0xc>
 8018dcc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8018dd6:	2303      	movs	r3, #3
 8018dd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8018dda:	4623      	mov	r3, r4
 8018ddc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018de0:	6023      	str	r3, [r4, #0]
 8018de2:	2301      	movs	r3, #1
 8018de4:	e7dc      	b.n	8018da0 <_sungetc_r+0x34>

08018de6 <__ssrefill_r>:
 8018de6:	b510      	push	{r4, lr}
 8018de8:	460c      	mov	r4, r1
 8018dea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018dec:	b169      	cbz	r1, 8018e0a <__ssrefill_r+0x24>
 8018dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018df2:	4299      	cmp	r1, r3
 8018df4:	d001      	beq.n	8018dfa <__ssrefill_r+0x14>
 8018df6:	f7ff fdbf 	bl	8018978 <_free_r>
 8018dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018dfc:	6063      	str	r3, [r4, #4]
 8018dfe:	2000      	movs	r0, #0
 8018e00:	6360      	str	r0, [r4, #52]	; 0x34
 8018e02:	b113      	cbz	r3, 8018e0a <__ssrefill_r+0x24>
 8018e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e06:	6023      	str	r3, [r4, #0]
 8018e08:	bd10      	pop	{r4, pc}
 8018e0a:	6923      	ldr	r3, [r4, #16]
 8018e0c:	6023      	str	r3, [r4, #0]
 8018e0e:	2300      	movs	r3, #0
 8018e10:	6063      	str	r3, [r4, #4]
 8018e12:	89a3      	ldrh	r3, [r4, #12]
 8018e14:	f043 0320 	orr.w	r3, r3, #32
 8018e18:	81a3      	strh	r3, [r4, #12]
 8018e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8018e1e:	e7f3      	b.n	8018e08 <__ssrefill_r+0x22>

08018e20 <__ssvfiscanf_r>:
 8018e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e24:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018e28:	460c      	mov	r4, r1
 8018e2a:	2100      	movs	r1, #0
 8018e2c:	9144      	str	r1, [sp, #272]	; 0x110
 8018e2e:	9145      	str	r1, [sp, #276]	; 0x114
 8018e30:	499f      	ldr	r1, [pc, #636]	; (80190b0 <__ssvfiscanf_r+0x290>)
 8018e32:	91a0      	str	r1, [sp, #640]	; 0x280
 8018e34:	f10d 0804 	add.w	r8, sp, #4
 8018e38:	499e      	ldr	r1, [pc, #632]	; (80190b4 <__ssvfiscanf_r+0x294>)
 8018e3a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80190b8 <__ssvfiscanf_r+0x298>
 8018e3e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018e42:	4606      	mov	r6, r0
 8018e44:	4692      	mov	sl, r2
 8018e46:	91a1      	str	r1, [sp, #644]	; 0x284
 8018e48:	9300      	str	r3, [sp, #0]
 8018e4a:	270a      	movs	r7, #10
 8018e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	f000 812a 	beq.w	80190aa <__ssvfiscanf_r+0x28a>
 8018e56:	4655      	mov	r5, sl
 8018e58:	f7ff f948 	bl	80180ec <__locale_ctype_ptr>
 8018e5c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018e60:	4458      	add	r0, fp
 8018e62:	7843      	ldrb	r3, [r0, #1]
 8018e64:	f013 0308 	ands.w	r3, r3, #8
 8018e68:	d01c      	beq.n	8018ea4 <__ssvfiscanf_r+0x84>
 8018e6a:	6863      	ldr	r3, [r4, #4]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	dd12      	ble.n	8018e96 <__ssvfiscanf_r+0x76>
 8018e70:	f7ff f93c 	bl	80180ec <__locale_ctype_ptr>
 8018e74:	6823      	ldr	r3, [r4, #0]
 8018e76:	781a      	ldrb	r2, [r3, #0]
 8018e78:	4410      	add	r0, r2
 8018e7a:	7842      	ldrb	r2, [r0, #1]
 8018e7c:	0712      	lsls	r2, r2, #28
 8018e7e:	d401      	bmi.n	8018e84 <__ssvfiscanf_r+0x64>
 8018e80:	46aa      	mov	sl, r5
 8018e82:	e7e3      	b.n	8018e4c <__ssvfiscanf_r+0x2c>
 8018e84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e86:	3201      	adds	r2, #1
 8018e88:	9245      	str	r2, [sp, #276]	; 0x114
 8018e8a:	6862      	ldr	r2, [r4, #4]
 8018e8c:	3301      	adds	r3, #1
 8018e8e:	3a01      	subs	r2, #1
 8018e90:	6062      	str	r2, [r4, #4]
 8018e92:	6023      	str	r3, [r4, #0]
 8018e94:	e7e9      	b.n	8018e6a <__ssvfiscanf_r+0x4a>
 8018e96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e98:	4621      	mov	r1, r4
 8018e9a:	4630      	mov	r0, r6
 8018e9c:	4798      	blx	r3
 8018e9e:	2800      	cmp	r0, #0
 8018ea0:	d0e6      	beq.n	8018e70 <__ssvfiscanf_r+0x50>
 8018ea2:	e7ed      	b.n	8018e80 <__ssvfiscanf_r+0x60>
 8018ea4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018ea8:	f040 8082 	bne.w	8018fb0 <__ssvfiscanf_r+0x190>
 8018eac:	9343      	str	r3, [sp, #268]	; 0x10c
 8018eae:	9341      	str	r3, [sp, #260]	; 0x104
 8018eb0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8018eb6:	d103      	bne.n	8018ec0 <__ssvfiscanf_r+0xa0>
 8018eb8:	2310      	movs	r3, #16
 8018eba:	9341      	str	r3, [sp, #260]	; 0x104
 8018ebc:	f10a 0502 	add.w	r5, sl, #2
 8018ec0:	46aa      	mov	sl, r5
 8018ec2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018ec6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018eca:	2a09      	cmp	r2, #9
 8018ecc:	d922      	bls.n	8018f14 <__ssvfiscanf_r+0xf4>
 8018ece:	2203      	movs	r2, #3
 8018ed0:	4879      	ldr	r0, [pc, #484]	; (80190b8 <__ssvfiscanf_r+0x298>)
 8018ed2:	f7e7 f99d 	bl	8000210 <memchr>
 8018ed6:	b138      	cbz	r0, 8018ee8 <__ssvfiscanf_r+0xc8>
 8018ed8:	eba0 0309 	sub.w	r3, r0, r9
 8018edc:	2001      	movs	r0, #1
 8018ede:	4098      	lsls	r0, r3
 8018ee0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018ee2:	4318      	orrs	r0, r3
 8018ee4:	9041      	str	r0, [sp, #260]	; 0x104
 8018ee6:	46aa      	mov	sl, r5
 8018ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8018eec:	2b67      	cmp	r3, #103	; 0x67
 8018eee:	f10a 0501 	add.w	r5, sl, #1
 8018ef2:	d82b      	bhi.n	8018f4c <__ssvfiscanf_r+0x12c>
 8018ef4:	2b65      	cmp	r3, #101	; 0x65
 8018ef6:	f080 809f 	bcs.w	8019038 <__ssvfiscanf_r+0x218>
 8018efa:	2b47      	cmp	r3, #71	; 0x47
 8018efc:	d810      	bhi.n	8018f20 <__ssvfiscanf_r+0x100>
 8018efe:	2b45      	cmp	r3, #69	; 0x45
 8018f00:	f080 809a 	bcs.w	8019038 <__ssvfiscanf_r+0x218>
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d06c      	beq.n	8018fe2 <__ssvfiscanf_r+0x1c2>
 8018f08:	2b25      	cmp	r3, #37	; 0x25
 8018f0a:	d051      	beq.n	8018fb0 <__ssvfiscanf_r+0x190>
 8018f0c:	2303      	movs	r3, #3
 8018f0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018f10:	9742      	str	r7, [sp, #264]	; 0x108
 8018f12:	e027      	b.n	8018f64 <__ssvfiscanf_r+0x144>
 8018f14:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018f16:	fb07 1303 	mla	r3, r7, r3, r1
 8018f1a:	3b30      	subs	r3, #48	; 0x30
 8018f1c:	9343      	str	r3, [sp, #268]	; 0x10c
 8018f1e:	e7cf      	b.n	8018ec0 <__ssvfiscanf_r+0xa0>
 8018f20:	2b5b      	cmp	r3, #91	; 0x5b
 8018f22:	d06a      	beq.n	8018ffa <__ssvfiscanf_r+0x1da>
 8018f24:	d80c      	bhi.n	8018f40 <__ssvfiscanf_r+0x120>
 8018f26:	2b58      	cmp	r3, #88	; 0x58
 8018f28:	d1f0      	bne.n	8018f0c <__ssvfiscanf_r+0xec>
 8018f2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f30:	9241      	str	r2, [sp, #260]	; 0x104
 8018f32:	2210      	movs	r2, #16
 8018f34:	9242      	str	r2, [sp, #264]	; 0x108
 8018f36:	2b6e      	cmp	r3, #110	; 0x6e
 8018f38:	bf8c      	ite	hi
 8018f3a:	2304      	movhi	r3, #4
 8018f3c:	2303      	movls	r3, #3
 8018f3e:	e010      	b.n	8018f62 <__ssvfiscanf_r+0x142>
 8018f40:	2b63      	cmp	r3, #99	; 0x63
 8018f42:	d065      	beq.n	8019010 <__ssvfiscanf_r+0x1f0>
 8018f44:	2b64      	cmp	r3, #100	; 0x64
 8018f46:	d1e1      	bne.n	8018f0c <__ssvfiscanf_r+0xec>
 8018f48:	9742      	str	r7, [sp, #264]	; 0x108
 8018f4a:	e7f4      	b.n	8018f36 <__ssvfiscanf_r+0x116>
 8018f4c:	2b70      	cmp	r3, #112	; 0x70
 8018f4e:	d04b      	beq.n	8018fe8 <__ssvfiscanf_r+0x1c8>
 8018f50:	d826      	bhi.n	8018fa0 <__ssvfiscanf_r+0x180>
 8018f52:	2b6e      	cmp	r3, #110	; 0x6e
 8018f54:	d062      	beq.n	801901c <__ssvfiscanf_r+0x1fc>
 8018f56:	d84c      	bhi.n	8018ff2 <__ssvfiscanf_r+0x1d2>
 8018f58:	2b69      	cmp	r3, #105	; 0x69
 8018f5a:	d1d7      	bne.n	8018f0c <__ssvfiscanf_r+0xec>
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	9342      	str	r3, [sp, #264]	; 0x108
 8018f60:	2303      	movs	r3, #3
 8018f62:	9347      	str	r3, [sp, #284]	; 0x11c
 8018f64:	6863      	ldr	r3, [r4, #4]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	dd68      	ble.n	801903c <__ssvfiscanf_r+0x21c>
 8018f6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f6c:	0659      	lsls	r1, r3, #25
 8018f6e:	d407      	bmi.n	8018f80 <__ssvfiscanf_r+0x160>
 8018f70:	f7ff f8bc 	bl	80180ec <__locale_ctype_ptr>
 8018f74:	6823      	ldr	r3, [r4, #0]
 8018f76:	781a      	ldrb	r2, [r3, #0]
 8018f78:	4410      	add	r0, r2
 8018f7a:	7842      	ldrb	r2, [r0, #1]
 8018f7c:	0712      	lsls	r2, r2, #28
 8018f7e:	d464      	bmi.n	801904a <__ssvfiscanf_r+0x22a>
 8018f80:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018f82:	2b02      	cmp	r3, #2
 8018f84:	dc73      	bgt.n	801906e <__ssvfiscanf_r+0x24e>
 8018f86:	466b      	mov	r3, sp
 8018f88:	4622      	mov	r2, r4
 8018f8a:	a941      	add	r1, sp, #260	; 0x104
 8018f8c:	4630      	mov	r0, r6
 8018f8e:	f000 f897 	bl	80190c0 <_scanf_chars>
 8018f92:	2801      	cmp	r0, #1
 8018f94:	f000 8089 	beq.w	80190aa <__ssvfiscanf_r+0x28a>
 8018f98:	2802      	cmp	r0, #2
 8018f9a:	f47f af71 	bne.w	8018e80 <__ssvfiscanf_r+0x60>
 8018f9e:	e01d      	b.n	8018fdc <__ssvfiscanf_r+0x1bc>
 8018fa0:	2b75      	cmp	r3, #117	; 0x75
 8018fa2:	d0d1      	beq.n	8018f48 <__ssvfiscanf_r+0x128>
 8018fa4:	2b78      	cmp	r3, #120	; 0x78
 8018fa6:	d0c0      	beq.n	8018f2a <__ssvfiscanf_r+0x10a>
 8018fa8:	2b73      	cmp	r3, #115	; 0x73
 8018faa:	d1af      	bne.n	8018f0c <__ssvfiscanf_r+0xec>
 8018fac:	2302      	movs	r3, #2
 8018fae:	e7d8      	b.n	8018f62 <__ssvfiscanf_r+0x142>
 8018fb0:	6863      	ldr	r3, [r4, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	dd0c      	ble.n	8018fd0 <__ssvfiscanf_r+0x1b0>
 8018fb6:	6823      	ldr	r3, [r4, #0]
 8018fb8:	781a      	ldrb	r2, [r3, #0]
 8018fba:	455a      	cmp	r2, fp
 8018fbc:	d175      	bne.n	80190aa <__ssvfiscanf_r+0x28a>
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	6862      	ldr	r2, [r4, #4]
 8018fc2:	6023      	str	r3, [r4, #0]
 8018fc4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018fc6:	3a01      	subs	r2, #1
 8018fc8:	3301      	adds	r3, #1
 8018fca:	6062      	str	r2, [r4, #4]
 8018fcc:	9345      	str	r3, [sp, #276]	; 0x114
 8018fce:	e757      	b.n	8018e80 <__ssvfiscanf_r+0x60>
 8018fd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018fd2:	4621      	mov	r1, r4
 8018fd4:	4630      	mov	r0, r6
 8018fd6:	4798      	blx	r3
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	d0ec      	beq.n	8018fb6 <__ssvfiscanf_r+0x196>
 8018fdc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	d159      	bne.n	8019096 <__ssvfiscanf_r+0x276>
 8018fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8018fe6:	e05c      	b.n	80190a2 <__ssvfiscanf_r+0x282>
 8018fe8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018fea:	f042 0220 	orr.w	r2, r2, #32
 8018fee:	9241      	str	r2, [sp, #260]	; 0x104
 8018ff0:	e79b      	b.n	8018f2a <__ssvfiscanf_r+0x10a>
 8018ff2:	2308      	movs	r3, #8
 8018ff4:	9342      	str	r3, [sp, #264]	; 0x108
 8018ff6:	2304      	movs	r3, #4
 8018ff8:	e7b3      	b.n	8018f62 <__ssvfiscanf_r+0x142>
 8018ffa:	4629      	mov	r1, r5
 8018ffc:	4640      	mov	r0, r8
 8018ffe:	f000 f9c7 	bl	8019390 <__sccl>
 8019002:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019008:	9341      	str	r3, [sp, #260]	; 0x104
 801900a:	4605      	mov	r5, r0
 801900c:	2301      	movs	r3, #1
 801900e:	e7a8      	b.n	8018f62 <__ssvfiscanf_r+0x142>
 8019010:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019016:	9341      	str	r3, [sp, #260]	; 0x104
 8019018:	2300      	movs	r3, #0
 801901a:	e7a2      	b.n	8018f62 <__ssvfiscanf_r+0x142>
 801901c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801901e:	06c3      	lsls	r3, r0, #27
 8019020:	f53f af2e 	bmi.w	8018e80 <__ssvfiscanf_r+0x60>
 8019024:	9b00      	ldr	r3, [sp, #0]
 8019026:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019028:	1d19      	adds	r1, r3, #4
 801902a:	9100      	str	r1, [sp, #0]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	07c0      	lsls	r0, r0, #31
 8019030:	bf4c      	ite	mi
 8019032:	801a      	strhmi	r2, [r3, #0]
 8019034:	601a      	strpl	r2, [r3, #0]
 8019036:	e723      	b.n	8018e80 <__ssvfiscanf_r+0x60>
 8019038:	2305      	movs	r3, #5
 801903a:	e792      	b.n	8018f62 <__ssvfiscanf_r+0x142>
 801903c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801903e:	4621      	mov	r1, r4
 8019040:	4630      	mov	r0, r6
 8019042:	4798      	blx	r3
 8019044:	2800      	cmp	r0, #0
 8019046:	d090      	beq.n	8018f6a <__ssvfiscanf_r+0x14a>
 8019048:	e7c8      	b.n	8018fdc <__ssvfiscanf_r+0x1bc>
 801904a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801904c:	3201      	adds	r2, #1
 801904e:	9245      	str	r2, [sp, #276]	; 0x114
 8019050:	6862      	ldr	r2, [r4, #4]
 8019052:	3a01      	subs	r2, #1
 8019054:	2a00      	cmp	r2, #0
 8019056:	6062      	str	r2, [r4, #4]
 8019058:	dd02      	ble.n	8019060 <__ssvfiscanf_r+0x240>
 801905a:	3301      	adds	r3, #1
 801905c:	6023      	str	r3, [r4, #0]
 801905e:	e787      	b.n	8018f70 <__ssvfiscanf_r+0x150>
 8019060:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019062:	4621      	mov	r1, r4
 8019064:	4630      	mov	r0, r6
 8019066:	4798      	blx	r3
 8019068:	2800      	cmp	r0, #0
 801906a:	d081      	beq.n	8018f70 <__ssvfiscanf_r+0x150>
 801906c:	e7b6      	b.n	8018fdc <__ssvfiscanf_r+0x1bc>
 801906e:	2b04      	cmp	r3, #4
 8019070:	dc06      	bgt.n	8019080 <__ssvfiscanf_r+0x260>
 8019072:	466b      	mov	r3, sp
 8019074:	4622      	mov	r2, r4
 8019076:	a941      	add	r1, sp, #260	; 0x104
 8019078:	4630      	mov	r0, r6
 801907a:	f000 f885 	bl	8019188 <_scanf_i>
 801907e:	e788      	b.n	8018f92 <__ssvfiscanf_r+0x172>
 8019080:	4b0e      	ldr	r3, [pc, #56]	; (80190bc <__ssvfiscanf_r+0x29c>)
 8019082:	2b00      	cmp	r3, #0
 8019084:	f43f aefc 	beq.w	8018e80 <__ssvfiscanf_r+0x60>
 8019088:	466b      	mov	r3, sp
 801908a:	4622      	mov	r2, r4
 801908c:	a941      	add	r1, sp, #260	; 0x104
 801908e:	4630      	mov	r0, r6
 8019090:	f7fc fd7e 	bl	8015b90 <_scanf_float>
 8019094:	e77d      	b.n	8018f92 <__ssvfiscanf_r+0x172>
 8019096:	89a3      	ldrh	r3, [r4, #12]
 8019098:	f013 0f40 	tst.w	r3, #64	; 0x40
 801909c:	bf18      	it	ne
 801909e:	f04f 30ff 	movne.w	r0, #4294967295
 80190a2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80190a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80190ac:	e7f9      	b.n	80190a2 <__ssvfiscanf_r+0x282>
 80190ae:	bf00      	nop
 80190b0:	08018d6d 	.word	0x08018d6d
 80190b4:	08018de7 	.word	0x08018de7
 80190b8:	0801a12a 	.word	0x0801a12a
 80190bc:	08015b91 	.word	0x08015b91

080190c0 <_scanf_chars>:
 80190c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c4:	4615      	mov	r5, r2
 80190c6:	688a      	ldr	r2, [r1, #8]
 80190c8:	4680      	mov	r8, r0
 80190ca:	460c      	mov	r4, r1
 80190cc:	b932      	cbnz	r2, 80190dc <_scanf_chars+0x1c>
 80190ce:	698a      	ldr	r2, [r1, #24]
 80190d0:	2a00      	cmp	r2, #0
 80190d2:	bf14      	ite	ne
 80190d4:	f04f 32ff 	movne.w	r2, #4294967295
 80190d8:	2201      	moveq	r2, #1
 80190da:	608a      	str	r2, [r1, #8]
 80190dc:	6822      	ldr	r2, [r4, #0]
 80190de:	06d1      	lsls	r1, r2, #27
 80190e0:	bf5f      	itttt	pl
 80190e2:	681a      	ldrpl	r2, [r3, #0]
 80190e4:	1d11      	addpl	r1, r2, #4
 80190e6:	6019      	strpl	r1, [r3, #0]
 80190e8:	6817      	ldrpl	r7, [r2, #0]
 80190ea:	2600      	movs	r6, #0
 80190ec:	69a3      	ldr	r3, [r4, #24]
 80190ee:	b1db      	cbz	r3, 8019128 <_scanf_chars+0x68>
 80190f0:	2b01      	cmp	r3, #1
 80190f2:	d107      	bne.n	8019104 <_scanf_chars+0x44>
 80190f4:	682b      	ldr	r3, [r5, #0]
 80190f6:	6962      	ldr	r2, [r4, #20]
 80190f8:	781b      	ldrb	r3, [r3, #0]
 80190fa:	5cd3      	ldrb	r3, [r2, r3]
 80190fc:	b9a3      	cbnz	r3, 8019128 <_scanf_chars+0x68>
 80190fe:	2e00      	cmp	r6, #0
 8019100:	d132      	bne.n	8019168 <_scanf_chars+0xa8>
 8019102:	e006      	b.n	8019112 <_scanf_chars+0x52>
 8019104:	2b02      	cmp	r3, #2
 8019106:	d007      	beq.n	8019118 <_scanf_chars+0x58>
 8019108:	2e00      	cmp	r6, #0
 801910a:	d12d      	bne.n	8019168 <_scanf_chars+0xa8>
 801910c:	69a3      	ldr	r3, [r4, #24]
 801910e:	2b01      	cmp	r3, #1
 8019110:	d12a      	bne.n	8019168 <_scanf_chars+0xa8>
 8019112:	2001      	movs	r0, #1
 8019114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019118:	f7fe ffe8 	bl	80180ec <__locale_ctype_ptr>
 801911c:	682b      	ldr	r3, [r5, #0]
 801911e:	781b      	ldrb	r3, [r3, #0]
 8019120:	4418      	add	r0, r3
 8019122:	7843      	ldrb	r3, [r0, #1]
 8019124:	071b      	lsls	r3, r3, #28
 8019126:	d4ef      	bmi.n	8019108 <_scanf_chars+0x48>
 8019128:	6823      	ldr	r3, [r4, #0]
 801912a:	06da      	lsls	r2, r3, #27
 801912c:	bf5e      	ittt	pl
 801912e:	682b      	ldrpl	r3, [r5, #0]
 8019130:	781b      	ldrbpl	r3, [r3, #0]
 8019132:	703b      	strbpl	r3, [r7, #0]
 8019134:	682a      	ldr	r2, [r5, #0]
 8019136:	686b      	ldr	r3, [r5, #4]
 8019138:	f102 0201 	add.w	r2, r2, #1
 801913c:	602a      	str	r2, [r5, #0]
 801913e:	68a2      	ldr	r2, [r4, #8]
 8019140:	f103 33ff 	add.w	r3, r3, #4294967295
 8019144:	f102 32ff 	add.w	r2, r2, #4294967295
 8019148:	606b      	str	r3, [r5, #4]
 801914a:	f106 0601 	add.w	r6, r6, #1
 801914e:	bf58      	it	pl
 8019150:	3701      	addpl	r7, #1
 8019152:	60a2      	str	r2, [r4, #8]
 8019154:	b142      	cbz	r2, 8019168 <_scanf_chars+0xa8>
 8019156:	2b00      	cmp	r3, #0
 8019158:	dcc8      	bgt.n	80190ec <_scanf_chars+0x2c>
 801915a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801915e:	4629      	mov	r1, r5
 8019160:	4640      	mov	r0, r8
 8019162:	4798      	blx	r3
 8019164:	2800      	cmp	r0, #0
 8019166:	d0c1      	beq.n	80190ec <_scanf_chars+0x2c>
 8019168:	6823      	ldr	r3, [r4, #0]
 801916a:	f013 0310 	ands.w	r3, r3, #16
 801916e:	d105      	bne.n	801917c <_scanf_chars+0xbc>
 8019170:	68e2      	ldr	r2, [r4, #12]
 8019172:	3201      	adds	r2, #1
 8019174:	60e2      	str	r2, [r4, #12]
 8019176:	69a2      	ldr	r2, [r4, #24]
 8019178:	b102      	cbz	r2, 801917c <_scanf_chars+0xbc>
 801917a:	703b      	strb	r3, [r7, #0]
 801917c:	6923      	ldr	r3, [r4, #16]
 801917e:	441e      	add	r6, r3
 8019180:	6126      	str	r6, [r4, #16]
 8019182:	2000      	movs	r0, #0
 8019184:	e7c6      	b.n	8019114 <_scanf_chars+0x54>
	...

08019188 <_scanf_i>:
 8019188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801918c:	469a      	mov	sl, r3
 801918e:	4b74      	ldr	r3, [pc, #464]	; (8019360 <_scanf_i+0x1d8>)
 8019190:	460c      	mov	r4, r1
 8019192:	4683      	mov	fp, r0
 8019194:	4616      	mov	r6, r2
 8019196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801919a:	b087      	sub	sp, #28
 801919c:	ab03      	add	r3, sp, #12
 801919e:	68a7      	ldr	r7, [r4, #8]
 80191a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80191a4:	4b6f      	ldr	r3, [pc, #444]	; (8019364 <_scanf_i+0x1dc>)
 80191a6:	69a1      	ldr	r1, [r4, #24]
 80191a8:	4a6f      	ldr	r2, [pc, #444]	; (8019368 <_scanf_i+0x1e0>)
 80191aa:	2903      	cmp	r1, #3
 80191ac:	bf08      	it	eq
 80191ae:	461a      	moveq	r2, r3
 80191b0:	1e7b      	subs	r3, r7, #1
 80191b2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80191b6:	bf84      	itt	hi
 80191b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80191bc:	60a3      	strhi	r3, [r4, #8]
 80191be:	6823      	ldr	r3, [r4, #0]
 80191c0:	9200      	str	r2, [sp, #0]
 80191c2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80191c6:	bf88      	it	hi
 80191c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80191cc:	f104 091c 	add.w	r9, r4, #28
 80191d0:	6023      	str	r3, [r4, #0]
 80191d2:	bf8c      	ite	hi
 80191d4:	197f      	addhi	r7, r7, r5
 80191d6:	2700      	movls	r7, #0
 80191d8:	464b      	mov	r3, r9
 80191da:	f04f 0800 	mov.w	r8, #0
 80191de:	9301      	str	r3, [sp, #4]
 80191e0:	6831      	ldr	r1, [r6, #0]
 80191e2:	ab03      	add	r3, sp, #12
 80191e4:	2202      	movs	r2, #2
 80191e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80191ea:	7809      	ldrb	r1, [r1, #0]
 80191ec:	f7e7 f810 	bl	8000210 <memchr>
 80191f0:	9b01      	ldr	r3, [sp, #4]
 80191f2:	b330      	cbz	r0, 8019242 <_scanf_i+0xba>
 80191f4:	f1b8 0f01 	cmp.w	r8, #1
 80191f8:	d15a      	bne.n	80192b0 <_scanf_i+0x128>
 80191fa:	6862      	ldr	r2, [r4, #4]
 80191fc:	b92a      	cbnz	r2, 801920a <_scanf_i+0x82>
 80191fe:	6822      	ldr	r2, [r4, #0]
 8019200:	2108      	movs	r1, #8
 8019202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019206:	6061      	str	r1, [r4, #4]
 8019208:	6022      	str	r2, [r4, #0]
 801920a:	6822      	ldr	r2, [r4, #0]
 801920c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019210:	6022      	str	r2, [r4, #0]
 8019212:	68a2      	ldr	r2, [r4, #8]
 8019214:	1e51      	subs	r1, r2, #1
 8019216:	60a1      	str	r1, [r4, #8]
 8019218:	b19a      	cbz	r2, 8019242 <_scanf_i+0xba>
 801921a:	6832      	ldr	r2, [r6, #0]
 801921c:	1c51      	adds	r1, r2, #1
 801921e:	6031      	str	r1, [r6, #0]
 8019220:	7812      	ldrb	r2, [r2, #0]
 8019222:	701a      	strb	r2, [r3, #0]
 8019224:	1c5d      	adds	r5, r3, #1
 8019226:	6873      	ldr	r3, [r6, #4]
 8019228:	3b01      	subs	r3, #1
 801922a:	2b00      	cmp	r3, #0
 801922c:	6073      	str	r3, [r6, #4]
 801922e:	dc07      	bgt.n	8019240 <_scanf_i+0xb8>
 8019230:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019234:	4631      	mov	r1, r6
 8019236:	4658      	mov	r0, fp
 8019238:	4798      	blx	r3
 801923a:	2800      	cmp	r0, #0
 801923c:	f040 8086 	bne.w	801934c <_scanf_i+0x1c4>
 8019240:	462b      	mov	r3, r5
 8019242:	f108 0801 	add.w	r8, r8, #1
 8019246:	f1b8 0f03 	cmp.w	r8, #3
 801924a:	d1c8      	bne.n	80191de <_scanf_i+0x56>
 801924c:	6862      	ldr	r2, [r4, #4]
 801924e:	b90a      	cbnz	r2, 8019254 <_scanf_i+0xcc>
 8019250:	220a      	movs	r2, #10
 8019252:	6062      	str	r2, [r4, #4]
 8019254:	6862      	ldr	r2, [r4, #4]
 8019256:	4945      	ldr	r1, [pc, #276]	; (801936c <_scanf_i+0x1e4>)
 8019258:	6960      	ldr	r0, [r4, #20]
 801925a:	9301      	str	r3, [sp, #4]
 801925c:	1a89      	subs	r1, r1, r2
 801925e:	f000 f897 	bl	8019390 <__sccl>
 8019262:	9b01      	ldr	r3, [sp, #4]
 8019264:	f04f 0800 	mov.w	r8, #0
 8019268:	461d      	mov	r5, r3
 801926a:	68a3      	ldr	r3, [r4, #8]
 801926c:	6822      	ldr	r2, [r4, #0]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d03a      	beq.n	80192e8 <_scanf_i+0x160>
 8019272:	6831      	ldr	r1, [r6, #0]
 8019274:	6960      	ldr	r0, [r4, #20]
 8019276:	f891 c000 	ldrb.w	ip, [r1]
 801927a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801927e:	2800      	cmp	r0, #0
 8019280:	d032      	beq.n	80192e8 <_scanf_i+0x160>
 8019282:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019286:	d121      	bne.n	80192cc <_scanf_i+0x144>
 8019288:	0510      	lsls	r0, r2, #20
 801928a:	d51f      	bpl.n	80192cc <_scanf_i+0x144>
 801928c:	f108 0801 	add.w	r8, r8, #1
 8019290:	b117      	cbz	r7, 8019298 <_scanf_i+0x110>
 8019292:	3301      	adds	r3, #1
 8019294:	3f01      	subs	r7, #1
 8019296:	60a3      	str	r3, [r4, #8]
 8019298:	6873      	ldr	r3, [r6, #4]
 801929a:	3b01      	subs	r3, #1
 801929c:	2b00      	cmp	r3, #0
 801929e:	6073      	str	r3, [r6, #4]
 80192a0:	dd1b      	ble.n	80192da <_scanf_i+0x152>
 80192a2:	6833      	ldr	r3, [r6, #0]
 80192a4:	3301      	adds	r3, #1
 80192a6:	6033      	str	r3, [r6, #0]
 80192a8:	68a3      	ldr	r3, [r4, #8]
 80192aa:	3b01      	subs	r3, #1
 80192ac:	60a3      	str	r3, [r4, #8]
 80192ae:	e7dc      	b.n	801926a <_scanf_i+0xe2>
 80192b0:	f1b8 0f02 	cmp.w	r8, #2
 80192b4:	d1ad      	bne.n	8019212 <_scanf_i+0x8a>
 80192b6:	6822      	ldr	r2, [r4, #0]
 80192b8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80192bc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80192c0:	d1bf      	bne.n	8019242 <_scanf_i+0xba>
 80192c2:	2110      	movs	r1, #16
 80192c4:	6061      	str	r1, [r4, #4]
 80192c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80192ca:	e7a1      	b.n	8019210 <_scanf_i+0x88>
 80192cc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80192d0:	6022      	str	r2, [r4, #0]
 80192d2:	780b      	ldrb	r3, [r1, #0]
 80192d4:	702b      	strb	r3, [r5, #0]
 80192d6:	3501      	adds	r5, #1
 80192d8:	e7de      	b.n	8019298 <_scanf_i+0x110>
 80192da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80192de:	4631      	mov	r1, r6
 80192e0:	4658      	mov	r0, fp
 80192e2:	4798      	blx	r3
 80192e4:	2800      	cmp	r0, #0
 80192e6:	d0df      	beq.n	80192a8 <_scanf_i+0x120>
 80192e8:	6823      	ldr	r3, [r4, #0]
 80192ea:	05d9      	lsls	r1, r3, #23
 80192ec:	d50c      	bpl.n	8019308 <_scanf_i+0x180>
 80192ee:	454d      	cmp	r5, r9
 80192f0:	d908      	bls.n	8019304 <_scanf_i+0x17c>
 80192f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80192f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80192fa:	4632      	mov	r2, r6
 80192fc:	4658      	mov	r0, fp
 80192fe:	4798      	blx	r3
 8019300:	1e6f      	subs	r7, r5, #1
 8019302:	463d      	mov	r5, r7
 8019304:	454d      	cmp	r5, r9
 8019306:	d029      	beq.n	801935c <_scanf_i+0x1d4>
 8019308:	6822      	ldr	r2, [r4, #0]
 801930a:	f012 0210 	ands.w	r2, r2, #16
 801930e:	d113      	bne.n	8019338 <_scanf_i+0x1b0>
 8019310:	702a      	strb	r2, [r5, #0]
 8019312:	6863      	ldr	r3, [r4, #4]
 8019314:	9e00      	ldr	r6, [sp, #0]
 8019316:	4649      	mov	r1, r9
 8019318:	4658      	mov	r0, fp
 801931a:	47b0      	blx	r6
 801931c:	f8da 3000 	ldr.w	r3, [sl]
 8019320:	6821      	ldr	r1, [r4, #0]
 8019322:	1d1a      	adds	r2, r3, #4
 8019324:	f8ca 2000 	str.w	r2, [sl]
 8019328:	f011 0f20 	tst.w	r1, #32
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	d010      	beq.n	8019352 <_scanf_i+0x1ca>
 8019330:	6018      	str	r0, [r3, #0]
 8019332:	68e3      	ldr	r3, [r4, #12]
 8019334:	3301      	adds	r3, #1
 8019336:	60e3      	str	r3, [r4, #12]
 8019338:	eba5 0509 	sub.w	r5, r5, r9
 801933c:	44a8      	add	r8, r5
 801933e:	6925      	ldr	r5, [r4, #16]
 8019340:	4445      	add	r5, r8
 8019342:	6125      	str	r5, [r4, #16]
 8019344:	2000      	movs	r0, #0
 8019346:	b007      	add	sp, #28
 8019348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801934c:	f04f 0800 	mov.w	r8, #0
 8019350:	e7ca      	b.n	80192e8 <_scanf_i+0x160>
 8019352:	07ca      	lsls	r2, r1, #31
 8019354:	bf4c      	ite	mi
 8019356:	8018      	strhmi	r0, [r3, #0]
 8019358:	6018      	strpl	r0, [r3, #0]
 801935a:	e7ea      	b.n	8019332 <_scanf_i+0x1aa>
 801935c:	2001      	movs	r0, #1
 801935e:	e7f2      	b.n	8019346 <_scanf_i+0x1be>
 8019360:	08019c84 	.word	0x08019c84
 8019364:	08016da9 	.word	0x08016da9
 8019368:	0801950d 	.word	0x0801950d
 801936c:	0801a145 	.word	0x0801a145

08019370 <_sbrk_r>:
 8019370:	b538      	push	{r3, r4, r5, lr}
 8019372:	4c06      	ldr	r4, [pc, #24]	; (801938c <_sbrk_r+0x1c>)
 8019374:	2300      	movs	r3, #0
 8019376:	4605      	mov	r5, r0
 8019378:	4608      	mov	r0, r1
 801937a:	6023      	str	r3, [r4, #0]
 801937c:	f7ee f864 	bl	8007448 <_sbrk>
 8019380:	1c43      	adds	r3, r0, #1
 8019382:	d102      	bne.n	801938a <_sbrk_r+0x1a>
 8019384:	6823      	ldr	r3, [r4, #0]
 8019386:	b103      	cbz	r3, 801938a <_sbrk_r+0x1a>
 8019388:	602b      	str	r3, [r5, #0]
 801938a:	bd38      	pop	{r3, r4, r5, pc}
 801938c:	20041e54 	.word	0x20041e54

08019390 <__sccl>:
 8019390:	b570      	push	{r4, r5, r6, lr}
 8019392:	780b      	ldrb	r3, [r1, #0]
 8019394:	2b5e      	cmp	r3, #94	; 0x5e
 8019396:	bf13      	iteet	ne
 8019398:	1c4a      	addne	r2, r1, #1
 801939a:	1c8a      	addeq	r2, r1, #2
 801939c:	784b      	ldrbeq	r3, [r1, #1]
 801939e:	2100      	movne	r1, #0
 80193a0:	bf08      	it	eq
 80193a2:	2101      	moveq	r1, #1
 80193a4:	1e44      	subs	r4, r0, #1
 80193a6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80193aa:	f804 1f01 	strb.w	r1, [r4, #1]!
 80193ae:	42ac      	cmp	r4, r5
 80193b0:	d1fb      	bne.n	80193aa <__sccl+0x1a>
 80193b2:	b913      	cbnz	r3, 80193ba <__sccl+0x2a>
 80193b4:	3a01      	subs	r2, #1
 80193b6:	4610      	mov	r0, r2
 80193b8:	bd70      	pop	{r4, r5, r6, pc}
 80193ba:	f081 0401 	eor.w	r4, r1, #1
 80193be:	54c4      	strb	r4, [r0, r3]
 80193c0:	1c51      	adds	r1, r2, #1
 80193c2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80193c6:	2d2d      	cmp	r5, #45	; 0x2d
 80193c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80193cc:	460a      	mov	r2, r1
 80193ce:	d006      	beq.n	80193de <__sccl+0x4e>
 80193d0:	2d5d      	cmp	r5, #93	; 0x5d
 80193d2:	d0f0      	beq.n	80193b6 <__sccl+0x26>
 80193d4:	b90d      	cbnz	r5, 80193da <__sccl+0x4a>
 80193d6:	4632      	mov	r2, r6
 80193d8:	e7ed      	b.n	80193b6 <__sccl+0x26>
 80193da:	462b      	mov	r3, r5
 80193dc:	e7ef      	b.n	80193be <__sccl+0x2e>
 80193de:	780e      	ldrb	r6, [r1, #0]
 80193e0:	2e5d      	cmp	r6, #93	; 0x5d
 80193e2:	d0fa      	beq.n	80193da <__sccl+0x4a>
 80193e4:	42b3      	cmp	r3, r6
 80193e6:	dcf8      	bgt.n	80193da <__sccl+0x4a>
 80193e8:	3301      	adds	r3, #1
 80193ea:	429e      	cmp	r6, r3
 80193ec:	54c4      	strb	r4, [r0, r3]
 80193ee:	dcfb      	bgt.n	80193e8 <__sccl+0x58>
 80193f0:	3102      	adds	r1, #2
 80193f2:	e7e6      	b.n	80193c2 <__sccl+0x32>

080193f4 <strncmp>:
 80193f4:	b510      	push	{r4, lr}
 80193f6:	b16a      	cbz	r2, 8019414 <strncmp+0x20>
 80193f8:	3901      	subs	r1, #1
 80193fa:	1884      	adds	r4, r0, r2
 80193fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019400:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019404:	4293      	cmp	r3, r2
 8019406:	d103      	bne.n	8019410 <strncmp+0x1c>
 8019408:	42a0      	cmp	r0, r4
 801940a:	d001      	beq.n	8019410 <strncmp+0x1c>
 801940c:	2b00      	cmp	r3, #0
 801940e:	d1f5      	bne.n	80193fc <strncmp+0x8>
 8019410:	1a98      	subs	r0, r3, r2
 8019412:	bd10      	pop	{r4, pc}
 8019414:	4610      	mov	r0, r2
 8019416:	e7fc      	b.n	8019412 <strncmp+0x1e>

08019418 <_strtoul_l.isra.0>:
 8019418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801941c:	4680      	mov	r8, r0
 801941e:	4689      	mov	r9, r1
 8019420:	4692      	mov	sl, r2
 8019422:	461e      	mov	r6, r3
 8019424:	460f      	mov	r7, r1
 8019426:	463d      	mov	r5, r7
 8019428:	9808      	ldr	r0, [sp, #32]
 801942a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801942e:	f7fe fe59 	bl	80180e4 <__locale_ctype_ptr_l>
 8019432:	4420      	add	r0, r4
 8019434:	7843      	ldrb	r3, [r0, #1]
 8019436:	f013 0308 	ands.w	r3, r3, #8
 801943a:	d130      	bne.n	801949e <_strtoul_l.isra.0+0x86>
 801943c:	2c2d      	cmp	r4, #45	; 0x2d
 801943e:	d130      	bne.n	80194a2 <_strtoul_l.isra.0+0x8a>
 8019440:	787c      	ldrb	r4, [r7, #1]
 8019442:	1cbd      	adds	r5, r7, #2
 8019444:	2101      	movs	r1, #1
 8019446:	2e00      	cmp	r6, #0
 8019448:	d05c      	beq.n	8019504 <_strtoul_l.isra.0+0xec>
 801944a:	2e10      	cmp	r6, #16
 801944c:	d109      	bne.n	8019462 <_strtoul_l.isra.0+0x4a>
 801944e:	2c30      	cmp	r4, #48	; 0x30
 8019450:	d107      	bne.n	8019462 <_strtoul_l.isra.0+0x4a>
 8019452:	782b      	ldrb	r3, [r5, #0]
 8019454:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019458:	2b58      	cmp	r3, #88	; 0x58
 801945a:	d14e      	bne.n	80194fa <_strtoul_l.isra.0+0xe2>
 801945c:	786c      	ldrb	r4, [r5, #1]
 801945e:	2610      	movs	r6, #16
 8019460:	3502      	adds	r5, #2
 8019462:	f04f 32ff 	mov.w	r2, #4294967295
 8019466:	2300      	movs	r3, #0
 8019468:	fbb2 f2f6 	udiv	r2, r2, r6
 801946c:	fb06 fc02 	mul.w	ip, r6, r2
 8019470:	ea6f 0c0c 	mvn.w	ip, ip
 8019474:	4618      	mov	r0, r3
 8019476:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801947a:	2f09      	cmp	r7, #9
 801947c:	d817      	bhi.n	80194ae <_strtoul_l.isra.0+0x96>
 801947e:	463c      	mov	r4, r7
 8019480:	42a6      	cmp	r6, r4
 8019482:	dd23      	ble.n	80194cc <_strtoul_l.isra.0+0xb4>
 8019484:	2b00      	cmp	r3, #0
 8019486:	db1e      	blt.n	80194c6 <_strtoul_l.isra.0+0xae>
 8019488:	4282      	cmp	r2, r0
 801948a:	d31c      	bcc.n	80194c6 <_strtoul_l.isra.0+0xae>
 801948c:	d101      	bne.n	8019492 <_strtoul_l.isra.0+0x7a>
 801948e:	45a4      	cmp	ip, r4
 8019490:	db19      	blt.n	80194c6 <_strtoul_l.isra.0+0xae>
 8019492:	fb00 4006 	mla	r0, r0, r6, r4
 8019496:	2301      	movs	r3, #1
 8019498:	f815 4b01 	ldrb.w	r4, [r5], #1
 801949c:	e7eb      	b.n	8019476 <_strtoul_l.isra.0+0x5e>
 801949e:	462f      	mov	r7, r5
 80194a0:	e7c1      	b.n	8019426 <_strtoul_l.isra.0+0xe>
 80194a2:	2c2b      	cmp	r4, #43	; 0x2b
 80194a4:	bf04      	itt	eq
 80194a6:	1cbd      	addeq	r5, r7, #2
 80194a8:	787c      	ldrbeq	r4, [r7, #1]
 80194aa:	4619      	mov	r1, r3
 80194ac:	e7cb      	b.n	8019446 <_strtoul_l.isra.0+0x2e>
 80194ae:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80194b2:	2f19      	cmp	r7, #25
 80194b4:	d801      	bhi.n	80194ba <_strtoul_l.isra.0+0xa2>
 80194b6:	3c37      	subs	r4, #55	; 0x37
 80194b8:	e7e2      	b.n	8019480 <_strtoul_l.isra.0+0x68>
 80194ba:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80194be:	2f19      	cmp	r7, #25
 80194c0:	d804      	bhi.n	80194cc <_strtoul_l.isra.0+0xb4>
 80194c2:	3c57      	subs	r4, #87	; 0x57
 80194c4:	e7dc      	b.n	8019480 <_strtoul_l.isra.0+0x68>
 80194c6:	f04f 33ff 	mov.w	r3, #4294967295
 80194ca:	e7e5      	b.n	8019498 <_strtoul_l.isra.0+0x80>
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	da09      	bge.n	80194e4 <_strtoul_l.isra.0+0xcc>
 80194d0:	2322      	movs	r3, #34	; 0x22
 80194d2:	f8c8 3000 	str.w	r3, [r8]
 80194d6:	f04f 30ff 	mov.w	r0, #4294967295
 80194da:	f1ba 0f00 	cmp.w	sl, #0
 80194de:	d107      	bne.n	80194f0 <_strtoul_l.isra.0+0xd8>
 80194e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194e4:	b101      	cbz	r1, 80194e8 <_strtoul_l.isra.0+0xd0>
 80194e6:	4240      	negs	r0, r0
 80194e8:	f1ba 0f00 	cmp.w	sl, #0
 80194ec:	d0f8      	beq.n	80194e0 <_strtoul_l.isra.0+0xc8>
 80194ee:	b10b      	cbz	r3, 80194f4 <_strtoul_l.isra.0+0xdc>
 80194f0:	f105 39ff 	add.w	r9, r5, #4294967295
 80194f4:	f8ca 9000 	str.w	r9, [sl]
 80194f8:	e7f2      	b.n	80194e0 <_strtoul_l.isra.0+0xc8>
 80194fa:	2430      	movs	r4, #48	; 0x30
 80194fc:	2e00      	cmp	r6, #0
 80194fe:	d1b0      	bne.n	8019462 <_strtoul_l.isra.0+0x4a>
 8019500:	2608      	movs	r6, #8
 8019502:	e7ae      	b.n	8019462 <_strtoul_l.isra.0+0x4a>
 8019504:	2c30      	cmp	r4, #48	; 0x30
 8019506:	d0a4      	beq.n	8019452 <_strtoul_l.isra.0+0x3a>
 8019508:	260a      	movs	r6, #10
 801950a:	e7aa      	b.n	8019462 <_strtoul_l.isra.0+0x4a>

0801950c <_strtoul_r>:
 801950c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801950e:	4c06      	ldr	r4, [pc, #24]	; (8019528 <_strtoul_r+0x1c>)
 8019510:	4d06      	ldr	r5, [pc, #24]	; (801952c <_strtoul_r+0x20>)
 8019512:	6824      	ldr	r4, [r4, #0]
 8019514:	6a24      	ldr	r4, [r4, #32]
 8019516:	2c00      	cmp	r4, #0
 8019518:	bf08      	it	eq
 801951a:	462c      	moveq	r4, r5
 801951c:	9400      	str	r4, [sp, #0]
 801951e:	f7ff ff7b 	bl	8019418 <_strtoul_l.isra.0>
 8019522:	b003      	add	sp, #12
 8019524:	bd30      	pop	{r4, r5, pc}
 8019526:	bf00      	nop
 8019528:	2000000c 	.word	0x2000000c
 801952c:	20000070 	.word	0x20000070

08019530 <__submore>:
 8019530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019534:	460c      	mov	r4, r1
 8019536:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801953c:	4299      	cmp	r1, r3
 801953e:	d11d      	bne.n	801957c <__submore+0x4c>
 8019540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019544:	f7ff fa66 	bl	8018a14 <_malloc_r>
 8019548:	b918      	cbnz	r0, 8019552 <__submore+0x22>
 801954a:	f04f 30ff 	mov.w	r0, #4294967295
 801954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019556:	63a3      	str	r3, [r4, #56]	; 0x38
 8019558:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801955c:	6360      	str	r0, [r4, #52]	; 0x34
 801955e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019562:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019566:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801956a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801956e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019572:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019576:	6020      	str	r0, [r4, #0]
 8019578:	2000      	movs	r0, #0
 801957a:	e7e8      	b.n	801954e <__submore+0x1e>
 801957c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801957e:	0077      	lsls	r7, r6, #1
 8019580:	463a      	mov	r2, r7
 8019582:	f000 f837 	bl	80195f4 <_realloc_r>
 8019586:	4605      	mov	r5, r0
 8019588:	2800      	cmp	r0, #0
 801958a:	d0de      	beq.n	801954a <__submore+0x1a>
 801958c:	eb00 0806 	add.w	r8, r0, r6
 8019590:	4601      	mov	r1, r0
 8019592:	4632      	mov	r2, r6
 8019594:	4640      	mov	r0, r8
 8019596:	f7fb fe8b 	bl	80152b0 <memcpy>
 801959a:	f8c4 8000 	str.w	r8, [r4]
 801959e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80195a2:	e7e9      	b.n	8019578 <__submore+0x48>

080195a4 <__ascii_wctomb>:
 80195a4:	b149      	cbz	r1, 80195ba <__ascii_wctomb+0x16>
 80195a6:	2aff      	cmp	r2, #255	; 0xff
 80195a8:	bf85      	ittet	hi
 80195aa:	238a      	movhi	r3, #138	; 0x8a
 80195ac:	6003      	strhi	r3, [r0, #0]
 80195ae:	700a      	strbls	r2, [r1, #0]
 80195b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80195b4:	bf98      	it	ls
 80195b6:	2001      	movls	r0, #1
 80195b8:	4770      	bx	lr
 80195ba:	4608      	mov	r0, r1
 80195bc:	4770      	bx	lr

080195be <memmove>:
 80195be:	4288      	cmp	r0, r1
 80195c0:	b510      	push	{r4, lr}
 80195c2:	eb01 0302 	add.w	r3, r1, r2
 80195c6:	d807      	bhi.n	80195d8 <memmove+0x1a>
 80195c8:	1e42      	subs	r2, r0, #1
 80195ca:	4299      	cmp	r1, r3
 80195cc:	d00a      	beq.n	80195e4 <memmove+0x26>
 80195ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80195d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80195d6:	e7f8      	b.n	80195ca <memmove+0xc>
 80195d8:	4283      	cmp	r3, r0
 80195da:	d9f5      	bls.n	80195c8 <memmove+0xa>
 80195dc:	1881      	adds	r1, r0, r2
 80195de:	1ad2      	subs	r2, r2, r3
 80195e0:	42d3      	cmn	r3, r2
 80195e2:	d100      	bne.n	80195e6 <memmove+0x28>
 80195e4:	bd10      	pop	{r4, pc}
 80195e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80195ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80195ee:	e7f7      	b.n	80195e0 <memmove+0x22>

080195f0 <__malloc_lock>:
 80195f0:	4770      	bx	lr

080195f2 <__malloc_unlock>:
 80195f2:	4770      	bx	lr

080195f4 <_realloc_r>:
 80195f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195f6:	4607      	mov	r7, r0
 80195f8:	4614      	mov	r4, r2
 80195fa:	460e      	mov	r6, r1
 80195fc:	b921      	cbnz	r1, 8019608 <_realloc_r+0x14>
 80195fe:	4611      	mov	r1, r2
 8019600:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019604:	f7ff ba06 	b.w	8018a14 <_malloc_r>
 8019608:	b922      	cbnz	r2, 8019614 <_realloc_r+0x20>
 801960a:	f7ff f9b5 	bl	8018978 <_free_r>
 801960e:	4625      	mov	r5, r4
 8019610:	4628      	mov	r0, r5
 8019612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019614:	f000 f814 	bl	8019640 <_malloc_usable_size_r>
 8019618:	42a0      	cmp	r0, r4
 801961a:	d20f      	bcs.n	801963c <_realloc_r+0x48>
 801961c:	4621      	mov	r1, r4
 801961e:	4638      	mov	r0, r7
 8019620:	f7ff f9f8 	bl	8018a14 <_malloc_r>
 8019624:	4605      	mov	r5, r0
 8019626:	2800      	cmp	r0, #0
 8019628:	d0f2      	beq.n	8019610 <_realloc_r+0x1c>
 801962a:	4631      	mov	r1, r6
 801962c:	4622      	mov	r2, r4
 801962e:	f7fb fe3f 	bl	80152b0 <memcpy>
 8019632:	4631      	mov	r1, r6
 8019634:	4638      	mov	r0, r7
 8019636:	f7ff f99f 	bl	8018978 <_free_r>
 801963a:	e7e9      	b.n	8019610 <_realloc_r+0x1c>
 801963c:	4635      	mov	r5, r6
 801963e:	e7e7      	b.n	8019610 <_realloc_r+0x1c>

08019640 <_malloc_usable_size_r>:
 8019640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019644:	1f18      	subs	r0, r3, #4
 8019646:	2b00      	cmp	r3, #0
 8019648:	bfbc      	itt	lt
 801964a:	580b      	ldrlt	r3, [r1, r0]
 801964c:	18c0      	addlt	r0, r0, r3
 801964e:	4770      	bx	lr

08019650 <_init>:
 8019650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019652:	bf00      	nop
 8019654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019656:	bc08      	pop	{r3}
 8019658:	469e      	mov	lr, r3
 801965a:	4770      	bx	lr

0801965c <_fini>:
 801965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801965e:	bf00      	nop
 8019660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019662:	bc08      	pop	{r3}
 8019664:	469e      	mov	lr, r3
 8019666:	4770      	bx	lr
